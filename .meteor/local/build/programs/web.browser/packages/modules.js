//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var meteorInstall = Package['modules-runtime'].meteorInstall;

/* Package-scope variables */
var Buffer, process;

var require = meteorInstall({"node_modules":{"meteor":{"modules":{"client.js":["./install-packages.js","./stubs.js","./buffer.js","./process.js","reify/lib/runtime","./css",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/client.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("./install-packages.js");                                                                                      // 1
require("./stubs.js");                                                                                                 // 2
require("./buffer.js");                                                                                                // 3
require("./process.js");                                                                                               // 4
require("reify/lib/runtime").enable(module.constructor);                                                               // 5
                                                                                                                       // 6
exports.addStyles = require("./css").addStyles;                                                                        // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"buffer.js":["buffer",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/buffer.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
try {                                                                                                                  // 1
  Buffer = global.Buffer || require("buffer").Buffer;                                                                  // 2
} catch (noBuffer) {}                                                                                                  // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"css.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/css.js                                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var doc = document;                                                                                                    // 1
var head = doc.getElementsByTagName("head").item(0);                                                                   // 2
                                                                                                                       // 3
exports.addStyles = function (css) {                                                                                   // 4
  var style = doc.createElement("style");                                                                              // 5
                                                                                                                       // 6
  style.setAttribute("type", "text/css");                                                                              // 7
                                                                                                                       // 8
  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                                   // 9
  var internetExplorerSheetObject =                                                                                    // 10
    style.sheet || // Edge/IE11.                                                                                       // 11
    style.styleSheet; // Older IEs.                                                                                    // 12
                                                                                                                       // 13
  if (internetExplorerSheetObject) {                                                                                   // 14
    internetExplorerSheetObject.cssText = css;                                                                         // 15
  } else {                                                                                                             // 16
    style.appendChild(doc.createTextNode(css));                                                                        // 17
  }                                                                                                                    // 18
                                                                                                                       // 19
  return head.appendChild(style);                                                                                      // 20
};                                                                                                                     // 21
                                                                                                                       // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"install-packages.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/install-packages.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function install(name, mainModule) {                                                                                   // 1
  var meteorDir = {};                                                                                                  // 2
                                                                                                                       // 3
  // Given a package name <name>, install a stub module in the                                                         // 4
  // /node_modules/meteor directory called <name>.js, so that                                                          // 5
  // require.resolve("meteor/<name>") will always return                                                               // 6
  // /node_modules/meteor/<name>.js instead of something like                                                          // 7
  // /node_modules/meteor/<name>/index.js, in the rare but possible event                                              // 8
  // that the package contains a file called index.js (#6590).                                                         // 9
                                                                                                                       // 10
  if (mainModule) {                                                                                                    // 11
    meteorDir[name + ".js"] = [mainModule, function (require, e, module) {                                             // 12
      module.exports = require(mainModule);                                                                            // 13
    }];                                                                                                                // 14
  } else {                                                                                                             // 15
    // back compat with old Meteor packages                                                                            // 16
    meteorDir[name + ".js"] = function (r, e, module) {                                                                // 17
      module.exports = Package[name];                                                                                  // 18
    };                                                                                                                 // 19
  }                                                                                                                    // 20
                                                                                                                       // 21
  meteorInstall({                                                                                                      // 22
    node_modules: {                                                                                                    // 23
      meteor: meteorDir                                                                                                // 24
    }                                                                                                                  // 25
  });                                                                                                                  // 26
}                                                                                                                      // 27
                                                                                                                       // 28
// This file will be modified during computeJsOutputFilesMap to include                                                // 29
// install(<name>) calls for every Meteor package.                                                                     // 30
                                                                                                                       // 31
install("underscore");                                                                                                 // 32
install("meteor");                                                                                                     // 33
install("meteor-base");                                                                                                // 34
install("mobile-experience");                                                                                          // 35
install("modules-runtime");                                                                                            // 36
install("modules", "meteor/modules/client.js");                                                                        // 37
install("es5-shim", "meteor/es5-shim/client.js");                                                                      // 38
install("promise", "meteor/promise/client.js");                                                                        // 39
install("ecmascript-runtime", "meteor/ecmascript-runtime/runtime.js");                                                 // 40
install("babel-compiler");                                                                                             // 41
install("ecmascript");                                                                                                 // 42
install("base64");                                                                                                     // 43
install("ejson");                                                                                                      // 44
install("id-map");                                                                                                     // 45
install("ordered-dict");                                                                                               // 46
install("tracker");                                                                                                    // 47
install("babel-runtime", "meteor/babel-runtime/babel-runtime.js");                                                     // 48
install("random");                                                                                                     // 49
install("mongo-id");                                                                                                   // 50
install("diff-sequence");                                                                                              // 51
install("geojson-utils", "meteor/geojson-utils/main.js");                                                              // 52
install("minimongo");                                                                                                  // 53
install("check", "meteor/check/match.js");                                                                             // 54
install("retry");                                                                                                      // 55
install("ddp-common");                                                                                                 // 56
install("reload");                                                                                                     // 57
install("ddp-client");                                                                                                 // 58
install("ddp");                                                                                                        // 59
install("ddp-server");                                                                                                 // 60
install("allow-deny");                                                                                                 // 61
install("insecure");                                                                                                   // 62
install("mongo");                                                                                                      // 63
install("blaze-html-templates");                                                                                       // 64
install("reactive-var");                                                                                               // 65
install("jquery", "meteor/jquery/main.js");                                                                            // 66
install("standard-minifier-css");                                                                                      // 67
install("standard-minifier-js");                                                                                       // 68
install("shell-server");                                                                                               // 69
install("autopublish");                                                                                                // 70
install("fourseven:scss");                                                                                             // 71
install("webapp");                                                                                                     // 72
install("livedata");                                                                                                   // 73
install("hot-code-push");                                                                                              // 74
install("observe-sequence");                                                                                           // 75
install("deps");                                                                                                       // 76
install("htmljs");                                                                                                     // 77
install("blaze");                                                                                                      // 78
install("spacebars");                                                                                                  // 79
install("templating-compiler");                                                                                        // 80
install("templating-runtime");                                                                                         // 81
install("templating");                                                                                                 // 82
install("launch-screen");                                                                                              // 83
install("ui");                                                                                                         // 84
install("autoupdate");                                                                                                 // 85
                                                                                                                       // 86
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"process.js":["process",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/process.js                                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
try {                                                                                                                  // 1
  // The application can run `npm install process` to provide its own                                                  // 2
  // process stub; otherwise this module will provide a partial stub.                                                  // 3
  process = global.process || require("process");                                                                      // 4
} catch (noProcess) {                                                                                                  // 5
  process = {};                                                                                                        // 6
}                                                                                                                      // 7
                                                                                                                       // 8
if (Meteor.isServer) {                                                                                                 // 9
  // Make require("process") work on the server in all versions of Node.                                               // 10
  meteorInstall({                                                                                                      // 11
    node_modules: {                                                                                                    // 12
      "process.js": function (r, e, module) {                                                                          // 13
        module.exports = process;                                                                                      // 14
      }                                                                                                                // 15
    }                                                                                                                  // 16
  });                                                                                                                  // 17
} else {                                                                                                               // 18
  process.platform = "browser";                                                                                        // 19
  process.nextTick = process.nextTick || Meteor._setImmediate;                                                         // 20
}                                                                                                                      // 21
                                                                                                                       // 22
if (typeof process.env !== "object") {                                                                                 // 23
  process.env = {};                                                                                                    // 24
}                                                                                                                      // 25
                                                                                                                       // 26
_.extend(process.env, meteorEnv);                                                                                      // 27
                                                                                                                       // 28
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"stubs.js":["meteor-node-stubs",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/stubs.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
try {                                                                                                                  // 1
  // When meteor-node-stubs is installed in the application's root                                                     // 2
  // node_modules directory, requiring it here installs aliases for stubs                                              // 3
  // for all Node built-in modules, such as fs, util, and http.                                                        // 4
  require("meteor-node-stubs");                                                                                        // 5
} catch (noStubs) {}                                                                                                   // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"node_modules":{"reify":{"lib":{"runtime.js":["./entry.js","./utils.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/modules/node_modules/reify/lib/runtime.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Entry = require("./entry.js").Entry;                                                                               // 1
var utils = require("./utils.js");                                                                                     // 2
                                                                                                                       // 3
exports.enable = function (Module) {                                                                                   // 4
  var Mp = Module.prototype;                                                                                           // 5
                                                                                                                       // 6
  if (typeof Mp.import === "function" &&                                                                               // 7
      typeof Mp.export === "function") {                                                                               // 8
    // If the Mp.{import,export} methods have already been                                                             // 9
    // defined, abandon reification immediately.                                                                       // 10
    return Module;                                                                                                     // 11
  }                                                                                                                    // 12
                                                                                                                       // 13
  // Platform-specific code should implement this method however                                                       // 14
  // appropriate. Module.prototype.resolve(id) should return an absolute                                               // 15
  // version of the given module identifier, like require.resolve.                                                     // 16
  Mp.resolve = Mp.resolve || function resolve(id) {                                                                    // 17
    throw new Error("Module.prototype.resolve not implemented");                                                       // 18
  };                                                                                                                   // 19
                                                                                                                       // 20
  // Platform-specific code should find a way to call this method whenever                                             // 21
  // the module system is about to return module.exports from require. This                                            // 22
  // might happen more than once per module, in case of dependency cycles,                                             // 23
  // so we want Module.prototype.runModuleSetters to run each time.                                                    // 24
  Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {                                                // 25
    var entry = Entry.get(this.id);                                                                                    // 26
    if (entry) {                                                                                                       // 27
      entry.runModuleSetters(this);                                                                                    // 28
    }                                                                                                                  // 29
                                                                                                                       // 30
    // Assignments to exported local variables get wrapped with calls to                                               // 31
    // module.runModuleSetters, so module.runModuleSetters returns the                                                 // 32
    // valueToPassThrough parameter to allow the value of the original                                                 // 33
    // expression to pass through. For example,                                                                        // 34
    //                                                                                                                 // 35
    //   export var a = 1;                                                                                             // 36
    //   console.log(a += 3);                                                                                          // 37
    //                                                                                                                 // 38
    // becomes                                                                                                         // 39
    //                                                                                                                 // 40
    //   module.export("a", () => a);                                                                                  // 41
    //   var a = 1;                                                                                                    // 42
    //   console.log(module.runModuleSetters(a += 3));                                                                 // 43
    //                                                                                                                 // 44
    // This ensures module.runModuleSetters runs immediately after the                                                 // 45
    // assignment, and does not interfere with the larger computation.                                                 // 46
    return valueToPassThrough;                                                                                         // 47
  };                                                                                                                   // 48
                                                                                                                       // 49
  function setESModule(module) {                                                                                       // 50
    var exports = module.exports;                                                                                      // 51
    if (exports && typeof exports === "object") {                                                                      // 52
      exports.__esModule = true;                                                                                       // 53
    }                                                                                                                  // 54
  }                                                                                                                    // 55
                                                                                                                       // 56
  Mp.import = function (id, setters) {                                                                                 // 57
    var module = this;                                                                                                 // 58
    setESModule(module);                                                                                               // 59
                                                                                                                       // 60
    var absoluteId = module.resolve(id);                                                                               // 61
                                                                                                                       // 62
    if (setters && typeof setters === "object") {                                                                      // 63
      var entry = Entry.getOrCreate(absoluteId);                                                                       // 64
      entry.addSetters(module, setters);                                                                               // 65
    }                                                                                                                  // 66
                                                                                                                       // 67
    var countBefore = entry && entry.runCount;                                                                         // 68
    var exports = typeof module.require === "function"                                                                 // 69
      ? module.require(absoluteId)                                                                                     // 70
      : require(absoluteId);                                                                                           // 71
                                                                                                                       // 72
    if (entry && entry.runCount === countBefore) {                                                                     // 73
      // If require(absoluteId) didn't run any setters for this entry,                                                 // 74
      // perhaps because it's not the first time this module has been                                                  // 75
      // required, run the setters now using an object that passes as the                                              // 76
      // real module object.                                                                                           // 77
      entry.runModuleSetters({                                                                                         // 78
        id: absoluteId,                                                                                                // 79
        exports: exports,                                                                                              // 80
        getExportByName: Mp.getExportByName                                                                            // 81
      });                                                                                                              // 82
    }                                                                                                                  // 83
  };                                                                                                                   // 84
                                                                                                                       // 85
  // Register getter functions for local variables in the scope of an                                                  // 86
  // export statement. The keys of the getters object are exported names,                                              // 87
  // and the values are functions that return local values.                                                            // 88
  Mp.export = function (getters) {                                                                                     // 89
    var module = this;                                                                                                 // 90
    setESModule(module);                                                                                               // 91
                                                                                                                       // 92
    if (utils.isPlainObject(getters)) {                                                                                // 93
      Entry.getOrCreate(module.id).addGetters(getters);                                                                // 94
    }                                                                                                                  // 95
                                                                                                                       // 96
    if (module.loaded) {                                                                                               // 97
      // If the module has already been evaluated, then we need to trigger                                             // 98
      // another round of entry.runModuleSetters calls, which begins by                                                // 99
      // calling entry.runModuleGetters(module).                                                                       // 100
      module.runModuleSetters();                                                                                       // 101
    }                                                                                                                  // 102
  };                                                                                                                   // 103
                                                                                                                       // 104
  // This method can be overridden by client code to implement custom export                                           // 105
  // naming logic. The current implementation works well with Babel's                                                  // 106
  // __esModule convention.                                                                                            // 107
  Mp.getExportByName = function (name) {                                                                               // 108
    var exports = this.exports;                                                                                        // 109
                                                                                                                       // 110
    if (name === "*") {                                                                                                // 111
      return exports;                                                                                                  // 112
    }                                                                                                                  // 113
                                                                                                                       // 114
    if (name === "default" &&                                                                                          // 115
        ! (exports &&                                                                                                  // 116
           typeof exports === "object" &&                                                                              // 117
           exports.__esModule &&                                                                                       // 118
           "default" in exports)) {                                                                                    // 119
      return exports;                                                                                                  // 120
    }                                                                                                                  // 121
                                                                                                                       // 122
    return exports && exports[name];                                                                                   // 123
  };                                                                                                                   // 124
                                                                                                                       // 125
  return Module;                                                                                                       // 126
};                                                                                                                     // 127
                                                                                                                       // 128
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"entry.js":["./utils.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/modules/node_modules/reify/lib/entry.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var hasOwn = Object.prototype.hasOwnProperty;                                                                          // 1
var entryMap = Object.create(null);                                                                                    // 2
var utils = require("./utils.js");                                                                                     // 3
                                                                                                                       // 4
function Entry(id) {                                                                                                   // 5
  // Same as module.id for this module.                                                                                // 6
  this.id = id;                                                                                                        // 7
  // The number of times this.runModuleSetters has been called.                                                        // 8
  this.runCount = 0;                                                                                                   // 9
  // Setters for assigning to local variables in parent modules.                                                       // 10
  this.setters = Object.create(null);                                                                                  // 11
  // Getters for local variables exported from this module.                                                            // 12
  this.getters = Object.create(null);                                                                                  // 13
}                                                                                                                      // 14
                                                                                                                       // 15
var Ep = Entry.prototype;                                                                                              // 16
                                                                                                                       // 17
Entry.get = function (id) {                                                                                            // 18
  return entryMap[id] || null;                                                                                         // 19
};                                                                                                                     // 20
                                                                                                                       // 21
Entry.getOrCreate = function (id) {                                                                                    // 22
  return entryMap[id] = entryMap[id] || new Entry(id);                                                                 // 23
};                                                                                                                     // 24
                                                                                                                       // 25
Ep.addSetters = function (parent, setters) {                                                                           // 26
  var entry = this;                                                                                                    // 27
                                                                                                                       // 28
  Object.keys(setters).forEach(function (name) {                                                                       // 29
    var setter = setters[name];                                                                                        // 30
    if (typeof setter === "function" &&                                                                                // 31
        // Ignore any requests for the exports.__esModule property."                                                   // 32
        name !== "__esModule") {                                                                                       // 33
      setter.parent = parent;                                                                                          // 34
      (entry.setters[name] =                                                                                           // 35
       entry.setters[name] || []                                                                                       // 36
      ).push(setter);                                                                                                  // 37
    }                                                                                                                  // 38
  });                                                                                                                  // 39
};                                                                                                                     // 40
                                                                                                                       // 41
Ep.addGetters = function (getters) {                                                                                   // 42
  var entry = this;                                                                                                    // 43
  Object.keys(getters).forEach(function (name) {                                                                       // 44
    var getter = getters[name];                                                                                        // 45
    if (typeof getter === "function" &&                                                                                // 46
        // Ignore any requests for the exports.__esModule property."                                                   // 47
        name !== "__esModule") {                                                                                       // 48
      // Should this throw if hasOwn.call(this.getters, name)?                                                         // 49
      entry.getters[name] = getter;                                                                                    // 50
    }                                                                                                                  // 51
  });                                                                                                                  // 52
};                                                                                                                     // 53
                                                                                                                       // 54
function runModuleSetters(module) {                                                                                    // 55
  var entry = entryMap[module.id];                                                                                     // 56
  if (entry) {                                                                                                         // 57
    entry.runModuleSetters(module);                                                                                    // 58
  }                                                                                                                    // 59
}                                                                                                                      // 60
                                                                                                                       // 61
function runModuleGetters(module) {                                                                                    // 62
  var entry = entryMap[module.id];                                                                                     // 63
  return entry ? entry.runModuleGetters(module) : 0;                                                                   // 64
}                                                                                                                      // 65
                                                                                                                       // 66
Ep.runModuleGetters = function (module) {                                                                              // 67
  var entry = this;                                                                                                    // 68
  var changeCount = 0;                                                                                                 // 69
                                                                                                                       // 70
  Object.keys(entry.getters).forEach(function (name) {                                                                 // 71
    if (entry.runGetter(module, name)) {                                                                               // 72
      ++changeCount;                                                                                                   // 73
    }                                                                                                                  // 74
  });                                                                                                                  // 75
                                                                                                                       // 76
  return changeCount;                                                                                                  // 77
};                                                                                                                     // 78
                                                                                                                       // 79
// Returns true iff the getter updated module.exports with a new value.                                                // 80
Ep.runGetter = function (module, name) {                                                                               // 81
  if (! hasOwn.call(this.getters, name)) {                                                                             // 82
    return false;                                                                                                      // 83
  }                                                                                                                    // 84
                                                                                                                       // 85
  var getter = this.getters[name];                                                                                     // 86
  try {                                                                                                                // 87
    var value = getter.call(module);                                                                                   // 88
  } catch (e) {}                                                                                                       // 89
  var exports = module.exports;                                                                                        // 90
                                                                                                                       // 91
  if (! hasOwn.call(exports, name) ||                                                                                  // 92
      exports[name] !== value) {                                                                                       // 93
    // We update module.exports[name] with the current value so that                                                   // 94
    // CommonJS require calls remain consistent with module.import.                                                    // 95
    exports[name] = value;                                                                                             // 96
    return true;                                                                                                       // 97
  }                                                                                                                    // 98
                                                                                                                       // 99
  return false;                                                                                                        // 100
};                                                                                                                     // 101
                                                                                                                       // 102
// Called whenever module.exports might have changed, to trigger any                                                   // 103
// setters associated with the newly exported values.                                                                  // 104
Ep.runModuleSetters = function (module) {                                                                              // 105
  var entry = this;                                                                                                    // 106
  var names = Object.keys(entry.setters);                                                                              // 107
                                                                                                                       // 108
  // Make sure module.exports is up to date before we call                                                             // 109
  // module.getExportByName(name).                                                                                     // 110
  entry.runModuleGetters(module);                                                                                      // 111
                                                                                                                       // 112
  // Invoke the given callback once for every (setter, value, name) triple                                             // 113
  // that needs to be called. Note that forEachSetter does not call any                                                // 114
  // setters itself, only the given callback.                                                                          // 115
  function forEachSetter(callback, context) {                                                                          // 116
    names.forEach(function (name) {                                                                                    // 117
      entry.setters[name].forEach(function (setter) {                                                                  // 118
        var value = module.getExportByName(name);                                                                      // 119
        if (name === "*") {                                                                                            // 120
          Object.keys(value).forEach(function (name) {                                                                 // 121
            call(setter, value[name], name);                                                                           // 122
          });                                                                                                          // 123
        } else {                                                                                                       // 124
          call(setter, value, name);                                                                                   // 125
        }                                                                                                              // 126
      });                                                                                                              // 127
    });                                                                                                                // 128
                                                                                                                       // 129
    function call(setter, value, name) {                                                                               // 130
      if (name === "__esModule") {                                                                                     // 131
        // Ignore setters asking for module.exports.__esModule.                                                        // 132
        return;                                                                                                        // 133
      }                                                                                                                // 134
                                                                                                                       // 135
      setter.last = setter.last || Object.create(null);                                                                // 136
                                                                                                                       // 137
      if (! hasOwn.call(setter.last, name) ||                                                                          // 138
          setter.last[name] !== value) {                                                                               // 139
        // Only invoke the callback if we have not called this setter                                                  // 140
        // (with a value of this name) before, or the current value is                                                 // 141
        // different from the last value we passed to this setter.                                                     // 142
        return callback.apply(context, arguments);                                                                     // 143
      }                                                                                                                // 144
    }                                                                                                                  // 145
  }                                                                                                                    // 146
                                                                                                                       // 147
  // Every three elements of this list form a (setter, value, name) triple                                             // 148
  // that needs to be invoked.                                                                                         // 149
  var settersToCall = [];                                                                                              // 150
                                                                                                                       // 151
  // Lazily-initialized objects mapping parent module identifiers to                                                   // 152
  // relevant parent module objects and snapshots of their exports.                                                    // 153
  var relevantParents;                                                                                                 // 154
  var parentSnapshots;                                                                                                 // 155
                                                                                                                       // 156
  // Take snapshots of setter.parent.exports for any setters that we are                                               // 157
  // planning to call, so that we can later determine if calling the                                                   // 158
  // setters modified any of those exports objects.                                                                    // 159
  forEachSetter(function (setter, value, name) {                                                                       // 160
    var parent = setter.parent;                                                                                        // 161
    parentSnapshots = parentSnapshots || Object.create(null);                                                          // 162
    if (! hasOwn.call(parentSnapshots, parent.id)) {                                                                   // 163
      relevantParents = relevantParents || Object.create(null);                                                        // 164
      relevantParents[parent.id] = parent;                                                                             // 165
      if (utils.isPlainObject(parent.exports)) {                                                                       // 166
        // If parent.exports is an object, make a shallow clone of it so                                               // 167
        // that we can see if it changes as a result of calling setters.                                               // 168
        parentSnapshots[parent.id] = utils.assign({}, parent.exports);                                                 // 169
      } else {                                                                                                         // 170
        // If parent.exports is not an object, the "snapshot" is just the                                              // 171
        // value of parent.exports.                                                                                    // 172
        parentSnapshots[parent.id] = parent.exports;                                                                   // 173
      }                                                                                                                // 174
    }                                                                                                                  // 175
                                                                                                                       // 176
    // Push three elements at a time to avoid creating wrapper arrays for                                              // 177
    // each (setter, value, name) triple. Note the i += 3 below.                                                       // 178
    settersToCall.push(setter, value, name);                                                                           // 179
  });                                                                                                                  // 180
                                                                                                                       // 181
  // Now call all the setters that we decided we need to call.                                                         // 182
  for (var i = 0; i < settersToCall.length; i += 3) {                                                                  // 183
    var setter = settersToCall[i];                                                                                     // 184
    var value = settersToCall[i + 1];                                                                                  // 185
    var name = settersToCall[i + 2];                                                                                   // 186
    setter.call(module, setter.last[name] = value, name);                                                              // 187
  }                                                                                                                    // 188
                                                                                                                       // 189
  ++entry.runCount;                                                                                                    // 190
                                                                                                                       // 191
  if (! relevantParents) {                                                                                             // 192
    // If we never called takeSnapshot, then we can avoid checking                                                     // 193
    // relevantParents and parentSnapshots below.                                                                      // 194
    return;                                                                                                            // 195
  }                                                                                                                    // 196
                                                                                                                       // 197
  // If any of the setters updated the module.exports of a parent module,                                              // 198
  // or updated local variables that are exported by that parent module,                                               // 199
  // then we must re-run any setters registered by that parent module.                                                 // 200
  Object.keys(relevantParents).forEach(function (id) {                                                                 // 201
    var parent = relevantParents[id];                                                                                  // 202
                                                                                                                       // 203
    if (runModuleGetters(parent) > 0) {                                                                                // 204
      return runModuleSetters(parent);                                                                                 // 205
    }                                                                                                                  // 206
                                                                                                                       // 207
    var exports = parent.exports;                                                                                      // 208
    var snapshot = parentSnapshots[parent.id];                                                                         // 209
    if (utils.shallowObjEqual(exports, snapshot)) {                                                                    // 210
      // If parent.exports have not changed since we took the snapshot,                                                // 211
      // then we do not need to run the parent's setters.                                                              // 212
      return;                                                                                                          // 213
    }                                                                                                                  // 214
                                                                                                                       // 215
    runModuleSetters(parent);                                                                                          // 216
  });                                                                                                                  // 217
};                                                                                                                     // 218
                                                                                                                       // 219
exports.Entry = Entry;                                                                                                 // 220
                                                                                                                       // 221
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"utils.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/modules/node_modules/reify/lib/utils.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var hasOwn = Object.prototype.hasOwnProperty;                                                                          // 1
var objToStr = Object.prototype.toString;                                                                              // 2
var objStr = objToStr.call({});                                                                                        // 3
                                                                                                                       // 4
function isPlainObject(value) {                                                                                        // 5
  return objToStr.call(value) === objStr;                                                                              // 6
}                                                                                                                      // 7
exports.isPlainObject = isPlainObject;                                                                                 // 8
                                                                                                                       // 9
exports.assign = Object.assign || function (obj) {                                                                     // 10
  var argc = arguments.length;                                                                                         // 11
  for (var i = 1; i < argc; ++i) {                                                                                     // 12
    var arg = arguments[i];                                                                                            // 13
    if (arg && typeof arg === "object") {                                                                              // 14
      var keys = Object.keys(arg);                                                                                     // 15
      for (var k = 0; k < keys.length; ++k) {                                                                          // 16
        var key = keys[k];                                                                                             // 17
        obj[key] = arg[key];                                                                                           // 18
      }                                                                                                                // 19
    }                                                                                                                  // 20
  }                                                                                                                    // 21
  return obj;                                                                                                          // 22
};                                                                                                                     // 23
                                                                                                                       // 24
exports.shallowObjEqual = function(a, b) {                                                                             // 25
  if (a === b) {                                                                                                       // 26
    return true;                                                                                                       // 27
  }                                                                                                                    // 28
                                                                                                                       // 29
  if (! isPlainObject(a) ||                                                                                            // 30
      ! isPlainObject(b)) {                                                                                            // 31
    return false;                                                                                                      // 32
  }                                                                                                                    // 33
                                                                                                                       // 34
  var aKeys = Object.keys(a);                                                                                          // 35
  var bKeys = Object.keys(b);                                                                                          // 36
                                                                                                                       // 37
  if (aKeys.length !== bKeys.length) {                                                                                 // 38
    return false;                                                                                                      // 39
  }                                                                                                                    // 40
                                                                                                                       // 41
  return aKeys.every(function (key) {                                                                                  // 42
    return hasOwn.call(b, key) &&                                                                                      // 43
      a[key] === b[key];                                                                                               // 44
  });                                                                                                                  // 45
};                                                                                                                     // 46
                                                                                                                       // 47
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}}},"react":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/package.json                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "react";                                                                                                // 1
exports.version = "15.4.2";                                                                                            // 2
exports.main = "react.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"react.js":["./lib/React",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/react.js                                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
module.exports = require('./lib/React');                                                                               // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"lib":{"React.js":["object-assign","./ReactChildren","./ReactComponent","./ReactPureComponent","./ReactClass","./ReactDOMFactories","./ReactElement","./ReactPropTypes","./ReactVersion","./onlyChild","fbjs/lib/warning","./ReactElementValidator",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/React.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _assign = require('object-assign');                                                                                // 13
                                                                                                                       // 14
var ReactChildren = require('./ReactChildren');                                                                        // 15
var ReactComponent = require('./ReactComponent');                                                                      // 16
var ReactPureComponent = require('./ReactPureComponent');                                                              // 17
var ReactClass = require('./ReactClass');                                                                              // 18
var ReactDOMFactories = require('./ReactDOMFactories');                                                                // 19
var ReactElement = require('./ReactElement');                                                                          // 20
var ReactPropTypes = require('./ReactPropTypes');                                                                      // 21
var ReactVersion = require('./ReactVersion');                                                                          // 22
                                                                                                                       // 23
var onlyChild = require('./onlyChild');                                                                                // 24
var warning = require('fbjs/lib/warning');                                                                             // 25
                                                                                                                       // 26
var createElement = ReactElement.createElement;                                                                        // 27
var createFactory = ReactElement.createFactory;                                                                        // 28
var cloneElement = ReactElement.cloneElement;                                                                          // 29
                                                                                                                       // 30
if (process.env.NODE_ENV !== 'production') {                                                                           // 31
  var ReactElementValidator = require('./ReactElementValidator');                                                      // 32
  createElement = ReactElementValidator.createElement;                                                                 // 33
  createFactory = ReactElementValidator.createFactory;                                                                 // 34
  cloneElement = ReactElementValidator.cloneElement;                                                                   // 35
}                                                                                                                      // 36
                                                                                                                       // 37
var __spread = _assign;                                                                                                // 38
                                                                                                                       // 39
if (process.env.NODE_ENV !== 'production') {                                                                           // 40
  var warned = false;                                                                                                  // 41
  __spread = function () {                                                                                             // 42
    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
    warned = true;                                                                                                     // 44
    return _assign.apply(null, arguments);                                                                             // 45
  };                                                                                                                   // 46
}                                                                                                                      // 47
                                                                                                                       // 48
var React = {                                                                                                          // 49
                                                                                                                       // 50
  // Modern                                                                                                            // 51
                                                                                                                       // 52
  Children: {                                                                                                          // 53
    map: ReactChildren.map,                                                                                            // 54
    forEach: ReactChildren.forEach,                                                                                    // 55
    count: ReactChildren.count,                                                                                        // 56
    toArray: ReactChildren.toArray,                                                                                    // 57
    only: onlyChild                                                                                                    // 58
  },                                                                                                                   // 59
                                                                                                                       // 60
  Component: ReactComponent,                                                                                           // 61
  PureComponent: ReactPureComponent,                                                                                   // 62
                                                                                                                       // 63
  createElement: createElement,                                                                                        // 64
  cloneElement: cloneElement,                                                                                          // 65
  isValidElement: ReactElement.isValidElement,                                                                         // 66
                                                                                                                       // 67
  // Classic                                                                                                           // 68
                                                                                                                       // 69
  PropTypes: ReactPropTypes,                                                                                           // 70
  createClass: ReactClass.createClass,                                                                                 // 71
  createFactory: createFactory,                                                                                        // 72
  createMixin: function (mixin) {                                                                                      // 73
    // Currently a noop. Will be used to validate and trace mixins.                                                    // 74
    return mixin;                                                                                                      // 75
  },                                                                                                                   // 76
                                                                                                                       // 77
  // This looks DOM specific but these are actually isomorphic helpers                                                 // 78
  // since they are just generating DOM strings.                                                                       // 79
  DOM: ReactDOMFactories,                                                                                              // 80
                                                                                                                       // 81
  version: ReactVersion,                                                                                               // 82
                                                                                                                       // 83
  // Deprecated hook for JSX spread, don't use this for anything.                                                      // 84
  __spread: __spread                                                                                                   // 85
};                                                                                                                     // 86
                                                                                                                       // 87
module.exports = React;                                                                                                // 88
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactChildren.js":["./PooledClass","./ReactElement","fbjs/lib/emptyFunction","./traverseAllChildren",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/ReactChildren.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var PooledClass = require('./PooledClass');                                                                            // 13
var ReactElement = require('./ReactElement');                                                                          // 14
                                                                                                                       // 15
var emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 16
var traverseAllChildren = require('./traverseAllChildren');                                                            // 17
                                                                                                                       // 18
var twoArgumentPooler = PooledClass.twoArgumentPooler;                                                                 // 19
var fourArgumentPooler = PooledClass.fourArgumentPooler;                                                               // 20
                                                                                                                       // 21
var userProvidedKeyEscapeRegex = /\/+/g;                                                                               // 22
function escapeUserProvidedKey(text) {                                                                                 // 23
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');                                                       // 24
}                                                                                                                      // 25
                                                                                                                       // 26
/**                                                                                                                    // 27
 * PooledClass representing the bookkeeping associated with performing a child                                         // 28
 * traversal. Allows avoiding binding callbacks.                                                                       // 29
 *                                                                                                                     // 30
 * @constructor ForEachBookKeeping                                                                                     // 31
 * @param {!function} forEachFunction Function to perform traversal with.                                              // 32
 * @param {?*} forEachContext Context to perform context with.                                                         // 33
 */                                                                                                                    // 34
function ForEachBookKeeping(forEachFunction, forEachContext) {                                                         // 35
  this.func = forEachFunction;                                                                                         // 36
  this.context = forEachContext;                                                                                       // 37
  this.count = 0;                                                                                                      // 38
}                                                                                                                      // 39
ForEachBookKeeping.prototype.destructor = function () {                                                                // 40
  this.func = null;                                                                                                    // 41
  this.context = null;                                                                                                 // 42
  this.count = 0;                                                                                                      // 43
};                                                                                                                     // 44
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);                                                       // 45
                                                                                                                       // 46
function forEachSingleChild(bookKeeping, child, name) {                                                                // 47
  var func = bookKeeping.func,                                                                                         // 48
      context = bookKeeping.context;                                                                                   // 49
                                                                                                                       // 50
  func.call(context, child, bookKeeping.count++);                                                                      // 51
}                                                                                                                      // 52
                                                                                                                       // 53
/**                                                                                                                    // 54
 * Iterates through children that are typically specified as `props.children`.                                         // 55
 *                                                                                                                     // 56
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach                                 // 57
 *                                                                                                                     // 58
 * The provided forEachFunc(child, index) will be called for each                                                      // 59
 * leaf child.                                                                                                         // 60
 *                                                                                                                     // 61
 * @param {?*} children Children tree container.                                                                       // 62
 * @param {function(*, int)} forEachFunc                                                                               // 63
 * @param {*} forEachContext Context for forEachContext.                                                               // 64
 */                                                                                                                    // 65
function forEachChildren(children, forEachFunc, forEachContext) {                                                      // 66
  if (children == null) {                                                                                              // 67
    return children;                                                                                                   // 68
  }                                                                                                                    // 69
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);                                     // 70
  traverseAllChildren(children, forEachSingleChild, traverseContext);                                                  // 71
  ForEachBookKeeping.release(traverseContext);                                                                         // 72
}                                                                                                                      // 73
                                                                                                                       // 74
/**                                                                                                                    // 75
 * PooledClass representing the bookkeeping associated with performing a child                                         // 76
 * mapping. Allows avoiding binding callbacks.                                                                         // 77
 *                                                                                                                     // 78
 * @constructor MapBookKeeping                                                                                         // 79
 * @param {!*} mapResult Object containing the ordered map of results.                                                 // 80
 * @param {!function} mapFunction Function to perform mapping with.                                                    // 81
 * @param {?*} mapContext Context to perform mapping with.                                                             // 82
 */                                                                                                                    // 83
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {                                               // 84
  this.result = mapResult;                                                                                             // 85
  this.keyPrefix = keyPrefix;                                                                                          // 86
  this.func = mapFunction;                                                                                             // 87
  this.context = mapContext;                                                                                           // 88
  this.count = 0;                                                                                                      // 89
}                                                                                                                      // 90
MapBookKeeping.prototype.destructor = function () {                                                                    // 91
  this.result = null;                                                                                                  // 92
  this.keyPrefix = null;                                                                                               // 93
  this.func = null;                                                                                                    // 94
  this.context = null;                                                                                                 // 95
  this.count = 0;                                                                                                      // 96
};                                                                                                                     // 97
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);                                                          // 98
                                                                                                                       // 99
function mapSingleChildIntoContext(bookKeeping, child, childKey) {                                                     // 100
  var result = bookKeeping.result,                                                                                     // 101
      keyPrefix = bookKeeping.keyPrefix,                                                                               // 102
      func = bookKeeping.func,                                                                                         // 103
      context = bookKeeping.context;                                                                                   // 104
                                                                                                                       // 105
                                                                                                                       // 106
  var mappedChild = func.call(context, child, bookKeeping.count++);                                                    // 107
  if (Array.isArray(mappedChild)) {                                                                                    // 108
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);                    // 109
  } else if (mappedChild != null) {                                                                                    // 110
    if (ReactElement.isValidElement(mappedChild)) {                                                                    // 111
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,                                                       // 112
      // Keep both the (mapped) and old keys if they differ, just as                                                   // 113
      // traverseAllChildren used to do for objects as children                                                        // 114
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }                                                                                                                  // 116
    result.push(mappedChild);                                                                                          // 117
  }                                                                                                                    // 118
}                                                                                                                      // 119
                                                                                                                       // 120
function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {                                        // 121
  var escapedPrefix = '';                                                                                              // 122
  if (prefix != null) {                                                                                                // 123
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';                                                               // 124
  }                                                                                                                    // 125
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);                                 // 126
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);                                           // 127
  MapBookKeeping.release(traverseContext);                                                                             // 128
}                                                                                                                      // 129
                                                                                                                       // 130
/**                                                                                                                    // 131
 * Maps children that are typically specified as `props.children`.                                                     // 132
 *                                                                                                                     // 133
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map                                     // 134
 *                                                                                                                     // 135
 * The provided mapFunction(child, key, index) will be called for each                                                 // 136
 * leaf child.                                                                                                         // 137
 *                                                                                                                     // 138
 * @param {?*} children Children tree container.                                                                       // 139
 * @param {function(*, int)} func The map function.                                                                    // 140
 * @param {*} context Context for mapFunction.                                                                         // 141
 * @return {object} Object containing the ordered map of results.                                                      // 142
 */                                                                                                                    // 143
function mapChildren(children, func, context) {                                                                        // 144
  if (children == null) {                                                                                              // 145
    return children;                                                                                                   // 146
  }                                                                                                                    // 147
  var result = [];                                                                                                     // 148
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);                                                 // 149
  return result;                                                                                                       // 150
}                                                                                                                      // 151
                                                                                                                       // 152
function forEachSingleChildDummy(traverseContext, child, name) {                                                       // 153
  return null;                                                                                                         // 154
}                                                                                                                      // 155
                                                                                                                       // 156
/**                                                                                                                    // 157
 * Count the number of children that are typically specified as                                                        // 158
 * `props.children`.                                                                                                   // 159
 *                                                                                                                     // 160
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count                                   // 161
 *                                                                                                                     // 162
 * @param {?*} children Children tree container.                                                                       // 163
 * @return {number} The number of children.                                                                            // 164
 */                                                                                                                    // 165
function countChildren(children, context) {                                                                            // 166
  return traverseAllChildren(children, forEachSingleChildDummy, null);                                                 // 167
}                                                                                                                      // 168
                                                                                                                       // 169
/**                                                                                                                    // 170
 * Flatten a children object (typically specified as `props.children`) and                                             // 171
 * return an array with appropriately re-keyed children.                                                               // 172
 *                                                                                                                     // 173
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray                                 // 174
 */                                                                                                                    // 175
function toArray(children) {                                                                                           // 176
  var result = [];                                                                                                     // 177
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);                             // 178
  return result;                                                                                                       // 179
}                                                                                                                      // 180
                                                                                                                       // 181
var ReactChildren = {                                                                                                  // 182
  forEach: forEachChildren,                                                                                            // 183
  map: mapChildren,                                                                                                    // 184
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,                                                          // 185
  count: countChildren,                                                                                                // 186
  toArray: toArray                                                                                                     // 187
};                                                                                                                     // 188
                                                                                                                       // 189
module.exports = ReactChildren;                                                                                        // 190
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"PooledClass.js":["./reactProdInvariant","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/PooledClass.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var _prodInvariant = require('./reactProdInvariant');                                                                  // 14
                                                                                                                       // 15
var invariant = require('fbjs/lib/invariant');                                                                         // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * Static poolers. Several custom versions for each potential number of                                                // 19
 * arguments. A completely generic pooler is easy to implement, but would                                              // 20
 * require accessing the `arguments` object. In each of these, `this` refers to                                        // 21
 * the Class itself, not an instance. If any others are needed, simply add them                                        // 22
 * here, or in their own files.                                                                                        // 23
 */                                                                                                                    // 24
var oneArgumentPooler = function (copyFieldsFrom) {                                                                    // 25
  var Klass = this;                                                                                                    // 26
  if (Klass.instancePool.length) {                                                                                     // 27
    var instance = Klass.instancePool.pop();                                                                           // 28
    Klass.call(instance, copyFieldsFrom);                                                                              // 29
    return instance;                                                                                                   // 30
  } else {                                                                                                             // 31
    return new Klass(copyFieldsFrom);                                                                                  // 32
  }                                                                                                                    // 33
};                                                                                                                     // 34
                                                                                                                       // 35
var twoArgumentPooler = function (a1, a2) {                                                                            // 36
  var Klass = this;                                                                                                    // 37
  if (Klass.instancePool.length) {                                                                                     // 38
    var instance = Klass.instancePool.pop();                                                                           // 39
    Klass.call(instance, a1, a2);                                                                                      // 40
    return instance;                                                                                                   // 41
  } else {                                                                                                             // 42
    return new Klass(a1, a2);                                                                                          // 43
  }                                                                                                                    // 44
};                                                                                                                     // 45
                                                                                                                       // 46
var threeArgumentPooler = function (a1, a2, a3) {                                                                      // 47
  var Klass = this;                                                                                                    // 48
  if (Klass.instancePool.length) {                                                                                     // 49
    var instance = Klass.instancePool.pop();                                                                           // 50
    Klass.call(instance, a1, a2, a3);                                                                                  // 51
    return instance;                                                                                                   // 52
  } else {                                                                                                             // 53
    return new Klass(a1, a2, a3);                                                                                      // 54
  }                                                                                                                    // 55
};                                                                                                                     // 56
                                                                                                                       // 57
var fourArgumentPooler = function (a1, a2, a3, a4) {                                                                   // 58
  var Klass = this;                                                                                                    // 59
  if (Klass.instancePool.length) {                                                                                     // 60
    var instance = Klass.instancePool.pop();                                                                           // 61
    Klass.call(instance, a1, a2, a3, a4);                                                                              // 62
    return instance;                                                                                                   // 63
  } else {                                                                                                             // 64
    return new Klass(a1, a2, a3, a4);                                                                                  // 65
  }                                                                                                                    // 66
};                                                                                                                     // 67
                                                                                                                       // 68
var standardReleaser = function (instance) {                                                                           // 69
  var Klass = this;                                                                                                    // 70
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();                                                                                               // 72
  if (Klass.instancePool.length < Klass.poolSize) {                                                                    // 73
    Klass.instancePool.push(instance);                                                                                 // 74
  }                                                                                                                    // 75
};                                                                                                                     // 76
                                                                                                                       // 77
var DEFAULT_POOL_SIZE = 10;                                                                                            // 78
var DEFAULT_POOLER = oneArgumentPooler;                                                                                // 79
                                                                                                                       // 80
/**                                                                                                                    // 81
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class                                        // 82
 * itself (statically) not adding any prototypical fields. Any CopyConstructor                                         // 83
 * you give this may have a `poolSize` property, and will look for a                                                   // 84
 * prototypical `destructor` on instances.                                                                             // 85
 *                                                                                                                     // 86
 * @param {Function} CopyConstructor Constructor that can be used to reset.                                            // 87
 * @param {Function} pooler Customizable pooler.                                                                       // 88
 */                                                                                                                    // 89
var addPoolingTo = function (CopyConstructor, pooler) {                                                                // 90
  // Casting as any so that flow ignores the actual implementation and trusts                                          // 91
  // it to match the type we declared                                                                                  // 92
  var NewKlass = CopyConstructor;                                                                                      // 93
  NewKlass.instancePool = [];                                                                                          // 94
  NewKlass.getPooled = pooler || DEFAULT_POOLER;                                                                       // 95
  if (!NewKlass.poolSize) {                                                                                            // 96
    NewKlass.poolSize = DEFAULT_POOL_SIZE;                                                                             // 97
  }                                                                                                                    // 98
  NewKlass.release = standardReleaser;                                                                                 // 99
  return NewKlass;                                                                                                     // 100
};                                                                                                                     // 101
                                                                                                                       // 102
var PooledClass = {                                                                                                    // 103
  addPoolingTo: addPoolingTo,                                                                                          // 104
  oneArgumentPooler: oneArgumentPooler,                                                                                // 105
  twoArgumentPooler: twoArgumentPooler,                                                                                // 106
  threeArgumentPooler: threeArgumentPooler,                                                                            // 107
  fourArgumentPooler: fourArgumentPooler                                                                               // 108
};                                                                                                                     // 109
                                                                                                                       // 110
module.exports = PooledClass;                                                                                          // 111
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"reactProdInvariant.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/reactProdInvariant.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * WARNING: DO NOT manually require this module.                                                                       // 14
 * This is a replacement for `invariant(...)` used by the error code system                                            // 15
 * and will _only_ be required by the corresponding babel pass.                                                        // 16
 * It always throws.                                                                                                   // 17
 */                                                                                                                    // 18
                                                                                                                       // 19
function reactProdInvariant(code) {                                                                                    // 20
  var argCount = arguments.length - 1;                                                                                 // 21
                                                                                                                       // 22
  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
                                                                                                                       // 24
  for (var argIdx = 0; argIdx < argCount; argIdx++) {                                                                  // 25
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);                                                 // 26
  }                                                                                                                    // 27
                                                                                                                       // 28
  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
                                                                                                                       // 30
  var error = new Error(message);                                                                                      // 31
  error.name = 'Invariant Violation';                                                                                  // 32
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame                                         // 33
                                                                                                                       // 34
  throw error;                                                                                                         // 35
}                                                                                                                      // 36
                                                                                                                       // 37
module.exports = reactProdInvariant;                                                                                   // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ReactElement.js":["object-assign","./ReactCurrentOwner","fbjs/lib/warning","./canDefineProperty","./ReactElementSymbol",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/ReactElement.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2014-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _assign = require('object-assign');                                                                                // 13
                                                                                                                       // 14
var ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 15
                                                                                                                       // 16
var warning = require('fbjs/lib/warning');                                                                             // 17
var canDefineProperty = require('./canDefineProperty');                                                                // 18
var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 19
                                                                                                                       // 20
var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');                                                              // 21
                                                                                                                       // 22
var RESERVED_PROPS = {                                                                                                 // 23
  key: true,                                                                                                           // 24
  ref: true,                                                                                                           // 25
  __self: true,                                                                                                        // 26
  __source: true                                                                                                       // 27
};                                                                                                                     // 28
                                                                                                                       // 29
var specialPropKeyWarningShown, specialPropRefWarningShown;                                                            // 30
                                                                                                                       // 31
function hasValidRef(config) {                                                                                         // 32
  if (process.env.NODE_ENV !== 'production') {                                                                         // 33
    if (hasOwnProperty.call(config, 'ref')) {                                                                          // 34
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;                                                 // 35
      if (getter && getter.isReactWarning) {                                                                           // 36
        return false;                                                                                                  // 37
      }                                                                                                                // 38
    }                                                                                                                  // 39
  }                                                                                                                    // 40
  return config.ref !== undefined;                                                                                     // 41
}                                                                                                                      // 42
                                                                                                                       // 43
function hasValidKey(config) {                                                                                         // 44
  if (process.env.NODE_ENV !== 'production') {                                                                         // 45
    if (hasOwnProperty.call(config, 'key')) {                                                                          // 46
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;                                                 // 47
      if (getter && getter.isReactWarning) {                                                                           // 48
        return false;                                                                                                  // 49
      }                                                                                                                // 50
    }                                                                                                                  // 51
  }                                                                                                                    // 52
  return config.key !== undefined;                                                                                     // 53
}                                                                                                                      // 54
                                                                                                                       // 55
function defineKeyPropWarningGetter(props, displayName) {                                                              // 56
  var warnAboutAccessingKey = function () {                                                                            // 57
    if (!specialPropKeyWarningShown) {                                                                                 // 58
      specialPropKeyWarningShown = true;                                                                               // 59
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }                                                                                                                  // 61
  };                                                                                                                   // 62
  warnAboutAccessingKey.isReactWarning = true;                                                                         // 63
  Object.defineProperty(props, 'key', {                                                                                // 64
    get: warnAboutAccessingKey,                                                                                        // 65
    configurable: true                                                                                                 // 66
  });                                                                                                                  // 67
}                                                                                                                      // 68
                                                                                                                       // 69
function defineRefPropWarningGetter(props, displayName) {                                                              // 70
  var warnAboutAccessingRef = function () {                                                                            // 71
    if (!specialPropRefWarningShown) {                                                                                 // 72
      specialPropRefWarningShown = true;                                                                               // 73
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }                                                                                                                  // 75
  };                                                                                                                   // 76
  warnAboutAccessingRef.isReactWarning = true;                                                                         // 77
  Object.defineProperty(props, 'ref', {                                                                                // 78
    get: warnAboutAccessingRef,                                                                                        // 79
    configurable: true                                                                                                 // 80
  });                                                                                                                  // 81
}                                                                                                                      // 82
                                                                                                                       // 83
/**                                                                                                                    // 84
 * Factory method to create a new React element. This no longer adheres to                                             // 85
 * the class pattern, so do not use new to call it. Also, no instanceof check                                          // 86
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check                                 // 87
 * if something is a React Element.                                                                                    // 88
 *                                                                                                                     // 89
 * @param {*} type                                                                                                     // 90
 * @param {*} key                                                                                                      // 91
 * @param {string|object} ref                                                                                          // 92
 * @param {*} self A *temporary* helper to detect places where `this` is                                               // 93
 * different from the `owner` when React.createElement is called, so that we                                           // 94
 * can warn. We want to get rid of owner and replace string `ref`s with arrow                                          // 95
 * functions, and as long as `this` and owner are the same, there will be no                                           // 96
 * change in behavior.                                                                                                 // 97
 * @param {*} source An annotation object (added by a transpiler or otherwise)                                         // 98
 * indicating filename, line number, and/or other information.                                                         // 99
 * @param {*} owner                                                                                                    // 100
 * @param {*} props                                                                                                    // 101
 * @internal                                                                                                           // 102
 */                                                                                                                    // 103
var ReactElement = function (type, key, ref, self, source, owner, props) {                                             // 104
  var element = {                                                                                                      // 105
    // This tag allow us to uniquely identify this as a React Element                                                  // 106
    $$typeof: REACT_ELEMENT_TYPE,                                                                                      // 107
                                                                                                                       // 108
    // Built-in properties that belong on the element                                                                  // 109
    type: type,                                                                                                        // 110
    key: key,                                                                                                          // 111
    ref: ref,                                                                                                          // 112
    props: props,                                                                                                      // 113
                                                                                                                       // 114
    // Record the component responsible for creating this element.                                                     // 115
    _owner: owner                                                                                                      // 116
  };                                                                                                                   // 117
                                                                                                                       // 118
  if (process.env.NODE_ENV !== 'production') {                                                                         // 119
    // The validation flag is currently mutative. We put it on                                                         // 120
    // an external backing store so that we can freeze the whole object.                                               // 121
    // This can be replaced with a WeakMap once they are implemented in                                                // 122
    // commonly used development environments.                                                                         // 123
    element._store = {};                                                                                               // 124
                                                                                                                       // 125
    // To make comparing ReactElements easier for testing purposes, we make                                            // 126
    // the validation flag non-enumerable (where possible, which should                                                // 127
    // include every environment we run tests in), so the test framework                                               // 128
    // ignores it.                                                                                                     // 129
    if (canDefineProperty) {                                                                                           // 130
      Object.defineProperty(element._store, 'validated', {                                                             // 131
        configurable: false,                                                                                           // 132
        enumerable: false,                                                                                             // 133
        writable: true,                                                                                                // 134
        value: false                                                                                                   // 135
      });                                                                                                              // 136
      // self and source are DEV only properties.                                                                      // 137
      Object.defineProperty(element, '_self', {                                                                        // 138
        configurable: false,                                                                                           // 139
        enumerable: false,                                                                                             // 140
        writable: false,                                                                                               // 141
        value: self                                                                                                    // 142
      });                                                                                                              // 143
      // Two elements created in two different places should be considered                                             // 144
      // equal for testing purposes and therefore we hide it from enumeration.                                         // 145
      Object.defineProperty(element, '_source', {                                                                      // 146
        configurable: false,                                                                                           // 147
        enumerable: false,                                                                                             // 148
        writable: false,                                                                                               // 149
        value: source                                                                                                  // 150
      });                                                                                                              // 151
    } else {                                                                                                           // 152
      element._store.validated = false;                                                                                // 153
      element._self = self;                                                                                            // 154
      element._source = source;                                                                                        // 155
    }                                                                                                                  // 156
    if (Object.freeze) {                                                                                               // 157
      Object.freeze(element.props);                                                                                    // 158
      Object.freeze(element);                                                                                          // 159
    }                                                                                                                  // 160
  }                                                                                                                    // 161
                                                                                                                       // 162
  return element;                                                                                                      // 163
};                                                                                                                     // 164
                                                                                                                       // 165
/**                                                                                                                    // 166
 * Create and return a new ReactElement of the given type.                                                             // 167
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement                                    // 168
 */                                                                                                                    // 169
ReactElement.createElement = function (type, config, children) {                                                       // 170
  var propName;                                                                                                        // 171
                                                                                                                       // 172
  // Reserved names are extracted                                                                                      // 173
  var props = {};                                                                                                      // 174
                                                                                                                       // 175
  var key = null;                                                                                                      // 176
  var ref = null;                                                                                                      // 177
  var self = null;                                                                                                     // 178
  var source = null;                                                                                                   // 179
                                                                                                                       // 180
  if (config != null) {                                                                                                // 181
    if (hasValidRef(config)) {                                                                                         // 182
      ref = config.ref;                                                                                                // 183
    }                                                                                                                  // 184
    if (hasValidKey(config)) {                                                                                         // 185
      key = '' + config.key;                                                                                           // 186
    }                                                                                                                  // 187
                                                                                                                       // 188
    self = config.__self === undefined ? null : config.__self;                                                         // 189
    source = config.__source === undefined ? null : config.__source;                                                   // 190
    // Remaining properties are added to a new props object                                                            // 191
    for (propName in config) {                                                                                         // 192
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {                         // 193
        props[propName] = config[propName];                                                                            // 194
      }                                                                                                                // 195
    }                                                                                                                  // 196
  }                                                                                                                    // 197
                                                                                                                       // 198
  // Children can be more than one argument, and those are transferred onto                                            // 199
  // the newly allocated props object.                                                                                 // 200
  var childrenLength = arguments.length - 2;                                                                           // 201
  if (childrenLength === 1) {                                                                                          // 202
    props.children = children;                                                                                         // 203
  } else if (childrenLength > 1) {                                                                                     // 204
    var childArray = Array(childrenLength);                                                                            // 205
    for (var i = 0; i < childrenLength; i++) {                                                                         // 206
      childArray[i] = arguments[i + 2];                                                                                // 207
    }                                                                                                                  // 208
    if (process.env.NODE_ENV !== 'production') {                                                                       // 209
      if (Object.freeze) {                                                                                             // 210
        Object.freeze(childArray);                                                                                     // 211
      }                                                                                                                // 212
    }                                                                                                                  // 213
    props.children = childArray;                                                                                       // 214
  }                                                                                                                    // 215
                                                                                                                       // 216
  // Resolve default props                                                                                             // 217
  if (type && type.defaultProps) {                                                                                     // 218
    var defaultProps = type.defaultProps;                                                                              // 219
    for (propName in defaultProps) {                                                                                   // 220
      if (props[propName] === undefined) {                                                                             // 221
        props[propName] = defaultProps[propName];                                                                      // 222
      }                                                                                                                // 223
    }                                                                                                                  // 224
  }                                                                                                                    // 225
  if (process.env.NODE_ENV !== 'production') {                                                                         // 226
    if (key || ref) {                                                                                                  // 227
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {                            // 228
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;              // 229
        if (key) {                                                                                                     // 230
          defineKeyPropWarningGetter(props, displayName);                                                              // 231
        }                                                                                                              // 232
        if (ref) {                                                                                                     // 233
          defineRefPropWarningGetter(props, displayName);                                                              // 234
        }                                                                                                              // 235
      }                                                                                                                // 236
    }                                                                                                                  // 237
  }                                                                                                                    // 238
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);                                 // 239
};                                                                                                                     // 240
                                                                                                                       // 241
/**                                                                                                                    // 242
 * Return a function that produces ReactElements of a given type.                                                      // 243
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory                                    // 244
 */                                                                                                                    // 245
ReactElement.createFactory = function (type) {                                                                         // 246
  var factory = ReactElement.createElement.bind(null, type);                                                           // 247
  // Expose the type on the factory and the prototype so that it can be                                                // 248
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.                                                         // 249
  // This should not be named `constructor` since this may not be the function                                         // 250
  // that created the element, and it may not even be a constructor.                                                   // 251
  // Legacy hook TODO: Warn if this is accessed                                                                        // 252
  factory.type = type;                                                                                                 // 253
  return factory;                                                                                                      // 254
};                                                                                                                     // 255
                                                                                                                       // 256
ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {                                                      // 257
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
                                                                                                                       // 259
  return newElement;                                                                                                   // 260
};                                                                                                                     // 261
                                                                                                                       // 262
/**                                                                                                                    // 263
 * Clone and return a new ReactElement using element as the starting point.                                            // 264
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement                                     // 265
 */                                                                                                                    // 266
ReactElement.cloneElement = function (element, config, children) {                                                     // 267
  var propName;                                                                                                        // 268
                                                                                                                       // 269
  // Original props are copied                                                                                         // 270
  var props = _assign({}, element.props);                                                                              // 271
                                                                                                                       // 272
  // Reserved names are extracted                                                                                      // 273
  var key = element.key;                                                                                               // 274
  var ref = element.ref;                                                                                               // 275
  // Self is preserved since the owner is preserved.                                                                   // 276
  var self = element._self;                                                                                            // 277
  // Source is preserved since cloneElement is unlikely to be targeted by a                                            // 278
  // transpiler, and the original source is probably a better indicator of the                                         // 279
  // true owner.                                                                                                       // 280
  var source = element._source;                                                                                        // 281
                                                                                                                       // 282
  // Owner will be preserved, unless ref is overridden                                                                 // 283
  var owner = element._owner;                                                                                          // 284
                                                                                                                       // 285
  if (config != null) {                                                                                                // 286
    if (hasValidRef(config)) {                                                                                         // 287
      // Silently steal the ref from the parent.                                                                       // 288
      ref = config.ref;                                                                                                // 289
      owner = ReactCurrentOwner.current;                                                                               // 290
    }                                                                                                                  // 291
    if (hasValidKey(config)) {                                                                                         // 292
      key = '' + config.key;                                                                                           // 293
    }                                                                                                                  // 294
                                                                                                                       // 295
    // Remaining properties override existing props                                                                    // 296
    var defaultProps;                                                                                                  // 297
    if (element.type && element.type.defaultProps) {                                                                   // 298
      defaultProps = element.type.defaultProps;                                                                        // 299
    }                                                                                                                  // 300
    for (propName in config) {                                                                                         // 301
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {                         // 302
        if (config[propName] === undefined && defaultProps !== undefined) {                                            // 303
          // Resolve default props                                                                                     // 304
          props[propName] = defaultProps[propName];                                                                    // 305
        } else {                                                                                                       // 306
          props[propName] = config[propName];                                                                          // 307
        }                                                                                                              // 308
      }                                                                                                                // 309
    }                                                                                                                  // 310
  }                                                                                                                    // 311
                                                                                                                       // 312
  // Children can be more than one argument, and those are transferred onto                                            // 313
  // the newly allocated props object.                                                                                 // 314
  var childrenLength = arguments.length - 2;                                                                           // 315
  if (childrenLength === 1) {                                                                                          // 316
    props.children = children;                                                                                         // 317
  } else if (childrenLength > 1) {                                                                                     // 318
    var childArray = Array(childrenLength);                                                                            // 319
    for (var i = 0; i < childrenLength; i++) {                                                                         // 320
      childArray[i] = arguments[i + 2];                                                                                // 321
    }                                                                                                                  // 322
    props.children = childArray;                                                                                       // 323
  }                                                                                                                    // 324
                                                                                                                       // 325
  return ReactElement(element.type, key, ref, self, source, owner, props);                                             // 326
};                                                                                                                     // 327
                                                                                                                       // 328
/**                                                                                                                    // 329
 * Verifies the object is a ReactElement.                                                                              // 330
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement                                   // 331
 * @param {?object} object                                                                                             // 332
 * @return {boolean} True if `object` is a valid component.                                                            // 333
 * @final                                                                                                              // 334
 */                                                                                                                    // 335
ReactElement.isValidElement = function (object) {                                                                      // 336
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;                      // 337
};                                                                                                                     // 338
                                                                                                                       // 339
module.exports = ReactElement;                                                                                         // 340
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactCurrentOwner.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/ReactCurrentOwner.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
/**                                                                                                                    // 14
 * Keeps track of the current owner.                                                                                   // 15
 *                                                                                                                     // 16
 * The current owner is the component who should own any components that are                                           // 17
 * currently being constructed.                                                                                        // 18
 */                                                                                                                    // 19
var ReactCurrentOwner = {                                                                                              // 20
                                                                                                                       // 21
  /**                                                                                                                  // 22
   * @internal                                                                                                         // 23
   * @type {ReactComponent}                                                                                            // 24
   */                                                                                                                  // 25
  current: null                                                                                                        // 26
                                                                                                                       // 27
};                                                                                                                     // 28
                                                                                                                       // 29
module.exports = ReactCurrentOwner;                                                                                    // 30
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"canDefineProperty.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/canDefineProperty.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var canDefineProperty = false;                                                                                         // 14
if (process.env.NODE_ENV !== 'production') {                                                                           // 15
  try {                                                                                                                // 16
    // $FlowFixMe https://github.com/facebook/flow/issues/285                                                          // 17
    Object.defineProperty({}, 'x', { get: function () {} });                                                           // 18
    canDefineProperty = true;                                                                                          // 19
  } catch (x) {                                                                                                        // 20
    // IE will fail on defineProperty                                                                                  // 21
  }                                                                                                                    // 22
}                                                                                                                      // 23
                                                                                                                       // 24
module.exports = canDefineProperty;                                                                                    // 25
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ReactElementSymbol.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/ReactElementSymbol.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2014-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
// The Symbol used to tag the ReactElement type. If there is no native Symbol                                          // 14
// nor polyfill, then a plain number is used for performance.                                                          // 15
                                                                                                                       // 16
var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;    // 17
                                                                                                                       // 18
module.exports = REACT_ELEMENT_TYPE;                                                                                   // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"traverseAllChildren.js":["./reactProdInvariant","./ReactCurrentOwner","./ReactElementSymbol","./getIteratorFn","fbjs/lib/invariant","./KeyEscapeUtils","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/traverseAllChildren.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 15
var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');                                                              // 16
                                                                                                                       // 17
var getIteratorFn = require('./getIteratorFn');                                                                        // 18
var invariant = require('fbjs/lib/invariant');                                                                         // 19
var KeyEscapeUtils = require('./KeyEscapeUtils');                                                                      // 20
var warning = require('fbjs/lib/warning');                                                                             // 21
                                                                                                                       // 22
var SEPARATOR = '.';                                                                                                   // 23
var SUBSEPARATOR = ':';                                                                                                // 24
                                                                                                                       // 25
/**                                                                                                                    // 26
 * This is inlined from ReactElement since this file is shared between                                                 // 27
 * isomorphic and renderers. We could extract this to a                                                                // 28
 *                                                                                                                     // 29
 */                                                                                                                    // 30
                                                                                                                       // 31
/**                                                                                                                    // 32
 * TODO: Test that a single child and an array with one item have the same key                                         // 33
 * pattern.                                                                                                            // 34
 */                                                                                                                    // 35
                                                                                                                       // 36
var didWarnAboutMaps = false;                                                                                          // 37
                                                                                                                       // 38
/**                                                                                                                    // 39
 * Generate a key string that identifies a component within a set.                                                     // 40
 *                                                                                                                     // 41
 * @param {*} component A component that could contain a manual key.                                                   // 42
 * @param {number} index Index that is used if a manual key is not provided.                                           // 43
 * @return {string}                                                                                                    // 44
 */                                                                                                                    // 45
function getComponentKey(component, index) {                                                                           // 46
  // Do some typechecking here since we call this blindly. We want to ensure                                           // 47
  // that we don't block potential future ES APIs.                                                                     // 48
  if (component && typeof component === 'object' && component.key != null) {                                           // 49
    // Explicit key                                                                                                    // 50
    return KeyEscapeUtils.escape(component.key);                                                                       // 51
  }                                                                                                                    // 52
  // Implicit key determined by the index in the set                                                                   // 53
  return index.toString(36);                                                                                           // 54
}                                                                                                                      // 55
                                                                                                                       // 56
/**                                                                                                                    // 57
 * @param {?*} children Children tree container.                                                                       // 58
 * @param {!string} nameSoFar Name of the key path so far.                                                             // 59
 * @param {!function} callback Callback to invoke with each child found.                                               // 60
 * @param {?*} traverseContext Used to pass information throughout the traversal                                       // 61
 * process.                                                                                                            // 62
 * @return {!number} The number of children in this subtree.                                                           // 63
 */                                                                                                                    // 64
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {                                     // 65
  var type = typeof children;                                                                                          // 66
                                                                                                                       // 67
  if (type === 'undefined' || type === 'boolean') {                                                                    // 68
    // All of the above are perceived as null.                                                                         // 69
    children = null;                                                                                                   // 70
  }                                                                                                                    // 71
                                                                                                                       // 72
  if (children === null || type === 'string' || type === 'number' ||                                                   // 73
  // The following is inlined from ReactElement. This means we can optimize                                            // 74
  // some checks. React Fiber also inlines this logic for similar purposes.                                            // 75
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {                                                     // 76
    callback(traverseContext, children,                                                                                // 77
    // If it's the only child, treat the name as if it was wrapped in an array                                         // 78
    // so that it's consistent if the number of children grows.                                                        // 79
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);                                          // 80
    return 1;                                                                                                          // 81
  }                                                                                                                    // 82
                                                                                                                       // 83
  var child;                                                                                                           // 84
  var nextName;                                                                                                        // 85
  var subtreeCount = 0; // Count of children found in the current subtree.                                             // 86
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;                                        // 87
                                                                                                                       // 88
  if (Array.isArray(children)) {                                                                                       // 89
    for (var i = 0; i < children.length; i++) {                                                                        // 90
      child = children[i];                                                                                             // 91
      nextName = nextNamePrefix + getComponentKey(child, i);                                                           // 92
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                             // 93
    }                                                                                                                  // 94
  } else {                                                                                                             // 95
    var iteratorFn = getIteratorFn(children);                                                                          // 96
    if (iteratorFn) {                                                                                                  // 97
      var iterator = iteratorFn.call(children);                                                                        // 98
      var step;                                                                                                        // 99
      if (iteratorFn !== children.entries) {                                                                           // 100
        var ii = 0;                                                                                                    // 101
        while (!(step = iterator.next()).done) {                                                                       // 102
          child = step.value;                                                                                          // 103
          nextName = nextNamePrefix + getComponentKey(child, ii++);                                                    // 104
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                         // 105
        }                                                                                                              // 106
      } else {                                                                                                         // 107
        if (process.env.NODE_ENV !== 'production') {                                                                   // 108
          var mapsAsChildrenAddendum = '';                                                                             // 109
          if (ReactCurrentOwner.current) {                                                                             // 110
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();                                         // 111
            if (mapsAsChildrenOwnerName) {                                                                             // 112
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';               // 113
            }                                                                                                          // 114
          }                                                                                                            // 115
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;                                                                                     // 117
        }                                                                                                              // 118
        // Iterator will provide entry [k,v] tuples rather than values.                                                // 119
        while (!(step = iterator.next()).done) {                                                                       // 120
          var entry = step.value;                                                                                      // 121
          if (entry) {                                                                                                 // 122
            child = entry[1];                                                                                          // 123
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);    // 124
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                       // 125
          }                                                                                                            // 126
        }                                                                                                              // 127
      }                                                                                                                // 128
    } else if (type === 'object') {                                                                                    // 129
      var addendum = '';                                                                                               // 130
      if (process.env.NODE_ENV !== 'production') {                                                                     // 131
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {                                                                                // 133
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }                                                                                                              // 135
        if (ReactCurrentOwner.current) {                                                                               // 136
          var name = ReactCurrentOwner.current.getName();                                                              // 137
          if (name) {                                                                                                  // 138
            addendum += ' Check the render method of `' + name + '`.';                                                 // 139
          }                                                                                                            // 140
        }                                                                                                              // 141
      }                                                                                                                // 142
      var childrenString = String(children);                                                                           // 143
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }                                                                                                                  // 145
  }                                                                                                                    // 146
                                                                                                                       // 147
  return subtreeCount;                                                                                                 // 148
}                                                                                                                      // 149
                                                                                                                       // 150
/**                                                                                                                    // 151
 * Traverses children that are typically specified as `props.children`, but                                            // 152
 * might also be specified through attributes:                                                                         // 153
 *                                                                                                                     // 154
 * - `traverseAllChildren(this.props.children, ...)`                                                                   // 155
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`                                                          // 156
 *                                                                                                                     // 157
 * The `traverseContext` is an optional argument that is passed through the                                            // 158
 * entire traversal. It can be used to store accumulations or anything else that                                       // 159
 * the callback might find relevant.                                                                                   // 160
 *                                                                                                                     // 161
 * @param {?*} children Children tree object.                                                                          // 162
 * @param {!function} callback To invoke upon traversing each child.                                                   // 163
 * @param {?*} traverseContext Context for traversal.                                                                  // 164
 * @return {!number} The number of children in this subtree.                                                           // 165
 */                                                                                                                    // 166
function traverseAllChildren(children, callback, traverseContext) {                                                    // 167
  if (children == null) {                                                                                              // 168
    return 0;                                                                                                          // 169
  }                                                                                                                    // 170
                                                                                                                       // 171
  return traverseAllChildrenImpl(children, '', callback, traverseContext);                                             // 172
}                                                                                                                      // 173
                                                                                                                       // 174
module.exports = traverseAllChildren;                                                                                  // 175
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"getIteratorFn.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/getIteratorFn.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
/* global Symbol */                                                                                                    // 14
                                                                                                                       // 15
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;                                                 // 16
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.                                                        // 17
                                                                                                                       // 18
/**                                                                                                                    // 19
 * Returns the iterator method function contained on the iterable object.                                              // 20
 *                                                                                                                     // 21
 * Be sure to invoke the function with the iterable as context:                                                        // 22
 *                                                                                                                     // 23
 *     var iteratorFn = getIteratorFn(myIterable);                                                                     // 24
 *     if (iteratorFn) {                                                                                               // 25
 *       var iterator = iteratorFn.call(myIterable);                                                                   // 26
 *       ...                                                                                                           // 27
 *     }                                                                                                               // 28
 *                                                                                                                     // 29
 * @param {?object} maybeIterable                                                                                      // 30
 * @return {?function}                                                                                                 // 31
 */                                                                                                                    // 32
function getIteratorFn(maybeIterable) {                                                                                // 33
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {                                                                              // 35
    return iteratorFn;                                                                                                 // 36
  }                                                                                                                    // 37
}                                                                                                                      // 38
                                                                                                                       // 39
module.exports = getIteratorFn;                                                                                        // 40
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"KeyEscapeUtils.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/KeyEscapeUtils.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
/**                                                                                                                    // 14
 * Escape and wrap key so it is safe to use as a reactid                                                               // 15
 *                                                                                                                     // 16
 * @param {string} key to be escaped.                                                                                  // 17
 * @return {string} the escaped key.                                                                                   // 18
 */                                                                                                                    // 19
                                                                                                                       // 20
function escape(key) {                                                                                                 // 21
  var escapeRegex = /[=:]/g;                                                                                           // 22
  var escaperLookup = {                                                                                                // 23
    '=': '=0',                                                                                                         // 24
    ':': '=2'                                                                                                          // 25
  };                                                                                                                   // 26
  var escapedString = ('' + key).replace(escapeRegex, function (match) {                                               // 27
    return escaperLookup[match];                                                                                       // 28
  });                                                                                                                  // 29
                                                                                                                       // 30
  return '$' + escapedString;                                                                                          // 31
}                                                                                                                      // 32
                                                                                                                       // 33
/**                                                                                                                    // 34
 * Unescape and unwrap key for human-readable display                                                                  // 35
 *                                                                                                                     // 36
 * @param {string} key to unescape.                                                                                    // 37
 * @return {string} the unescaped key.                                                                                 // 38
 */                                                                                                                    // 39
function unescape(key) {                                                                                               // 40
  var unescapeRegex = /(=0|=2)/g;                                                                                      // 41
  var unescaperLookup = {                                                                                              // 42
    '=0': '=',                                                                                                         // 43
    '=2': ':'                                                                                                          // 44
  };                                                                                                                   // 45
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);                           // 46
                                                                                                                       // 47
  return ('' + keySubstring).replace(unescapeRegex, function (match) {                                                 // 48
    return unescaperLookup[match];                                                                                     // 49
  });                                                                                                                  // 50
}                                                                                                                      // 51
                                                                                                                       // 52
var KeyEscapeUtils = {                                                                                                 // 53
  escape: escape,                                                                                                      // 54
  unescape: unescape                                                                                                   // 55
};                                                                                                                     // 56
                                                                                                                       // 57
module.exports = KeyEscapeUtils;                                                                                       // 58
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ReactComponent.js":["./reactProdInvariant","./ReactNoopUpdateQueue","./canDefineProperty","fbjs/lib/emptyObject","fbjs/lib/invariant","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/ReactComponent.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');                                                          // 15
                                                                                                                       // 16
var canDefineProperty = require('./canDefineProperty');                                                                // 17
var emptyObject = require('fbjs/lib/emptyObject');                                                                     // 18
var invariant = require('fbjs/lib/invariant');                                                                         // 19
var warning = require('fbjs/lib/warning');                                                                             // 20
                                                                                                                       // 21
/**                                                                                                                    // 22
 * Base class helpers for the updating state of a component.                                                           // 23
 */                                                                                                                    // 24
function ReactComponent(props, context, updater) {                                                                     // 25
  this.props = props;                                                                                                  // 26
  this.context = context;                                                                                              // 27
  this.refs = emptyObject;                                                                                             // 28
  // We initialize the default updater but the real one gets injected by the                                           // 29
  // renderer.                                                                                                         // 30
  this.updater = updater || ReactNoopUpdateQueue;                                                                      // 31
}                                                                                                                      // 32
                                                                                                                       // 33
ReactComponent.prototype.isReactComponent = {};                                                                        // 34
                                                                                                                       // 35
/**                                                                                                                    // 36
 * Sets a subset of the state. Always use this to mutate                                                               // 37
 * state. You should treat `this.state` as immutable.                                                                  // 38
 *                                                                                                                     // 39
 * There is no guarantee that `this.state` will be immediately updated, so                                             // 40
 * accessing `this.state` after calling this method may return the old value.                                          // 41
 *                                                                                                                     // 42
 * There is no guarantee that calls to `setState` will run synchronously,                                              // 43
 * as they may eventually be batched together.  You can provide an optional                                            // 44
 * callback that will be executed when the call to setState is actually                                                // 45
 * completed.                                                                                                          // 46
 *                                                                                                                     // 47
 * When a function is provided to setState, it will be called at some point in                                         // 48
 * the future (not synchronously). It will be called with the up to date                                               // 49
 * component arguments (state, props, context). These values can be different                                          // 50
 * from this.* because your function may be called after receiveProps but before                                       // 51
 * shouldComponentUpdate, and this new state, props, and context will not yet be                                       // 52
 * assigned to this.                                                                                                   // 53
 *                                                                                                                     // 54
 * @param {object|function} partialState Next partial state or function to                                             // 55
 *        produce next partial state to be merged with current state.                                                  // 56
 * @param {?function} callback Called after state is updated.                                                          // 57
 * @final                                                                                                              // 58
 * @protected                                                                                                          // 59
 */                                                                                                                    // 60
ReactComponent.prototype.setState = function (partialState, callback) {                                                // 61
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);                                                                    // 63
  if (callback) {                                                                                                      // 64
    this.updater.enqueueCallback(this, callback, 'setState');                                                          // 65
  }                                                                                                                    // 66
};                                                                                                                     // 67
                                                                                                                       // 68
/**                                                                                                                    // 69
 * Forces an update. This should only be invoked when it is known with                                                 // 70
 * certainty that we are **not** in a DOM transaction.                                                                 // 71
 *                                                                                                                     // 72
 * You may want to call this when you know that some deeper aspect of the                                              // 73
 * component's state has changed but `setState` was not called.                                                        // 74
 *                                                                                                                     // 75
 * This will not invoke `shouldComponentUpdate`, but it will invoke                                                    // 76
 * `componentWillUpdate` and `componentDidUpdate`.                                                                     // 77
 *                                                                                                                     // 78
 * @param {?function} callback Called after update is complete.                                                        // 79
 * @final                                                                                                              // 80
 * @protected                                                                                                          // 81
 */                                                                                                                    // 82
ReactComponent.prototype.forceUpdate = function (callback) {                                                           // 83
  this.updater.enqueueForceUpdate(this);                                                                               // 84
  if (callback) {                                                                                                      // 85
    this.updater.enqueueCallback(this, callback, 'forceUpdate');                                                       // 86
  }                                                                                                                    // 87
};                                                                                                                     // 88
                                                                                                                       // 89
/**                                                                                                                    // 90
 * Deprecated APIs. These APIs used to exist on classic React classes but since                                        // 91
 * we would like to deprecate them, we're not going to move them over to this                                          // 92
 * modern base class. Instead, we define a getter that warns if it's accessed.                                         // 93
 */                                                                                                                    // 94
if (process.env.NODE_ENV !== 'production') {                                                                           // 95
  var deprecatedAPIs = {                                                                                               // 96
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };                                                                                                                   // 99
  var defineDeprecationWarning = function (methodName, info) {                                                         // 100
    if (canDefineProperty) {                                                                                           // 101
      Object.defineProperty(ReactComponent.prototype, methodName, {                                                    // 102
        get: function () {                                                                                             // 103
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
          return undefined;                                                                                            // 105
        }                                                                                                              // 106
      });                                                                                                              // 107
    }                                                                                                                  // 108
  };                                                                                                                   // 109
  for (var fnName in deprecatedAPIs) {                                                                                 // 110
    if (deprecatedAPIs.hasOwnProperty(fnName)) {                                                                       // 111
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);                                                        // 112
    }                                                                                                                  // 113
  }                                                                                                                    // 114
}                                                                                                                      // 115
                                                                                                                       // 116
module.exports = ReactComponent;                                                                                       // 117
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactNoopUpdateQueue.js":["fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/ReactNoopUpdateQueue.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2015-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var warning = require('fbjs/lib/warning');                                                                             // 13
                                                                                                                       // 14
function warnNoop(publicInstance, callerName) {                                                                        // 15
  if (process.env.NODE_ENV !== 'production') {                                                                         // 16
    var constructor = publicInstance.constructor;                                                                      // 17
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }                                                                                                                    // 19
}                                                                                                                      // 20
                                                                                                                       // 21
/**                                                                                                                    // 22
 * This is the abstract API for an update queue.                                                                       // 23
 */                                                                                                                    // 24
var ReactNoopUpdateQueue = {                                                                                           // 25
                                                                                                                       // 26
  /**                                                                                                                  // 27
   * Checks whether or not this composite component is mounted.                                                        // 28
   * @param {ReactClass} publicInstance The instance we want to test.                                                  // 29
   * @return {boolean} True if mounted, false otherwise.                                                               // 30
   * @protected                                                                                                        // 31
   * @final                                                                                                            // 32
   */                                                                                                                  // 33
  isMounted: function (publicInstance) {                                                                               // 34
    return false;                                                                                                      // 35
  },                                                                                                                   // 36
                                                                                                                       // 37
  /**                                                                                                                  // 38
   * Enqueue a callback that will be executed after all the pending updates                                            // 39
   * have processed.                                                                                                   // 40
   *                                                                                                                   // 41
   * @param {ReactClass} publicInstance The instance to use as `this` context.                                         // 42
   * @param {?function} callback Called after state is updated.                                                        // 43
   * @internal                                                                                                         // 44
   */                                                                                                                  // 45
  enqueueCallback: function (publicInstance, callback) {},                                                             // 46
                                                                                                                       // 47
  /**                                                                                                                  // 48
   * Forces an update. This should only be invoked when it is known with                                               // 49
   * certainty that we are **not** in a DOM transaction.                                                               // 50
   *                                                                                                                   // 51
   * You may want to call this when you know that some deeper aspect of the                                            // 52
   * component's state has changed but `setState` was not called.                                                      // 53
   *                                                                                                                   // 54
   * This will not invoke `shouldComponentUpdate`, but it will invoke                                                  // 55
   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 56
   *                                                                                                                   // 57
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 58
   * @internal                                                                                                         // 59
   */                                                                                                                  // 60
  enqueueForceUpdate: function (publicInstance) {                                                                      // 61
    warnNoop(publicInstance, 'forceUpdate');                                                                           // 62
  },                                                                                                                   // 63
                                                                                                                       // 64
  /**                                                                                                                  // 65
   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 66
   * You should treat `this.state` as immutable.                                                                       // 67
   *                                                                                                                   // 68
   * There is no guarantee that `this.state` will be immediately updated, so                                           // 69
   * accessing `this.state` after calling this method may return the old value.                                        // 70
   *                                                                                                                   // 71
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 72
   * @param {object} completeState Next state.                                                                         // 73
   * @internal                                                                                                         // 74
   */                                                                                                                  // 75
  enqueueReplaceState: function (publicInstance, completeState) {                                                      // 76
    warnNoop(publicInstance, 'replaceState');                                                                          // 77
  },                                                                                                                   // 78
                                                                                                                       // 79
  /**                                                                                                                  // 80
   * Sets a subset of the state. This only exists because _pendingState is                                             // 81
   * internal. This provides a merging strategy that is not available to deep                                          // 82
   * properties which is confusing. TODO: Expose pendingState or don't use it                                          // 83
   * during the merge.                                                                                                 // 84
   *                                                                                                                   // 85
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 86
   * @param {object} partialState Next partial state to be merged with state.                                          // 87
   * @internal                                                                                                         // 88
   */                                                                                                                  // 89
  enqueueSetState: function (publicInstance, partialState) {                                                           // 90
    warnNoop(publicInstance, 'setState');                                                                              // 91
  }                                                                                                                    // 92
};                                                                                                                     // 93
                                                                                                                       // 94
module.exports = ReactNoopUpdateQueue;                                                                                 // 95
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactPureComponent.js":["object-assign","./ReactComponent","./ReactNoopUpdateQueue","fbjs/lib/emptyObject",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/ReactPureComponent.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _assign = require('object-assign');                                                                                // 13
                                                                                                                       // 14
var ReactComponent = require('./ReactComponent');                                                                      // 15
var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');                                                          // 16
                                                                                                                       // 17
var emptyObject = require('fbjs/lib/emptyObject');                                                                     // 18
                                                                                                                       // 19
/**                                                                                                                    // 20
 * Base class helpers for the updating state of a component.                                                           // 21
 */                                                                                                                    // 22
function ReactPureComponent(props, context, updater) {                                                                 // 23
  // Duplicated from ReactComponent.                                                                                   // 24
  this.props = props;                                                                                                  // 25
  this.context = context;                                                                                              // 26
  this.refs = emptyObject;                                                                                             // 27
  // We initialize the default updater but the real one gets injected by the                                           // 28
  // renderer.                                                                                                         // 29
  this.updater = updater || ReactNoopUpdateQueue;                                                                      // 30
}                                                                                                                      // 31
                                                                                                                       // 32
function ComponentDummy() {}                                                                                           // 33
ComponentDummy.prototype = ReactComponent.prototype;                                                                   // 34
ReactPureComponent.prototype = new ComponentDummy();                                                                   // 35
ReactPureComponent.prototype.constructor = ReactPureComponent;                                                         // 36
// Avoid an extra prototype jump for these methods.                                                                    // 37
_assign(ReactPureComponent.prototype, ReactComponent.prototype);                                                       // 38
ReactPureComponent.prototype.isPureReactComponent = true;                                                              // 39
                                                                                                                       // 40
module.exports = ReactPureComponent;                                                                                   // 41
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactClass.js":["./reactProdInvariant","object-assign","./ReactComponent","./ReactElement","./ReactPropTypeLocationNames","./ReactNoopUpdateQueue","fbjs/lib/emptyObject","fbjs/lib/invariant","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/ReactClass.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant'),                                                                  // 13
    _assign = require('object-assign');                                                                                // 14
                                                                                                                       // 15
var ReactComponent = require('./ReactComponent');                                                                      // 16
var ReactElement = require('./ReactElement');                                                                          // 17
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                              // 18
var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');                                                          // 19
                                                                                                                       // 20
var emptyObject = require('fbjs/lib/emptyObject');                                                                     // 21
var invariant = require('fbjs/lib/invariant');                                                                         // 22
var warning = require('fbjs/lib/warning');                                                                             // 23
                                                                                                                       // 24
var MIXINS_KEY = 'mixins';                                                                                             // 25
                                                                                                                       // 26
// Helper function to allow the creation of anonymous functions which do not                                           // 27
// have .name set to the name of the variable being assigned to.                                                       // 28
function identity(fn) {                                                                                                // 29
  return fn;                                                                                                           // 30
}                                                                                                                      // 31
                                                                                                                       // 32
/**                                                                                                                    // 33
 * Policies that describe methods in `ReactClassInterface`.                                                            // 34
 */                                                                                                                    // 35
                                                                                                                       // 36
                                                                                                                       // 37
var injectedMixins = [];                                                                                               // 38
                                                                                                                       // 39
/**                                                                                                                    // 40
 * Composite components are higher-level components that compose other composite                                       // 41
 * or host components.                                                                                                 // 42
 *                                                                                                                     // 43
 * To create a new type of `ReactClass`, pass a specification of                                                       // 44
 * your new class to `React.createClass`. The only requirement of your class                                           // 45
 * specification is that you implement a `render` method.                                                              // 46
 *                                                                                                                     // 47
 *   var MyComponent = React.createClass({                                                                             // 48
 *     render: function() {                                                                                            // 49
 *       return <div>Hello World</div>;                                                                                // 50
 *     }                                                                                                               // 51
 *   });                                                                                                               // 52
 *                                                                                                                     // 53
 * The class specification supports a specific protocol of methods that have                                           // 54
 * special meaning (e.g. `render`). See `ReactClassInterface` for                                                      // 55
 * more the comprehensive protocol. Any other properties and methods in the                                            // 56
 * class specification will be available on the prototype.                                                             // 57
 *                                                                                                                     // 58
 * @interface ReactClassInterface                                                                                      // 59
 * @internal                                                                                                           // 60
 */                                                                                                                    // 61
var ReactClassInterface = {                                                                                            // 62
                                                                                                                       // 63
  /**                                                                                                                  // 64
   * An array of Mixin objects to include when defining your component.                                                // 65
   *                                                                                                                   // 66
   * @type {array}                                                                                                     // 67
   * @optional                                                                                                         // 68
   */                                                                                                                  // 69
  mixins: 'DEFINE_MANY',                                                                                               // 70
                                                                                                                       // 71
  /**                                                                                                                  // 72
   * An object containing properties and methods that should be defined on                                             // 73
   * the component's constructor instead of its prototype (static methods).                                            // 74
   *                                                                                                                   // 75
   * @type {object}                                                                                                    // 76
   * @optional                                                                                                         // 77
   */                                                                                                                  // 78
  statics: 'DEFINE_MANY',                                                                                              // 79
                                                                                                                       // 80
  /**                                                                                                                  // 81
   * Definition of prop types for this component.                                                                      // 82
   *                                                                                                                   // 83
   * @type {object}                                                                                                    // 84
   * @optional                                                                                                         // 85
   */                                                                                                                  // 86
  propTypes: 'DEFINE_MANY',                                                                                            // 87
                                                                                                                       // 88
  /**                                                                                                                  // 89
   * Definition of context types for this component.                                                                   // 90
   *                                                                                                                   // 91
   * @type {object}                                                                                                    // 92
   * @optional                                                                                                         // 93
   */                                                                                                                  // 94
  contextTypes: 'DEFINE_MANY',                                                                                         // 95
                                                                                                                       // 96
  /**                                                                                                                  // 97
   * Definition of context types this component sets for its children.                                                 // 98
   *                                                                                                                   // 99
   * @type {object}                                                                                                    // 100
   * @optional                                                                                                         // 101
   */                                                                                                                  // 102
  childContextTypes: 'DEFINE_MANY',                                                                                    // 103
                                                                                                                       // 104
  // ==== Definition methods ====                                                                                      // 105
                                                                                                                       // 106
  /**                                                                                                                  // 107
   * Invoked when the component is mounted. Values in the mapping will be set on                                       // 108
   * `this.props` if that prop is not specified (i.e. using an `in` check).                                            // 109
   *                                                                                                                   // 110
   * This method is invoked before `getInitialState` and therefore cannot rely                                         // 111
   * on `this.state` or use `this.setState`.                                                                           // 112
   *                                                                                                                   // 113
   * @return {object}                                                                                                  // 114
   * @optional                                                                                                         // 115
   */                                                                                                                  // 116
  getDefaultProps: 'DEFINE_MANY_MERGED',                                                                               // 117
                                                                                                                       // 118
  /**                                                                                                                  // 119
   * Invoked once before the component is mounted. The return value will be used                                       // 120
   * as the initial value of `this.state`.                                                                             // 121
   *                                                                                                                   // 122
   *   getInitialState: function() {                                                                                   // 123
   *     return {                                                                                                      // 124
   *       isOn: false,                                                                                                // 125
   *       fooBaz: new BazFoo()                                                                                        // 126
   *     }                                                                                                             // 127
   *   }                                                                                                               // 128
   *                                                                                                                   // 129
   * @return {object}                                                                                                  // 130
   * @optional                                                                                                         // 131
   */                                                                                                                  // 132
  getInitialState: 'DEFINE_MANY_MERGED',                                                                               // 133
                                                                                                                       // 134
  /**                                                                                                                  // 135
   * @return {object}                                                                                                  // 136
   * @optional                                                                                                         // 137
   */                                                                                                                  // 138
  getChildContext: 'DEFINE_MANY_MERGED',                                                                               // 139
                                                                                                                       // 140
  /**                                                                                                                  // 141
   * Uses props from `this.props` and state from `this.state` to render the                                            // 142
   * structure of the component.                                                                                       // 143
   *                                                                                                                   // 144
   * No guarantees are made about when or how often this method is invoked, so                                         // 145
   * it must not have side effects.                                                                                    // 146
   *                                                                                                                   // 147
   *   render: function() {                                                                                            // 148
   *     var name = this.props.name;                                                                                   // 149
   *     return <div>Hello, {name}!</div>;                                                                             // 150
   *   }                                                                                                               // 151
   *                                                                                                                   // 152
   * @return {ReactComponent}                                                                                          // 153
   * @nosideeffects                                                                                                    // 154
   * @required                                                                                                         // 155
   */                                                                                                                  // 156
  render: 'DEFINE_ONCE',                                                                                               // 157
                                                                                                                       // 158
  // ==== Delegate methods ====                                                                                        // 159
                                                                                                                       // 160
  /**                                                                                                                  // 161
   * Invoked when the component is initially created and about to be mounted.                                          // 162
   * This may have side effects, but any external subscriptions or data created                                        // 163
   * by this method must be cleaned up in `componentWillUnmount`.                                                      // 164
   *                                                                                                                   // 165
   * @optional                                                                                                         // 166
   */                                                                                                                  // 167
  componentWillMount: 'DEFINE_MANY',                                                                                   // 168
                                                                                                                       // 169
  /**                                                                                                                  // 170
   * Invoked when the component has been mounted and has a DOM representation.                                         // 171
   * However, there is no guarantee that the DOM node is in the document.                                              // 172
   *                                                                                                                   // 173
   * Use this as an opportunity to operate on the DOM when the component has                                           // 174
   * been mounted (initialized and rendered) for the first time.                                                       // 175
   *                                                                                                                   // 176
   * @param {DOMElement} rootNode DOM element representing the component.                                              // 177
   * @optional                                                                                                         // 178
   */                                                                                                                  // 179
  componentDidMount: 'DEFINE_MANY',                                                                                    // 180
                                                                                                                       // 181
  /**                                                                                                                  // 182
   * Invoked before the component receives new props.                                                                  // 183
   *                                                                                                                   // 184
   * Use this as an opportunity to react to a prop transition by updating the                                          // 185
   * state using `this.setState`. Current props are accessed via `this.props`.                                         // 186
   *                                                                                                                   // 187
   *   componentWillReceiveProps: function(nextProps, nextContext) {                                                   // 188
   *     this.setState({                                                                                               // 189
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount                                                 // 190
   *     });                                                                                                           // 191
   *   }                                                                                                               // 192
   *                                                                                                                   // 193
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop                                        // 194
   * transition may cause a state change, but the opposite is not true. If you                                         // 195
   * need it, you are probably looking for `componentWillUpdate`.                                                      // 196
   *                                                                                                                   // 197
   * @param {object} nextProps                                                                                         // 198
   * @optional                                                                                                         // 199
   */                                                                                                                  // 200
  componentWillReceiveProps: 'DEFINE_MANY',                                                                            // 201
                                                                                                                       // 202
  /**                                                                                                                  // 203
   * Invoked while deciding if the component should be updated as a result of                                          // 204
   * receiving new props, state and/or context.                                                                        // 205
   *                                                                                                                   // 206
   * Use this as an opportunity to `return false` when you're certain that the                                         // 207
   * transition to the new props/state/context will not require a component                                            // 208
   * update.                                                                                                           // 209
   *                                                                                                                   // 210
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {                                            // 211
   *     return !equal(nextProps, this.props) ||                                                                       // 212
   *       !equal(nextState, this.state) ||                                                                            // 213
   *       !equal(nextContext, this.context);                                                                          // 214
   *   }                                                                                                               // 215
   *                                                                                                                   // 216
   * @param {object} nextProps                                                                                         // 217
   * @param {?object} nextState                                                                                        // 218
   * @param {?object} nextContext                                                                                      // 219
   * @return {boolean} True if the component should update.                                                            // 220
   * @optional                                                                                                         // 221
   */                                                                                                                  // 222
  shouldComponentUpdate: 'DEFINE_ONCE',                                                                                // 223
                                                                                                                       // 224
  /**                                                                                                                  // 225
   * Invoked when the component is about to update due to a transition from                                            // 226
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`                                         // 227
   * and `nextContext`.                                                                                                // 228
   *                                                                                                                   // 229
   * Use this as an opportunity to perform preparation before an update occurs.                                        // 230
   *                                                                                                                   // 231
   * NOTE: You **cannot** use `this.setState()` in this method.                                                        // 232
   *                                                                                                                   // 233
   * @param {object} nextProps                                                                                         // 234
   * @param {?object} nextState                                                                                        // 235
   * @param {?object} nextContext                                                                                      // 236
   * @param {ReactReconcileTransaction} transaction                                                                    // 237
   * @optional                                                                                                         // 238
   */                                                                                                                  // 239
  componentWillUpdate: 'DEFINE_MANY',                                                                                  // 240
                                                                                                                       // 241
  /**                                                                                                                  // 242
   * Invoked when the component's DOM representation has been updated.                                                 // 243
   *                                                                                                                   // 244
   * Use this as an opportunity to operate on the DOM when the component has                                           // 245
   * been updated.                                                                                                     // 246
   *                                                                                                                   // 247
   * @param {object} prevProps                                                                                         // 248
   * @param {?object} prevState                                                                                        // 249
   * @param {?object} prevContext                                                                                      // 250
   * @param {DOMElement} rootNode DOM element representing the component.                                              // 251
   * @optional                                                                                                         // 252
   */                                                                                                                  // 253
  componentDidUpdate: 'DEFINE_MANY',                                                                                   // 254
                                                                                                                       // 255
  /**                                                                                                                  // 256
   * Invoked when the component is about to be removed from its parent and have                                        // 257
   * its DOM representation destroyed.                                                                                 // 258
   *                                                                                                                   // 259
   * Use this as an opportunity to deallocate any external resources.                                                  // 260
   *                                                                                                                   // 261
   * NOTE: There is no `componentDidUnmount` since your component will have been                                       // 262
   * destroyed by that point.                                                                                          // 263
   *                                                                                                                   // 264
   * @optional                                                                                                         // 265
   */                                                                                                                  // 266
  componentWillUnmount: 'DEFINE_MANY',                                                                                 // 267
                                                                                                                       // 268
  // ==== Advanced methods ====                                                                                        // 269
                                                                                                                       // 270
  /**                                                                                                                  // 271
   * Updates the component's currently mounted DOM representation.                                                     // 272
   *                                                                                                                   // 273
   * By default, this implements React's rendering and reconciliation algorithm.                                       // 274
   * Sophisticated clients may wish to override this.                                                                  // 275
   *                                                                                                                   // 276
   * @param {ReactReconcileTransaction} transaction                                                                    // 277
   * @internal                                                                                                         // 278
   * @overridable                                                                                                      // 279
   */                                                                                                                  // 280
  updateComponent: 'OVERRIDE_BASE'                                                                                     // 281
                                                                                                                       // 282
};                                                                                                                     // 283
                                                                                                                       // 284
/**                                                                                                                    // 285
 * Mapping from class specification keys to special processing functions.                                              // 286
 *                                                                                                                     // 287
 * Although these are declared like instance properties in the specification                                           // 288
 * when defining classes using `React.createClass`, they are actually static                                           // 289
 * and are accessible on the constructor instead of the prototype. Despite                                             // 290
 * being static, they must be defined outside of the "statics" key under                                               // 291
 * which all other static methods are defined.                                                                         // 292
 */                                                                                                                    // 293
var RESERVED_SPEC_KEYS = {                                                                                             // 294
  displayName: function (Constructor, displayName) {                                                                   // 295
    Constructor.displayName = displayName;                                                                             // 296
  },                                                                                                                   // 297
  mixins: function (Constructor, mixins) {                                                                             // 298
    if (mixins) {                                                                                                      // 299
      for (var i = 0; i < mixins.length; i++) {                                                                        // 300
        mixSpecIntoComponent(Constructor, mixins[i]);                                                                  // 301
      }                                                                                                                // 302
    }                                                                                                                  // 303
  },                                                                                                                   // 304
  childContextTypes: function (Constructor, childContextTypes) {                                                       // 305
    if (process.env.NODE_ENV !== 'production') {                                                                       // 306
      validateTypeDef(Constructor, childContextTypes, 'childContext');                                                 // 307
    }                                                                                                                  // 308
    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);                     // 309
  },                                                                                                                   // 310
  contextTypes: function (Constructor, contextTypes) {                                                                 // 311
    if (process.env.NODE_ENV !== 'production') {                                                                       // 312
      validateTypeDef(Constructor, contextTypes, 'context');                                                           // 313
    }                                                                                                                  // 314
    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);                                    // 315
  },                                                                                                                   // 316
  /**                                                                                                                  // 317
   * Special case getDefaultProps which should move into statics but requires                                          // 318
   * automatic merging.                                                                                                // 319
   */                                                                                                                  // 320
  getDefaultProps: function (Constructor, getDefaultProps) {                                                           // 321
    if (Constructor.getDefaultProps) {                                                                                 // 322
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);          // 323
    } else {                                                                                                           // 324
      Constructor.getDefaultProps = getDefaultProps;                                                                   // 325
    }                                                                                                                  // 326
  },                                                                                                                   // 327
  propTypes: function (Constructor, propTypes) {                                                                       // 328
    if (process.env.NODE_ENV !== 'production') {                                                                       // 329
      validateTypeDef(Constructor, propTypes, 'prop');                                                                 // 330
    }                                                                                                                  // 331
    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);                                             // 332
  },                                                                                                                   // 333
  statics: function (Constructor, statics) {                                                                           // 334
    mixStaticSpecIntoComponent(Constructor, statics);                                                                  // 335
  },                                                                                                                   // 336
  autobind: function () {} };                                                                                          // 337
                                                                                                                       // 338
function validateTypeDef(Constructor, typeDef, location) {                                                             // 339
  for (var propName in typeDef) {                                                                                      // 340
    if (typeDef.hasOwnProperty(propName)) {                                                                            // 341
      // use a warning instead of an invariant so components                                                           // 342
      // don't show up in prod but only in __DEV__                                                                     // 343
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
    }                                                                                                                  // 345
  }                                                                                                                    // 346
}                                                                                                                      // 347
                                                                                                                       // 348
function validateMethodOverride(isAlreadyDefined, name) {                                                              // 349
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;                        // 350
                                                                                                                       // 351
  // Disallow overriding of base class methods unless explicitly allowed.                                              // 352
  if (ReactClassMixin.hasOwnProperty(name)) {                                                                          // 353
    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
  }                                                                                                                    // 355
                                                                                                                       // 356
  // Disallow defining methods more than once unless explicitly allowed.                                               // 357
  if (isAlreadyDefined) {                                                                                              // 358
    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
  }                                                                                                                    // 360
}                                                                                                                      // 361
                                                                                                                       // 362
/**                                                                                                                    // 363
 * Mixin helper which handles policy validation and reserved                                                           // 364
 * specification keys when building React classes.                                                                     // 365
 */                                                                                                                    // 366
function mixSpecIntoComponent(Constructor, spec) {                                                                     // 367
  if (!spec) {                                                                                                         // 368
    if (process.env.NODE_ENV !== 'production') {                                                                       // 369
      var typeofSpec = typeof spec;                                                                                    // 370
      var isMixinValid = typeofSpec === 'object' && spec !== null;                                                     // 371
                                                                                                                       // 372
      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
    }                                                                                                                  // 374
                                                                                                                       // 375
    return;                                                                                                            // 376
  }                                                                                                                    // 377
                                                                                                                       // 378
  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;
                                                                                                                       // 381
  var proto = Constructor.prototype;                                                                                   // 382
  var autoBindPairs = proto.__reactAutoBindPairs;                                                                      // 383
                                                                                                                       // 384
  // By handling mixins before any other properties, we ensure the same                                                // 385
  // chaining order is applied to methods with DEFINE_MANY policy, whether                                             // 386
  // mixins are listed before or after these methods in the spec.                                                      // 387
  if (spec.hasOwnProperty(MIXINS_KEY)) {                                                                               // 388
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);                                                               // 389
  }                                                                                                                    // 390
                                                                                                                       // 391
  for (var name in spec) {                                                                                             // 392
    if (!spec.hasOwnProperty(name)) {                                                                                  // 393
      continue;                                                                                                        // 394
    }                                                                                                                  // 395
                                                                                                                       // 396
    if (name === MIXINS_KEY) {                                                                                         // 397
      // We have already handled mixins in a special case above.                                                       // 398
      continue;                                                                                                        // 399
    }                                                                                                                  // 400
                                                                                                                       // 401
    var property = spec[name];                                                                                         // 402
    var isAlreadyDefined = proto.hasOwnProperty(name);                                                                 // 403
    validateMethodOverride(isAlreadyDefined, name);                                                                    // 404
                                                                                                                       // 405
    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {                                                                     // 406
      RESERVED_SPEC_KEYS[name](Constructor, property);                                                                 // 407
    } else {                                                                                                           // 408
      // Setup methods on prototype:                                                                                   // 409
      // The following member methods should not be automatically bound:                                               // 410
      // 1. Expected ReactClass methods (in the "interface").                                                          // 411
      // 2. Overridden methods (that were mixed in).                                                                   // 412
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);                                               // 413
      var isFunction = typeof property === 'function';                                                                 // 414
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;          // 415
                                                                                                                       // 416
      if (shouldAutoBind) {                                                                                            // 417
        autoBindPairs.push(name, property);                                                                            // 418
        proto[name] = property;                                                                                        // 419
      } else {                                                                                                         // 420
        if (isAlreadyDefined) {                                                                                        // 421
          var specPolicy = ReactClassInterface[name];                                                                  // 422
                                                                                                                       // 423
          // These cases should already be caught by validateMethodOverride.                                           // 424
          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;
                                                                                                                       // 426
          // For methods which are defined more than once, call the existing                                           // 427
          // methods before calling the new property, merging if appropriate.                                          // 428
          if (specPolicy === 'DEFINE_MANY_MERGED') {                                                                   // 429
            proto[name] = createMergedResultFunction(proto[name], property);                                           // 430
          } else if (specPolicy === 'DEFINE_MANY') {                                                                   // 431
            proto[name] = createChainedFunction(proto[name], property);                                                // 432
          }                                                                                                            // 433
        } else {                                                                                                       // 434
          proto[name] = property;                                                                                      // 435
          if (process.env.NODE_ENV !== 'production') {                                                                 // 436
            // Add verbose displayName to the function, which helps when looking                                       // 437
            // at profiling tools.                                                                                     // 438
            if (typeof property === 'function' && spec.displayName) {                                                  // 439
              proto[name].displayName = spec.displayName + '_' + name;                                                 // 440
            }                                                                                                          // 441
          }                                                                                                            // 442
        }                                                                                                              // 443
      }                                                                                                                // 444
    }                                                                                                                  // 445
  }                                                                                                                    // 446
}                                                                                                                      // 447
                                                                                                                       // 448
function mixStaticSpecIntoComponent(Constructor, statics) {                                                            // 449
  if (!statics) {                                                                                                      // 450
    return;                                                                                                            // 451
  }                                                                                                                    // 452
  for (var name in statics) {                                                                                          // 453
    var property = statics[name];                                                                                      // 454
    if (!statics.hasOwnProperty(name)) {                                                                               // 455
      continue;                                                                                                        // 456
    }                                                                                                                  // 457
                                                                                                                       // 458
    var isReserved = name in RESERVED_SPEC_KEYS;                                                                       // 459
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;
                                                                                                                       // 461
    var isInherited = name in Constructor;                                                                             // 462
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
    Constructor[name] = property;                                                                                      // 464
  }                                                                                                                    // 465
}                                                                                                                      // 466
                                                                                                                       // 467
/**                                                                                                                    // 468
 * Merge two objects, but throw if both contain the same key.                                                          // 469
 *                                                                                                                     // 470
 * @param {object} one The first object, which is mutated.                                                             // 471
 * @param {object} two The second object                                                                               // 472
 * @return {object} one after it has been mutated to contain everything in two.                                        // 473
 */                                                                                                                    // 474
function mergeIntoWithNoDuplicateKeys(one, two) {                                                                      // 475
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;
                                                                                                                       // 477
  for (var key in two) {                                                                                               // 478
    if (two.hasOwnProperty(key)) {                                                                                     // 479
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
      one[key] = two[key];                                                                                             // 481
    }                                                                                                                  // 482
  }                                                                                                                    // 483
  return one;                                                                                                          // 484
}                                                                                                                      // 485
                                                                                                                       // 486
/**                                                                                                                    // 487
 * Creates a function that invokes two functions and merges their return values.                                       // 488
 *                                                                                                                     // 489
 * @param {function} one Function to invoke first.                                                                     // 490
 * @param {function} two Function to invoke second.                                                                    // 491
 * @return {function} Function that invokes the two argument functions.                                                // 492
 * @private                                                                                                            // 493
 */                                                                                                                    // 494
function createMergedResultFunction(one, two) {                                                                        // 495
  return function mergedResult() {                                                                                     // 496
    var a = one.apply(this, arguments);                                                                                // 497
    var b = two.apply(this, arguments);                                                                                // 498
    if (a == null) {                                                                                                   // 499
      return b;                                                                                                        // 500
    } else if (b == null) {                                                                                            // 501
      return a;                                                                                                        // 502
    }                                                                                                                  // 503
    var c = {};                                                                                                        // 504
    mergeIntoWithNoDuplicateKeys(c, a);                                                                                // 505
    mergeIntoWithNoDuplicateKeys(c, b);                                                                                // 506
    return c;                                                                                                          // 507
  };                                                                                                                   // 508
}                                                                                                                      // 509
                                                                                                                       // 510
/**                                                                                                                    // 511
 * Creates a function that invokes two functions and ignores their return vales.                                       // 512
 *                                                                                                                     // 513
 * @param {function} one Function to invoke first.                                                                     // 514
 * @param {function} two Function to invoke second.                                                                    // 515
 * @return {function} Function that invokes the two argument functions.                                                // 516
 * @private                                                                                                            // 517
 */                                                                                                                    // 518
function createChainedFunction(one, two) {                                                                             // 519
  return function chainedFunction() {                                                                                  // 520
    one.apply(this, arguments);                                                                                        // 521
    two.apply(this, arguments);                                                                                        // 522
  };                                                                                                                   // 523
}                                                                                                                      // 524
                                                                                                                       // 525
/**                                                                                                                    // 526
 * Binds a method to the component.                                                                                    // 527
 *                                                                                                                     // 528
 * @param {object} component Component whose method is going to be bound.                                              // 529
 * @param {function} method Method to be bound.                                                                        // 530
 * @return {function} The bound method.                                                                                // 531
 */                                                                                                                    // 532
function bindAutoBindMethod(component, method) {                                                                       // 533
  var boundMethod = method.bind(component);                                                                            // 534
  if (process.env.NODE_ENV !== 'production') {                                                                         // 535
    boundMethod.__reactBoundContext = component;                                                                       // 536
    boundMethod.__reactBoundMethod = method;                                                                           // 537
    boundMethod.__reactBoundArguments = null;                                                                          // 538
    var componentName = component.constructor.displayName;                                                             // 539
    var _bind = boundMethod.bind;                                                                                      // 540
    boundMethod.bind = function (newThis) {                                                                            // 541
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {        // 542
        args[_key - 1] = arguments[_key];                                                                              // 543
      }                                                                                                                // 544
                                                                                                                       // 545
      // User is trying to bind() an autobound method; we effectively will                                             // 546
      // ignore the value of "this" that the user is trying to use, so                                                 // 547
      // let's warn.                                                                                                   // 548
      if (newThis !== component && newThis !== null) {                                                                 // 549
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
      } else if (!args.length) {                                                                                       // 551
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
        return boundMethod;                                                                                            // 553
      }                                                                                                                // 554
      var reboundMethod = _bind.apply(boundMethod, arguments);                                                         // 555
      reboundMethod.__reactBoundContext = component;                                                                   // 556
      reboundMethod.__reactBoundMethod = method;                                                                       // 557
      reboundMethod.__reactBoundArguments = args;                                                                      // 558
      return reboundMethod;                                                                                            // 559
    };                                                                                                                 // 560
  }                                                                                                                    // 561
  return boundMethod;                                                                                                  // 562
}                                                                                                                      // 563
                                                                                                                       // 564
/**                                                                                                                    // 565
 * Binds all auto-bound methods in a component.                                                                        // 566
 *                                                                                                                     // 567
 * @param {object} component Component whose method is going to be bound.                                              // 568
 */                                                                                                                    // 569
function bindAutoBindMethods(component) {                                                                              // 570
  var pairs = component.__reactAutoBindPairs;                                                                          // 571
  for (var i = 0; i < pairs.length; i += 2) {                                                                          // 572
    var autoBindKey = pairs[i];                                                                                        // 573
    var method = pairs[i + 1];                                                                                         // 574
    component[autoBindKey] = bindAutoBindMethod(component, method);                                                    // 575
  }                                                                                                                    // 576
}                                                                                                                      // 577
                                                                                                                       // 578
/**                                                                                                                    // 579
 * Add more to the ReactClass base class. These are all legacy features and                                            // 580
 * therefore not already part of the modern ReactComponent.                                                            // 581
 */                                                                                                                    // 582
var ReactClassMixin = {                                                                                                // 583
                                                                                                                       // 584
  /**                                                                                                                  // 585
   * TODO: This will be deprecated because state should always keep a consistent                                       // 586
   * type signature and the only use case for this, is to avoid that.                                                  // 587
   */                                                                                                                  // 588
  replaceState: function (newState, callback) {                                                                        // 589
    this.updater.enqueueReplaceState(this, newState);                                                                  // 590
    if (callback) {                                                                                                    // 591
      this.updater.enqueueCallback(this, callback, 'replaceState');                                                    // 592
    }                                                                                                                  // 593
  },                                                                                                                   // 594
                                                                                                                       // 595
  /**                                                                                                                  // 596
   * Checks whether or not this composite component is mounted.                                                        // 597
   * @return {boolean} True if mounted, false otherwise.                                                               // 598
   * @protected                                                                                                        // 599
   * @final                                                                                                            // 600
   */                                                                                                                  // 601
  isMounted: function () {                                                                                             // 602
    return this.updater.isMounted(this);                                                                               // 603
  }                                                                                                                    // 604
};                                                                                                                     // 605
                                                                                                                       // 606
var ReactClassComponent = function () {};                                                                              // 607
_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);                                     // 608
                                                                                                                       // 609
/**                                                                                                                    // 610
 * Module for creating composite components.                                                                           // 611
 *                                                                                                                     // 612
 * @class ReactClass                                                                                                   // 613
 */                                                                                                                    // 614
var ReactClass = {                                                                                                     // 615
                                                                                                                       // 616
  /**                                                                                                                  // 617
   * Creates a composite component class given a class specification.                                                  // 618
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass                                    // 619
   *                                                                                                                   // 620
   * @param {object} spec Class specification (which must define `render`).                                            // 621
   * @return {function} Component constructor function.                                                                // 622
   * @public                                                                                                           // 623
   */                                                                                                                  // 624
  createClass: function (spec) {                                                                                       // 625
    // To keep our warnings more understandable, we'll use a little hack here to                                       // 626
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't                                        // 627
    // unnecessarily identify a class without displayName as 'Constructor'.                                            // 628
    var Constructor = identity(function (props, context, updater) {                                                    // 629
      // This constructor gets overridden by mocks. The argument is used                                               // 630
      // by mocks to assert on what gets mounted.                                                                      // 631
                                                                                                                       // 632
      if (process.env.NODE_ENV !== 'production') {                                                                     // 633
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
      }                                                                                                                // 635
                                                                                                                       // 636
      // Wire up auto-binding                                                                                          // 637
      if (this.__reactAutoBindPairs.length) {                                                                          // 638
        bindAutoBindMethods(this);                                                                                     // 639
      }                                                                                                                // 640
                                                                                                                       // 641
      this.props = props;                                                                                              // 642
      this.context = context;                                                                                          // 643
      this.refs = emptyObject;                                                                                         // 644
      this.updater = updater || ReactNoopUpdateQueue;                                                                  // 645
                                                                                                                       // 646
      this.state = null;                                                                                               // 647
                                                                                                                       // 648
      // ReactClasses doesn't have constructors. Instead, they use the                                                 // 649
      // getInitialState and componentWillMount methods for initialization.                                            // 650
                                                                                                                       // 651
      var initialState = this.getInitialState ? this.getInitialState() : null;                                         // 652
      if (process.env.NODE_ENV !== 'production') {                                                                     // 653
        // We allow auto-mocks to proceed as if they're returning null.                                                // 654
        if (initialState === undefined && this.getInitialState._isMockFunction) {                                      // 655
          // This is probably bad practice. Consider warning here and                                                  // 656
          // deprecating this convenience.                                                                             // 657
          initialState = null;                                                                                         // 658
        }                                                                                                              // 659
      }                                                                                                                // 660
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                                                                                                                       // 662
      this.state = initialState;                                                                                       // 663
    });                                                                                                                // 664
    Constructor.prototype = new ReactClassComponent();                                                                 // 665
    Constructor.prototype.constructor = Constructor;                                                                   // 666
    Constructor.prototype.__reactAutoBindPairs = [];                                                                   // 667
                                                                                                                       // 668
    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));                                              // 669
                                                                                                                       // 670
    mixSpecIntoComponent(Constructor, spec);                                                                           // 671
                                                                                                                       // 672
    // Initialize the defaultProps property after all mixins have been merged.                                         // 673
    if (Constructor.getDefaultProps) {                                                                                 // 674
      Constructor.defaultProps = Constructor.getDefaultProps();                                                        // 675
    }                                                                                                                  // 676
                                                                                                                       // 677
    if (process.env.NODE_ENV !== 'production') {                                                                       // 678
      // This is a tag to indicate that the use of these method names is ok,                                           // 679
      // since it's used with createClass. If it's not, then it's likely a                                             // 680
      // mistake so we'll warn you to use the static property, property                                                // 681
      // initializer or constructor respectively.                                                                      // 682
      if (Constructor.getDefaultProps) {                                                                               // 683
        Constructor.getDefaultProps.isReactClassApproved = {};                                                         // 684
      }                                                                                                                // 685
      if (Constructor.prototype.getInitialState) {                                                                     // 686
        Constructor.prototype.getInitialState.isReactClassApproved = {};                                               // 687
      }                                                                                                                // 688
    }                                                                                                                  // 689
                                                                                                                       // 690
    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;
                                                                                                                       // 692
    if (process.env.NODE_ENV !== 'production') {                                                                       // 693
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
    }                                                                                                                  // 696
                                                                                                                       // 697
    // Reduce time spent doing lookups by setting these on the prototype.                                              // 698
    for (var methodName in ReactClassInterface) {                                                                      // 699
      if (!Constructor.prototype[methodName]) {                                                                        // 700
        Constructor.prototype[methodName] = null;                                                                      // 701
      }                                                                                                                // 702
    }                                                                                                                  // 703
                                                                                                                       // 704
    return Constructor;                                                                                                // 705
  },                                                                                                                   // 706
                                                                                                                       // 707
  injection: {                                                                                                         // 708
    injectMixin: function (mixin) {                                                                                    // 709
      injectedMixins.push(mixin);                                                                                      // 710
    }                                                                                                                  // 711
  }                                                                                                                    // 712
                                                                                                                       // 713
};                                                                                                                     // 714
                                                                                                                       // 715
module.exports = ReactClass;                                                                                           // 716
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactPropTypeLocationNames.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/ReactPropTypeLocationNames.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var ReactPropTypeLocationNames = {};                                                                                   // 14
                                                                                                                       // 15
if (process.env.NODE_ENV !== 'production') {                                                                           // 16
  ReactPropTypeLocationNames = {                                                                                       // 17
    prop: 'prop',                                                                                                      // 18
    context: 'context',                                                                                                // 19
    childContext: 'child context'                                                                                      // 20
  };                                                                                                                   // 21
}                                                                                                                      // 22
                                                                                                                       // 23
module.exports = ReactPropTypeLocationNames;                                                                           // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ReactDOMFactories.js":["./ReactElement","./ReactElementValidator",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/ReactDOMFactories.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ReactElement = require('./ReactElement');                                                                          // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * Create a factory that creates HTML tag elements.                                                                    // 16
 *                                                                                                                     // 17
 * @private                                                                                                            // 18
 */                                                                                                                    // 19
var createDOMFactory = ReactElement.createFactory;                                                                     // 20
if (process.env.NODE_ENV !== 'production') {                                                                           // 21
  var ReactElementValidator = require('./ReactElementValidator');                                                      // 22
  createDOMFactory = ReactElementValidator.createFactory;                                                              // 23
}                                                                                                                      // 24
                                                                                                                       // 25
/**                                                                                                                    // 26
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.                                          // 27
 * This is also accessible via `React.DOM`.                                                                            // 28
 *                                                                                                                     // 29
 * @public                                                                                                             // 30
 */                                                                                                                    // 31
var ReactDOMFactories = {                                                                                              // 32
  a: createDOMFactory('a'),                                                                                            // 33
  abbr: createDOMFactory('abbr'),                                                                                      // 34
  address: createDOMFactory('address'),                                                                                // 35
  area: createDOMFactory('area'),                                                                                      // 36
  article: createDOMFactory('article'),                                                                                // 37
  aside: createDOMFactory('aside'),                                                                                    // 38
  audio: createDOMFactory('audio'),                                                                                    // 39
  b: createDOMFactory('b'),                                                                                            // 40
  base: createDOMFactory('base'),                                                                                      // 41
  bdi: createDOMFactory('bdi'),                                                                                        // 42
  bdo: createDOMFactory('bdo'),                                                                                        // 43
  big: createDOMFactory('big'),                                                                                        // 44
  blockquote: createDOMFactory('blockquote'),                                                                          // 45
  body: createDOMFactory('body'),                                                                                      // 46
  br: createDOMFactory('br'),                                                                                          // 47
  button: createDOMFactory('button'),                                                                                  // 48
  canvas: createDOMFactory('canvas'),                                                                                  // 49
  caption: createDOMFactory('caption'),                                                                                // 50
  cite: createDOMFactory('cite'),                                                                                      // 51
  code: createDOMFactory('code'),                                                                                      // 52
  col: createDOMFactory('col'),                                                                                        // 53
  colgroup: createDOMFactory('colgroup'),                                                                              // 54
  data: createDOMFactory('data'),                                                                                      // 55
  datalist: createDOMFactory('datalist'),                                                                              // 56
  dd: createDOMFactory('dd'),                                                                                          // 57
  del: createDOMFactory('del'),                                                                                        // 58
  details: createDOMFactory('details'),                                                                                // 59
  dfn: createDOMFactory('dfn'),                                                                                        // 60
  dialog: createDOMFactory('dialog'),                                                                                  // 61
  div: createDOMFactory('div'),                                                                                        // 62
  dl: createDOMFactory('dl'),                                                                                          // 63
  dt: createDOMFactory('dt'),                                                                                          // 64
  em: createDOMFactory('em'),                                                                                          // 65
  embed: createDOMFactory('embed'),                                                                                    // 66
  fieldset: createDOMFactory('fieldset'),                                                                              // 67
  figcaption: createDOMFactory('figcaption'),                                                                          // 68
  figure: createDOMFactory('figure'),                                                                                  // 69
  footer: createDOMFactory('footer'),                                                                                  // 70
  form: createDOMFactory('form'),                                                                                      // 71
  h1: createDOMFactory('h1'),                                                                                          // 72
  h2: createDOMFactory('h2'),                                                                                          // 73
  h3: createDOMFactory('h3'),                                                                                          // 74
  h4: createDOMFactory('h4'),                                                                                          // 75
  h5: createDOMFactory('h5'),                                                                                          // 76
  h6: createDOMFactory('h6'),                                                                                          // 77
  head: createDOMFactory('head'),                                                                                      // 78
  header: createDOMFactory('header'),                                                                                  // 79
  hgroup: createDOMFactory('hgroup'),                                                                                  // 80
  hr: createDOMFactory('hr'),                                                                                          // 81
  html: createDOMFactory('html'),                                                                                      // 82
  i: createDOMFactory('i'),                                                                                            // 83
  iframe: createDOMFactory('iframe'),                                                                                  // 84
  img: createDOMFactory('img'),                                                                                        // 85
  input: createDOMFactory('input'),                                                                                    // 86
  ins: createDOMFactory('ins'),                                                                                        // 87
  kbd: createDOMFactory('kbd'),                                                                                        // 88
  keygen: createDOMFactory('keygen'),                                                                                  // 89
  label: createDOMFactory('label'),                                                                                    // 90
  legend: createDOMFactory('legend'),                                                                                  // 91
  li: createDOMFactory('li'),                                                                                          // 92
  link: createDOMFactory('link'),                                                                                      // 93
  main: createDOMFactory('main'),                                                                                      // 94
  map: createDOMFactory('map'),                                                                                        // 95
  mark: createDOMFactory('mark'),                                                                                      // 96
  menu: createDOMFactory('menu'),                                                                                      // 97
  menuitem: createDOMFactory('menuitem'),                                                                              // 98
  meta: createDOMFactory('meta'),                                                                                      // 99
  meter: createDOMFactory('meter'),                                                                                    // 100
  nav: createDOMFactory('nav'),                                                                                        // 101
  noscript: createDOMFactory('noscript'),                                                                              // 102
  object: createDOMFactory('object'),                                                                                  // 103
  ol: createDOMFactory('ol'),                                                                                          // 104
  optgroup: createDOMFactory('optgroup'),                                                                              // 105
  option: createDOMFactory('option'),                                                                                  // 106
  output: createDOMFactory('output'),                                                                                  // 107
  p: createDOMFactory('p'),                                                                                            // 108
  param: createDOMFactory('param'),                                                                                    // 109
  picture: createDOMFactory('picture'),                                                                                // 110
  pre: createDOMFactory('pre'),                                                                                        // 111
  progress: createDOMFactory('progress'),                                                                              // 112
  q: createDOMFactory('q'),                                                                                            // 113
  rp: createDOMFactory('rp'),                                                                                          // 114
  rt: createDOMFactory('rt'),                                                                                          // 115
  ruby: createDOMFactory('ruby'),                                                                                      // 116
  s: createDOMFactory('s'),                                                                                            // 117
  samp: createDOMFactory('samp'),                                                                                      // 118
  script: createDOMFactory('script'),                                                                                  // 119
  section: createDOMFactory('section'),                                                                                // 120
  select: createDOMFactory('select'),                                                                                  // 121
  small: createDOMFactory('small'),                                                                                    // 122
  source: createDOMFactory('source'),                                                                                  // 123
  span: createDOMFactory('span'),                                                                                      // 124
  strong: createDOMFactory('strong'),                                                                                  // 125
  style: createDOMFactory('style'),                                                                                    // 126
  sub: createDOMFactory('sub'),                                                                                        // 127
  summary: createDOMFactory('summary'),                                                                                // 128
  sup: createDOMFactory('sup'),                                                                                        // 129
  table: createDOMFactory('table'),                                                                                    // 130
  tbody: createDOMFactory('tbody'),                                                                                    // 131
  td: createDOMFactory('td'),                                                                                          // 132
  textarea: createDOMFactory('textarea'),                                                                              // 133
  tfoot: createDOMFactory('tfoot'),                                                                                    // 134
  th: createDOMFactory('th'),                                                                                          // 135
  thead: createDOMFactory('thead'),                                                                                    // 136
  time: createDOMFactory('time'),                                                                                      // 137
  title: createDOMFactory('title'),                                                                                    // 138
  tr: createDOMFactory('tr'),                                                                                          // 139
  track: createDOMFactory('track'),                                                                                    // 140
  u: createDOMFactory('u'),                                                                                            // 141
  ul: createDOMFactory('ul'),                                                                                          // 142
  'var': createDOMFactory('var'),                                                                                      // 143
  video: createDOMFactory('video'),                                                                                    // 144
  wbr: createDOMFactory('wbr'),                                                                                        // 145
                                                                                                                       // 146
  // SVG                                                                                                               // 147
  circle: createDOMFactory('circle'),                                                                                  // 148
  clipPath: createDOMFactory('clipPath'),                                                                              // 149
  defs: createDOMFactory('defs'),                                                                                      // 150
  ellipse: createDOMFactory('ellipse'),                                                                                // 151
  g: createDOMFactory('g'),                                                                                            // 152
  image: createDOMFactory('image'),                                                                                    // 153
  line: createDOMFactory('line'),                                                                                      // 154
  linearGradient: createDOMFactory('linearGradient'),                                                                  // 155
  mask: createDOMFactory('mask'),                                                                                      // 156
  path: createDOMFactory('path'),                                                                                      // 157
  pattern: createDOMFactory('pattern'),                                                                                // 158
  polygon: createDOMFactory('polygon'),                                                                                // 159
  polyline: createDOMFactory('polyline'),                                                                              // 160
  radialGradient: createDOMFactory('radialGradient'),                                                                  // 161
  rect: createDOMFactory('rect'),                                                                                      // 162
  stop: createDOMFactory('stop'),                                                                                      // 163
  svg: createDOMFactory('svg'),                                                                                        // 164
  text: createDOMFactory('text'),                                                                                      // 165
  tspan: createDOMFactory('tspan')                                                                                     // 166
};                                                                                                                     // 167
                                                                                                                       // 168
module.exports = ReactDOMFactories;                                                                                    // 169
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactElementValidator.js":["./ReactCurrentOwner","./ReactComponentTreeHook","./ReactElement","./checkReactTypeSpec","./canDefineProperty","./getIteratorFn","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/ReactElementValidator.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2014-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
/**                                                                                                                    // 11
 * ReactElementValidator provides a wrapper around a element factory                                                   // 12
 * which validates the props passed to the element. This is intended to be                                             // 13
 * used only in DEV and could be replaced by a static type checker for languages                                       // 14
 * that support it.                                                                                                    // 15
 */                                                                                                                    // 16
                                                                                                                       // 17
'use strict';                                                                                                          // 18
                                                                                                                       // 19
var ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 20
var ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                      // 21
var ReactElement = require('./ReactElement');                                                                          // 22
                                                                                                                       // 23
var checkReactTypeSpec = require('./checkReactTypeSpec');                                                              // 24
                                                                                                                       // 25
var canDefineProperty = require('./canDefineProperty');                                                                // 26
var getIteratorFn = require('./getIteratorFn');                                                                        // 27
var warning = require('fbjs/lib/warning');                                                                             // 28
                                                                                                                       // 29
function getDeclarationErrorAddendum() {                                                                               // 30
  if (ReactCurrentOwner.current) {                                                                                     // 31
    var name = ReactCurrentOwner.current.getName();                                                                    // 32
    if (name) {                                                                                                        // 33
      return ' Check the render method of `' + name + '`.';                                                            // 34
    }                                                                                                                  // 35
  }                                                                                                                    // 36
  return '';                                                                                                           // 37
}                                                                                                                      // 38
                                                                                                                       // 39
/**                                                                                                                    // 40
 * Warn if there's no key explicitly set on dynamic arrays of children or                                              // 41
 * object keys are not valid. This allows us to keep track of children between                                         // 42
 * updates.                                                                                                            // 43
 */                                                                                                                    // 44
var ownerHasKeyUseWarning = {};                                                                                        // 45
                                                                                                                       // 46
function getCurrentComponentErrorInfo(parentType) {                                                                    // 47
  var info = getDeclarationErrorAddendum();                                                                            // 48
                                                                                                                       // 49
  if (!info) {                                                                                                         // 50
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;          // 51
    if (parentName) {                                                                                                  // 52
      info = ' Check the top-level render call using <' + parentName + '>.';                                           // 53
    }                                                                                                                  // 54
  }                                                                                                                    // 55
  return info;                                                                                                         // 56
}                                                                                                                      // 57
                                                                                                                       // 58
/**                                                                                                                    // 59
 * Warn if the element doesn't have an explicit key assigned to it.                                                    // 60
 * This element is in an array. The array could grow and shrink or be                                                  // 61
 * reordered. All children that haven't already been validated are required to                                         // 62
 * have a "key" property assigned to it. Error statuses are cached so a warning                                        // 63
 * will only be shown once.                                                                                            // 64
 *                                                                                                                     // 65
 * @internal                                                                                                           // 66
 * @param {ReactElement} element Element that requires a key.                                                          // 67
 * @param {*} parentType element's parent's type.                                                                      // 68
 */                                                                                                                    // 69
function validateExplicitKey(element, parentType) {                                                                    // 70
  if (!element._store || element._store.validated || element.key != null) {                                            // 71
    return;                                                                                                            // 72
  }                                                                                                                    // 73
  element._store.validated = true;                                                                                     // 74
                                                                                                                       // 75
  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});                            // 76
                                                                                                                       // 77
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);                                            // 78
  if (memoizer[currentComponentErrorInfo]) {                                                                           // 79
    return;                                                                                                            // 80
  }                                                                                                                    // 81
  memoizer[currentComponentErrorInfo] = true;                                                                          // 82
                                                                                                                       // 83
  // Usually the current owner is the offender, but if it accepts children as a                                        // 84
  // property, it may be the creator of the child that's responsible for                                               // 85
  // assigning it a key.                                                                                               // 86
  var childOwner = '';                                                                                                 // 87
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {                                     // 88
    // Give the component that originally created this child.                                                          // 89
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';                                      // 90
  }                                                                                                                    // 91
                                                                                                                       // 92
  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}                                                                                                                      // 94
                                                                                                                       // 95
/**                                                                                                                    // 96
 * Ensure that every element either is passed in a static location, in an                                              // 97
 * array with an explicit keys property defined, or in an object literal                                               // 98
 * with valid key property.                                                                                            // 99
 *                                                                                                                     // 100
 * @internal                                                                                                           // 101
 * @param {ReactNode} node Statically passed child of any type.                                                        // 102
 * @param {*} parentType node's parent's type.                                                                         // 103
 */                                                                                                                    // 104
function validateChildKeys(node, parentType) {                                                                         // 105
  if (typeof node !== 'object') {                                                                                      // 106
    return;                                                                                                            // 107
  }                                                                                                                    // 108
  if (Array.isArray(node)) {                                                                                           // 109
    for (var i = 0; i < node.length; i++) {                                                                            // 110
      var child = node[i];                                                                                             // 111
      if (ReactElement.isValidElement(child)) {                                                                        // 112
        validateExplicitKey(child, parentType);                                                                        // 113
      }                                                                                                                // 114
    }                                                                                                                  // 115
  } else if (ReactElement.isValidElement(node)) {                                                                      // 116
    // This element was passed in a valid location.                                                                    // 117
    if (node._store) {                                                                                                 // 118
      node._store.validated = true;                                                                                    // 119
    }                                                                                                                  // 120
  } else if (node) {                                                                                                   // 121
    var iteratorFn = getIteratorFn(node);                                                                              // 122
    // Entry iterators provide implicit keys.                                                                          // 123
    if (iteratorFn) {                                                                                                  // 124
      if (iteratorFn !== node.entries) {                                                                               // 125
        var iterator = iteratorFn.call(node);                                                                          // 126
        var step;                                                                                                      // 127
        while (!(step = iterator.next()).done) {                                                                       // 128
          if (ReactElement.isValidElement(step.value)) {                                                               // 129
            validateExplicitKey(step.value, parentType);                                                               // 130
          }                                                                                                            // 131
        }                                                                                                              // 132
      }                                                                                                                // 133
    }                                                                                                                  // 134
  }                                                                                                                    // 135
}                                                                                                                      // 136
                                                                                                                       // 137
/**                                                                                                                    // 138
 * Given an element, validate that its props follow the propTypes definition,                                          // 139
 * provided by the type.                                                                                               // 140
 *                                                                                                                     // 141
 * @param {ReactElement} element                                                                                       // 142
 */                                                                                                                    // 143
function validatePropTypes(element) {                                                                                  // 144
  var componentClass = element.type;                                                                                   // 145
  if (typeof componentClass !== 'function') {                                                                          // 146
    return;                                                                                                            // 147
  }                                                                                                                    // 148
  var name = componentClass.displayName || componentClass.name;                                                        // 149
  if (componentClass.propTypes) {                                                                                      // 150
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);                          // 151
  }                                                                                                                    // 152
  if (typeof componentClass.getDefaultProps === 'function') {                                                          // 153
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }                                                                                                                    // 155
}                                                                                                                      // 156
                                                                                                                       // 157
var ReactElementValidator = {                                                                                          // 158
                                                                                                                       // 159
  createElement: function (type, props, children) {                                                                    // 160
    var validType = typeof type === 'string' || typeof type === 'function';                                            // 161
    // We warn in this case but don't throw. We expect the element creation to                                         // 162
    // succeed and there will likely be errors in render.                                                              // 163
    if (!validType) {                                                                                                  // 164
      if (typeof type !== 'function' && typeof type !== 'string') {                                                    // 165
        var info = '';                                                                                                 // 166
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {       // 167
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';                  // 168
        }                                                                                                              // 169
        info += getDeclarationErrorAddendum();                                                                         // 170
        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
      }                                                                                                                // 172
    }                                                                                                                  // 173
                                                                                                                       // 174
    var element = ReactElement.createElement.apply(this, arguments);                                                   // 175
                                                                                                                       // 176
    // The result can be nullish if a mock or a custom function is used.                                               // 177
    // TODO: Drop this when these are no longer allowed as the type argument.                                          // 178
    if (element == null) {                                                                                             // 179
      return element;                                                                                                  // 180
    }                                                                                                                  // 181
                                                                                                                       // 182
    // Skip key warning if the type isn't valid since our key validation logic                                         // 183
    // doesn't expect a non-string/function type and can throw confusing errors.                                       // 184
    // We don't want exception behavior to differ between dev and prod.                                                // 185
    // (Rendering will throw with a helpful message and as soon as the type is                                         // 186
    // fixed, the key warnings will appear.)                                                                           // 187
    if (validType) {                                                                                                   // 188
      for (var i = 2; i < arguments.length; i++) {                                                                     // 189
        validateChildKeys(arguments[i], type);                                                                         // 190
      }                                                                                                                // 191
    }                                                                                                                  // 192
                                                                                                                       // 193
    validatePropTypes(element);                                                                                        // 194
                                                                                                                       // 195
    return element;                                                                                                    // 196
  },                                                                                                                   // 197
                                                                                                                       // 198
  createFactory: function (type) {                                                                                     // 199
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);                                       // 200
    // Legacy hook TODO: Warn if this is accessed                                                                      // 201
    validatedFactory.type = type;                                                                                      // 202
                                                                                                                       // 203
    if (process.env.NODE_ENV !== 'production') {                                                                       // 204
      if (canDefineProperty) {                                                                                         // 205
        Object.defineProperty(validatedFactory, 'type', {                                                              // 206
          enumerable: false,                                                                                           // 207
          get: function () {                                                                                           // 208
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
            Object.defineProperty(this, 'type', {                                                                      // 210
              value: type                                                                                              // 211
            });                                                                                                        // 212
            return type;                                                                                               // 213
          }                                                                                                            // 214
        });                                                                                                            // 215
      }                                                                                                                // 216
    }                                                                                                                  // 217
                                                                                                                       // 218
    return validatedFactory;                                                                                           // 219
  },                                                                                                                   // 220
                                                                                                                       // 221
  cloneElement: function (element, props, children) {                                                                  // 222
    var newElement = ReactElement.cloneElement.apply(this, arguments);                                                 // 223
    for (var i = 2; i < arguments.length; i++) {                                                                       // 224
      validateChildKeys(arguments[i], newElement.type);                                                                // 225
    }                                                                                                                  // 226
    validatePropTypes(newElement);                                                                                     // 227
    return newElement;                                                                                                 // 228
  }                                                                                                                    // 229
                                                                                                                       // 230
};                                                                                                                     // 231
                                                                                                                       // 232
module.exports = ReactElementValidator;                                                                                // 233
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactComponentTreeHook.js":["./reactProdInvariant","./ReactCurrentOwner","fbjs/lib/invariant","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/ReactComponentTreeHook.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2016-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var _prodInvariant = require('./reactProdInvariant');                                                                  // 14
                                                                                                                       // 15
var ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 16
                                                                                                                       // 17
var invariant = require('fbjs/lib/invariant');                                                                         // 18
var warning = require('fbjs/lib/warning');                                                                             // 19
                                                                                                                       // 20
function isNative(fn) {                                                                                                // 21
  // Based on isNative() from Lodash                                                                                   // 22
  var funcToString = Function.prototype.toString;                                                                      // 23
  var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                // 24
  var reIsNative = RegExp('^' + funcToString                                                                           // 25
  // Take an example native function source for comparison                                                             // 26
  .call(hasOwnProperty)                                                                                                // 27
  // Strip regex characters so we can use it for regex                                                                 // 28
  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')                                                                              // 29
  // Remove hasOwnProperty from the template to make it generic                                                        // 30
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');                                  // 31
  try {                                                                                                                // 32
    var source = funcToString.call(fn);                                                                                // 33
    return reIsNative.test(source);                                                                                    // 34
  } catch (err) {                                                                                                      // 35
    return false;                                                                                                      // 36
  }                                                                                                                    // 37
}                                                                                                                      // 38
                                                                                                                       // 39
var canUseCollections =                                                                                                // 40
// Array.from                                                                                                          // 41
typeof Array.from === 'function' &&                                                                                    // 42
// Map                                                                                                                 // 43
typeof Map === 'function' && isNative(Map) &&                                                                          // 44
// Map.prototype.keys                                                                                                  // 45
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&                   // 46
// Set                                                                                                                 // 47
typeof Set === 'function' && isNative(Set) &&                                                                          // 48
// Set.prototype.keys                                                                                                  // 49
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);                     // 50
                                                                                                                       // 51
var setItem;                                                                                                           // 52
var getItem;                                                                                                           // 53
var removeItem;                                                                                                        // 54
var getItemIDs;                                                                                                        // 55
var addRoot;                                                                                                           // 56
var removeRoot;                                                                                                        // 57
var getRootIDs;                                                                                                        // 58
                                                                                                                       // 59
if (canUseCollections) {                                                                                               // 60
  var itemMap = new Map();                                                                                             // 61
  var rootIDSet = new Set();                                                                                           // 62
                                                                                                                       // 63
  setItem = function (id, item) {                                                                                      // 64
    itemMap.set(id, item);                                                                                             // 65
  };                                                                                                                   // 66
  getItem = function (id) {                                                                                            // 67
    return itemMap.get(id);                                                                                            // 68
  };                                                                                                                   // 69
  removeItem = function (id) {                                                                                         // 70
    itemMap['delete'](id);                                                                                             // 71
  };                                                                                                                   // 72
  getItemIDs = function () {                                                                                           // 73
    return Array.from(itemMap.keys());                                                                                 // 74
  };                                                                                                                   // 75
                                                                                                                       // 76
  addRoot = function (id) {                                                                                            // 77
    rootIDSet.add(id);                                                                                                 // 78
  };                                                                                                                   // 79
  removeRoot = function (id) {                                                                                         // 80
    rootIDSet['delete'](id);                                                                                           // 81
  };                                                                                                                   // 82
  getRootIDs = function () {                                                                                           // 83
    return Array.from(rootIDSet.keys());                                                                               // 84
  };                                                                                                                   // 85
} else {                                                                                                               // 86
  var itemByKey = {};                                                                                                  // 87
  var rootByKey = {};                                                                                                  // 88
                                                                                                                       // 89
  // Use non-numeric keys to prevent V8 performance issues:                                                            // 90
  // https://github.com/facebook/react/pull/7232                                                                       // 91
  var getKeyFromID = function (id) {                                                                                   // 92
    return '.' + id;                                                                                                   // 93
  };                                                                                                                   // 94
  var getIDFromKey = function (key) {                                                                                  // 95
    return parseInt(key.substr(1), 10);                                                                                // 96
  };                                                                                                                   // 97
                                                                                                                       // 98
  setItem = function (id, item) {                                                                                      // 99
    var key = getKeyFromID(id);                                                                                        // 100
    itemByKey[key] = item;                                                                                             // 101
  };                                                                                                                   // 102
  getItem = function (id) {                                                                                            // 103
    var key = getKeyFromID(id);                                                                                        // 104
    return itemByKey[key];                                                                                             // 105
  };                                                                                                                   // 106
  removeItem = function (id) {                                                                                         // 107
    var key = getKeyFromID(id);                                                                                        // 108
    delete itemByKey[key];                                                                                             // 109
  };                                                                                                                   // 110
  getItemIDs = function () {                                                                                           // 111
    return Object.keys(itemByKey).map(getIDFromKey);                                                                   // 112
  };                                                                                                                   // 113
                                                                                                                       // 114
  addRoot = function (id) {                                                                                            // 115
    var key = getKeyFromID(id);                                                                                        // 116
    rootByKey[key] = true;                                                                                             // 117
  };                                                                                                                   // 118
  removeRoot = function (id) {                                                                                         // 119
    var key = getKeyFromID(id);                                                                                        // 120
    delete rootByKey[key];                                                                                             // 121
  };                                                                                                                   // 122
  getRootIDs = function () {                                                                                           // 123
    return Object.keys(rootByKey).map(getIDFromKey);                                                                   // 124
  };                                                                                                                   // 125
}                                                                                                                      // 126
                                                                                                                       // 127
var unmountedIDs = [];                                                                                                 // 128
                                                                                                                       // 129
function purgeDeep(id) {                                                                                               // 130
  var item = getItem(id);                                                                                              // 131
  if (item) {                                                                                                          // 132
    var childIDs = item.childIDs;                                                                                      // 133
                                                                                                                       // 134
    removeItem(id);                                                                                                    // 135
    childIDs.forEach(purgeDeep);                                                                                       // 136
  }                                                                                                                    // 137
}                                                                                                                      // 138
                                                                                                                       // 139
function describeComponentFrame(name, source, ownerName) {                                                             // 140
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}                                                                                                                      // 142
                                                                                                                       // 143
function getDisplayName(element) {                                                                                     // 144
  if (element == null) {                                                                                               // 145
    return '#empty';                                                                                                   // 146
  } else if (typeof element === 'string' || typeof element === 'number') {                                             // 147
    return '#text';                                                                                                    // 148
  } else if (typeof element.type === 'string') {                                                                       // 149
    return element.type;                                                                                               // 150
  } else {                                                                                                             // 151
    return element.type.displayName || element.type.name || 'Unknown';                                                 // 152
  }                                                                                                                    // 153
}                                                                                                                      // 154
                                                                                                                       // 155
function describeID(id) {                                                                                              // 156
  var name = ReactComponentTreeHook.getDisplayName(id);                                                                // 157
  var element = ReactComponentTreeHook.getElement(id);                                                                 // 158
  var ownerID = ReactComponentTreeHook.getOwnerID(id);                                                                 // 159
  var ownerName;                                                                                                       // 160
  if (ownerID) {                                                                                                       // 161
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);                                                        // 162
  }                                                                                                                    // 163
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);                                          // 165
}                                                                                                                      // 166
                                                                                                                       // 167
var ReactComponentTreeHook = {                                                                                         // 168
  onSetChildren: function (id, nextChildIDs) {                                                                         // 169
    var item = getItem(id);                                                                                            // 170
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;                                                                                      // 172
                                                                                                                       // 173
    for (var i = 0; i < nextChildIDs.length; i++) {                                                                    // 174
      var nextChildID = nextChildIDs[i];                                                                               // 175
      var nextChild = getItem(nextChildID);                                                                            // 176
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {                                                                                // 180
        nextChild.parentID = id;                                                                                       // 181
        // TODO: This shouldn't be necessary but mounting a new root during in                                         // 182
        // componentWillMount currently causes not-yet-mounted components to                                           // 183
        // be purged from our tree data so their parent id is missing.                                                 // 184
      }                                                                                                                // 185
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }                                                                                                                  // 187
  },                                                                                                                   // 188
  onBeforeMountComponent: function (id, element, parentID) {                                                           // 189
    var item = {                                                                                                       // 190
      element: element,                                                                                                // 191
      parentID: parentID,                                                                                              // 192
      text: null,                                                                                                      // 193
      childIDs: [],                                                                                                    // 194
      isMounted: false,                                                                                                // 195
      updateCount: 0                                                                                                   // 196
    };                                                                                                                 // 197
    setItem(id, item);                                                                                                 // 198
  },                                                                                                                   // 199
  onBeforeUpdateComponent: function (id, element) {                                                                    // 200
    var item = getItem(id);                                                                                            // 201
    if (!item || !item.isMounted) {                                                                                    // 202
      // We may end up here as a result of setState() in componentWillUnmount().                                       // 203
      // In this case, ignore the element.                                                                             // 204
      return;                                                                                                          // 205
    }                                                                                                                  // 206
    item.element = element;                                                                                            // 207
  },                                                                                                                   // 208
  onMountComponent: function (id) {                                                                                    // 209
    var item = getItem(id);                                                                                            // 210
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;                                                                                             // 212
    var isRoot = item.parentID === 0;                                                                                  // 213
    if (isRoot) {                                                                                                      // 214
      addRoot(id);                                                                                                     // 215
    }                                                                                                                  // 216
  },                                                                                                                   // 217
  onUpdateComponent: function (id) {                                                                                   // 218
    var item = getItem(id);                                                                                            // 219
    if (!item || !item.isMounted) {                                                                                    // 220
      // We may end up here as a result of setState() in componentWillUnmount().                                       // 221
      // In this case, ignore the element.                                                                             // 222
      return;                                                                                                          // 223
    }                                                                                                                  // 224
    item.updateCount++;                                                                                                // 225
  },                                                                                                                   // 226
  onUnmountComponent: function (id) {                                                                                  // 227
    var item = getItem(id);                                                                                            // 228
    if (item) {                                                                                                        // 229
      // We need to check if it exists.                                                                                // 230
      // `item` might not exist if it is inside an error boundary, and a sibling                                       // 231
      // error boundary child threw while mounting. Then this instance never                                           // 232
      // got a chance to mount, but it still gets an unmounting event during                                           // 233
      // the error boundary cleanup.                                                                                   // 234
      item.isMounted = false;                                                                                          // 235
      var isRoot = item.parentID === 0;                                                                                // 236
      if (isRoot) {                                                                                                    // 237
        removeRoot(id);                                                                                                // 238
      }                                                                                                                // 239
    }                                                                                                                  // 240
    unmountedIDs.push(id);                                                                                             // 241
  },                                                                                                                   // 242
  purgeUnmountedComponents: function () {                                                                              // 243
    if (ReactComponentTreeHook._preventPurging) {                                                                      // 244
      // Should only be used for testing.                                                                              // 245
      return;                                                                                                          // 246
    }                                                                                                                  // 247
                                                                                                                       // 248
    for (var i = 0; i < unmountedIDs.length; i++) {                                                                    // 249
      var id = unmountedIDs[i];                                                                                        // 250
      purgeDeep(id);                                                                                                   // 251
    }                                                                                                                  // 252
    unmountedIDs.length = 0;                                                                                           // 253
  },                                                                                                                   // 254
  isMounted: function (id) {                                                                                           // 255
    var item = getItem(id);                                                                                            // 256
    return item ? item.isMounted : false;                                                                              // 257
  },                                                                                                                   // 258
  getCurrentStackAddendum: function (topElement) {                                                                     // 259
    var info = '';                                                                                                     // 260
    if (topElement) {                                                                                                  // 261
      var name = getDisplayName(topElement);                                                                           // 262
      var owner = topElement._owner;                                                                                   // 263
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());                              // 264
    }                                                                                                                  // 265
                                                                                                                       // 266
    var currentOwner = ReactCurrentOwner.current;                                                                      // 267
    var id = currentOwner && currentOwner._debugID;                                                                    // 268
                                                                                                                       // 269
    info += ReactComponentTreeHook.getStackAddendumByID(id);                                                           // 270
    return info;                                                                                                       // 271
  },                                                                                                                   // 272
  getStackAddendumByID: function (id) {                                                                                // 273
    var info = '';                                                                                                     // 274
    while (id) {                                                                                                       // 275
      info += describeID(id);                                                                                          // 276
      id = ReactComponentTreeHook.getParentID(id);                                                                     // 277
    }                                                                                                                  // 278
    return info;                                                                                                       // 279
  },                                                                                                                   // 280
  getChildIDs: function (id) {                                                                                         // 281
    var item = getItem(id);                                                                                            // 282
    return item ? item.childIDs : [];                                                                                  // 283
  },                                                                                                                   // 284
  getDisplayName: function (id) {                                                                                      // 285
    var element = ReactComponentTreeHook.getElement(id);                                                               // 286
    if (!element) {                                                                                                    // 287
      return null;                                                                                                     // 288
    }                                                                                                                  // 289
    return getDisplayName(element);                                                                                    // 290
  },                                                                                                                   // 291
  getElement: function (id) {                                                                                          // 292
    var item = getItem(id);                                                                                            // 293
    return item ? item.element : null;                                                                                 // 294
  },                                                                                                                   // 295
  getOwnerID: function (id) {                                                                                          // 296
    var element = ReactComponentTreeHook.getElement(id);                                                               // 297
    if (!element || !element._owner) {                                                                                 // 298
      return null;                                                                                                     // 299
    }                                                                                                                  // 300
    return element._owner._debugID;                                                                                    // 301
  },                                                                                                                   // 302
  getParentID: function (id) {                                                                                         // 303
    var item = getItem(id);                                                                                            // 304
    return item ? item.parentID : null;                                                                                // 305
  },                                                                                                                   // 306
  getSource: function (id) {                                                                                           // 307
    var item = getItem(id);                                                                                            // 308
    var element = item ? item.element : null;                                                                          // 309
    var source = element != null ? element._source : null;                                                             // 310
    return source;                                                                                                     // 311
  },                                                                                                                   // 312
  getText: function (id) {                                                                                             // 313
    var element = ReactComponentTreeHook.getElement(id);                                                               // 314
    if (typeof element === 'string') {                                                                                 // 315
      return element;                                                                                                  // 316
    } else if (typeof element === 'number') {                                                                          // 317
      return '' + element;                                                                                             // 318
    } else {                                                                                                           // 319
      return null;                                                                                                     // 320
    }                                                                                                                  // 321
  },                                                                                                                   // 322
  getUpdateCount: function (id) {                                                                                      // 323
    var item = getItem(id);                                                                                            // 324
    return item ? item.updateCount : 0;                                                                                // 325
  },                                                                                                                   // 326
                                                                                                                       // 327
                                                                                                                       // 328
  getRootIDs: getRootIDs,                                                                                              // 329
  getRegisteredIDs: getItemIDs                                                                                         // 330
};                                                                                                                     // 331
                                                                                                                       // 332
module.exports = ReactComponentTreeHook;                                                                               // 333
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"checkReactTypeSpec.js":["./reactProdInvariant","./ReactPropTypeLocationNames","./ReactPropTypesSecret","fbjs/lib/invariant","fbjs/lib/warning","./ReactComponentTreeHook",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/checkReactTypeSpec.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                              // 15
var ReactPropTypesSecret = require('./ReactPropTypesSecret');                                                          // 16
                                                                                                                       // 17
var invariant = require('fbjs/lib/invariant');                                                                         // 18
var warning = require('fbjs/lib/warning');                                                                             // 19
                                                                                                                       // 20
var ReactComponentTreeHook;                                                                                            // 21
                                                                                                                       // 22
if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {                                // 23
  // Temporary hack.                                                                                                   // 24
  // Inline requires don't work well with Jest:                                                                        // 25
  // https://github.com/facebook/react/issues/7240                                                                     // 26
  // Remove the inline requires when we don't need them anymore:                                                       // 27
  // https://github.com/facebook/react/pull/7178                                                                       // 28
  ReactComponentTreeHook = require('./ReactComponentTreeHook');                                                        // 29
}                                                                                                                      // 30
                                                                                                                       // 31
var loggedTypeFailures = {};                                                                                           // 32
                                                                                                                       // 33
/**                                                                                                                    // 34
 * Assert that the values match with the type specs.                                                                   // 35
 * Error messages are memorized and will only be shown once.                                                           // 36
 *                                                                                                                     // 37
 * @param {object} typeSpecs Map of name to a ReactPropType                                                            // 38
 * @param {object} values Runtime values that need to be type-checked                                                  // 39
 * @param {string} location e.g. "prop", "context", "child context"                                                    // 40
 * @param {string} componentName Name of the component for error messages.                                             // 41
 * @param {?object} element The React element that is being type-checked                                               // 42
 * @param {?number} debugID The React component instance that is being type-checked                                    // 43
 * @private                                                                                                            // 44
 */                                                                                                                    // 45
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {                            // 46
  for (var typeSpecName in typeSpecs) {                                                                                // 47
    if (typeSpecs.hasOwnProperty(typeSpecName)) {                                                                      // 48
      var error;                                                                                                       // 49
      // Prop type validation may throw. In case they do, we don't want to                                             // 50
      // fail the render phase where it didn't fail before. So we log it.                                              // 51
      // After these have been cleaned up, we'll let them throw.                                                       // 52
      try {                                                                                                            // 53
        // This is intentionally an invariant that gets caught. It's the same                                          // 54
        // behavior as without this statement except with a better message.                                            // 55
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);    // 57
      } catch (ex) {                                                                                                   // 58
        error = ex;                                                                                                    // 59
      }                                                                                                                // 60
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                          // 62
        // Only monitor this failure once because there tends to be a lot of the                                       // 63
        // same error.                                                                                                 // 64
        loggedTypeFailures[error.message] = true;                                                                      // 65
                                                                                                                       // 66
        var componentStackInfo = '';                                                                                   // 67
                                                                                                                       // 68
        if (process.env.NODE_ENV !== 'production') {                                                                   // 69
          if (!ReactComponentTreeHook) {                                                                               // 70
            ReactComponentTreeHook = require('./ReactComponentTreeHook');                                              // 71
          }                                                                                                            // 72
          if (debugID !== null) {                                                                                      // 73
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);                                 // 74
          } else if (element !== null) {                                                                               // 75
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);                              // 76
          }                                                                                                            // 77
        }                                                                                                              // 78
                                                                                                                       // 79
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }                                                                                                                // 81
    }                                                                                                                  // 82
  }                                                                                                                    // 83
}                                                                                                                      // 84
                                                                                                                       // 85
module.exports = checkReactTypeSpec;                                                                                   // 86
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactPropTypesSecret.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/ReactPropTypesSecret.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';                                             // 14
                                                                                                                       // 15
module.exports = ReactPropTypesSecret;                                                                                 // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ReactPropTypes.js":["./ReactElement","./ReactPropTypeLocationNames","./ReactPropTypesSecret","fbjs/lib/emptyFunction","./getIteratorFn","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/ReactPropTypes.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ReactElement = require('./ReactElement');                                                                          // 13
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                              // 14
var ReactPropTypesSecret = require('./ReactPropTypesSecret');                                                          // 15
                                                                                                                       // 16
var emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 17
var getIteratorFn = require('./getIteratorFn');                                                                        // 18
var warning = require('fbjs/lib/warning');                                                                             // 19
                                                                                                                       // 20
/**                                                                                                                    // 21
 * Collection of methods that allow declaration and validation of props that are                                       // 22
 * supplied to React components. Example usage:                                                                        // 23
 *                                                                                                                     // 24
 *   var Props = require('ReactPropTypes');                                                                            // 25
 *   var MyArticle = React.createClass({                                                                               // 26
 *     propTypes: {                                                                                                    // 27
 *       // An optional string prop named "description".                                                               // 28
 *       description: Props.string,                                                                                    // 29
 *                                                                                                                     // 30
 *       // A required enum prop named "category".                                                                     // 31
 *       category: Props.oneOf(['News','Photos']).isRequired,                                                          // 32
 *                                                                                                                     // 33
 *       // A prop named "dialog" that requires an instance of Dialog.                                                 // 34
 *       dialog: Props.instanceOf(Dialog).isRequired                                                                   // 35
 *     },                                                                                                              // 36
 *     render: function() { ... }                                                                                      // 37
 *   });                                                                                                               // 38
 *                                                                                                                     // 39
 * A more formal specification of how these methods are used:                                                          // 40
 *                                                                                                                     // 41
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)                                         // 42
 *   decl := ReactPropTypes.{type}(.isRequired)?                                                                       // 43
 *                                                                                                                     // 44
 * Each and every declaration produces a function with the same signature. This                                        // 45
 * allows the creation of custom validation functions. For example:                                                    // 46
 *                                                                                                                     // 47
 *  var MyLink = React.createClass({                                                                                   // 48
 *    propTypes: {                                                                                                     // 49
 *      // An optional string or URI prop named "href".                                                                // 50
 *      href: function(props, propName, componentName) {                                                               // 51
 *        var propValue = props[propName];                                                                             // 52
 *        if (propValue != null && typeof propValue !== 'string' &&                                                    // 53
 *            !(propValue instanceof URI)) {                                                                           // 54
 *          return new Error(                                                                                          // 55
 *            'Expected a string or an URI for ' + propName + ' in ' +                                                 // 56
 *            componentName                                                                                            // 57
 *          );                                                                                                         // 58
 *        }                                                                                                            // 59
 *      }                                                                                                              // 60
 *    },                                                                                                               // 61
 *    render: function() {...}                                                                                         // 62
 *  });                                                                                                                // 63
 *                                                                                                                     // 64
 * @internal                                                                                                           // 65
 */                                                                                                                    // 66
                                                                                                                       // 67
var ANONYMOUS = '<<anonymous>>';                                                                                       // 68
                                                                                                                       // 69
var ReactPropTypes = {                                                                                                 // 70
  array: createPrimitiveTypeChecker('array'),                                                                          // 71
  bool: createPrimitiveTypeChecker('boolean'),                                                                         // 72
  func: createPrimitiveTypeChecker('function'),                                                                        // 73
  number: createPrimitiveTypeChecker('number'),                                                                        // 74
  object: createPrimitiveTypeChecker('object'),                                                                        // 75
  string: createPrimitiveTypeChecker('string'),                                                                        // 76
  symbol: createPrimitiveTypeChecker('symbol'),                                                                        // 77
                                                                                                                       // 78
  any: createAnyTypeChecker(),                                                                                         // 79
  arrayOf: createArrayOfTypeChecker,                                                                                   // 80
  element: createElementTypeChecker(),                                                                                 // 81
  instanceOf: createInstanceTypeChecker,                                                                               // 82
  node: createNodeChecker(),                                                                                           // 83
  objectOf: createObjectOfTypeChecker,                                                                                 // 84
  oneOf: createEnumTypeChecker,                                                                                        // 85
  oneOfType: createUnionTypeChecker,                                                                                   // 86
  shape: createShapeTypeChecker                                                                                        // 87
};                                                                                                                     // 88
                                                                                                                       // 89
/**                                                                                                                    // 90
 * inlined Object.is polyfill to avoid requiring consumers ship their own                                              // 91
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is                          // 92
 */                                                                                                                    // 93
/*eslint-disable no-self-compare*/                                                                                     // 94
function is(x, y) {                                                                                                    // 95
  // SameValue algorithm                                                                                               // 96
  if (x === y) {                                                                                                       // 97
    // Steps 1-5, 7-10                                                                                                 // 98
    // Steps 6.b-6.e: +0 != -0                                                                                         // 99
    return x !== 0 || 1 / x === 1 / y;                                                                                 // 100
  } else {                                                                                                             // 101
    // Step 6.a: NaN == NaN                                                                                            // 102
    return x !== x && y !== y;                                                                                         // 103
  }                                                                                                                    // 104
}                                                                                                                      // 105
/*eslint-enable no-self-compare*/                                                                                      // 106
                                                                                                                       // 107
/**                                                                                                                    // 108
 * We use an Error-like object for backward compatibility as people may call                                           // 109
 * PropTypes directly and inspect their output. However we don't use real                                              // 110
 * Errors anymore. We don't inspect their stack anyway, and creating them                                              // 111
 * is prohibitively expensive if they are created too often, such as what                                              // 112
 * happens in oneOfType() for any type before the one that matched.                                                    // 113
 */                                                                                                                    // 114
function PropTypeError(message) {                                                                                      // 115
  this.message = message;                                                                                              // 116
  this.stack = '';                                                                                                     // 117
}                                                                                                                      // 118
// Make `instanceof Error` still work for returned errors.                                                             // 119
PropTypeError.prototype = Error.prototype;                                                                             // 120
                                                                                                                       // 121
function createChainableTypeChecker(validate) {                                                                        // 122
  if (process.env.NODE_ENV !== 'production') {                                                                         // 123
    var manualPropTypeCallCache = {};                                                                                  // 124
  }                                                                                                                    // 125
  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {                     // 126
    componentName = componentName || ANONYMOUS;                                                                        // 127
    propFullName = propFullName || propName;                                                                           // 128
    if (process.env.NODE_ENV !== 'production') {                                                                       // 129
      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {                                         // 130
        var cacheKey = componentName + ':' + propName;                                                                 // 131
        if (!manualPropTypeCallCache[cacheKey]) {                                                                      // 132
          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
          manualPropTypeCallCache[cacheKey] = true;                                                                    // 134
        }                                                                                                              // 135
      }                                                                                                                // 136
    }                                                                                                                  // 137
    if (props[propName] == null) {                                                                                     // 138
      var locationName = ReactPropTypeLocationNames[location];                                                         // 139
      if (isRequired) {                                                                                                // 140
        if (props[propName] === null) {                                                                                // 141
          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
        }                                                                                                              // 143
        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
      }                                                                                                                // 145
      return null;                                                                                                     // 146
    } else {                                                                                                           // 147
      return validate(props, propName, componentName, location, propFullName);                                         // 148
    }                                                                                                                  // 149
  }                                                                                                                    // 150
                                                                                                                       // 151
  var chainedCheckType = checkType.bind(null, false);                                                                  // 152
  chainedCheckType.isRequired = checkType.bind(null, true);                                                            // 153
                                                                                                                       // 154
  return chainedCheckType;                                                                                             // 155
}                                                                                                                      // 156
                                                                                                                       // 157
function createPrimitiveTypeChecker(expectedType) {                                                                    // 158
  function validate(props, propName, componentName, location, propFullName, secret) {                                  // 159
    var propValue = props[propName];                                                                                   // 160
    var propType = getPropType(propValue);                                                                             // 161
    if (propType !== expectedType) {                                                                                   // 162
      var locationName = ReactPropTypeLocationNames[location];                                                         // 163
      // `propValue` being instance of, say, date/regexp, pass the 'object'                                            // 164
      // check, but we can offer a more precise error message here rather than                                         // 165
      // 'of type `object`'.                                                                                           // 166
      var preciseType = getPreciseType(propValue);                                                                     // 167
                                                                                                                       // 168
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    }                                                                                                                  // 170
    return null;                                                                                                       // 171
  }                                                                                                                    // 172
  return createChainableTypeChecker(validate);                                                                         // 173
}                                                                                                                      // 174
                                                                                                                       // 175
function createAnyTypeChecker() {                                                                                      // 176
  return createChainableTypeChecker(emptyFunction.thatReturns(null));                                                  // 177
}                                                                                                                      // 178
                                                                                                                       // 179
function createArrayOfTypeChecker(typeChecker) {                                                                       // 180
  function validate(props, propName, componentName, location, propFullName) {                                          // 181
    if (typeof typeChecker !== 'function') {                                                                           // 182
      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
    }                                                                                                                  // 184
    var propValue = props[propName];                                                                                   // 185
    if (!Array.isArray(propValue)) {                                                                                   // 186
      var locationName = ReactPropTypeLocationNames[location];                                                         // 187
      var propType = getPropType(propValue);                                                                           // 188
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    }                                                                                                                  // 190
    for (var i = 0; i < propValue.length; i++) {                                                                       // 191
      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
      if (error instanceof Error) {                                                                                    // 193
        return error;                                                                                                  // 194
      }                                                                                                                // 195
    }                                                                                                                  // 196
    return null;                                                                                                       // 197
  }                                                                                                                    // 198
  return createChainableTypeChecker(validate);                                                                         // 199
}                                                                                                                      // 200
                                                                                                                       // 201
function createElementTypeChecker() {                                                                                  // 202
  function validate(props, propName, componentName, location, propFullName) {                                          // 203
    var propValue = props[propName];                                                                                   // 204
    if (!ReactElement.isValidElement(propValue)) {                                                                     // 205
      var locationName = ReactPropTypeLocationNames[location];                                                         // 206
      var propType = getPropType(propValue);                                                                           // 207
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
    }                                                                                                                  // 209
    return null;                                                                                                       // 210
  }                                                                                                                    // 211
  return createChainableTypeChecker(validate);                                                                         // 212
}                                                                                                                      // 213
                                                                                                                       // 214
function createInstanceTypeChecker(expectedClass) {                                                                    // 215
  function validate(props, propName, componentName, location, propFullName) {                                          // 216
    if (!(props[propName] instanceof expectedClass)) {                                                                 // 217
      var locationName = ReactPropTypeLocationNames[location];                                                         // 218
      var expectedClassName = expectedClass.name || ANONYMOUS;                                                         // 219
      var actualClassName = getClassName(props[propName]);                                                             // 220
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    }                                                                                                                  // 222
    return null;                                                                                                       // 223
  }                                                                                                                    // 224
  return createChainableTypeChecker(validate);                                                                         // 225
}                                                                                                                      // 226
                                                                                                                       // 227
function createEnumTypeChecker(expectedValues) {                                                                       // 228
  if (!Array.isArray(expectedValues)) {                                                                                // 229
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
    return emptyFunction.thatReturnsNull;                                                                              // 231
  }                                                                                                                    // 232
                                                                                                                       // 233
  function validate(props, propName, componentName, location, propFullName) {                                          // 234
    var propValue = props[propName];                                                                                   // 235
    for (var i = 0; i < expectedValues.length; i++) {                                                                  // 236
      if (is(propValue, expectedValues[i])) {                                                                          // 237
        return null;                                                                                                   // 238
      }                                                                                                                // 239
    }                                                                                                                  // 240
                                                                                                                       // 241
    var locationName = ReactPropTypeLocationNames[location];                                                           // 242
    var valuesString = JSON.stringify(expectedValues);                                                                 // 243
    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
  }                                                                                                                    // 245
  return createChainableTypeChecker(validate);                                                                         // 246
}                                                                                                                      // 247
                                                                                                                       // 248
function createObjectOfTypeChecker(typeChecker) {                                                                      // 249
  function validate(props, propName, componentName, location, propFullName) {                                          // 250
    if (typeof typeChecker !== 'function') {                                                                           // 251
      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
    }                                                                                                                  // 253
    var propValue = props[propName];                                                                                   // 254
    var propType = getPropType(propValue);                                                                             // 255
    if (propType !== 'object') {                                                                                       // 256
      var locationName = ReactPropTypeLocationNames[location];                                                         // 257
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    }                                                                                                                  // 259
    for (var key in propValue) {                                                                                       // 260
      if (propValue.hasOwnProperty(key)) {                                                                             // 261
        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error instanceof Error) {                                                                                  // 263
          return error;                                                                                                // 264
        }                                                                                                              // 265
      }                                                                                                                // 266
    }                                                                                                                  // 267
    return null;                                                                                                       // 268
  }                                                                                                                    // 269
  return createChainableTypeChecker(validate);                                                                         // 270
}                                                                                                                      // 271
                                                                                                                       // 272
function createUnionTypeChecker(arrayOfTypeCheckers) {                                                                 // 273
  if (!Array.isArray(arrayOfTypeCheckers)) {                                                                           // 274
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
    return emptyFunction.thatReturnsNull;                                                                              // 276
  }                                                                                                                    // 277
                                                                                                                       // 278
  function validate(props, propName, componentName, location, propFullName) {                                          // 279
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {                                                             // 280
      var checker = arrayOfTypeCheckers[i];                                                                            // 281
      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {             // 282
        return null;                                                                                                   // 283
      }                                                                                                                // 284
    }                                                                                                                  // 285
                                                                                                                       // 286
    var locationName = ReactPropTypeLocationNames[location];                                                           // 287
    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
  }                                                                                                                    // 289
  return createChainableTypeChecker(validate);                                                                         // 290
}                                                                                                                      // 291
                                                                                                                       // 292
function createNodeChecker() {                                                                                         // 293
  function validate(props, propName, componentName, location, propFullName) {                                          // 294
    if (!isNode(props[propName])) {                                                                                    // 295
      var locationName = ReactPropTypeLocationNames[location];                                                         // 296
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    }                                                                                                                  // 298
    return null;                                                                                                       // 299
  }                                                                                                                    // 300
  return createChainableTypeChecker(validate);                                                                         // 301
}                                                                                                                      // 302
                                                                                                                       // 303
function createShapeTypeChecker(shapeTypes) {                                                                          // 304
  function validate(props, propName, componentName, location, propFullName) {                                          // 305
    var propValue = props[propName];                                                                                   // 306
    var propType = getPropType(propValue);                                                                             // 307
    if (propType !== 'object') {                                                                                       // 308
      var locationName = ReactPropTypeLocationNames[location];                                                         // 309
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }                                                                                                                  // 311
    for (var key in shapeTypes) {                                                                                      // 312
      var checker = shapeTypes[key];                                                                                   // 313
      if (!checker) {                                                                                                  // 314
        continue;                                                                                                      // 315
      }                                                                                                                // 316
      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);    // 317
      if (error) {                                                                                                     // 318
        return error;                                                                                                  // 319
      }                                                                                                                // 320
    }                                                                                                                  // 321
    return null;                                                                                                       // 322
  }                                                                                                                    // 323
  return createChainableTypeChecker(validate);                                                                         // 324
}                                                                                                                      // 325
                                                                                                                       // 326
function isNode(propValue) {                                                                                           // 327
  switch (typeof propValue) {                                                                                          // 328
    case 'number':                                                                                                     // 329
    case 'string':                                                                                                     // 330
    case 'undefined':                                                                                                  // 331
      return true;                                                                                                     // 332
    case 'boolean':                                                                                                    // 333
      return !propValue;                                                                                               // 334
    case 'object':                                                                                                     // 335
      if (Array.isArray(propValue)) {                                                                                  // 336
        return propValue.every(isNode);                                                                                // 337
      }                                                                                                                // 338
      if (propValue === null || ReactElement.isValidElement(propValue)) {                                              // 339
        return true;                                                                                                   // 340
      }                                                                                                                // 341
                                                                                                                       // 342
      var iteratorFn = getIteratorFn(propValue);                                                                       // 343
      if (iteratorFn) {                                                                                                // 344
        var iterator = iteratorFn.call(propValue);                                                                     // 345
        var step;                                                                                                      // 346
        if (iteratorFn !== propValue.entries) {                                                                        // 347
          while (!(step = iterator.next()).done) {                                                                     // 348
            if (!isNode(step.value)) {                                                                                 // 349
              return false;                                                                                            // 350
            }                                                                                                          // 351
          }                                                                                                            // 352
        } else {                                                                                                       // 353
          // Iterator will provide entry [k,v] tuples rather than values.                                              // 354
          while (!(step = iterator.next()).done) {                                                                     // 355
            var entry = step.value;                                                                                    // 356
            if (entry) {                                                                                               // 357
              if (!isNode(entry[1])) {                                                                                 // 358
                return false;                                                                                          // 359
              }                                                                                                        // 360
            }                                                                                                          // 361
          }                                                                                                            // 362
        }                                                                                                              // 363
      } else {                                                                                                         // 364
        return false;                                                                                                  // 365
      }                                                                                                                // 366
                                                                                                                       // 367
      return true;                                                                                                     // 368
    default:                                                                                                           // 369
      return false;                                                                                                    // 370
  }                                                                                                                    // 371
}                                                                                                                      // 372
                                                                                                                       // 373
function isSymbol(propType, propValue) {                                                                               // 374
  // Native Symbol.                                                                                                    // 375
  if (propType === 'symbol') {                                                                                         // 376
    return true;                                                                                                       // 377
  }                                                                                                                    // 378
                                                                                                                       // 379
  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'                                                             // 380
  if (propValue['@@toStringTag'] === 'Symbol') {                                                                       // 381
    return true;                                                                                                       // 382
  }                                                                                                                    // 383
                                                                                                                       // 384
  // Fallback for non-spec compliant Symbols which are polyfilled.                                                     // 385
  if (typeof Symbol === 'function' && propValue instanceof Symbol) {                                                   // 386
    return true;                                                                                                       // 387
  }                                                                                                                    // 388
                                                                                                                       // 389
  return false;                                                                                                        // 390
}                                                                                                                      // 391
                                                                                                                       // 392
// Equivalent of `typeof` but with special handling for array and regexp.                                              // 393
function getPropType(propValue) {                                                                                      // 394
  var propType = typeof propValue;                                                                                     // 395
  if (Array.isArray(propValue)) {                                                                                      // 396
    return 'array';                                                                                                    // 397
  }                                                                                                                    // 398
  if (propValue instanceof RegExp) {                                                                                   // 399
    // Old webkits (at least until Android 4.0) return 'function' rather than                                          // 400
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/                                           // 401
    // passes PropTypes.object.                                                                                        // 402
    return 'object';                                                                                                   // 403
  }                                                                                                                    // 404
  if (isSymbol(propType, propValue)) {                                                                                 // 405
    return 'symbol';                                                                                                   // 406
  }                                                                                                                    // 407
  return propType;                                                                                                     // 408
}                                                                                                                      // 409
                                                                                                                       // 410
// This handles more types than `getPropType`. Only used for error messages.                                           // 411
// See `createPrimitiveTypeChecker`.                                                                                   // 412
function getPreciseType(propValue) {                                                                                   // 413
  var propType = getPropType(propValue);                                                                               // 414
  if (propType === 'object') {                                                                                         // 415
    if (propValue instanceof Date) {                                                                                   // 416
      return 'date';                                                                                                   // 417
    } else if (propValue instanceof RegExp) {                                                                          // 418
      return 'regexp';                                                                                                 // 419
    }                                                                                                                  // 420
  }                                                                                                                    // 421
  return propType;                                                                                                     // 422
}                                                                                                                      // 423
                                                                                                                       // 424
// Returns class name of the object, if any.                                                                           // 425
function getClassName(propValue) {                                                                                     // 426
  if (!propValue.constructor || !propValue.constructor.name) {                                                         // 427
    return ANONYMOUS;                                                                                                  // 428
  }                                                                                                                    // 429
  return propValue.constructor.name;                                                                                   // 430
}                                                                                                                      // 431
                                                                                                                       // 432
module.exports = ReactPropTypes;                                                                                       // 433
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactVersion.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/ReactVersion.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
module.exports = '15.4.2';                                                                                             // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"onlyChild.js":["./reactProdInvariant","./ReactElement","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/lib/onlyChild.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
'use strict';                                                                                                          // 10
                                                                                                                       // 11
var _prodInvariant = require('./reactProdInvariant');                                                                  // 12
                                                                                                                       // 13
var ReactElement = require('./ReactElement');                                                                          // 14
                                                                                                                       // 15
var invariant = require('fbjs/lib/invariant');                                                                         // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * Returns the first child in a collection of children and verifies that there                                         // 19
 * is only one child in the collection.                                                                                // 20
 *                                                                                                                     // 21
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only                                    // 22
 *                                                                                                                     // 23
 * The current implementation of this function assumes that a single child gets                                        // 24
 * passed without a wrapper, but the purpose of this helper function is to                                             // 25
 * abstract away the particular structure of children.                                                                 // 26
 *                                                                                                                     // 27
 * @param {?object} children Child collection structure.                                                               // 28
 * @return {ReactElement} The first and only `ReactElement` contained in the                                           // 29
 * structure.                                                                                                          // 30
 */                                                                                                                    // 31
function onlyChild(children) {                                                                                         // 32
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;                                                                                                     // 34
}                                                                                                                      // 35
                                                                                                                       // 36
module.exports = onlyChild;                                                                                            // 37
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"object-assign":{"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/object-assign/index.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
object-assign                                                                                                          // 2
(c) Sindre Sorhus                                                                                                      // 3
@license MIT                                                                                                           // 4
*/                                                                                                                     // 5
                                                                                                                       // 6
'use strict';                                                                                                          // 7
/* eslint-disable no-unused-vars */                                                                                    // 8
var getOwnPropertySymbols = Object.getOwnPropertySymbols;                                                              // 9
var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 10
var propIsEnumerable = Object.prototype.propertyIsEnumerable;                                                          // 11
                                                                                                                       // 12
function toObject(val) {                                                                                               // 13
	if (val === null || val === undefined) {                                                                              // 14
		throw new TypeError('Object.assign cannot be called with null or undefined');                                        // 15
	}                                                                                                                     // 16
                                                                                                                       // 17
	return Object(val);                                                                                                   // 18
}                                                                                                                      // 19
                                                                                                                       // 20
function shouldUseNative() {                                                                                           // 21
	try {                                                                                                                 // 22
		if (!Object.assign) {                                                                                                // 23
			return false;                                                                                                       // 24
		}                                                                                                                    // 25
                                                                                                                       // 26
		// Detect buggy property enumeration order in older V8 versions.                                                     // 27
                                                                                                                       // 28
		// https://bugs.chromium.org/p/v8/issues/detail?id=4118                                                              // 29
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers                                               // 30
		test1[5] = 'de';                                                                                                     // 31
		if (Object.getOwnPropertyNames(test1)[0] === '5') {                                                                  // 32
			return false;                                                                                                       // 33
		}                                                                                                                    // 34
                                                                                                                       // 35
		// https://bugs.chromium.org/p/v8/issues/detail?id=3056                                                              // 36
		var test2 = {};                                                                                                      // 37
		for (var i = 0; i < 10; i++) {                                                                                       // 38
			test2['_' + String.fromCharCode(i)] = i;                                                                            // 39
		}                                                                                                                    // 40
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {                                                    // 41
			return test2[n];                                                                                                    // 42
		});                                                                                                                  // 43
		if (order2.join('') !== '0123456789') {                                                                              // 44
			return false;                                                                                                       // 45
		}                                                                                                                    // 46
                                                                                                                       // 47
		// https://bugs.chromium.org/p/v8/issues/detail?id=3056                                                              // 48
		var test3 = {};                                                                                                      // 49
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {                                                         // 50
			test3[letter] = letter;                                                                                             // 51
		});                                                                                                                  // 52
		if (Object.keys(Object.assign({}, test3)).join('') !==                                                               // 53
				'abcdefghijklmnopqrst') {                                                                                          // 54
			return false;                                                                                                       // 55
		}                                                                                                                    // 56
                                                                                                                       // 57
		return true;                                                                                                         // 58
	} catch (err) {                                                                                                       // 59
		// We don't expect any of the above to throw, but better to be safe.                                                 // 60
		return false;                                                                                                        // 61
	}                                                                                                                     // 62
}                                                                                                                      // 63
                                                                                                                       // 64
module.exports = shouldUseNative() ? Object.assign : function (target, source) {                                       // 65
	var from;                                                                                                             // 66
	var to = toObject(target);                                                                                            // 67
	var symbols;                                                                                                          // 68
                                                                                                                       // 69
	for (var s = 1; s < arguments.length; s++) {                                                                          // 70
		from = Object(arguments[s]);                                                                                         // 71
                                                                                                                       // 72
		for (var key in from) {                                                                                              // 73
			if (hasOwnProperty.call(from, key)) {                                                                               // 74
				to[key] = from[key];                                                                                               // 75
			}                                                                                                                   // 76
		}                                                                                                                    // 77
                                                                                                                       // 78
		if (getOwnPropertySymbols) {                                                                                         // 79
			symbols = getOwnPropertySymbols(from);                                                                              // 80
			for (var i = 0; i < symbols.length; i++) {                                                                          // 81
				if (propIsEnumerable.call(from, symbols[i])) {                                                                     // 82
					to[symbols[i]] = from[symbols[i]];                                                                                // 83
				}                                                                                                                  // 84
			}                                                                                                                   // 85
		}                                                                                                                    // 86
	}                                                                                                                     // 87
                                                                                                                       // 88
	return to;                                                                                                            // 89
};                                                                                                                     // 90
                                                                                                                       // 91
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"fbjs":{"lib":{"invariant.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/invariant.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * Use invariant() to assert state which your program assumes to be true.                                              // 14
 *                                                                                                                     // 15
 * Provide sprintf-style format (only %s is supported) and arguments                                                   // 16
 * to provide information about what broke and what you were                                                           // 17
 * expecting.                                                                                                          // 18
 *                                                                                                                     // 19
 * The invariant message will be stripped in production, but the invariant                                             // 20
 * will remain to ensure logic does not differ in production.                                                          // 21
 */                                                                                                                    // 22
                                                                                                                       // 23
var validateFormat = function validateFormat(format) {};                                                               // 24
                                                                                                                       // 25
if (process.env.NODE_ENV !== 'production') {                                                                           // 26
  validateFormat = function validateFormat(format) {                                                                   // 27
    if (format === undefined) {                                                                                        // 28
      throw new Error('invariant requires an error message argument');                                                 // 29
    }                                                                                                                  // 30
  };                                                                                                                   // 31
}                                                                                                                      // 32
                                                                                                                       // 33
function invariant(condition, format, a, b, c, d, e, f) {                                                              // 34
  validateFormat(format);                                                                                              // 35
                                                                                                                       // 36
  if (!condition) {                                                                                                    // 37
    var error;                                                                                                         // 38
    if (format === undefined) {                                                                                        // 39
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {                                                                                                           // 41
      var args = [a, b, c, d, e, f];                                                                                   // 42
      var argIndex = 0;                                                                                                // 43
      error = new Error(format.replace(/%s/g, function () {                                                            // 44
        return args[argIndex++];                                                                                       // 45
      }));                                                                                                             // 46
      error.name = 'Invariant Violation';                                                                              // 47
    }                                                                                                                  // 48
                                                                                                                       // 49
    error.framesToPop = 1; // we don't care about invariant's own frame                                                // 50
    throw error;                                                                                                       // 51
  }                                                                                                                    // 52
}                                                                                                                      // 53
                                                                                                                       // 54
module.exports = invariant;                                                                                            // 55
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"warning.js":["./emptyFunction",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/warning.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var emptyFunction = require('./emptyFunction');                                                                        // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * Similar to invariant but only logs a warning if the condition is not met.                                           // 16
 * This can be used to log issues in development environments in critical                                              // 17
 * paths. Removing the logging code for production environments will keep the                                          // 18
 * same logic and follow the same code paths.                                                                          // 19
 */                                                                                                                    // 20
                                                                                                                       // 21
var warning = emptyFunction;                                                                                           // 22
                                                                                                                       // 23
if (process.env.NODE_ENV !== 'production') {                                                                           // 24
  (function () {                                                                                                       // 25
    var printWarning = function printWarning(format) {                                                                 // 26
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {        // 27
        args[_key - 1] = arguments[_key];                                                                              // 28
      }                                                                                                                // 29
                                                                                                                       // 30
      var argIndex = 0;                                                                                                // 31
      var message = 'Warning: ' + format.replace(/%s/g, function () {                                                  // 32
        return args[argIndex++];                                                                                       // 33
      });                                                                                                              // 34
      if (typeof console !== 'undefined') {                                                                            // 35
        console.error(message);                                                                                        // 36
      }                                                                                                                // 37
      try {                                                                                                            // 38
        // --- Welcome to debugging React ---                                                                          // 39
        // This error was thrown as a convenience so that you can use this stack                                       // 40
        // to find the callsite that caused this warning to fire.                                                      // 41
        throw new Error(message);                                                                                      // 42
      } catch (x) {}                                                                                                   // 43
    };                                                                                                                 // 44
                                                                                                                       // 45
    warning = function warning(condition, format) {                                                                    // 46
      if (format === undefined) {                                                                                      // 47
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');             // 48
      }                                                                                                                // 49
                                                                                                                       // 50
      if (format.indexOf('Failed Composite propType: ') === 0) {                                                       // 51
        return; // Ignore CompositeComponent proptype check.                                                           // 52
      }                                                                                                                // 53
                                                                                                                       // 54
      if (!condition) {                                                                                                // 55
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];                                                                          // 57
        }                                                                                                              // 58
                                                                                                                       // 59
        printWarning.apply(undefined, [format].concat(args));                                                          // 60
      }                                                                                                                // 61
    };                                                                                                                 // 62
  })();                                                                                                                // 63
}                                                                                                                      // 64
                                                                                                                       // 65
module.exports = warning;                                                                                              // 66
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"emptyFunction.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/emptyFunction.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 * All rights reserved.                                                                                                // 5
 *                                                                                                                     // 6
 * This source code is licensed under the BSD-style license found in the                                               // 7
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9
 *                                                                                                                     // 10
 *                                                                                                                     // 11
 */                                                                                                                    // 12
                                                                                                                       // 13
function makeEmptyFunction(arg) {                                                                                      // 14
  return function () {                                                                                                 // 15
    return arg;                                                                                                        // 16
  };                                                                                                                   // 17
}                                                                                                                      // 18
                                                                                                                       // 19
/**                                                                                                                    // 20
 * This function accepts and discards inputs; it has no side effects. This is                                          // 21
 * primarily useful idiomatically for overridable function endpoints which                                             // 22
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.                                             // 23
 */                                                                                                                    // 24
var emptyFunction = function emptyFunction() {};                                                                       // 25
                                                                                                                       // 26
emptyFunction.thatReturns = makeEmptyFunction;                                                                         // 27
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);                                                             // 28
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);                                                               // 29
emptyFunction.thatReturnsNull = makeEmptyFunction(null);                                                               // 30
emptyFunction.thatReturnsThis = function () {                                                                          // 31
  return this;                                                                                                         // 32
};                                                                                                                     // 33
emptyFunction.thatReturnsArgument = function (arg) {                                                                   // 34
  return arg;                                                                                                          // 35
};                                                                                                                     // 36
                                                                                                                       // 37
module.exports = emptyFunction;                                                                                        // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"emptyObject.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/emptyObject.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var emptyObject = {};                                                                                                  // 13
                                                                                                                       // 14
if (process.env.NODE_ENV !== 'production') {                                                                           // 15
  Object.freeze(emptyObject);                                                                                          // 16
}                                                                                                                      // 17
                                                                                                                       // 18
module.exports = emptyObject;                                                                                          // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ExecutionEnvironment.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/ExecutionEnvironment.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);                 // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * Simple, lightweight module assisting with the detection and context of                                              // 16
 * Worker. Helps avoid circular dependencies and allows code to reason about                                           // 17
 * whether or not they are in a Worker, even if they never include the main                                            // 18
 * `ReactWorker` dependency.                                                                                           // 19
 */                                                                                                                    // 20
var ExecutionEnvironment = {                                                                                           // 21
                                                                                                                       // 22
  canUseDOM: canUseDOM,                                                                                                // 23
                                                                                                                       // 24
  canUseWorkers: typeof Worker !== 'undefined',                                                                        // 25
                                                                                                                       // 26
  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),                                // 27
                                                                                                                       // 28
  canUseViewport: canUseDOM && !!window.screen,                                                                        // 29
                                                                                                                       // 30
  isInWorker: !canUseDOM // For now, this is true - might change in the future.                                        // 31
                                                                                                                       // 32
};                                                                                                                     // 33
                                                                                                                       // 34
module.exports = ExecutionEnvironment;                                                                                 // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"performanceNow.js":["./performance",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/performanceNow.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 * All rights reserved.                                                                                                // 5
 *                                                                                                                     // 6
 * This source code is licensed under the BSD-style license found in the                                               // 7
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9
 *                                                                                                                     // 10
 * @typechecks                                                                                                         // 11
 */                                                                                                                    // 12
                                                                                                                       // 13
var performance = require('./performance');                                                                            // 14
                                                                                                                       // 15
var performanceNow;                                                                                                    // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * Detect if we can use `window.performance.now()` and gracefully fallback to                                          // 19
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now                                           // 20
 * because of Facebook's testing infrastructure.                                                                       // 21
 */                                                                                                                    // 22
if (performance.now) {                                                                                                 // 23
  performanceNow = function performanceNow() {                                                                         // 24
    return performance.now();                                                                                          // 25
  };                                                                                                                   // 26
} else {                                                                                                               // 27
  performanceNow = function performanceNow() {                                                                         // 28
    return Date.now();                                                                                                 // 29
  };                                                                                                                   // 30
}                                                                                                                      // 31
                                                                                                                       // 32
module.exports = performanceNow;                                                                                       // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"performance.js":["./ExecutionEnvironment",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/performance.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 * @typechecks                                                                                                         // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var ExecutionEnvironment = require('./ExecutionEnvironment');                                                          // 14
                                                                                                                       // 15
var performance;                                                                                                       // 16
                                                                                                                       // 17
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 18
  performance = window.performance || window.msPerformance || window.webkitPerformance;                                // 19
}                                                                                                                      // 20
                                                                                                                       // 21
module.exports = performance || {};                                                                                    // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"createNodesFromMarkup.js":["./ExecutionEnvironment","./createArrayFromMixed","./getMarkupWrap","./invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/createNodesFromMarkup.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 * All rights reserved.                                                                                                // 5
 *                                                                                                                     // 6
 * This source code is licensed under the BSD-style license found in the                                               // 7
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9
 *                                                                                                                     // 10
 * @typechecks                                                                                                         // 11
 */                                                                                                                    // 12
                                                                                                                       // 13
/*eslint-disable fb-www/unsafe-html*/                                                                                  // 14
                                                                                                                       // 15
var ExecutionEnvironment = require('./ExecutionEnvironment');                                                          // 16
                                                                                                                       // 17
var createArrayFromMixed = require('./createArrayFromMixed');                                                          // 18
var getMarkupWrap = require('./getMarkupWrap');                                                                        // 19
var invariant = require('./invariant');                                                                                // 20
                                                                                                                       // 21
/**                                                                                                                    // 22
 * Dummy container used to render all markup.                                                                          // 23
 */                                                                                                                    // 24
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                 // 25
                                                                                                                       // 26
/**                                                                                                                    // 27
 * Pattern used by `getNodeName`.                                                                                      // 28
 */                                                                                                                    // 29
var nodeNamePattern = /^\s*<(\w+)/;                                                                                    // 30
                                                                                                                       // 31
/**                                                                                                                    // 32
 * Extracts the `nodeName` of the first element in a string of markup.                                                 // 33
 *                                                                                                                     // 34
 * @param {string} markup String of markup.                                                                            // 35
 * @return {?string} Node name of the supplied markup.                                                                 // 36
 */                                                                                                                    // 37
function getNodeName(markup) {                                                                                         // 38
  var nodeNameMatch = markup.match(nodeNamePattern);                                                                   // 39
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();                                                              // 40
}                                                                                                                      // 41
                                                                                                                       // 42
/**                                                                                                                    // 43
 * Creates an array containing the nodes rendered from the supplied markup. The                                        // 44
 * optionally supplied `handleScript` function will be invoked once for each                                           // 45
 * <script> element that is rendered. If no `handleScript` function is supplied,                                       // 46
 * an exception is thrown if any <script> elements are rendered.                                                       // 47
 *                                                                                                                     // 48
 * @param {string} markup A string of valid HTML markup.                                                               // 49
 * @param {?function} handleScript Invoked once for each rendered <script>.                                            // 50
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.                                                 // 51
 */                                                                                                                    // 52
function createNodesFromMarkup(markup, handleScript) {                                                                 // 53
  var node = dummyNode;                                                                                                // 54
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);                                                                                  // 56
                                                                                                                       // 57
  var wrap = nodeName && getMarkupWrap(nodeName);                                                                      // 58
  if (wrap) {                                                                                                          // 59
    node.innerHTML = wrap[1] + markup + wrap[2];                                                                       // 60
                                                                                                                       // 61
    var wrapDepth = wrap[0];                                                                                           // 62
    while (wrapDepth--) {                                                                                              // 63
      node = node.lastChild;                                                                                           // 64
    }                                                                                                                  // 65
  } else {                                                                                                             // 66
    node.innerHTML = markup;                                                                                           // 67
  }                                                                                                                    // 68
                                                                                                                       // 69
  var scripts = node.getElementsByTagName('script');                                                                   // 70
  if (scripts.length) {                                                                                                // 71
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);                                                               // 73
  }                                                                                                                    // 74
                                                                                                                       // 75
  var nodes = Array.from(node.childNodes);                                                                             // 76
  while (node.lastChild) {                                                                                             // 77
    node.removeChild(node.lastChild);                                                                                  // 78
  }                                                                                                                    // 79
  return nodes;                                                                                                        // 80
}                                                                                                                      // 81
                                                                                                                       // 82
module.exports = createNodesFromMarkup;                                                                                // 83
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"createArrayFromMixed.js":["./invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/createArrayFromMixed.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 * All rights reserved.                                                                                                // 5
 *                                                                                                                     // 6
 * This source code is licensed under the BSD-style license found in the                                               // 7
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9
 *                                                                                                                     // 10
 * @typechecks                                                                                                         // 11
 */                                                                                                                    // 12
                                                                                                                       // 13
var invariant = require('./invariant');                                                                                // 14
                                                                                                                       // 15
/**                                                                                                                    // 16
 * Convert array-like objects to arrays.                                                                               // 17
 *                                                                                                                     // 18
 * This API assumes the caller knows the contents of the data type. For less                                           // 19
 * well defined inputs use createArrayFromMixed.                                                                       // 20
 *                                                                                                                     // 21
 * @param {object|function|filelist} obj                                                                               // 22
 * @return {array}                                                                                                     // 23
 */                                                                                                                    // 24
function toArray(obj) {                                                                                                // 25
  var length = obj.length;                                                                                             // 26
                                                                                                                       // 27
  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList                                         // 28
  // in old versions of Safari).                                                                                       // 29
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;
                                                                                                                       // 31
  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;
                                                                                                                       // 33
  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;
                                                                                                                       // 35
  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;
                                                                                                                       // 37
  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs                                           // 38
  // without method will throw during the slice call and skip straight to the                                          // 39
  // fallback.                                                                                                         // 40
  if (obj.hasOwnProperty) {                                                                                            // 41
    try {                                                                                                              // 42
      return Array.prototype.slice.call(obj);                                                                          // 43
    } catch (e) {                                                                                                      // 44
      // IE < 9 does not support Array#slice on collections objects                                                    // 45
    }                                                                                                                  // 46
  }                                                                                                                    // 47
                                                                                                                       // 48
  // Fall back to copying key by key. This assumes all keys have a value,                                              // 49
  // so will not preserve sparsely populated inputs.                                                                   // 50
  var ret = Array(length);                                                                                             // 51
  for (var ii = 0; ii < length; ii++) {                                                                                // 52
    ret[ii] = obj[ii];                                                                                                 // 53
  }                                                                                                                    // 54
  return ret;                                                                                                          // 55
}                                                                                                                      // 56
                                                                                                                       // 57
/**                                                                                                                    // 58
 * Perform a heuristic test to determine if an object is "array-like".                                                 // 59
 *                                                                                                                     // 60
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"                                                      // 61
 *   Joshu replied: "Mu."                                                                                              // 62
 *                                                                                                                     // 63
 * This function determines if its argument has "array nature": it returns                                             // 64
 * true if the argument is an actual array, an `arguments' object, or an                                               // 65
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).                                               // 66
 *                                                                                                                     // 67
 * It will return false for other array-like objects like Filelist.                                                    // 68
 *                                                                                                                     // 69
 * @param {*} obj                                                                                                      // 70
 * @return {boolean}                                                                                                   // 71
 */                                                                                                                    // 72
function hasArrayNature(obj) {                                                                                         // 73
  return (                                                                                                             // 74
    // not null/false                                                                                                  // 75
    !!obj && (                                                                                                         // 76
    // arrays are objects, NodeLists are functions in Safari                                                           // 77
    typeof obj == 'object' || typeof obj == 'function') &&                                                             // 78
    // quacks like an array                                                                                            // 79
    'length' in obj &&                                                                                                 // 80
    // not window                                                                                                      // 81
    !('setInterval' in obj) &&                                                                                         // 82
    // no DOM node should be considered an array-like                                                                  // 83
    // a 'select' element has 'length' and 'item' properties on IE8                                                    // 84
    typeof obj.nodeType != 'number' && (                                                                               // 85
    // a real array                                                                                                    // 86
    Array.isArray(obj) ||                                                                                              // 87
    // arguments                                                                                                       // 88
    'callee' in obj ||                                                                                                 // 89
    // HTMLCollection/NodeList                                                                                         // 90
    'item' in obj)                                                                                                     // 91
  );                                                                                                                   // 92
}                                                                                                                      // 93
                                                                                                                       // 94
/**                                                                                                                    // 95
 * Ensure that the argument is an array by wrapping it in an array if it is not.                                       // 96
 * Creates a copy of the argument if it is already an array.                                                           // 97
 *                                                                                                                     // 98
 * This is mostly useful idiomatically:                                                                                // 99
 *                                                                                                                     // 100
 *   var createArrayFromMixed = require('createArrayFromMixed');                                                       // 101
 *                                                                                                                     // 102
 *   function takesOneOrMoreThings(things) {                                                                           // 103
 *     things = createArrayFromMixed(things);                                                                          // 104
 *     ...                                                                                                             // 105
 *   }                                                                                                                 // 106
 *                                                                                                                     // 107
 * This allows you to treat `things' as an array, but accept scalars in the API.                                       // 108
 *                                                                                                                     // 109
 * If you need to convert an array-like object, like `arguments`, into an array                                        // 110
 * use toArray instead.                                                                                                // 111
 *                                                                                                                     // 112
 * @param {*} obj                                                                                                      // 113
 * @return {array}                                                                                                     // 114
 */                                                                                                                    // 115
function createArrayFromMixed(obj) {                                                                                   // 116
  if (!hasArrayNature(obj)) {                                                                                          // 117
    return [obj];                                                                                                      // 118
  } else if (Array.isArray(obj)) {                                                                                     // 119
    return obj.slice();                                                                                                // 120
  } else {                                                                                                             // 121
    return toArray(obj);                                                                                               // 122
  }                                                                                                                    // 123
}                                                                                                                      // 124
                                                                                                                       // 125
module.exports = createArrayFromMixed;                                                                                 // 126
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"getMarkupWrap.js":["./ExecutionEnvironment","./invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/getMarkupWrap.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 * All rights reserved.                                                                                                // 5
 *                                                                                                                     // 6
 * This source code is licensed under the BSD-style license found in the                                               // 7
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9
 *                                                                                                                     // 10
 */                                                                                                                    // 11
                                                                                                                       // 12
/*eslint-disable fb-www/unsafe-html */                                                                                 // 13
                                                                                                                       // 14
var ExecutionEnvironment = require('./ExecutionEnvironment');                                                          // 15
                                                                                                                       // 16
var invariant = require('./invariant');                                                                                // 17
                                                                                                                       // 18
/**                                                                                                                    // 19
 * Dummy container used to detect which wraps are necessary.                                                           // 20
 */                                                                                                                    // 21
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                 // 22
                                                                                                                       // 23
/**                                                                                                                    // 24
 * Some browsers cannot use `innerHTML` to render certain elements standalone,                                         // 25
 * so we wrap them, render the wrapped nodes, then extract the desired node.                                           // 26
 *                                                                                                                     // 27
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').                                           // 28
 */                                                                                                                    // 29
                                                                                                                       // 30
var shouldWrap = {};                                                                                                   // 31
                                                                                                                       // 32
var selectWrap = [1, '<select multiple="true">', '</select>'];                                                         // 33
var tableWrap = [1, '<table>', '</table>'];                                                                            // 34
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];                                                       // 35
                                                                                                                       // 36
var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];                                               // 37
                                                                                                                       // 38
var markupWrap = {                                                                                                     // 39
  '*': [1, '?<div>', '</div>'],                                                                                        // 40
                                                                                                                       // 41
  'area': [1, '<map>', '</map>'],                                                                                      // 42
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],                                               // 43
  'legend': [1, '<fieldset>', '</fieldset>'],                                                                          // 44
  'param': [1, '<object>', '</object>'],                                                                               // 45
  'tr': [2, '<table><tbody>', '</tbody></table>'],                                                                     // 46
                                                                                                                       // 47
  'optgroup': selectWrap,                                                                                              // 48
  'option': selectWrap,                                                                                                // 49
                                                                                                                       // 50
  'caption': tableWrap,                                                                                                // 51
  'colgroup': tableWrap,                                                                                               // 52
  'tbody': tableWrap,                                                                                                  // 53
  'tfoot': tableWrap,                                                                                                  // 54
  'thead': tableWrap,                                                                                                  // 55
                                                                                                                       // 56
  'td': trWrap,                                                                                                        // 57
  'th': trWrap                                                                                                         // 58
};                                                                                                                     // 59
                                                                                                                       // 60
// Initialize the SVG elements since we know they'll always need to be wrapped                                         // 61
// consistently. If they are created inside a <div> they will be initialized in                                        // 62
// the wrong namespace (and will not display).                                                                         // 63
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {                                                                              // 65
  markupWrap[nodeName] = svgWrap;                                                                                      // 66
  shouldWrap[nodeName] = true;                                                                                         // 67
});                                                                                                                    // 68
                                                                                                                       // 69
/**                                                                                                                    // 70
 * Gets the markup wrap configuration for the supplied `nodeName`.                                                     // 71
 *                                                                                                                     // 72
 * NOTE: This lazily detects which wraps are necessary for the current browser.                                        // 73
 *                                                                                                                     // 74
 * @param {string} nodeName Lowercase `nodeName`.                                                                      // 75
 * @return {?array} Markup wrap configuration, if applicable.                                                          // 76
 */                                                                                                                    // 77
function getMarkupWrap(nodeName) {                                                                                     // 78
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {                                                                          // 80
    nodeName = '*';                                                                                                    // 81
  }                                                                                                                    // 82
  if (!shouldWrap.hasOwnProperty(nodeName)) {                                                                          // 83
    if (nodeName === '*') {                                                                                            // 84
      dummyNode.innerHTML = '<link />';                                                                                // 85
    } else {                                                                                                           // 86
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';                                                   // 87
    }                                                                                                                  // 88
    shouldWrap[nodeName] = !dummyNode.firstChild;                                                                      // 89
  }                                                                                                                    // 90
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;                                                           // 91
}                                                                                                                      // 92
                                                                                                                       // 93
module.exports = getMarkupWrap;                                                                                        // 94
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"focusNode.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/focusNode.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * @param {DOMElement} node input/textarea to focus                                                                    // 14
 */                                                                                                                    // 15
                                                                                                                       // 16
function focusNode(node) {                                                                                             // 17
  // IE8 can throw "Can't move focus to the control because it is invisible,                                           // 18
  // not enabled, or of a type that does not accept the focus." for all kinds of                                       // 19
  // reasons that are too expensive and fragile to test.                                                               // 20
  try {                                                                                                                // 21
    node.focus();                                                                                                      // 22
  } catch (e) {}                                                                                                       // 23
}                                                                                                                      // 24
                                                                                                                       // 25
module.exports = focusNode;                                                                                            // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"camelizeStyleName.js":["./camelize",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/camelizeStyleName.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 * @typechecks                                                                                                         // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var camelize = require('./camelize');                                                                                  // 14
                                                                                                                       // 15
var msPattern = /^-ms-/;                                                                                               // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * Camelcases a hyphenated CSS property name, for example:                                                             // 19
 *                                                                                                                     // 20
 *   > camelizeStyleName('background-color')                                                                           // 21
 *   < "backgroundColor"                                                                                               // 22
 *   > camelizeStyleName('-moz-transition')                                                                            // 23
 *   < "MozTransition"                                                                                                 // 24
 *   > camelizeStyleName('-ms-transition')                                                                             // 25
 *   < "msTransition"                                                                                                  // 26
 *                                                                                                                     // 27
 * As Andi Smith suggests                                                                                              // 28
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix                                        // 29
 * is converted to lowercase `ms`.                                                                                     // 30
 *                                                                                                                     // 31
 * @param {string} string                                                                                              // 32
 * @return {string}                                                                                                    // 33
 */                                                                                                                    // 34
function camelizeStyleName(string) {                                                                                   // 35
  return camelize(string.replace(msPattern, 'ms-'));                                                                   // 36
}                                                                                                                      // 37
                                                                                                                       // 38
module.exports = camelizeStyleName;                                                                                    // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"camelize.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/camelize.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 * All rights reserved.                                                                                                // 5
 *                                                                                                                     // 6
 * This source code is licensed under the BSD-style license found in the                                               // 7
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9
 *                                                                                                                     // 10
 * @typechecks                                                                                                         // 11
 */                                                                                                                    // 12
                                                                                                                       // 13
var _hyphenPattern = /-(.)/g;                                                                                          // 14
                                                                                                                       // 15
/**                                                                                                                    // 16
 * Camelcases a hyphenated string, for example:                                                                        // 17
 *                                                                                                                     // 18
 *   > camelize('background-color')                                                                                    // 19
 *   < "backgroundColor"                                                                                               // 20
 *                                                                                                                     // 21
 * @param {string} string                                                                                              // 22
 * @return {string}                                                                                                    // 23
 */                                                                                                                    // 24
function camelize(string) {                                                                                            // 25
  return string.replace(_hyphenPattern, function (_, character) {                                                      // 26
    return character.toUpperCase();                                                                                    // 27
  });                                                                                                                  // 28
}                                                                                                                      // 29
                                                                                                                       // 30
module.exports = camelize;                                                                                             // 31
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"hyphenateStyleName.js":["./hyphenate",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/hyphenateStyleName.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 * @typechecks                                                                                                         // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var hyphenate = require('./hyphenate');                                                                                // 14
                                                                                                                       // 15
var msPattern = /^ms-/;                                                                                                // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * Hyphenates a camelcased CSS property name, for example:                                                             // 19
 *                                                                                                                     // 20
 *   > hyphenateStyleName('backgroundColor')                                                                           // 21
 *   < "background-color"                                                                                              // 22
 *   > hyphenateStyleName('MozTransition')                                                                             // 23
 *   < "-moz-transition"                                                                                               // 24
 *   > hyphenateStyleName('msTransition')                                                                              // 25
 *   < "-ms-transition"                                                                                                // 26
 *                                                                                                                     // 27
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix                                         // 28
 * is converted to `-ms-`.                                                                                             // 29
 *                                                                                                                     // 30
 * @param {string} string                                                                                              // 31
 * @return {string}                                                                                                    // 32
 */                                                                                                                    // 33
function hyphenateStyleName(string) {                                                                                  // 34
  return hyphenate(string).replace(msPattern, '-ms-');                                                                 // 35
}                                                                                                                      // 36
                                                                                                                       // 37
module.exports = hyphenateStyleName;                                                                                   // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"hyphenate.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/hyphenate.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 * All rights reserved.                                                                                                // 5
 *                                                                                                                     // 6
 * This source code is licensed under the BSD-style license found in the                                               // 7
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9
 *                                                                                                                     // 10
 * @typechecks                                                                                                         // 11
 */                                                                                                                    // 12
                                                                                                                       // 13
var _uppercasePattern = /([A-Z])/g;                                                                                    // 14
                                                                                                                       // 15
/**                                                                                                                    // 16
 * Hyphenates a camelcased string, for example:                                                                        // 17
 *                                                                                                                     // 18
 *   > hyphenate('backgroundColor')                                                                                    // 19
 *   < "background-color"                                                                                              // 20
 *                                                                                                                     // 21
 * For CSS style names, use `hyphenateStyleName` instead which works properly                                          // 22
 * with all vendor prefixes, including `ms`.                                                                           // 23
 *                                                                                                                     // 24
 * @param {string} string                                                                                              // 25
 * @return {string}                                                                                                    // 26
 */                                                                                                                    // 27
function hyphenate(string) {                                                                                           // 28
  return string.replace(_uppercasePattern, '-$1').toLowerCase();                                                       // 29
}                                                                                                                      // 30
                                                                                                                       // 31
module.exports = hyphenate;                                                                                            // 32
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"memoizeStringOnly.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/memoizeStringOnly.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 * @typechecks static-only                                                                                             // 10
 */                                                                                                                    // 11
                                                                                                                       // 12
'use strict';                                                                                                          // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * Memoizes the return value of a function that accepts one string argument.                                           // 16
 */                                                                                                                    // 17
                                                                                                                       // 18
function memoizeStringOnly(callback) {                                                                                 // 19
  var cache = {};                                                                                                      // 20
  return function (string) {                                                                                           // 21
    if (!cache.hasOwnProperty(string)) {                                                                               // 22
      cache[string] = callback.call(this, string);                                                                     // 23
    }                                                                                                                  // 24
    return cache[string];                                                                                              // 25
  };                                                                                                                   // 26
}                                                                                                                      // 27
                                                                                                                       // 28
module.exports = memoizeStringOnly;                                                                                    // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"shallowEqual.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/shallowEqual.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 * @typechecks                                                                                                         // 9
 *                                                                                                                     // 10
 */                                                                                                                    // 11
                                                                                                                       // 12
/*eslint-disable no-self-compare */                                                                                    // 13
                                                                                                                       // 14
'use strict';                                                                                                          // 15
                                                                                                                       // 16
var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 17
                                                                                                                       // 18
/**                                                                                                                    // 19
 * inlined Object.is polyfill to avoid requiring consumers ship their own                                              // 20
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is                          // 21
 */                                                                                                                    // 22
function is(x, y) {                                                                                                    // 23
  // SameValue algorithm                                                                                               // 24
  if (x === y) {                                                                                                       // 25
    // Steps 1-5, 7-10                                                                                                 // 26
    // Steps 6.b-6.e: +0 != -0                                                                                         // 27
    // Added the nonzero y check to make Flow happy, but it is redundant                                               // 28
    return x !== 0 || y !== 0 || 1 / x === 1 / y;                                                                      // 29
  } else {                                                                                                             // 30
    // Step 6.a: NaN == NaN                                                                                            // 31
    return x !== x && y !== y;                                                                                         // 32
  }                                                                                                                    // 33
}                                                                                                                      // 34
                                                                                                                       // 35
/**                                                                                                                    // 36
 * Performs equality by iterating through keys on an object and returning false                                        // 37
 * when any key has values which are not strictly equal between the arguments.                                         // 38
 * Returns true when the values of all keys are strictly equal.                                                        // 39
 */                                                                                                                    // 40
function shallowEqual(objA, objB) {                                                                                    // 41
  if (is(objA, objB)) {                                                                                                // 42
    return true;                                                                                                       // 43
  }                                                                                                                    // 44
                                                                                                                       // 45
  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {                        // 46
    return false;                                                                                                      // 47
  }                                                                                                                    // 48
                                                                                                                       // 49
  var keysA = Object.keys(objA);                                                                                       // 50
  var keysB = Object.keys(objB);                                                                                       // 51
                                                                                                                       // 52
  if (keysA.length !== keysB.length) {                                                                                 // 53
    return false;                                                                                                      // 54
  }                                                                                                                    // 55
                                                                                                                       // 56
  // Test for A's keys different from B.                                                                               // 57
  for (var i = 0; i < keysA.length; i++) {                                                                             // 58
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {                                 // 59
      return false;                                                                                                    // 60
    }                                                                                                                  // 61
  }                                                                                                                    // 62
                                                                                                                       // 63
  return true;                                                                                                         // 64
}                                                                                                                      // 65
                                                                                                                       // 66
module.exports = shallowEqual;                                                                                         // 67
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"EventListener.js":["./emptyFunction",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/EventListener.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 *                                                                                                                     // 5
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 6
 * you may not use this file except in compliance with the License.                                                    // 7
 * You may obtain a copy of the License at                                                                             // 8
 *                                                                                                                     // 9
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 10
 *                                                                                                                     // 11
 * Unless required by applicable law or agreed to in writing, software                                                 // 12
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14
 * See the License for the specific language governing permissions and                                                 // 15
 * limitations under the License.                                                                                      // 16
 *                                                                                                                     // 17
 * @typechecks                                                                                                         // 18
 */                                                                                                                    // 19
                                                                                                                       // 20
var emptyFunction = require('./emptyFunction');                                                                        // 21
                                                                                                                       // 22
/**                                                                                                                    // 23
 * Upstream version of event listener. Does not take into account specific                                             // 24
 * nature of platform.                                                                                                 // 25
 */                                                                                                                    // 26
var EventListener = {                                                                                                  // 27
  /**                                                                                                                  // 28
   * Listen to DOM events during the bubble phase.                                                                     // 29
   *                                                                                                                   // 30
   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 31
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 32
   * @param {function} callback Callback function.                                                                     // 33
   * @return {object} Object with a `remove` method.                                                                   // 34
   */                                                                                                                  // 35
  listen: function listen(target, eventType, callback) {                                                               // 36
    if (target.addEventListener) {                                                                                     // 37
      target.addEventListener(eventType, callback, false);                                                             // 38
      return {                                                                                                         // 39
        remove: function remove() {                                                                                    // 40
          target.removeEventListener(eventType, callback, false);                                                      // 41
        }                                                                                                              // 42
      };                                                                                                               // 43
    } else if (target.attachEvent) {                                                                                   // 44
      target.attachEvent('on' + eventType, callback);                                                                  // 45
      return {                                                                                                         // 46
        remove: function remove() {                                                                                    // 47
          target.detachEvent('on' + eventType, callback);                                                              // 48
        }                                                                                                              // 49
      };                                                                                                               // 50
    }                                                                                                                  // 51
  },                                                                                                                   // 52
                                                                                                                       // 53
  /**                                                                                                                  // 54
   * Listen to DOM events during the capture phase.                                                                    // 55
   *                                                                                                                   // 56
   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 57
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 58
   * @param {function} callback Callback function.                                                                     // 59
   * @return {object} Object with a `remove` method.                                                                   // 60
   */                                                                                                                  // 61
  capture: function capture(target, eventType, callback) {                                                             // 62
    if (target.addEventListener) {                                                                                     // 63
      target.addEventListener(eventType, callback, true);                                                              // 64
      return {                                                                                                         // 65
        remove: function remove() {                                                                                    // 66
          target.removeEventListener(eventType, callback, true);                                                       // 67
        }                                                                                                              // 68
      };                                                                                                               // 69
    } else {                                                                                                           // 70
      if (process.env.NODE_ENV !== 'production') {                                                                     // 71
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }                                                                                                                // 73
      return {                                                                                                         // 74
        remove: emptyFunction                                                                                          // 75
      };                                                                                                               // 76
    }                                                                                                                  // 77
  },                                                                                                                   // 78
                                                                                                                       // 79
  registerDefault: function registerDefault() {}                                                                       // 80
};                                                                                                                     // 81
                                                                                                                       // 82
module.exports = EventListener;                                                                                        // 83
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"getUnboundedScrollPosition.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/getUnboundedScrollPosition.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 * @typechecks                                                                                                         // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
/**                                                                                                                    // 14
 * Gets the scroll position of the supplied element or window.                                                         // 15
 *                                                                                                                     // 16
 * The return values are unbounded, unlike `getScrollPosition`. This means they                                        // 17
 * may be negative or exceed the element boundaries (which is possible using                                           // 18
 * inertial scrolling).                                                                                                // 19
 *                                                                                                                     // 20
 * @param {DOMWindow|DOMElement} scrollable                                                                            // 21
 * @return {object} Map with `x` and `y` keys.                                                                         // 22
 */                                                                                                                    // 23
                                                                                                                       // 24
function getUnboundedScrollPosition(scrollable) {                                                                      // 25
  if (scrollable.Window && scrollable instanceof scrollable.Window) {                                                  // 26
    return {                                                                                                           // 27
      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,                                     // 28
      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop                                       // 29
    };                                                                                                                 // 30
  }                                                                                                                    // 31
  return {                                                                                                             // 32
    x: scrollable.scrollLeft,                                                                                          // 33
    y: scrollable.scrollTop                                                                                            // 34
  };                                                                                                                   // 35
}                                                                                                                      // 36
                                                                                                                       // 37
module.exports = getUnboundedScrollPosition;                                                                           // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"containsNode.js":["./isTextNode",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/containsNode.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 * All rights reserved.                                                                                                // 5
 *                                                                                                                     // 6
 * This source code is licensed under the BSD-style license found in the                                               // 7
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9
 *                                                                                                                     // 10
 *                                                                                                                     // 11
 */                                                                                                                    // 12
                                                                                                                       // 13
var isTextNode = require('./isTextNode');                                                                              // 14
                                                                                                                       // 15
/*eslint-disable no-bitwise */                                                                                         // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * Checks if a given DOM node contains or is another DOM node.                                                         // 19
 */                                                                                                                    // 20
function containsNode(outerNode, innerNode) {                                                                          // 21
  if (!outerNode || !innerNode) {                                                                                      // 22
    return false;                                                                                                      // 23
  } else if (outerNode === innerNode) {                                                                                // 24
    return true;                                                                                                       // 25
  } else if (isTextNode(outerNode)) {                                                                                  // 26
    return false;                                                                                                      // 27
  } else if (isTextNode(innerNode)) {                                                                                  // 28
    return containsNode(outerNode, innerNode.parentNode);                                                              // 29
  } else if ('contains' in outerNode) {                                                                                // 30
    return outerNode.contains(innerNode);                                                                              // 31
  } else if (outerNode.compareDocumentPosition) {                                                                      // 32
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);                                                      // 33
  } else {                                                                                                             // 34
    return false;                                                                                                      // 35
  }                                                                                                                    // 36
}                                                                                                                      // 37
                                                                                                                       // 38
module.exports = containsNode;                                                                                         // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"isTextNode.js":["./isNode",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/isTextNode.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 * All rights reserved.                                                                                                // 5
 *                                                                                                                     // 6
 * This source code is licensed under the BSD-style license found in the                                               // 7
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9
 *                                                                                                                     // 10
 * @typechecks                                                                                                         // 11
 */                                                                                                                    // 12
                                                                                                                       // 13
var isNode = require('./isNode');                                                                                      // 14
                                                                                                                       // 15
/**                                                                                                                    // 16
 * @param {*} object The object to check.                                                                              // 17
 * @return {boolean} Whether or not the object is a DOM text node.                                                     // 18
 */                                                                                                                    // 19
function isTextNode(object) {                                                                                          // 20
  return isNode(object) && object.nodeType == 3;                                                                       // 21
}                                                                                                                      // 22
                                                                                                                       // 23
module.exports = isTextNode;                                                                                           // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"isNode.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/isNode.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 * All rights reserved.                                                                                                // 5
 *                                                                                                                     // 6
 * This source code is licensed under the BSD-style license found in the                                               // 7
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9
 *                                                                                                                     // 10
 * @typechecks                                                                                                         // 11
 */                                                                                                                    // 12
                                                                                                                       // 13
/**                                                                                                                    // 14
 * @param {*} object The object to check.                                                                              // 15
 * @return {boolean} Whether or not the object is a DOM node.                                                          // 16
 */                                                                                                                    // 17
function isNode(object) {                                                                                              // 18
  var doc = object ? object.ownerDocument || object : document;                                                        // 19
  var defaultView = doc.defaultView || window;                                                                         // 20
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}                                                                                                                      // 22
                                                                                                                       // 23
module.exports = isNode;                                                                                               // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getActiveElement.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/getActiveElement.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 * All rights reserved.                                                                                                // 5
 *                                                                                                                     // 6
 * This source code is licensed under the BSD-style license found in the                                               // 7
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9
 *                                                                                                                     // 10
 * @typechecks                                                                                                         // 11
 */                                                                                                                    // 12
                                                                                                                       // 13
/* eslint-disable fb-www/typeof-undefined */                                                                           // 14
                                                                                                                       // 15
/**                                                                                                                    // 16
 * Same as document.activeElement but wraps in a try-catch block. In IE it is                                          // 17
 * not safe to call document.activeElement if there is nothing focused.                                                // 18
 *                                                                                                                     // 19
 * The activeElement will be null only if the document or document body is not                                         // 20
 * yet defined.                                                                                                        // 21
 *                                                                                                                     // 22
 * @param {?DOMDocument} doc Defaults to current document.                                                             // 23
 * @return {?DOMElement}                                                                                               // 24
 */                                                                                                                    // 25
function getActiveElement(doc) /*?DOMElement*/{                                                                        // 26
  doc = doc || global.document;                                                                                        // 27
  if (typeof doc === 'undefined') {                                                                                    // 28
    return null;                                                                                                       // 29
  }                                                                                                                    // 30
  try {                                                                                                                // 31
    return doc.activeElement || doc.body;                                                                              // 32
  } catch (e) {                                                                                                        // 33
    return doc.body;                                                                                                   // 34
  }                                                                                                                    // 35
}                                                                                                                      // 36
                                                                                                                       // 37
module.exports = getActiveElement;                                                                                     // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"react-dom":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/package.json                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "react-dom";                                                                                            // 1
exports.version = "15.4.2";                                                                                            // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":["./lib/ReactDOM",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/index.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
module.exports = require('./lib/ReactDOM');                                                                            // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"lib":{"ReactDOM.js":["./ReactDOMComponentTree","./ReactDefaultInjection","./ReactMount","./ReactReconciler","./ReactUpdates","./ReactVersion","./findDOMNode","./getHostComponentFromComposite","./renderSubtreeIntoContainer","fbjs/lib/warning","fbjs/lib/ExecutionEnvironment","./ReactInstrumentation","./ReactDOMUnknownPropertyHook","./ReactDOMNullInputValuePropHook","./ReactDOMInvalidARIAHook",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOM.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/                                                                            // 11
                                                                                                                       // 12
'use strict';                                                                                                          // 13
                                                                                                                       // 14
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 15
var ReactDefaultInjection = require('./ReactDefaultInjection');                                                        // 16
var ReactMount = require('./ReactMount');                                                                              // 17
var ReactReconciler = require('./ReactReconciler');                                                                    // 18
var ReactUpdates = require('./ReactUpdates');                                                                          // 19
var ReactVersion = require('./ReactVersion');                                                                          // 20
                                                                                                                       // 21
var findDOMNode = require('./findDOMNode');                                                                            // 22
var getHostComponentFromComposite = require('./getHostComponentFromComposite');                                        // 23
var renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');                                              // 24
var warning = require('fbjs/lib/warning');                                                                             // 25
                                                                                                                       // 26
ReactDefaultInjection.inject();                                                                                        // 27
                                                                                                                       // 28
var ReactDOM = {                                                                                                       // 29
  findDOMNode: findDOMNode,                                                                                            // 30
  render: ReactMount.render,                                                                                           // 31
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,                                                           // 32
  version: ReactVersion,                                                                                               // 33
                                                                                                                       // 34
  /* eslint-disable camelcase */                                                                                       // 35
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,                                                                // 36
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer                                                      // 37
};                                                                                                                     // 38
                                                                                                                       // 39
// Inject the runtime into a devtools global hook regardless of browser.                                               // 40
// Allows for debugging when the hook is injected on the page.                                                         // 41
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({                                                                              // 43
    ComponentTree: {                                                                                                   // 44
      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,                                    // 45
      getNodeFromInstance: function (inst) {                                                                           // 46
        // inst is an internal instance (but could be a composite)                                                     // 47
        if (inst._renderedComponent) {                                                                                 // 48
          inst = getHostComponentFromComposite(inst);                                                                  // 49
        }                                                                                                              // 50
        if (inst) {                                                                                                    // 51
          return ReactDOMComponentTree.getNodeFromInstance(inst);                                                      // 52
        } else {                                                                                                       // 53
          return null;                                                                                                 // 54
        }                                                                                                              // 55
      }                                                                                                                // 56
    },                                                                                                                 // 57
    Mount: ReactMount,                                                                                                 // 58
    Reconciler: ReactReconciler                                                                                        // 59
  });                                                                                                                  // 60
}                                                                                                                      // 61
                                                                                                                       // 62
if (process.env.NODE_ENV !== 'production') {                                                                           // 63
  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                 // 64
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {                                                  // 65
                                                                                                                       // 66
    // First check if devtools is not installed                                                                        // 67
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {                                                       // 68
      // If we're in Chrome or Firefox, provide a download link if not installed.                                      // 69
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        // Firefox does not have the issue with devtools loaded over file://                                           // 71
        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
      }                                                                                                                // 74
    }                                                                                                                  // 75
                                                                                                                       // 76
    var testFunc = function testFn() {};                                                                               // 77
    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;
                                                                                                                       // 79
    // If we're in IE8, check to see if we are in compatibility mode and provide                                       // 80
    // information on preventing compatibility mode                                                                    // 81
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;                                      // 82
                                                                                                                       // 83
    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;
                                                                                                                       // 85
    var expectedFeatures = [                                                                                           // 86
    // shims                                                                                                           // 87
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];
                                                                                                                       // 89
    for (var i = 0; i < expectedFeatures.length; i++) {                                                                // 90
      if (!expectedFeatures[i]) {                                                                                      // 91
        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
        break;                                                                                                         // 93
      }                                                                                                                // 94
    }                                                                                                                  // 95
  }                                                                                                                    // 96
}                                                                                                                      // 97
                                                                                                                       // 98
if (process.env.NODE_ENV !== 'production') {                                                                           // 99
  var ReactInstrumentation = require('./ReactInstrumentation');                                                        // 100
  var ReactDOMUnknownPropertyHook = require('./ReactDOMUnknownPropertyHook');                                          // 101
  var ReactDOMNullInputValuePropHook = require('./ReactDOMNullInputValuePropHook');                                    // 102
  var ReactDOMInvalidARIAHook = require('./ReactDOMInvalidARIAHook');                                                  // 103
                                                                                                                       // 104
  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);                                                 // 105
  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);                                              // 106
  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);                                                     // 107
}                                                                                                                      // 108
                                                                                                                       // 109
module.exports = ReactDOM;                                                                                             // 110
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMComponentTree.js":["./reactProdInvariant","./DOMProperty","./ReactDOMComponentFlags","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMComponentTree.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var DOMProperty = require('./DOMProperty');                                                                            // 15
var ReactDOMComponentFlags = require('./ReactDOMComponentFlags');                                                      // 16
                                                                                                                       // 17
var invariant = require('fbjs/lib/invariant');                                                                         // 18
                                                                                                                       // 19
var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;                                                                         // 20
var Flags = ReactDOMComponentFlags;                                                                                    // 21
                                                                                                                       // 22
var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);                            // 23
                                                                                                                       // 24
/**                                                                                                                    // 25
 * Check if a given node should be cached.                                                                             // 26
 */                                                                                                                    // 27
function shouldPrecacheNode(node, nodeID) {                                                                            // 28
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}                                                                                                                      // 30
                                                                                                                       // 31
/**                                                                                                                    // 32
 * Drill down (through composites and empty components) until we get a host or                                         // 33
 * host text component.                                                                                                // 34
 *                                                                                                                     // 35
 * This is pretty polymorphic but unavoidable with the current structure we have                                       // 36
 * for `_renderedChildren`.                                                                                            // 37
 */                                                                                                                    // 38
function getRenderedHostOrTextFromComponent(component) {                                                               // 39
  var rendered;                                                                                                        // 40
  while (rendered = component._renderedComponent) {                                                                    // 41
    component = rendered;                                                                                              // 42
  }                                                                                                                    // 43
  return component;                                                                                                    // 44
}                                                                                                                      // 45
                                                                                                                       // 46
/**                                                                                                                    // 47
 * Populate `_hostNode` on the rendered host/text component with the given                                             // 48
 * DOM node. The passed `inst` can be a composite.                                                                     // 49
 */                                                                                                                    // 50
function precacheNode(inst, node) {                                                                                    // 51
  var hostInst = getRenderedHostOrTextFromComponent(inst);                                                             // 52
  hostInst._hostNode = node;                                                                                           // 53
  node[internalInstanceKey] = hostInst;                                                                                // 54
}                                                                                                                      // 55
                                                                                                                       // 56
function uncacheNode(inst) {                                                                                           // 57
  var node = inst._hostNode;                                                                                           // 58
  if (node) {                                                                                                          // 59
    delete node[internalInstanceKey];                                                                                  // 60
    inst._hostNode = null;                                                                                             // 61
  }                                                                                                                    // 62
}                                                                                                                      // 63
                                                                                                                       // 64
/**                                                                                                                    // 65
 * Populate `_hostNode` on each child of `inst`, assuming that the children                                            // 66
 * match up with the DOM (element) children of `node`.                                                                 // 67
 *                                                                                                                     // 68
 * We cache entire levels at once to avoid an n^2 problem where we access the                                          // 69
 * children of a node sequentially and have to walk from the start to our target                                       // 70
 * node every time.                                                                                                    // 71
 *                                                                                                                     // 72
 * Since we update `_renderedChildren` and the actual DOM at (slightly)                                                // 73
 * different times, we could race here and see a newer `_renderedChildren` than                                        // 74
 * the DOM nodes we see. To avoid this, ReactMultiChild calls                                                          // 75
 * `prepareToManageChildren` before we change `_renderedChildren`, at which                                            // 76
 * time the container's child nodes are always cached (until it unmounts).                                             // 77
 */                                                                                                                    // 78
function precacheChildNodes(inst, node) {                                                                              // 79
  if (inst._flags & Flags.hasCachedChildNodes) {                                                                       // 80
    return;                                                                                                            // 81
  }                                                                                                                    // 82
  var children = inst._renderedChildren;                                                                               // 83
  var childNode = node.firstChild;                                                                                     // 84
  outer: for (var name in children) {                                                                                  // 85
    if (!children.hasOwnProperty(name)) {                                                                              // 86
      continue;                                                                                                        // 87
    }                                                                                                                  // 88
    var childInst = children[name];                                                                                    // 89
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;                                                // 90
    if (childID === 0) {                                                                                               // 91
      // We're currently unmounting this child in ReactMultiChild; skip it.                                            // 92
      continue;                                                                                                        // 93
    }                                                                                                                  // 94
    // We assume the child nodes are in the same order as the child instances.                                         // 95
    for (; childNode !== null; childNode = childNode.nextSibling) {                                                    // 96
      if (shouldPrecacheNode(childNode, childID)) {                                                                    // 97
        precacheNode(childInst, childNode);                                                                            // 98
        continue outer;                                                                                                // 99
      }                                                                                                                // 100
    }                                                                                                                  // 101
    // We reached the end of the DOM children without finding an ID match.                                             // 102
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }                                                                                                                    // 104
  inst._flags |= Flags.hasCachedChildNodes;                                                                            // 105
}                                                                                                                      // 106
                                                                                                                       // 107
/**                                                                                                                    // 108
 * Given a DOM node, return the closest ReactDOMComponent or                                                           // 109
 * ReactDOMTextComponent instance ancestor.                                                                            // 110
 */                                                                                                                    // 111
function getClosestInstanceFromNode(node) {                                                                            // 112
  if (node[internalInstanceKey]) {                                                                                     // 113
    return node[internalInstanceKey];                                                                                  // 114
  }                                                                                                                    // 115
                                                                                                                       // 116
  // Walk up the tree until we find an ancestor whose instance we have cached.                                         // 117
  var parents = [];                                                                                                    // 118
  while (!node[internalInstanceKey]) {                                                                                 // 119
    parents.push(node);                                                                                                // 120
    if (node.parentNode) {                                                                                             // 121
      node = node.parentNode;                                                                                          // 122
    } else {                                                                                                           // 123
      // Top of the tree. This node must not be part of a React tree (or is                                            // 124
      // unmounted, potentially).                                                                                      // 125
      return null;                                                                                                     // 126
    }                                                                                                                  // 127
  }                                                                                                                    // 128
                                                                                                                       // 129
  var closest;                                                                                                         // 130
  var inst;                                                                                                            // 131
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {                                           // 132
    closest = inst;                                                                                                    // 133
    if (parents.length) {                                                                                              // 134
      precacheChildNodes(inst, node);                                                                                  // 135
    }                                                                                                                  // 136
  }                                                                                                                    // 137
                                                                                                                       // 138
  return closest;                                                                                                      // 139
}                                                                                                                      // 140
                                                                                                                       // 141
/**                                                                                                                    // 142
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent                                             // 143
 * instance, or null if the node was not rendered by this React.                                                       // 144
 */                                                                                                                    // 145
function getInstanceFromNode(node) {                                                                                   // 146
  var inst = getClosestInstanceFromNode(node);                                                                         // 147
  if (inst != null && inst._hostNode === node) {                                                                       // 148
    return inst;                                                                                                       // 149
  } else {                                                                                                             // 150
    return null;                                                                                                       // 151
  }                                                                                                                    // 152
}                                                                                                                      // 153
                                                                                                                       // 154
/**                                                                                                                    // 155
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding                                        // 156
 * DOM node.                                                                                                           // 157
 */                                                                                                                    // 158
function getNodeFromInstance(inst) {                                                                                   // 159
  // Without this first invariant, passing a non-DOM-component triggers the next                                       // 160
  // invariant for a missing parent, which is super confusing.                                                         // 161
  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
                                                                                                                       // 163
  if (inst._hostNode) {                                                                                                // 164
    return inst._hostNode;                                                                                             // 165
  }                                                                                                                    // 166
                                                                                                                       // 167
  // Walk up the tree until we find an ancestor whose DOM node we have cached.                                         // 168
  var parents = [];                                                                                                    // 169
  while (!inst._hostNode) {                                                                                            // 170
    parents.push(inst);                                                                                                // 171
    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;                                                                                           // 173
  }                                                                                                                    // 174
                                                                                                                       // 175
  // Now parents contains each ancestor that does *not* have a cached native                                           // 176
  // node, and `inst` is the deepest ancestor that does.                                                               // 177
  for (; parents.length; inst = parents.pop()) {                                                                       // 178
    precacheChildNodes(inst, inst._hostNode);                                                                          // 179
  }                                                                                                                    // 180
                                                                                                                       // 181
  return inst._hostNode;                                                                                               // 182
}                                                                                                                      // 183
                                                                                                                       // 184
var ReactDOMComponentTree = {                                                                                          // 185
  getClosestInstanceFromNode: getClosestInstanceFromNode,                                                              // 186
  getInstanceFromNode: getInstanceFromNode,                                                                            // 187
  getNodeFromInstance: getNodeFromInstance,                                                                            // 188
  precacheChildNodes: precacheChildNodes,                                                                              // 189
  precacheNode: precacheNode,                                                                                          // 190
  uncacheNode: uncacheNode                                                                                             // 191
};                                                                                                                     // 192
                                                                                                                       // 193
module.exports = ReactDOMComponentTree;                                                                                // 194
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"reactProdInvariant.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/reactProdInvariant.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * WARNING: DO NOT manually require this module.                                                                       // 14
 * This is a replacement for `invariant(...)` used by the error code system                                            // 15
 * and will _only_ be required by the corresponding babel pass.                                                        // 16
 * It always throws.                                                                                                   // 17
 */                                                                                                                    // 18
                                                                                                                       // 19
function reactProdInvariant(code) {                                                                                    // 20
  var argCount = arguments.length - 1;                                                                                 // 21
                                                                                                                       // 22
  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
                                                                                                                       // 24
  for (var argIdx = 0; argIdx < argCount; argIdx++) {                                                                  // 25
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);                                                 // 26
  }                                                                                                                    // 27
                                                                                                                       // 28
  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
                                                                                                                       // 30
  var error = new Error(message);                                                                                      // 31
  error.name = 'Invariant Violation';                                                                                  // 32
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame                                         // 33
                                                                                                                       // 34
  throw error;                                                                                                         // 35
}                                                                                                                      // 36
                                                                                                                       // 37
module.exports = reactProdInvariant;                                                                                   // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"DOMProperty.js":["./reactProdInvariant","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/DOMProperty.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var invariant = require('fbjs/lib/invariant');                                                                         // 15
                                                                                                                       // 16
function checkMask(value, bitmask) {                                                                                   // 17
  return (value & bitmask) === bitmask;                                                                                // 18
}                                                                                                                      // 19
                                                                                                                       // 20
var DOMPropertyInjection = {                                                                                           // 21
  /**                                                                                                                  // 22
   * Mapping from normalized, camelcased property names to a configuration that                                        // 23
   * specifies how the associated DOM property should be accessed or rendered.                                         // 24
   */                                                                                                                  // 25
  MUST_USE_PROPERTY: 0x1,                                                                                              // 26
  HAS_BOOLEAN_VALUE: 0x4,                                                                                              // 27
  HAS_NUMERIC_VALUE: 0x8,                                                                                              // 28
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,                                                                              // 29
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,                                                                                  // 30
                                                                                                                       // 31
  /**                                                                                                                  // 32
   * Inject some specialized knowledge about the DOM. This takes a config object                                       // 33
   * with the following properties:                                                                                    // 34
   *                                                                                                                   // 35
   * isCustomAttribute: function that given an attribute name will return true                                         // 36
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*                                          // 37
   * attributes where it's impossible to enumerate all of the possible                                                 // 38
   * attribute names,                                                                                                  // 39
   *                                                                                                                   // 40
   * Properties: object mapping DOM property name to one of the                                                        // 41
   * DOMPropertyInjection constants or null. If your attribute isn't in here,                                          // 42
   * it won't get written to the DOM.                                                                                  // 43
   *                                                                                                                   // 44
   * DOMAttributeNames: object mapping React attribute name to the DOM                                                 // 45
   * attribute name. Attribute names not specified use the **lowercase**                                               // 46
   * normalized name.                                                                                                  // 47
   *                                                                                                                   // 48
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM                                            // 49
   * attribute namespace URL. (Attribute names not specified use no namespace.)                                        // 50
   *                                                                                                                   // 51
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.                                            // 52
   * Property names not specified use the normalized name.                                                             // 53
   *                                                                                                                   // 54
   * DOMMutationMethods: Properties that require special mutation methods. If                                          // 55
   * `value` is undefined, the mutation method should unset the property.                                              // 56
   *                                                                                                                   // 57
   * @param {object} domPropertyConfig the config as described above.                                                  // 58
   */                                                                                                                  // 59
  injectDOMPropertyConfig: function (domPropertyConfig) {                                                              // 60
    var Injection = DOMPropertyInjection;                                                                              // 61
    var Properties = domPropertyConfig.Properties || {};                                                               // 62
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};                                       // 63
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};                                                 // 64
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};                                                   // 65
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};                                               // 66
                                                                                                                       // 67
    if (domPropertyConfig.isCustomAttribute) {                                                                         // 68
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);                               // 69
    }                                                                                                                  // 70
                                                                                                                       // 71
    for (var propName in Properties) {                                                                                 // 72
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;
                                                                                                                       // 74
      var lowerCased = propName.toLowerCase();                                                                         // 75
      var propConfig = Properties[propName];                                                                           // 76
                                                                                                                       // 77
      var propertyInfo = {                                                                                             // 78
        attributeName: lowerCased,                                                                                     // 79
        attributeNamespace: null,                                                                                      // 80
        propertyName: propName,                                                                                        // 81
        mutationMethod: null,                                                                                          // 82
                                                                                                                       // 83
        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),                                           // 84
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),                                           // 85
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),                                           // 86
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),                          // 87
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)                       // 88
      };                                                                                                               // 89
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;
                                                                                                                       // 91
      if (process.env.NODE_ENV !== 'production') {                                                                     // 92
        DOMProperty.getPossibleStandardName[lowerCased] = propName;                                                    // 93
      }                                                                                                                // 94
                                                                                                                       // 95
      if (DOMAttributeNames.hasOwnProperty(propName)) {                                                                // 96
        var attributeName = DOMAttributeNames[propName];                                                               // 97
        propertyInfo.attributeName = attributeName;                                                                    // 98
        if (process.env.NODE_ENV !== 'production') {                                                                   // 99
          DOMProperty.getPossibleStandardName[attributeName] = propName;                                               // 100
        }                                                                                                              // 101
      }                                                                                                                // 102
                                                                                                                       // 103
      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {                                                           // 104
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];                                            // 105
      }                                                                                                                // 106
                                                                                                                       // 107
      if (DOMPropertyNames.hasOwnProperty(propName)) {                                                                 // 108
        propertyInfo.propertyName = DOMPropertyNames[propName];                                                        // 109
      }                                                                                                                // 110
                                                                                                                       // 111
      if (DOMMutationMethods.hasOwnProperty(propName)) {                                                               // 112
        propertyInfo.mutationMethod = DOMMutationMethods[propName];                                                    // 113
      }                                                                                                                // 114
                                                                                                                       // 115
      DOMProperty.properties[propName] = propertyInfo;                                                                 // 116
    }                                                                                                                  // 117
  }                                                                                                                    // 118
};                                                                                                                     // 119
                                                                                                                       // 120
/* eslint-disable max-len */                                                                                           // 121
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */                                                                                            // 123
                                                                                                                       // 124
/**                                                                                                                    // 125
 * DOMProperty exports lookup objects that can be used like functions:                                                 // 126
 *                                                                                                                     // 127
 *   > DOMProperty.isValid['id']                                                                                       // 128
 *   true                                                                                                              // 129
 *   > DOMProperty.isValid['foobar']                                                                                   // 130
 *   undefined                                                                                                         // 131
 *                                                                                                                     // 132
 * Although this may be confusing, it performs better in general.                                                      // 133
 *                                                                                                                     // 134
 * @see http://jsperf.com/key-exists                                                                                   // 135
 * @see http://jsperf.com/key-missing                                                                                  // 136
 */                                                                                                                    // 137
var DOMProperty = {                                                                                                    // 138
                                                                                                                       // 139
  ID_ATTRIBUTE_NAME: 'data-reactid',                                                                                   // 140
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',                                                                               // 141
                                                                                                                       // 142
  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,                                                                // 143
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',                     // 144
                                                                                                                       // 145
  /**                                                                                                                  // 146
   * Map from property "standard name" to an object with info about how to set                                         // 147
   * the property in the DOM. Each object contains:                                                                    // 148
   *                                                                                                                   // 149
   * attributeName:                                                                                                    // 150
   *   Used when rendering markup or with `*Attribute()`.                                                              // 151
   * attributeNamespace                                                                                                // 152
   * propertyName:                                                                                                     // 153
   *   Used on DOM node instances. (This includes properties that mutate due to                                        // 154
   *   external factors.)                                                                                              // 155
   * mutationMethod:                                                                                                   // 156
   *   If non-null, used instead of the property or `setAttribute()` after                                             // 157
   *   initial render.                                                                                                 // 158
   * mustUseProperty:                                                                                                  // 159
   *   Whether the property must be accessed and mutated as an object property.                                        // 160
   * hasBooleanValue:                                                                                                  // 161
   *   Whether the property should be removed when set to a falsey value.                                              // 162
   * hasNumericValue:                                                                                                  // 163
   *   Whether the property must be numeric or parse as a numeric and should be                                        // 164
   *   removed when set to a falsey value.                                                                             // 165
   * hasPositiveNumericValue:                                                                                          // 166
   *   Whether the property must be positive numeric or parse as a positive                                            // 167
   *   numeric and should be removed when set to a falsey value.                                                       // 168
   * hasOverloadedBooleanValue:                                                                                        // 169
   *   Whether the property can be used as a flag as well as with a value.                                             // 170
   *   Removed when strictly equal to false; present without a value when                                              // 171
   *   strictly equal to true; present with a value otherwise.                                                         // 172
   */                                                                                                                  // 173
  properties: {},                                                                                                      // 174
                                                                                                                       // 175
  /**                                                                                                                  // 176
   * Mapping from lowercase property names to the properly cased version, used                                         // 177
   * to warn in the case of missing properties. Available only in __DEV__.                                             // 178
   *                                                                                                                   // 179
   * autofocus is predefined, because adding it to the property whitelist                                              // 180
   * causes unintended side effects.                                                                                   // 181
   *                                                                                                                   // 182
   * @type {Object}                                                                                                    // 183
   */                                                                                                                  // 184
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,                  // 185
                                                                                                                       // 186
  /**                                                                                                                  // 187
   * All of the isCustomAttribute() functions that have been injected.                                                 // 188
   */                                                                                                                  // 189
  _isCustomAttributeFunctions: [],                                                                                     // 190
                                                                                                                       // 191
  /**                                                                                                                  // 192
   * Checks whether a property name is a custom attribute.                                                             // 193
   * @method                                                                                                           // 194
   */                                                                                                                  // 195
  isCustomAttribute: function (attributeName) {                                                                        // 196
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {                                         // 197
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];                                            // 198
      if (isCustomAttributeFn(attributeName)) {                                                                        // 199
        return true;                                                                                                   // 200
      }                                                                                                                // 201
    }                                                                                                                  // 202
    return false;                                                                                                      // 203
  },                                                                                                                   // 204
                                                                                                                       // 205
  injection: DOMPropertyInjection                                                                                      // 206
};                                                                                                                     // 207
                                                                                                                       // 208
module.exports = DOMProperty;                                                                                          // 209
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMComponentFlags.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMComponentFlags.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2015-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ReactDOMComponentFlags = {                                                                                         // 13
  hasCachedChildNodes: 1 << 0                                                                                          // 14
};                                                                                                                     // 15
                                                                                                                       // 16
module.exports = ReactDOMComponentFlags;                                                                               // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ReactDefaultInjection.js":["./ARIADOMPropertyConfig","./BeforeInputEventPlugin","./ChangeEventPlugin","./DefaultEventPluginOrder","./EnterLeaveEventPlugin","./HTMLDOMPropertyConfig","./ReactComponentBrowserEnvironment","./ReactDOMComponent","./ReactDOMComponentTree","./ReactDOMEmptyComponent","./ReactDOMTreeTraversal","./ReactDOMTextComponent","./ReactDefaultBatchingStrategy","./ReactEventListener","./ReactInjection","./ReactReconcileTransaction","./SVGDOMPropertyConfig","./SelectEventPlugin","./SimpleEventPlugin",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDefaultInjection.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ARIADOMPropertyConfig = require('./ARIADOMPropertyConfig');                                                        // 13
var BeforeInputEventPlugin = require('./BeforeInputEventPlugin');                                                      // 14
var ChangeEventPlugin = require('./ChangeEventPlugin');                                                                // 15
var DefaultEventPluginOrder = require('./DefaultEventPluginOrder');                                                    // 16
var EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');                                                        // 17
var HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');                                                        // 18
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');                                  // 19
var ReactDOMComponent = require('./ReactDOMComponent');                                                                // 20
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 21
var ReactDOMEmptyComponent = require('./ReactDOMEmptyComponent');                                                      // 22
var ReactDOMTreeTraversal = require('./ReactDOMTreeTraversal');                                                        // 23
var ReactDOMTextComponent = require('./ReactDOMTextComponent');                                                        // 24
var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');                                          // 25
var ReactEventListener = require('./ReactEventListener');                                                              // 26
var ReactInjection = require('./ReactInjection');                                                                      // 27
var ReactReconcileTransaction = require('./ReactReconcileTransaction');                                                // 28
var SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');                                                          // 29
var SelectEventPlugin = require('./SelectEventPlugin');                                                                // 30
var SimpleEventPlugin = require('./SimpleEventPlugin');                                                                // 31
                                                                                                                       // 32
var alreadyInjected = false;                                                                                           // 33
                                                                                                                       // 34
function inject() {                                                                                                    // 35
  if (alreadyInjected) {                                                                                               // 36
    // TODO: This is currently true because these injections are shared between                                        // 37
    // the client and the server package. They should be built independently                                           // 38
    // and not share any injection state. Then this problem will be solved.                                            // 39
    return;                                                                                                            // 40
  }                                                                                                                    // 41
  alreadyInjected = true;                                                                                              // 42
                                                                                                                       // 43
  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);                                            // 44
                                                                                                                       // 45
  /**                                                                                                                  // 46
   * Inject modules for resolving DOM hierarchy and plugin ordering.                                                   // 47
   */                                                                                                                  // 48
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);                                       // 49
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);                                          // 50
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);                                          // 51
                                                                                                                       // 52
  /**                                                                                                                  // 53
   * Some important event plugins included by default (without having to require                                       // 54
   * them).                                                                                                            // 55
   */                                                                                                                  // 56
  ReactInjection.EventPluginHub.injectEventPluginsByName({                                                             // 57
    SimpleEventPlugin: SimpleEventPlugin,                                                                              // 58
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,                                                                      // 59
    ChangeEventPlugin: ChangeEventPlugin,                                                                              // 60
    SelectEventPlugin: SelectEventPlugin,                                                                              // 61
    BeforeInputEventPlugin: BeforeInputEventPlugin                                                                     // 62
  });                                                                                                                  // 63
                                                                                                                       // 64
  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);                                         // 65
                                                                                                                       // 66
  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);                                        // 67
                                                                                                                       // 68
  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);                                           // 69
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);                                           // 70
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);                                            // 71
                                                                                                                       // 72
  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {                                   // 73
    return new ReactDOMEmptyComponent(instantiate);                                                                    // 74
  });                                                                                                                  // 75
                                                                                                                       // 76
  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);                                        // 77
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);                                         // 78
                                                                                                                       // 79
  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);                                        // 80
}                                                                                                                      // 81
                                                                                                                       // 82
module.exports = {                                                                                                     // 83
  inject: inject                                                                                                       // 84
};                                                                                                                     // 85
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ARIADOMPropertyConfig.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ARIADOMPropertyConfig.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ARIADOMPropertyConfig = {                                                                                          // 13
  Properties: {                                                                                                        // 14
    // Global States and Properties                                                                                    // 15
    'aria-current': 0, // state                                                                                        // 16
    'aria-details': 0,                                                                                                 // 17
    'aria-disabled': 0, // state                                                                                       // 18
    'aria-hidden': 0, // state                                                                                         // 19
    'aria-invalid': 0, // state                                                                                        // 20
    'aria-keyshortcuts': 0,                                                                                            // 21
    'aria-label': 0,                                                                                                   // 22
    'aria-roledescription': 0,                                                                                         // 23
    // Widget Attributes                                                                                               // 24
    'aria-autocomplete': 0,                                                                                            // 25
    'aria-checked': 0,                                                                                                 // 26
    'aria-expanded': 0,                                                                                                // 27
    'aria-haspopup': 0,                                                                                                // 28
    'aria-level': 0,                                                                                                   // 29
    'aria-modal': 0,                                                                                                   // 30
    'aria-multiline': 0,                                                                                               // 31
    'aria-multiselectable': 0,                                                                                         // 32
    'aria-orientation': 0,                                                                                             // 33
    'aria-placeholder': 0,                                                                                             // 34
    'aria-pressed': 0,                                                                                                 // 35
    'aria-readonly': 0,                                                                                                // 36
    'aria-required': 0,                                                                                                // 37
    'aria-selected': 0,                                                                                                // 38
    'aria-sort': 0,                                                                                                    // 39
    'aria-valuemax': 0,                                                                                                // 40
    'aria-valuemin': 0,                                                                                                // 41
    'aria-valuenow': 0,                                                                                                // 42
    'aria-valuetext': 0,                                                                                               // 43
    // Live Region Attributes                                                                                          // 44
    'aria-atomic': 0,                                                                                                  // 45
    'aria-busy': 0,                                                                                                    // 46
    'aria-live': 0,                                                                                                    // 47
    'aria-relevant': 0,                                                                                                // 48
    // Drag-and-Drop Attributes                                                                                        // 49
    'aria-dropeffect': 0,                                                                                              // 50
    'aria-grabbed': 0,                                                                                                 // 51
    // Relationship Attributes                                                                                         // 52
    'aria-activedescendant': 0,                                                                                        // 53
    'aria-colcount': 0,                                                                                                // 54
    'aria-colindex': 0,                                                                                                // 55
    'aria-colspan': 0,                                                                                                 // 56
    'aria-controls': 0,                                                                                                // 57
    'aria-describedby': 0,                                                                                             // 58
    'aria-errormessage': 0,                                                                                            // 59
    'aria-flowto': 0,                                                                                                  // 60
    'aria-labelledby': 0,                                                                                              // 61
    'aria-owns': 0,                                                                                                    // 62
    'aria-posinset': 0,                                                                                                // 63
    'aria-rowcount': 0,                                                                                                // 64
    'aria-rowindex': 0,                                                                                                // 65
    'aria-rowspan': 0,                                                                                                 // 66
    'aria-setsize': 0                                                                                                  // 67
  },                                                                                                                   // 68
  DOMAttributeNames: {},                                                                                               // 69
  DOMPropertyNames: {}                                                                                                 // 70
};                                                                                                                     // 71
                                                                                                                       // 72
module.exports = ARIADOMPropertyConfig;                                                                                // 73
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"BeforeInputEventPlugin.js":["./EventPropagators","fbjs/lib/ExecutionEnvironment","./FallbackCompositionState","./SyntheticCompositionEvent","./SyntheticInputEvent",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/BeforeInputEventPlugin.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present Facebook, Inc.                                                                               // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var EventPropagators = require('./EventPropagators');                                                                  // 13
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14
var FallbackCompositionState = require('./FallbackCompositionState');                                                  // 15
var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');                                                // 16
var SyntheticInputEvent = require('./SyntheticInputEvent');                                                            // 17
                                                                                                                       // 18
var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space                                                         // 19
var START_KEYCODE = 229;                                                                                               // 20
                                                                                                                       // 21
var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;                           // 22
                                                                                                                       // 23
var documentMode = null;                                                                                               // 24
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {                                                    // 25
  documentMode = document.documentMode;                                                                                // 26
}                                                                                                                      // 27
                                                                                                                       // 28
// Webkit offers a very useful `textInput` event that can be used to                                                   // 29
// directly represent `beforeInput`. The IE `textinput` event is not as                                                // 30
// useful, so we don't use it.                                                                                         // 31
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();    // 32
                                                                                                                       // 33
// In IE9+, we have access to composition events, but the data supplied                                                // 34
// by the native compositionend event may be incorrect. Japanese ideographic                                           // 35
// spaces, for instance (\u3000) are not recorded correctly.                                                           // 36
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
                                                                                                                       // 38
/**                                                                                                                    // 39
 * Opera <= 12 includes TextEvent in window, but does not fire                                                         // 40
 * text input events. Rely on keypress instead.                                                                        // 41
 */                                                                                                                    // 42
function isPresto() {                                                                                                  // 43
  var opera = window.opera;                                                                                            // 44
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;      // 45
}                                                                                                                      // 46
                                                                                                                       // 47
var SPACEBAR_CODE = 32;                                                                                                // 48
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);                                                                // 49
                                                                                                                       // 50
// Events and their corresponding property names.                                                                      // 51
var eventTypes = {                                                                                                     // 52
  beforeInput: {                                                                                                       // 53
    phasedRegistrationNames: {                                                                                         // 54
      bubbled: 'onBeforeInput',                                                                                        // 55
      captured: 'onBeforeInputCapture'                                                                                 // 56
    },                                                                                                                 // 57
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']                                     // 58
  },                                                                                                                   // 59
  compositionEnd: {                                                                                                    // 60
    phasedRegistrationNames: {                                                                                         // 61
      bubbled: 'onCompositionEnd',                                                                                     // 62
      captured: 'onCompositionEndCapture'                                                                              // 63
    },                                                                                                                 // 64
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']            // 65
  },                                                                                                                   // 66
  compositionStart: {                                                                                                  // 67
    phasedRegistrationNames: {                                                                                         // 68
      bubbled: 'onCompositionStart',                                                                                   // 69
      captured: 'onCompositionStartCapture'                                                                            // 70
    },                                                                                                                 // 71
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']          // 72
  },                                                                                                                   // 73
  compositionUpdate: {                                                                                                 // 74
    phasedRegistrationNames: {                                                                                         // 75
      bubbled: 'onCompositionUpdate',                                                                                  // 76
      captured: 'onCompositionUpdateCapture'                                                                           // 77
    },                                                                                                                 // 78
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']         // 79
  }                                                                                                                    // 80
};                                                                                                                     // 81
                                                                                                                       // 82
// Track whether we've ever handled a keypress on the space key.                                                       // 83
var hasSpaceKeypress = false;                                                                                          // 84
                                                                                                                       // 85
/**                                                                                                                    // 86
 * Return whether a native keypress event is assumed to be a command.                                                  // 87
 * This is required because Firefox fires `keypress` events for key commands                                           // 88
 * (cut, copy, select-all, etc.) even though no character is inserted.                                                 // 89
 */                                                                                                                    // 90
function isKeypressCommand(nativeEvent) {                                                                              // 91
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&                                         // 92
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.                                                   // 93
  !(nativeEvent.ctrlKey && nativeEvent.altKey);                                                                        // 94
}                                                                                                                      // 95
                                                                                                                       // 96
/**                                                                                                                    // 97
 * Translate native top level events into event types.                                                                 // 98
 *                                                                                                                     // 99
 * @param {string} topLevelType                                                                                        // 100
 * @return {object}                                                                                                    // 101
 */                                                                                                                    // 102
function getCompositionEventType(topLevelType) {                                                                       // 103
  switch (topLevelType) {                                                                                              // 104
    case 'topCompositionStart':                                                                                        // 105
      return eventTypes.compositionStart;                                                                              // 106
    case 'topCompositionEnd':                                                                                          // 107
      return eventTypes.compositionEnd;                                                                                // 108
    case 'topCompositionUpdate':                                                                                       // 109
      return eventTypes.compositionUpdate;                                                                             // 110
  }                                                                                                                    // 111
}                                                                                                                      // 112
                                                                                                                       // 113
/**                                                                                                                    // 114
 * Does our fallback best-guess model think this event signifies that                                                  // 115
 * composition has begun?                                                                                              // 116
 *                                                                                                                     // 117
 * @param {string} topLevelType                                                                                        // 118
 * @param {object} nativeEvent                                                                                         // 119
 * @return {boolean}                                                                                                   // 120
 */                                                                                                                    // 121
function isFallbackCompositionStart(topLevelType, nativeEvent) {                                                       // 122
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;                                       // 123
}                                                                                                                      // 124
                                                                                                                       // 125
/**                                                                                                                    // 126
 * Does our fallback mode think that this event is the end of composition?                                             // 127
 *                                                                                                                     // 128
 * @param {string} topLevelType                                                                                        // 129
 * @param {object} nativeEvent                                                                                         // 130
 * @return {boolean}                                                                                                   // 131
 */                                                                                                                    // 132
function isFallbackCompositionEnd(topLevelType, nativeEvent) {                                                         // 133
  switch (topLevelType) {                                                                                              // 134
    case 'topKeyUp':                                                                                                   // 135
      // Command keys insert or clear IME input.                                                                       // 136
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;                                                         // 137
    case 'topKeyDown':                                                                                                 // 138
      // Expect IME keyCode on each keydown. If we get any other                                                       // 139
      // code we must have exited earlier.                                                                             // 140
      return nativeEvent.keyCode !== START_KEYCODE;                                                                    // 141
    case 'topKeyPress':                                                                                                // 142
    case 'topMouseDown':                                                                                               // 143
    case 'topBlur':                                                                                                    // 144
      // Events are not possible without cancelling IME.                                                               // 145
      return true;                                                                                                     // 146
    default:                                                                                                           // 147
      return false;                                                                                                    // 148
  }                                                                                                                    // 149
}                                                                                                                      // 150
                                                                                                                       // 151
/**                                                                                                                    // 152
 * Google Input Tools provides composition data via a CustomEvent,                                                     // 153
 * with the `data` property populated in the `detail` object. If this                                                  // 154
 * is available on the event object, use it. If not, this is a plain                                                   // 155
 * composition event and we have nothing special to extract.                                                           // 156
 *                                                                                                                     // 157
 * @param {object} nativeEvent                                                                                         // 158
 * @return {?string}                                                                                                   // 159
 */                                                                                                                    // 160
function getDataFromCustomEvent(nativeEvent) {                                                                         // 161
  var detail = nativeEvent.detail;                                                                                     // 162
  if (typeof detail === 'object' && 'data' in detail) {                                                                // 163
    return detail.data;                                                                                                // 164
  }                                                                                                                    // 165
  return null;                                                                                                         // 166
}                                                                                                                      // 167
                                                                                                                       // 168
// Track the current IME composition fallback object, if any.                                                          // 169
var currentComposition = null;                                                                                         // 170
                                                                                                                       // 171
/**                                                                                                                    // 172
 * @return {?object} A SyntheticCompositionEvent.                                                                      // 173
 */                                                                                                                    // 174
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {                           // 175
  var eventType;                                                                                                       // 176
  var fallbackData;                                                                                                    // 177
                                                                                                                       // 178
  if (canUseCompositionEvent) {                                                                                        // 179
    eventType = getCompositionEventType(topLevelType);                                                                 // 180
  } else if (!currentComposition) {                                                                                    // 181
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {                                                       // 182
      eventType = eventTypes.compositionStart;                                                                         // 183
    }                                                                                                                  // 184
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {                                                    // 185
    eventType = eventTypes.compositionEnd;                                                                             // 186
  }                                                                                                                    // 187
                                                                                                                       // 188
  if (!eventType) {                                                                                                    // 189
    return null;                                                                                                       // 190
  }                                                                                                                    // 191
                                                                                                                       // 192
  if (useFallbackCompositionData) {                                                                                    // 193
    // The current composition is stored statically and must not be                                                    // 194
    // overwritten while composition continues.                                                                        // 195
    if (!currentComposition && eventType === eventTypes.compositionStart) {                                            // 196
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);                                      // 197
    } else if (eventType === eventTypes.compositionEnd) {                                                              // 198
      if (currentComposition) {                                                                                        // 199
        fallbackData = currentComposition.getData();                                                                   // 200
      }                                                                                                                // 201
    }                                                                                                                  // 202
  }                                                                                                                    // 203
                                                                                                                       // 204
  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);              // 205
                                                                                                                       // 206
  if (fallbackData) {                                                                                                  // 207
    // Inject data generated from fallback path into the synthetic event.                                              // 208
    // This matches the property of native CompositionEventInterface.                                                  // 209
    event.data = fallbackData;                                                                                         // 210
  } else {                                                                                                             // 211
    var customData = getDataFromCustomEvent(nativeEvent);                                                              // 212
    if (customData !== null) {                                                                                         // 213
      event.data = customData;                                                                                         // 214
    }                                                                                                                  // 215
  }                                                                                                                    // 216
                                                                                                                       // 217
  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 218
  return event;                                                                                                        // 219
}                                                                                                                      // 220
                                                                                                                       // 221
/**                                                                                                                    // 222
 * @param {string} topLevelType Record from `EventConstants`.                                                          // 223
 * @param {object} nativeEvent Native browser event.                                                                   // 224
 * @return {?string} The string corresponding to this `beforeInput` event.                                             // 225
 */                                                                                                                    // 226
function getNativeBeforeInputChars(topLevelType, nativeEvent) {                                                        // 227
  switch (topLevelType) {                                                                                              // 228
    case 'topCompositionEnd':                                                                                          // 229
      return getDataFromCustomEvent(nativeEvent);                                                                      // 230
    case 'topKeyPress':                                                                                                // 231
      /**                                                                                                              // 232
       * If native `textInput` events are available, our goal is to make                                               // 233
       * use of them. However, there is a special case: the spacebar key.                                              // 234
       * In Webkit, preventing default on a spacebar `textInput` event                                                 // 235
       * cancels character insertion, but it *also* causes the browser                                                 // 236
       * to fall back to its default spacebar behavior of scrolling the                                                // 237
       * page.                                                                                                         // 238
       *                                                                                                               // 239
       * Tracking at:                                                                                                  // 240
       * https://code.google.com/p/chromium/issues/detail?id=355103                                                    // 241
       *                                                                                                               // 242
       * To avoid this issue, use the keypress event as if no `textInput`                                              // 243
       * event is available.                                                                                           // 244
       */                                                                                                              // 245
      var which = nativeEvent.which;                                                                                   // 246
      if (which !== SPACEBAR_CODE) {                                                                                   // 247
        return null;                                                                                                   // 248
      }                                                                                                                // 249
                                                                                                                       // 250
      hasSpaceKeypress = true;                                                                                         // 251
      return SPACEBAR_CHAR;                                                                                            // 252
                                                                                                                       // 253
    case 'topTextInput':                                                                                               // 254
      // Record the characters to be added to the DOM.                                                                 // 255
      var chars = nativeEvent.data;                                                                                    // 256
                                                                                                                       // 257
      // If it's a spacebar character, assume that we have already handled                                             // 258
      // it at the keypress level and bail immediately. Android Chrome                                                 // 259
      // doesn't give us keycodes, so we need to blacklist it.                                                         // 260
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {                                                               // 261
        return null;                                                                                                   // 262
      }                                                                                                                // 263
                                                                                                                       // 264
      return chars;                                                                                                    // 265
                                                                                                                       // 266
    default:                                                                                                           // 267
      // For other native event types, do nothing.                                                                     // 268
      return null;                                                                                                     // 269
  }                                                                                                                    // 270
}                                                                                                                      // 271
                                                                                                                       // 272
/**                                                                                                                    // 273
 * For browsers that do not provide the `textInput` event, extract the                                                 // 274
 * appropriate string to use for SyntheticInputEvent.                                                                  // 275
 *                                                                                                                     // 276
 * @param {string} topLevelType Record from `EventConstants`.                                                          // 277
 * @param {object} nativeEvent Native browser event.                                                                   // 278
 * @return {?string} The fallback string for this `beforeInput` event.                                                 // 279
 */                                                                                                                    // 280
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {                                                      // 281
  // If we are currently composing (IME) and using a fallback to do so,                                                // 282
  // try to extract the composed characters from the fallback object.                                                  // 283
  // If composition event is available, we extract a string only at                                                    // 284
  // compositionevent, otherwise extract it at fallback events.                                                        // 285
  if (currentComposition) {                                                                                            // 286
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();                                                                        // 288
      FallbackCompositionState.release(currentComposition);                                                            // 289
      currentComposition = null;                                                                                       // 290
      return chars;                                                                                                    // 291
    }                                                                                                                  // 292
    return null;                                                                                                       // 293
  }                                                                                                                    // 294
                                                                                                                       // 295
  switch (topLevelType) {                                                                                              // 296
    case 'topPaste':                                                                                                   // 297
      // If a paste event occurs after a keypress, throw out the input                                                 // 298
      // chars. Paste events should not lead to BeforeInput events.                                                    // 299
      return null;                                                                                                     // 300
    case 'topKeyPress':                                                                                                // 301
      /**                                                                                                              // 302
       * As of v27, Firefox may fire keypress events even when no character                                            // 303
       * will be inserted. A few possibilities:                                                                        // 304
       *                                                                                                               // 305
       * - `which` is `0`. Arrow keys, Esc key, etc.                                                                   // 306
       *                                                                                                               // 307
       * - `which` is the pressed key code, but no char is available.                                                  // 308
       *   Ex: 'AltGr + d` in Polish. There is no modified character for                                               // 309
       *   this key combination and no character is inserted into the                                                  // 310
       *   document, but FF fires the keypress for char code `100` anyway.                                             // 311
       *   No `input` event will occur.                                                                                // 312
       *                                                                                                               // 313
       * - `which` is the pressed key code, but a command combination is                                               // 314
       *   being used. Ex: `Cmd+C`. No character is inserted, and no                                                   // 315
       *   `input` event will occur.                                                                                   // 316
       */                                                                                                              // 317
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {                                                      // 318
        return String.fromCharCode(nativeEvent.which);                                                                 // 319
      }                                                                                                                // 320
      return null;                                                                                                     // 321
    case 'topCompositionEnd':                                                                                          // 322
      return useFallbackCompositionData ? null : nativeEvent.data;                                                     // 323
    default:                                                                                                           // 324
      return null;                                                                                                     // 325
  }                                                                                                                    // 326
}                                                                                                                      // 327
                                                                                                                       // 328
/**                                                                                                                    // 329
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native                                             // 330
 * `textInput` or fallback behavior.                                                                                   // 331
 *                                                                                                                     // 332
 * @return {?object} A SyntheticInputEvent.                                                                            // 333
 */                                                                                                                    // 334
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {                           // 335
  var chars;                                                                                                           // 336
                                                                                                                       // 337
  if (canUseTextInputEvent) {                                                                                          // 338
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);                                                      // 339
  } else {                                                                                                             // 340
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);                                                    // 341
  }                                                                                                                    // 342
                                                                                                                       // 343
  // If no characters are being inserted, no BeforeInput event should                                                  // 344
  // be fired.                                                                                                         // 345
  if (!chars) {                                                                                                        // 346
    return null;                                                                                                       // 347
  }                                                                                                                    // 348
                                                                                                                       // 349
  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);       // 350
                                                                                                                       // 351
  event.data = chars;                                                                                                  // 352
  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 353
  return event;                                                                                                        // 354
}                                                                                                                      // 355
                                                                                                                       // 356
/**                                                                                                                    // 357
 * Create an `onBeforeInput` event to match                                                                            // 358
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.                                       // 359
 *                                                                                                                     // 360
 * This event plugin is based on the native `textInput` event                                                          // 361
 * available in Chrome, Safari, Opera, and IE. This event fires after                                                  // 362
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.                                                          // 363
 *                                                                                                                     // 364
 * `beforeInput` is spec'd but not implemented in any browsers, and                                                    // 365
 * the `input` event does not provide any useful information about what has                                            // 366
 * actually been added, contrary to the spec. Thus, `textInput` is the best                                            // 367
 * available event to identify the characters that have actually been inserted                                         // 368
 * into the target node.                                                                                               // 369
 *                                                                                                                     // 370
 * This plugin is also responsible for emitting `composition` events, thus                                             // 371
 * allowing us to share composition fallback code for both `beforeInput` and                                           // 372
 * `composition` event types.                                                                                          // 373
 */                                                                                                                    // 374
var BeforeInputEventPlugin = {                                                                                         // 375
                                                                                                                       // 376
  eventTypes: eventTypes,                                                                                              // 377
                                                                                                                       // 378
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 379
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }                                                                                                                    // 381
};                                                                                                                     // 382
                                                                                                                       // 383
module.exports = BeforeInputEventPlugin;                                                                               // 384
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"EventPropagators.js":["./EventPluginHub","./EventPluginUtils","./accumulateInto","./forEachAccumulated","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/EventPropagators.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var EventPluginHub = require('./EventPluginHub');                                                                      // 13
var EventPluginUtils = require('./EventPluginUtils');                                                                  // 14
                                                                                                                       // 15
var accumulateInto = require('./accumulateInto');                                                                      // 16
var forEachAccumulated = require('./forEachAccumulated');                                                              // 17
var warning = require('fbjs/lib/warning');                                                                             // 18
                                                                                                                       // 19
var getListener = EventPluginHub.getListener;                                                                          // 20
                                                                                                                       // 21
/**                                                                                                                    // 22
 * Some event types have a notion of different registration names for different                                        // 23
 * "phases" of propagation. This finds listeners by a given phase.                                                     // 24
 */                                                                                                                    // 25
function listenerAtPhase(inst, event, propagationPhase) {                                                              // 26
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];                               // 27
  return getListener(inst, registrationName);                                                                          // 28
}                                                                                                                      // 29
                                                                                                                       // 30
/**                                                                                                                    // 31
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function                                           // 32
 * here, allows us to not have to bind or create functions for each event.                                             // 33
 * Mutating the event's members allows us to not have to create a wrapping                                             // 34
 * "dispatch" object that pairs the event with the listener.                                                           // 35
 */                                                                                                                    // 36
function accumulateDirectionalDispatches(inst, phase, event) {                                                         // 37
  if (process.env.NODE_ENV !== 'production') {                                                                         // 38
    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;               // 39
  }                                                                                                                    // 40
  var listener = listenerAtPhase(inst, event, phase);                                                                  // 41
  if (listener) {                                                                                                      // 42
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);                                     // 43
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);                                         // 44
  }                                                                                                                    // 45
}                                                                                                                      // 46
                                                                                                                       // 47
/**                                                                                                                    // 48
 * Collect dispatches (must be entirely collected before dispatching - see unit                                        // 49
 * tests). Lazily allocate the array to conserve memory.  We must loop through                                         // 50
 * each event and perform the traversal for each one. We cannot perform a                                              // 51
 * single traversal for the entire collection of events because each event may                                         // 52
 * have a different target.                                                                                            // 53
 */                                                                                                                    // 54
function accumulateTwoPhaseDispatchesSingle(event) {                                                                   // 55
  if (event && event.dispatchConfig.phasedRegistrationNames) {                                                         // 56
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);                      // 57
  }                                                                                                                    // 58
}                                                                                                                      // 59
                                                                                                                       // 60
/**                                                                                                                    // 61
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.                                          // 62
 */                                                                                                                    // 63
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {                                                         // 64
  if (event && event.dispatchConfig.phasedRegistrationNames) {                                                         // 65
    var targetInst = event._targetInst;                                                                                // 66
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;                               // 67
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);                             // 68
  }                                                                                                                    // 69
}                                                                                                                      // 70
                                                                                                                       // 71
/**                                                                                                                    // 72
 * Accumulates without regard to direction, does not look for phased                                                   // 73
 * registration names. Same as `accumulateDirectDispatchesSingle` but without                                          // 74
 * requiring that the `dispatchMarker` be the same as the dispatched ID.                                               // 75
 */                                                                                                                    // 76
function accumulateDispatches(inst, ignoredDirection, event) {                                                         // 77
  if (event && event.dispatchConfig.registrationName) {                                                                // 78
    var registrationName = event.dispatchConfig.registrationName;                                                      // 79
    var listener = getListener(inst, registrationName);                                                                // 80
    if (listener) {                                                                                                    // 81
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);                                   // 82
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);                                       // 83
    }                                                                                                                  // 84
  }                                                                                                                    // 85
}                                                                                                                      // 86
                                                                                                                       // 87
/**                                                                                                                    // 88
 * Accumulates dispatches on an `SyntheticEvent`, but only for the                                                     // 89
 * `dispatchMarker`.                                                                                                   // 90
 * @param {SyntheticEvent} event                                                                                       // 91
 */                                                                                                                    // 92
function accumulateDirectDispatchesSingle(event) {                                                                     // 93
  if (event && event.dispatchConfig.registrationName) {                                                                // 94
    accumulateDispatches(event._targetInst, null, event);                                                              // 95
  }                                                                                                                    // 96
}                                                                                                                      // 97
                                                                                                                       // 98
function accumulateTwoPhaseDispatches(events) {                                                                        // 99
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);                                                      // 100
}                                                                                                                      // 101
                                                                                                                       // 102
function accumulateTwoPhaseDispatchesSkipTarget(events) {                                                              // 103
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);                                            // 104
}                                                                                                                      // 105
                                                                                                                       // 106
function accumulateEnterLeaveDispatches(leave, enter, from, to) {                                                      // 107
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);                                   // 108
}                                                                                                                      // 109
                                                                                                                       // 110
function accumulateDirectDispatches(events) {                                                                          // 111
  forEachAccumulated(events, accumulateDirectDispatchesSingle);                                                        // 112
}                                                                                                                      // 113
                                                                                                                       // 114
/**                                                                                                                    // 115
 * A small set of propagation patterns, each of which will accept a small amount                                       // 116
 * of information, and generate a set of "dispatch ready event objects" - which                                        // 117
 * are sets of events that have already been annotated with a set of dispatched                                        // 118
 * listener functions/ids. The API is designed this way to discourage these                                            // 119
 * propagation strategies from actually executing the dispatches, since we                                             // 120
 * always want to collect the entire set of dispatches before executing event a                                        // 121
 * single one.                                                                                                         // 122
 *                                                                                                                     // 123
 * @constructor EventPropagators                                                                                       // 124
 */                                                                                                                    // 125
var EventPropagators = {                                                                                               // 126
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,                                                          // 127
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,                                      // 128
  accumulateDirectDispatches: accumulateDirectDispatches,                                                              // 129
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches                                                       // 130
};                                                                                                                     // 131
                                                                                                                       // 132
module.exports = EventPropagators;                                                                                     // 133
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"EventPluginHub.js":["./reactProdInvariant","./EventPluginRegistry","./EventPluginUtils","./ReactErrorUtils","./accumulateInto","./forEachAccumulated","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/EventPluginHub.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var EventPluginRegistry = require('./EventPluginRegistry');                                                            // 15
var EventPluginUtils = require('./EventPluginUtils');                                                                  // 16
var ReactErrorUtils = require('./ReactErrorUtils');                                                                    // 17
                                                                                                                       // 18
var accumulateInto = require('./accumulateInto');                                                                      // 19
var forEachAccumulated = require('./forEachAccumulated');                                                              // 20
var invariant = require('fbjs/lib/invariant');                                                                         // 21
                                                                                                                       // 22
/**                                                                                                                    // 23
 * Internal store for event listeners                                                                                  // 24
 */                                                                                                                    // 25
var listenerBank = {};                                                                                                 // 26
                                                                                                                       // 27
/**                                                                                                                    // 28
 * Internal queue of events that have accumulated their dispatches and are                                             // 29
 * waiting to have their dispatches executed.                                                                          // 30
 */                                                                                                                    // 31
var eventQueue = null;                                                                                                 // 32
                                                                                                                       // 33
/**                                                                                                                    // 34
 * Dispatches an event and releases it back into the pool, unless persistent.                                          // 35
 *                                                                                                                     // 36
 * @param {?object} event Synthetic event to be dispatched.                                                            // 37
 * @param {boolean} simulated If the event is simulated (changes exn behavior)                                         // 38
 * @private                                                                                                            // 39
 */                                                                                                                    // 40
var executeDispatchesAndRelease = function (event, simulated) {                                                        // 41
  if (event) {                                                                                                         // 42
    EventPluginUtils.executeDispatchesInOrder(event, simulated);                                                       // 43
                                                                                                                       // 44
    if (!event.isPersistent()) {                                                                                       // 45
      event.constructor.release(event);                                                                                // 46
    }                                                                                                                  // 47
  }                                                                                                                    // 48
};                                                                                                                     // 49
var executeDispatchesAndReleaseSimulated = function (e) {                                                              // 50
  return executeDispatchesAndRelease(e, true);                                                                         // 51
};                                                                                                                     // 52
var executeDispatchesAndReleaseTopLevel = function (e) {                                                               // 53
  return executeDispatchesAndRelease(e, false);                                                                        // 54
};                                                                                                                     // 55
                                                                                                                       // 56
var getDictionaryKey = function (inst) {                                                                               // 57
  // Prevents V8 performance issue:                                                                                    // 58
  // https://github.com/facebook/react/pull/7232                                                                       // 59
  return '.' + inst._rootNodeID;                                                                                       // 60
};                                                                                                                     // 61
                                                                                                                       // 62
function isInteractive(tag) {                                                                                          // 63
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';                                // 64
}                                                                                                                      // 65
                                                                                                                       // 66
function shouldPreventMouseEvent(name, type, props) {                                                                  // 67
  switch (name) {                                                                                                      // 68
    case 'onClick':                                                                                                    // 69
    case 'onClickCapture':                                                                                             // 70
    case 'onDoubleClick':                                                                                              // 71
    case 'onDoubleClickCapture':                                                                                       // 72
    case 'onMouseDown':                                                                                                // 73
    case 'onMouseDownCapture':                                                                                         // 74
    case 'onMouseMove':                                                                                                // 75
    case 'onMouseMoveCapture':                                                                                         // 76
    case 'onMouseUp':                                                                                                  // 77
    case 'onMouseUpCapture':                                                                                           // 78
      return !!(props.disabled && isInteractive(type));                                                                // 79
    default:                                                                                                           // 80
      return false;                                                                                                    // 81
  }                                                                                                                    // 82
}                                                                                                                      // 83
                                                                                                                       // 84
/**                                                                                                                    // 85
 * This is a unified interface for event plugins to be installed and configured.                                       // 86
 *                                                                                                                     // 87
 * Event plugins can implement the following properties:                                                               // 88
 *                                                                                                                     // 89
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}                                             // 90
 *     Required. When a top-level event is fired, this method is expected to                                           // 91
 *     extract synthetic events that will in turn be queued and dispatched.                                            // 92
 *                                                                                                                     // 93
 *   `eventTypes` {object}                                                                                             // 94
 *     Optional, plugins that fire events must publish a mapping of registration                                       // 95
 *     names that are used to register listeners. Values of this mapping must                                          // 96
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.                                        // 97
 *                                                                                                                     // 98
 *   `executeDispatch` {function(object, function, string)}                                                            // 99
 *     Optional, allows plugins to override how an event gets dispatched. By                                           // 100
 *     default, the listener is simply invoked.                                                                        // 101
 *                                                                                                                     // 102
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.                                        // 103
 *                                                                                                                     // 104
 * @public                                                                                                             // 105
 */                                                                                                                    // 106
var EventPluginHub = {                                                                                                 // 107
                                                                                                                       // 108
  /**                                                                                                                  // 109
   * Methods for injecting dependencies.                                                                               // 110
   */                                                                                                                  // 111
  injection: {                                                                                                         // 112
                                                                                                                       // 113
    /**                                                                                                                // 114
     * @param {array} InjectedEventPluginOrder                                                                         // 115
     * @public                                                                                                         // 116
     */                                                                                                                // 117
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,                                                // 118
                                                                                                                       // 119
    /**                                                                                                                // 120
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                        // 121
     */                                                                                                                // 122
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName                                             // 123
                                                                                                                       // 124
  },                                                                                                                   // 125
                                                                                                                       // 126
  /**                                                                                                                  // 127
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.                                        // 128
   *                                                                                                                   // 129
   * @param {object} inst The instance, which is the source of events.                                                 // 130
   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 131
   * @param {function} listener The callback to store.                                                                 // 132
   */                                                                                                                  // 133
  putListener: function (inst, registrationName, listener) {                                                           // 134
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;
                                                                                                                       // 136
    var key = getDictionaryKey(inst);                                                                                  // 137
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});             // 138
    bankForRegistrationName[key] = listener;                                                                           // 139
                                                                                                                       // 140
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];                                  // 141
    if (PluginModule && PluginModule.didPutListener) {                                                                 // 142
      PluginModule.didPutListener(inst, registrationName, listener);                                                   // 143
    }                                                                                                                  // 144
  },                                                                                                                   // 145
                                                                                                                       // 146
  /**                                                                                                                  // 147
   * @param {object} inst The instance, which is the source of events.                                                 // 148
   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 149
   * @return {?function} The stored callback.                                                                          // 150
   */                                                                                                                  // 151
  getListener: function (inst, registrationName) {                                                                     // 152
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not                                         // 153
    // live here; needs to be moved to a better place soon                                                             // 154
    var bankForRegistrationName = listenerBank[registrationName];                                                      // 155
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {            // 156
      return null;                                                                                                     // 157
    }                                                                                                                  // 158
    var key = getDictionaryKey(inst);                                                                                  // 159
    return bankForRegistrationName && bankForRegistrationName[key];                                                    // 160
  },                                                                                                                   // 161
                                                                                                                       // 162
  /**                                                                                                                  // 163
   * Deletes a listener from the registration bank.                                                                    // 164
   *                                                                                                                   // 165
   * @param {object} inst The instance, which is the source of events.                                                 // 166
   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 167
   */                                                                                                                  // 168
  deleteListener: function (inst, registrationName) {                                                                  // 169
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];                                  // 170
    if (PluginModule && PluginModule.willDeleteListener) {                                                             // 171
      PluginModule.willDeleteListener(inst, registrationName);                                                         // 172
    }                                                                                                                  // 173
                                                                                                                       // 174
    var bankForRegistrationName = listenerBank[registrationName];                                                      // 175
    // TODO: This should never be null -- when is it?                                                                  // 176
    if (bankForRegistrationName) {                                                                                     // 177
      var key = getDictionaryKey(inst);                                                                                // 178
      delete bankForRegistrationName[key];                                                                             // 179
    }                                                                                                                  // 180
  },                                                                                                                   // 181
                                                                                                                       // 182
  /**                                                                                                                  // 183
   * Deletes all listeners for the DOM element with the supplied ID.                                                   // 184
   *                                                                                                                   // 185
   * @param {object} inst The instance, which is the source of events.                                                 // 186
   */                                                                                                                  // 187
  deleteAllListeners: function (inst) {                                                                                // 188
    var key = getDictionaryKey(inst);                                                                                  // 189
    for (var registrationName in listenerBank) {                                                                       // 190
      if (!listenerBank.hasOwnProperty(registrationName)) {                                                            // 191
        continue;                                                                                                      // 192
      }                                                                                                                // 193
                                                                                                                       // 194
      if (!listenerBank[registrationName][key]) {                                                                      // 195
        continue;                                                                                                      // 196
      }                                                                                                                // 197
                                                                                                                       // 198
      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];                                // 199
      if (PluginModule && PluginModule.willDeleteListener) {                                                           // 200
        PluginModule.willDeleteListener(inst, registrationName);                                                       // 201
      }                                                                                                                // 202
                                                                                                                       // 203
      delete listenerBank[registrationName][key];                                                                      // 204
    }                                                                                                                  // 205
  },                                                                                                                   // 206
                                                                                                                       // 207
  /**                                                                                                                  // 208
   * Allows registered plugins an opportunity to extract events from top-level                                         // 209
   * native browser events.                                                                                            // 210
   *                                                                                                                   // 211
   * @return {*} An accumulation of synthetic events.                                                                  // 212
   * @internal                                                                                                         // 213
   */                                                                                                                  // 214
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 215
    var events;                                                                                                        // 216
    var plugins = EventPluginRegistry.plugins;                                                                         // 217
    for (var i = 0; i < plugins.length; i++) {                                                                         // 218
      // Not every plugin in the ordering may be loaded at runtime.                                                    // 219
      var possiblePlugin = plugins[i];                                                                                 // 220
      if (possiblePlugin) {                                                                                            // 221
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);  // 222
        if (extractedEvents) {                                                                                         // 223
          events = accumulateInto(events, extractedEvents);                                                            // 224
        }                                                                                                              // 225
      }                                                                                                                // 226
    }                                                                                                                  // 227
    return events;                                                                                                     // 228
  },                                                                                                                   // 229
                                                                                                                       // 230
  /**                                                                                                                  // 231
   * Enqueues a synthetic event that should be dispatched when                                                         // 232
   * `processEventQueue` is invoked.                                                                                   // 233
   *                                                                                                                   // 234
   * @param {*} events An accumulation of synthetic events.                                                            // 235
   * @internal                                                                                                         // 236
   */                                                                                                                  // 237
  enqueueEvents: function (events) {                                                                                   // 238
    if (events) {                                                                                                      // 239
      eventQueue = accumulateInto(eventQueue, events);                                                                 // 240
    }                                                                                                                  // 241
  },                                                                                                                   // 242
                                                                                                                       // 243
  /**                                                                                                                  // 244
   * Dispatches all synthetic events on the event queue.                                                               // 245
   *                                                                                                                   // 246
   * @internal                                                                                                         // 247
   */                                                                                                                  // 248
  processEventQueue: function (simulated) {                                                                            // 249
    // Set `eventQueue` to null before processing it so that we can tell if more                                       // 250
    // events get enqueued while processing.                                                                           // 251
    var processingEventQueue = eventQueue;                                                                             // 252
    eventQueue = null;                                                                                                 // 253
    if (simulated) {                                                                                                   // 254
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);                                  // 255
    } else {                                                                                                           // 256
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);                                   // 257
    }                                                                                                                  // 258
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.                                        // 260
    ReactErrorUtils.rethrowCaughtError();                                                                              // 261
  },                                                                                                                   // 262
                                                                                                                       // 263
  /**                                                                                                                  // 264
   * These are needed for tests only. Do not use!                                                                      // 265
   */                                                                                                                  // 266
  __purge: function () {                                                                                               // 267
    listenerBank = {};                                                                                                 // 268
  },                                                                                                                   // 269
                                                                                                                       // 270
  __getListenerBank: function () {                                                                                     // 271
    return listenerBank;                                                                                               // 272
  }                                                                                                                    // 273
                                                                                                                       // 274
};                                                                                                                     // 275
                                                                                                                       // 276
module.exports = EventPluginHub;                                                                                       // 277
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"EventPluginRegistry.js":["./reactProdInvariant","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/EventPluginRegistry.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var _prodInvariant = require('./reactProdInvariant');                                                                  // 14
                                                                                                                       // 15
var invariant = require('fbjs/lib/invariant');                                                                         // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * Injectable ordering of event plugins.                                                                               // 19
 */                                                                                                                    // 20
var eventPluginOrder = null;                                                                                           // 21
                                                                                                                       // 22
/**                                                                                                                    // 23
 * Injectable mapping from names to event plugin modules.                                                              // 24
 */                                                                                                                    // 25
var namesToPlugins = {};                                                                                               // 26
                                                                                                                       // 27
/**                                                                                                                    // 28
 * Recomputes the plugin list using the injected plugins and plugin ordering.                                          // 29
 *                                                                                                                     // 30
 * @private                                                                                                            // 31
 */                                                                                                                    // 32
function recomputePluginOrdering() {                                                                                   // 33
  if (!eventPluginOrder) {                                                                                             // 34
    // Wait until an `eventPluginOrder` is injected.                                                                   // 35
    return;                                                                                                            // 36
  }                                                                                                                    // 37
  for (var pluginName in namesToPlugins) {                                                                             // 38
    var pluginModule = namesToPlugins[pluginName];                                                                     // 39
    var pluginIndex = eventPluginOrder.indexOf(pluginName);                                                            // 40
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {                                                                    // 42
      continue;                                                                                                        // 43
    }                                                                                                                  // 44
    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;                                                           // 46
    var publishedEvents = pluginModule.eventTypes;                                                                     // 47
    for (var eventName in publishedEvents) {                                                                           // 48
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }                                                                                                                  // 50
  }                                                                                                                    // 51
}                                                                                                                      // 52
                                                                                                                       // 53
/**                                                                                                                    // 54
 * Publishes an event so that it can be dispatched by the supplied plugin.                                             // 55
 *                                                                                                                     // 56
 * @param {object} dispatchConfig Dispatch configuration for the event.                                                // 57
 * @param {object} PluginModule Plugin publishing the event.                                                           // 58
 * @return {boolean} True if the event was successfully published.                                                     // 59
 * @private                                                                                                            // 60
 */                                                                                                                    // 61
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {                                              // 62
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;                                            // 64
                                                                                                                       // 65
  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;                                                // 66
  if (phasedRegistrationNames) {                                                                                       // 67
    for (var phaseName in phasedRegistrationNames) {                                                                   // 68
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {                                                         // 69
        var phasedRegistrationName = phasedRegistrationNames[phaseName];                                               // 70
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);                                      // 71
      }                                                                                                                // 72
    }                                                                                                                  // 73
    return true;                                                                                                       // 74
  } else if (dispatchConfig.registrationName) {                                                                        // 75
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);                                 // 76
    return true;                                                                                                       // 77
  }                                                                                                                    // 78
  return false;                                                                                                        // 79
}                                                                                                                      // 80
                                                                                                                       // 81
/**                                                                                                                    // 82
 * Publishes a registration name that is used to identify dispatched events and                                        // 83
 * can be used with `EventPluginHub.putListener` to register listeners.                                                // 84
 *                                                                                                                     // 85
 * @param {string} registrationName Registration name to add.                                                          // 86
 * @param {object} PluginModule Plugin publishing the event.                                                           // 87
 * @private                                                                                                            // 88
 */                                                                                                                    // 89
function publishRegistrationName(registrationName, pluginModule, eventName) {                                          // 90
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;                                        // 92
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
                                                                                                                       // 94
  if (process.env.NODE_ENV !== 'production') {                                                                         // 95
    var lowerCasedName = registrationName.toLowerCase();                                                               // 96
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;                                  // 97
                                                                                                                       // 98
    if (registrationName === 'onDoubleClick') {                                                                        // 99
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;                                     // 100
    }                                                                                                                  // 101
  }                                                                                                                    // 102
}                                                                                                                      // 103
                                                                                                                       // 104
/**                                                                                                                    // 105
 * Registers plugins so that they can extract and dispatch events.                                                     // 106
 *                                                                                                                     // 107
 * @see {EventPluginHub}                                                                                               // 108
 */                                                                                                                    // 109
var EventPluginRegistry = {                                                                                            // 110
                                                                                                                       // 111
  /**                                                                                                                  // 112
   * Ordered list of injected plugins.                                                                                 // 113
   */                                                                                                                  // 114
  plugins: [],                                                                                                         // 115
                                                                                                                       // 116
  /**                                                                                                                  // 117
   * Mapping from event name to dispatch config                                                                        // 118
   */                                                                                                                  // 119
  eventNameDispatchConfigs: {},                                                                                        // 120
                                                                                                                       // 121
  /**                                                                                                                  // 122
   * Mapping from registration name to plugin module                                                                   // 123
   */                                                                                                                  // 124
  registrationNameModules: {},                                                                                         // 125
                                                                                                                       // 126
  /**                                                                                                                  // 127
   * Mapping from registration name to event name                                                                      // 128
   */                                                                                                                  // 129
  registrationNameDependencies: {},                                                                                    // 130
                                                                                                                       // 131
  /**                                                                                                                  // 132
   * Mapping from lowercase registration names to the properly cased version,                                          // 133
   * used to warn in the case of missing event handlers. Available                                                     // 134
   * only in __DEV__.                                                                                                  // 135
   * @type {Object}                                                                                                    // 136
   */                                                                                                                  // 137
  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,                                        // 138
  // Trust the developer to only use possibleRegistrationNames in __DEV__                                              // 139
                                                                                                                       // 140
  /**                                                                                                                  // 141
   * Injects an ordering of plugins (by plugin name). This allows the ordering                                         // 142
   * to be decoupled from injection of the actual plugins so that ordering is                                          // 143
   * always deterministic regardless of packaging, on-the-fly injection, etc.                                          // 144
   *                                                                                                                   // 145
   * @param {array} InjectedEventPluginOrder                                                                           // 146
   * @internal                                                                                                         // 147
   * @see {EventPluginHub.injection.injectEventPluginOrder}                                                            // 148
   */                                                                                                                  // 149
  injectEventPluginOrder: function (injectedEventPluginOrder) {                                                        // 150
    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.                                                         // 152
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);                                           // 153
    recomputePluginOrdering();                                                                                         // 154
  },                                                                                                                   // 155
                                                                                                                       // 156
  /**                                                                                                                  // 157
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be                                          // 158
   * in the ordering injected by `injectEventPluginOrder`.                                                             // 159
   *                                                                                                                   // 160
   * Plugins can be injected as part of page initialization or on-the-fly.                                             // 161
   *                                                                                                                   // 162
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                          // 163
   * @internal                                                                                                         // 164
   * @see {EventPluginHub.injection.injectEventPluginsByName}                                                          // 165
   */                                                                                                                  // 166
  injectEventPluginsByName: function (injectedNamesToPlugins) {                                                        // 167
    var isOrderingDirty = false;                                                                                       // 168
    for (var pluginName in injectedNamesToPlugins) {                                                                   // 169
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {                                                        // 170
        continue;                                                                                                      // 171
      }                                                                                                                // 172
      var pluginModule = injectedNamesToPlugins[pluginName];                                                           // 173
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {                 // 174
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;                                                                     // 176
        isOrderingDirty = true;                                                                                        // 177
      }                                                                                                                // 178
    }                                                                                                                  // 179
    if (isOrderingDirty) {                                                                                             // 180
      recomputePluginOrdering();                                                                                       // 181
    }                                                                                                                  // 182
  },                                                                                                                   // 183
                                                                                                                       // 184
  /**                                                                                                                  // 185
   * Looks up the plugin for the supplied event.                                                                       // 186
   *                                                                                                                   // 187
   * @param {object} event A synthetic event.                                                                          // 188
   * @return {?object} The plugin that created the supplied event.                                                     // 189
   * @internal                                                                                                         // 190
   */                                                                                                                  // 191
  getPluginModuleForEvent: function (event) {                                                                          // 192
    var dispatchConfig = event.dispatchConfig;                                                                         // 193
    if (dispatchConfig.registrationName) {                                                                             // 194
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;                     // 195
    }                                                                                                                  // 196
    if (dispatchConfig.phasedRegistrationNames !== undefined) {                                                        // 197
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see                                          // 198
      // that it is not undefined.                                                                                     // 199
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;                                            // 200
                                                                                                                       // 201
      for (var phase in phasedRegistrationNames) {                                                                     // 202
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {                                                          // 203
          continue;                                                                                                    // 204
        }                                                                                                              // 205
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];                // 206
        if (pluginModule) {                                                                                            // 207
          return pluginModule;                                                                                         // 208
        }                                                                                                              // 209
      }                                                                                                                // 210
    }                                                                                                                  // 211
    return null;                                                                                                       // 212
  },                                                                                                                   // 213
                                                                                                                       // 214
  /**                                                                                                                  // 215
   * Exposed for unit testing.                                                                                         // 216
   * @private                                                                                                          // 217
   */                                                                                                                  // 218
  _resetEventPlugins: function () {                                                                                    // 219
    eventPluginOrder = null;                                                                                           // 220
    for (var pluginName in namesToPlugins) {                                                                           // 221
      if (namesToPlugins.hasOwnProperty(pluginName)) {                                                                 // 222
        delete namesToPlugins[pluginName];                                                                             // 223
      }                                                                                                                // 224
    }                                                                                                                  // 225
    EventPluginRegistry.plugins.length = 0;                                                                            // 226
                                                                                                                       // 227
    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;                                       // 228
    for (var eventName in eventNameDispatchConfigs) {                                                                  // 229
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {                                                        // 230
        delete eventNameDispatchConfigs[eventName];                                                                    // 231
      }                                                                                                                // 232
    }                                                                                                                  // 233
                                                                                                                       // 234
    var registrationNameModules = EventPluginRegistry.registrationNameModules;                                         // 235
    for (var registrationName in registrationNameModules) {                                                            // 236
      if (registrationNameModules.hasOwnProperty(registrationName)) {                                                  // 237
        delete registrationNameModules[registrationName];                                                              // 238
      }                                                                                                                // 239
    }                                                                                                                  // 240
                                                                                                                       // 241
    if (process.env.NODE_ENV !== 'production') {                                                                       // 242
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;                                   // 243
      for (var lowerCasedName in possibleRegistrationNames) {                                                          // 244
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {                                                // 245
          delete possibleRegistrationNames[lowerCasedName];                                                            // 246
        }                                                                                                              // 247
      }                                                                                                                // 248
    }                                                                                                                  // 249
  }                                                                                                                    // 250
                                                                                                                       // 251
};                                                                                                                     // 252
                                                                                                                       // 253
module.exports = EventPluginRegistry;                                                                                  // 254
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"EventPluginUtils.js":["./reactProdInvariant","./ReactErrorUtils","fbjs/lib/invariant","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/EventPluginUtils.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var ReactErrorUtils = require('./ReactErrorUtils');                                                                    // 15
                                                                                                                       // 16
var invariant = require('fbjs/lib/invariant');                                                                         // 17
var warning = require('fbjs/lib/warning');                                                                             // 18
                                                                                                                       // 19
/**                                                                                                                    // 20
 * Injected dependencies:                                                                                              // 21
 */                                                                                                                    // 22
                                                                                                                       // 23
/**                                                                                                                    // 24
 * - `ComponentTree`: [required] Module that can convert between React instances                                       // 25
 *   and actual node references.                                                                                       // 26
 */                                                                                                                    // 27
var ComponentTree;                                                                                                     // 28
var TreeTraversal;                                                                                                     // 29
var injection = {                                                                                                      // 30
  injectComponentTree: function (Injected) {                                                                           // 31
    ComponentTree = Injected;                                                                                          // 32
    if (process.env.NODE_ENV !== 'production') {                                                                       // 33
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }                                                                                                                  // 35
  },                                                                                                                   // 36
  injectTreeTraversal: function (Injected) {                                                                           // 37
    TreeTraversal = Injected;                                                                                          // 38
    if (process.env.NODE_ENV !== 'production') {                                                                       // 39
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }                                                                                                                  // 41
  }                                                                                                                    // 42
};                                                                                                                     // 43
                                                                                                                       // 44
function isEndish(topLevelType) {                                                                                      // 45
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';         // 46
}                                                                                                                      // 47
                                                                                                                       // 48
function isMoveish(topLevelType) {                                                                                     // 49
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';                                           // 50
}                                                                                                                      // 51
function isStartish(topLevelType) {                                                                                    // 52
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';                                          // 53
}                                                                                                                      // 54
                                                                                                                       // 55
var validateEventDispatches;                                                                                           // 56
if (process.env.NODE_ENV !== 'production') {                                                                           // 57
  validateEventDispatches = function (event) {                                                                         // 58
    var dispatchListeners = event._dispatchListeners;                                                                  // 59
    var dispatchInstances = event._dispatchInstances;                                                                  // 60
                                                                                                                       // 61
    var listenersIsArr = Array.isArray(dispatchListeners);                                                             // 62
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;                          // 63
                                                                                                                       // 64
    var instancesIsArr = Array.isArray(dispatchInstances);                                                             // 65
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;                          // 66
                                                                                                                       // 67
    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };                                                                                                                   // 69
}                                                                                                                      // 70
                                                                                                                       // 71
/**                                                                                                                    // 72
 * Dispatch the event to the listener.                                                                                 // 73
 * @param {SyntheticEvent} event SyntheticEvent to handle                                                              // 74
 * @param {boolean} simulated If the event is simulated (changes exn behavior)                                         // 75
 * @param {function} listener Application-level callback                                                               // 76
 * @param {*} inst Internal component instance                                                                         // 77
 */                                                                                                                    // 78
function executeDispatch(event, simulated, listener, inst) {                                                           // 79
  var type = event.type || 'unknown-event';                                                                            // 80
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);                                                    // 81
  if (simulated) {                                                                                                     // 82
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);                                             // 83
  } else {                                                                                                             // 84
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);                                                      // 85
  }                                                                                                                    // 86
  event.currentTarget = null;                                                                                          // 87
}                                                                                                                      // 88
                                                                                                                       // 89
/**                                                                                                                    // 90
 * Standard/simple iteration through an event's collected dispatches.                                                  // 91
 */                                                                                                                    // 92
function executeDispatchesInOrder(event, simulated) {                                                                  // 93
  var dispatchListeners = event._dispatchListeners;                                                                    // 94
  var dispatchInstances = event._dispatchInstances;                                                                    // 95
  if (process.env.NODE_ENV !== 'production') {                                                                         // 96
    validateEventDispatches(event);                                                                                    // 97
  }                                                                                                                    // 98
  if (Array.isArray(dispatchListeners)) {                                                                              // 99
    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 100
      if (event.isPropagationStopped()) {                                                                              // 101
        break;                                                                                                         // 102
      }                                                                                                                // 103
      // Listeners and Instances are two parallel arrays that are always in sync.                                      // 104
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);                                   // 105
    }                                                                                                                  // 106
  } else if (dispatchListeners) {                                                                                      // 107
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);                                           // 108
  }                                                                                                                    // 109
  event._dispatchListeners = null;                                                                                     // 110
  event._dispatchInstances = null;                                                                                     // 111
}                                                                                                                      // 112
                                                                                                                       // 113
/**                                                                                                                    // 114
 * Standard/simple iteration through an event's collected dispatches, but stops                                        // 115
 * at the first dispatch execution returning true, and returns that id.                                                // 116
 *                                                                                                                     // 117
 * @return {?string} id of the first dispatch execution who's listener returns                                         // 118
 * true, or null if no listener returned true.                                                                         // 119
 */                                                                                                                    // 120
function executeDispatchesInOrderStopAtTrueImpl(event) {                                                               // 121
  var dispatchListeners = event._dispatchListeners;                                                                    // 122
  var dispatchInstances = event._dispatchInstances;                                                                    // 123
  if (process.env.NODE_ENV !== 'production') {                                                                         // 124
    validateEventDispatches(event);                                                                                    // 125
  }                                                                                                                    // 126
  if (Array.isArray(dispatchListeners)) {                                                                              // 127
    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 128
      if (event.isPropagationStopped()) {                                                                              // 129
        break;                                                                                                         // 130
      }                                                                                                                // 131
      // Listeners and Instances are two parallel arrays that are always in sync.                                      // 132
      if (dispatchListeners[i](event, dispatchInstances[i])) {                                                         // 133
        return dispatchInstances[i];                                                                                   // 134
      }                                                                                                                // 135
    }                                                                                                                  // 136
  } else if (dispatchListeners) {                                                                                      // 137
    if (dispatchListeners(event, dispatchInstances)) {                                                                 // 138
      return dispatchInstances;                                                                                        // 139
    }                                                                                                                  // 140
  }                                                                                                                    // 141
  return null;                                                                                                         // 142
}                                                                                                                      // 143
                                                                                                                       // 144
/**                                                                                                                    // 145
 * @see executeDispatchesInOrderStopAtTrueImpl                                                                         // 146
 */                                                                                                                    // 147
function executeDispatchesInOrderStopAtTrue(event) {                                                                   // 148
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);                                                             // 149
  event._dispatchInstances = null;                                                                                     // 150
  event._dispatchListeners = null;                                                                                     // 151
  return ret;                                                                                                          // 152
}                                                                                                                      // 153
                                                                                                                       // 154
/**                                                                                                                    // 155
 * Execution of a "direct" dispatch - there must be at most one dispatch                                               // 156
 * accumulated on the event or it is considered an error. It doesn't really make                                       // 157
 * sense for an event with multiple dispatches (bubbled) to keep track of the                                          // 158
 * return values at each dispatch execution, but it does tend to make sense when                                       // 159
 * dealing with "direct" dispatches.                                                                                   // 160
 *                                                                                                                     // 161
 * @return {*} The return value of executing the single dispatch.                                                      // 162
 */                                                                                                                    // 163
function executeDirectDispatch(event) {                                                                                // 164
  if (process.env.NODE_ENV !== 'production') {                                                                         // 165
    validateEventDispatches(event);                                                                                    // 166
  }                                                                                                                    // 167
  var dispatchListener = event._dispatchListeners;                                                                     // 168
  var dispatchInstance = event._dispatchInstances;                                                                     // 169
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;              // 171
  var res = dispatchListener ? dispatchListener(event) : null;                                                         // 172
  event.currentTarget = null;                                                                                          // 173
  event._dispatchListeners = null;                                                                                     // 174
  event._dispatchInstances = null;                                                                                     // 175
  return res;                                                                                                          // 176
}                                                                                                                      // 177
                                                                                                                       // 178
/**                                                                                                                    // 179
 * @param {SyntheticEvent} event                                                                                       // 180
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.                                      // 181
 */                                                                                                                    // 182
function hasDispatches(event) {                                                                                        // 183
  return !!event._dispatchListeners;                                                                                   // 184
}                                                                                                                      // 185
                                                                                                                       // 186
/**                                                                                                                    // 187
 * General utilities that are useful in creating custom Event Plugins.                                                 // 188
 */                                                                                                                    // 189
var EventPluginUtils = {                                                                                               // 190
  isEndish: isEndish,                                                                                                  // 191
  isMoveish: isMoveish,                                                                                                // 192
  isStartish: isStartish,                                                                                              // 193
                                                                                                                       // 194
  executeDirectDispatch: executeDirectDispatch,                                                                        // 195
  executeDispatchesInOrder: executeDispatchesInOrder,                                                                  // 196
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,                                              // 197
  hasDispatches: hasDispatches,                                                                                        // 198
                                                                                                                       // 199
  getInstanceFromNode: function (node) {                                                                               // 200
    return ComponentTree.getInstanceFromNode(node);                                                                    // 201
  },                                                                                                                   // 202
  getNodeFromInstance: function (node) {                                                                               // 203
    return ComponentTree.getNodeFromInstance(node);                                                                    // 204
  },                                                                                                                   // 205
  isAncestor: function (a, b) {                                                                                        // 206
    return TreeTraversal.isAncestor(a, b);                                                                             // 207
  },                                                                                                                   // 208
  getLowestCommonAncestor: function (a, b) {                                                                           // 209
    return TreeTraversal.getLowestCommonAncestor(a, b);                                                                // 210
  },                                                                                                                   // 211
  getParentInstance: function (inst) {                                                                                 // 212
    return TreeTraversal.getParentInstance(inst);                                                                      // 213
  },                                                                                                                   // 214
  traverseTwoPhase: function (target, fn, arg) {                                                                       // 215
    return TreeTraversal.traverseTwoPhase(target, fn, arg);                                                            // 216
  },                                                                                                                   // 217
  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {                                                        // 218
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);                                             // 219
  },                                                                                                                   // 220
                                                                                                                       // 221
  injection: injection                                                                                                 // 222
};                                                                                                                     // 223
                                                                                                                       // 224
module.exports = EventPluginUtils;                                                                                     // 225
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactErrorUtils.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactErrorUtils.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var caughtError = null;                                                                                                // 14
                                                                                                                       // 15
/**                                                                                                                    // 16
 * Call a function while guarding against errors that happens within it.                                               // 17
 *                                                                                                                     // 18
 * @param {String} name of the guard to use for logging or debugging                                                   // 19
 * @param {Function} func The function to invoke                                                                       // 20
 * @param {*} a First argument                                                                                         // 21
 * @param {*} b Second argument                                                                                        // 22
 */                                                                                                                    // 23
function invokeGuardedCallback(name, func, a) {                                                                        // 24
  try {                                                                                                                // 25
    func(a);                                                                                                           // 26
  } catch (x) {                                                                                                        // 27
    if (caughtError === null) {                                                                                        // 28
      caughtError = x;                                                                                                 // 29
    }                                                                                                                  // 30
  }                                                                                                                    // 31
}                                                                                                                      // 32
                                                                                                                       // 33
var ReactErrorUtils = {                                                                                                // 34
  invokeGuardedCallback: invokeGuardedCallback,                                                                        // 35
                                                                                                                       // 36
  /**                                                                                                                  // 37
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event                                         // 38
   * handler are sure to be rethrown by rethrowCaughtError.                                                            // 39
   */                                                                                                                  // 40
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,                                                               // 41
                                                                                                                       // 42
  /**                                                                                                                  // 43
   * During execution of guarded functions we will capture the first error which                                       // 44
   * we will rethrow to be handled by the top level error handler.                                                     // 45
   */                                                                                                                  // 46
  rethrowCaughtError: function () {                                                                                    // 47
    if (caughtError) {                                                                                                 // 48
      var error = caughtError;                                                                                         // 49
      caughtError = null;                                                                                              // 50
      throw error;                                                                                                     // 51
    }                                                                                                                  // 52
  }                                                                                                                    // 53
};                                                                                                                     // 54
                                                                                                                       // 55
if (process.env.NODE_ENV !== 'production') {                                                                           // 56
  /**                                                                                                                  // 57
   * To help development we can get better devtools integration by simulating a                                        // 58
   * real browser event.                                                                                               // 59
   */                                                                                                                  // 60
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');                                                                    // 62
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {                                                 // 63
      var boundFunc = func.bind(null, a);                                                                              // 64
      var evtType = 'react-' + name;                                                                                   // 65
      fakeNode.addEventListener(evtType, boundFunc, false);                                                            // 66
      var evt = document.createEvent('Event');                                                                         // 67
      // $FlowFixMe https://github.com/facebook/flow/issues/2336                                                       // 68
      evt.initEvent(evtType, false, false);                                                                            // 69
      fakeNode.dispatchEvent(evt);                                                                                     // 70
      fakeNode.removeEventListener(evtType, boundFunc, false);                                                         // 71
    };                                                                                                                 // 72
  }                                                                                                                    // 73
}                                                                                                                      // 74
                                                                                                                       // 75
module.exports = ReactErrorUtils;                                                                                      // 76
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"accumulateInto.js":["./reactProdInvariant","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/accumulateInto.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2014-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var _prodInvariant = require('./reactProdInvariant');                                                                  // 14
                                                                                                                       // 15
var invariant = require('fbjs/lib/invariant');                                                                         // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * Accumulates items that must not be null or undefined into the first one. This                                       // 19
 * is used to conserve memory by avoiding array allocations, and thus sacrifices                                       // 20
 * API cleanness. Since `current` can be null before being passed in and not                                           // 21
 * null after this function, make sure to assign it back to `current`:                                                 // 22
 *                                                                                                                     // 23
 * `a = accumulateInto(a, b);`                                                                                         // 24
 *                                                                                                                     // 25
 * This API should be sparingly used. Try `accumulate` for something cleaner.                                          // 26
 *                                                                                                                     // 27
 * @return {*|array<*>} An accumulation of items.                                                                      // 28
 */                                                                                                                    // 29
                                                                                                                       // 30
function accumulateInto(current, next) {                                                                               // 31
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;
                                                                                                                       // 33
  if (current == null) {                                                                                               // 34
    return next;                                                                                                       // 35
  }                                                                                                                    // 36
                                                                                                                       // 37
  // Both are not empty. Warning: Never call x.concat(y) when you are not                                              // 38
  // certain that x is an Array (x could be a string with concat method).                                              // 39
  if (Array.isArray(current)) {                                                                                        // 40
    if (Array.isArray(next)) {                                                                                         // 41
      current.push.apply(current, next);                                                                               // 42
      return current;                                                                                                  // 43
    }                                                                                                                  // 44
    current.push(next);                                                                                                // 45
    return current;                                                                                                    // 46
  }                                                                                                                    // 47
                                                                                                                       // 48
  if (Array.isArray(next)) {                                                                                           // 49
    // A bit too dangerous to mutate `next`.                                                                           // 50
    return [current].concat(next);                                                                                     // 51
  }                                                                                                                    // 52
                                                                                                                       // 53
  return [current, next];                                                                                              // 54
}                                                                                                                      // 55
                                                                                                                       // 56
module.exports = accumulateInto;                                                                                       // 57
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"forEachAccumulated.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/forEachAccumulated.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
/**                                                                                                                    // 14
 * @param {array} arr an "accumulation" of items which is either an Array or                                           // 15
 * a single item. Useful when paired with the `accumulate` module. This is a                                           // 16
 * simple utility that allows us to reason about a collection of items, but                                            // 17
 * handling the case when there is exactly one item (and we do not need to                                             // 18
 * allocate an array).                                                                                                 // 19
 */                                                                                                                    // 20
                                                                                                                       // 21
function forEachAccumulated(arr, cb, scope) {                                                                          // 22
  if (Array.isArray(arr)) {                                                                                            // 23
    arr.forEach(cb, scope);                                                                                            // 24
  } else if (arr) {                                                                                                    // 25
    cb.call(scope, arr);                                                                                               // 26
  }                                                                                                                    // 27
}                                                                                                                      // 28
                                                                                                                       // 29
module.exports = forEachAccumulated;                                                                                   // 30
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"FallbackCompositionState.js":["object-assign","./PooledClass","./getTextContentAccessor",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/FallbackCompositionState.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _assign = require('object-assign');                                                                                // 13
                                                                                                                       // 14
var PooledClass = require('./PooledClass');                                                                            // 15
                                                                                                                       // 16
var getTextContentAccessor = require('./getTextContentAccessor');                                                      // 17
                                                                                                                       // 18
/**                                                                                                                    // 19
 * This helper class stores information about text content of a target node,                                           // 20
 * allowing comparison of content before and after a given event.                                                      // 21
 *                                                                                                                     // 22
 * Identify the node where selection currently begins, then observe                                                    // 23
 * both its text content and its current position in the DOM. Since the                                                // 24
 * browser may natively replace the target node during composition, we can                                             // 25
 * use its position to find its replacement.                                                                           // 26
 *                                                                                                                     // 27
 * @param {DOMEventTarget} root                                                                                        // 28
 */                                                                                                                    // 29
function FallbackCompositionState(root) {                                                                              // 30
  this._root = root;                                                                                                   // 31
  this._startText = this.getText();                                                                                    // 32
  this._fallbackText = null;                                                                                           // 33
}                                                                                                                      // 34
                                                                                                                       // 35
_assign(FallbackCompositionState.prototype, {                                                                          // 36
  destructor: function () {                                                                                            // 37
    this._root = null;                                                                                                 // 38
    this._startText = null;                                                                                            // 39
    this._fallbackText = null;                                                                                         // 40
  },                                                                                                                   // 41
                                                                                                                       // 42
  /**                                                                                                                  // 43
   * Get current text of input.                                                                                        // 44
   *                                                                                                                   // 45
   * @return {string}                                                                                                  // 46
   */                                                                                                                  // 47
  getText: function () {                                                                                               // 48
    if ('value' in this._root) {                                                                                       // 49
      return this._root.value;                                                                                         // 50
    }                                                                                                                  // 51
    return this._root[getTextContentAccessor()];                                                                       // 52
  },                                                                                                                   // 53
                                                                                                                       // 54
  /**                                                                                                                  // 55
   * Determine the differing substring between the initially stored                                                    // 56
   * text content and the current content.                                                                             // 57
   *                                                                                                                   // 58
   * @return {string}                                                                                                  // 59
   */                                                                                                                  // 60
  getData: function () {                                                                                               // 61
    if (this._fallbackText) {                                                                                          // 62
      return this._fallbackText;                                                                                       // 63
    }                                                                                                                  // 64
                                                                                                                       // 65
    var start;                                                                                                         // 66
    var startValue = this._startText;                                                                                  // 67
    var startLength = startValue.length;                                                                               // 68
    var end;                                                                                                           // 69
    var endValue = this.getText();                                                                                     // 70
    var endLength = endValue.length;                                                                                   // 71
                                                                                                                       // 72
    for (start = 0; start < startLength; start++) {                                                                    // 73
      if (startValue[start] !== endValue[start]) {                                                                     // 74
        break;                                                                                                         // 75
      }                                                                                                                // 76
    }                                                                                                                  // 77
                                                                                                                       // 78
    var minEnd = startLength - start;                                                                                  // 79
    for (end = 1; end <= minEnd; end++) {                                                                              // 80
      if (startValue[startLength - end] !== endValue[endLength - end]) {                                               // 81
        break;                                                                                                         // 82
      }                                                                                                                // 83
    }                                                                                                                  // 84
                                                                                                                       // 85
    var sliceTail = end > 1 ? 1 - end : undefined;                                                                     // 86
    this._fallbackText = endValue.slice(start, sliceTail);                                                             // 87
    return this._fallbackText;                                                                                         // 88
  }                                                                                                                    // 89
});                                                                                                                    // 90
                                                                                                                       // 91
PooledClass.addPoolingTo(FallbackCompositionState);                                                                    // 92
                                                                                                                       // 93
module.exports = FallbackCompositionState;                                                                             // 94
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"PooledClass.js":["./reactProdInvariant","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/PooledClass.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var _prodInvariant = require('./reactProdInvariant');                                                                  // 14
                                                                                                                       // 15
var invariant = require('fbjs/lib/invariant');                                                                         // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * Static poolers. Several custom versions for each potential number of                                                // 19
 * arguments. A completely generic pooler is easy to implement, but would                                              // 20
 * require accessing the `arguments` object. In each of these, `this` refers to                                        // 21
 * the Class itself, not an instance. If any others are needed, simply add them                                        // 22
 * here, or in their own files.                                                                                        // 23
 */                                                                                                                    // 24
var oneArgumentPooler = function (copyFieldsFrom) {                                                                    // 25
  var Klass = this;                                                                                                    // 26
  if (Klass.instancePool.length) {                                                                                     // 27
    var instance = Klass.instancePool.pop();                                                                           // 28
    Klass.call(instance, copyFieldsFrom);                                                                              // 29
    return instance;                                                                                                   // 30
  } else {                                                                                                             // 31
    return new Klass(copyFieldsFrom);                                                                                  // 32
  }                                                                                                                    // 33
};                                                                                                                     // 34
                                                                                                                       // 35
var twoArgumentPooler = function (a1, a2) {                                                                            // 36
  var Klass = this;                                                                                                    // 37
  if (Klass.instancePool.length) {                                                                                     // 38
    var instance = Klass.instancePool.pop();                                                                           // 39
    Klass.call(instance, a1, a2);                                                                                      // 40
    return instance;                                                                                                   // 41
  } else {                                                                                                             // 42
    return new Klass(a1, a2);                                                                                          // 43
  }                                                                                                                    // 44
};                                                                                                                     // 45
                                                                                                                       // 46
var threeArgumentPooler = function (a1, a2, a3) {                                                                      // 47
  var Klass = this;                                                                                                    // 48
  if (Klass.instancePool.length) {                                                                                     // 49
    var instance = Klass.instancePool.pop();                                                                           // 50
    Klass.call(instance, a1, a2, a3);                                                                                  // 51
    return instance;                                                                                                   // 52
  } else {                                                                                                             // 53
    return new Klass(a1, a2, a3);                                                                                      // 54
  }                                                                                                                    // 55
};                                                                                                                     // 56
                                                                                                                       // 57
var fourArgumentPooler = function (a1, a2, a3, a4) {                                                                   // 58
  var Klass = this;                                                                                                    // 59
  if (Klass.instancePool.length) {                                                                                     // 60
    var instance = Klass.instancePool.pop();                                                                           // 61
    Klass.call(instance, a1, a2, a3, a4);                                                                              // 62
    return instance;                                                                                                   // 63
  } else {                                                                                                             // 64
    return new Klass(a1, a2, a3, a4);                                                                                  // 65
  }                                                                                                                    // 66
};                                                                                                                     // 67
                                                                                                                       // 68
var standardReleaser = function (instance) {                                                                           // 69
  var Klass = this;                                                                                                    // 70
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();                                                                                               // 72
  if (Klass.instancePool.length < Klass.poolSize) {                                                                    // 73
    Klass.instancePool.push(instance);                                                                                 // 74
  }                                                                                                                    // 75
};                                                                                                                     // 76
                                                                                                                       // 77
var DEFAULT_POOL_SIZE = 10;                                                                                            // 78
var DEFAULT_POOLER = oneArgumentPooler;                                                                                // 79
                                                                                                                       // 80
/**                                                                                                                    // 81
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class                                        // 82
 * itself (statically) not adding any prototypical fields. Any CopyConstructor                                         // 83
 * you give this may have a `poolSize` property, and will look for a                                                   // 84
 * prototypical `destructor` on instances.                                                                             // 85
 *                                                                                                                     // 86
 * @param {Function} CopyConstructor Constructor that can be used to reset.                                            // 87
 * @param {Function} pooler Customizable pooler.                                                                       // 88
 */                                                                                                                    // 89
var addPoolingTo = function (CopyConstructor, pooler) {                                                                // 90
  // Casting as any so that flow ignores the actual implementation and trusts                                          // 91
  // it to match the type we declared                                                                                  // 92
  var NewKlass = CopyConstructor;                                                                                      // 93
  NewKlass.instancePool = [];                                                                                          // 94
  NewKlass.getPooled = pooler || DEFAULT_POOLER;                                                                       // 95
  if (!NewKlass.poolSize) {                                                                                            // 96
    NewKlass.poolSize = DEFAULT_POOL_SIZE;                                                                             // 97
  }                                                                                                                    // 98
  NewKlass.release = standardReleaser;                                                                                 // 99
  return NewKlass;                                                                                                     // 100
};                                                                                                                     // 101
                                                                                                                       // 102
var PooledClass = {                                                                                                    // 103
  addPoolingTo: addPoolingTo,                                                                                          // 104
  oneArgumentPooler: oneArgumentPooler,                                                                                // 105
  twoArgumentPooler: twoArgumentPooler,                                                                                // 106
  threeArgumentPooler: threeArgumentPooler,                                                                            // 107
  fourArgumentPooler: fourArgumentPooler                                                                               // 108
};                                                                                                                     // 109
                                                                                                                       // 110
module.exports = PooledClass;                                                                                          // 111
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"getTextContentAccessor.js":["fbjs/lib/ExecutionEnvironment",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/getTextContentAccessor.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 13
                                                                                                                       // 14
var contentKey = null;                                                                                                 // 15
                                                                                                                       // 16
/**                                                                                                                    // 17
 * Gets the key used to access text content on a DOM node.                                                             // 18
 *                                                                                                                     // 19
 * @return {?string} Key used to access text content.                                                                  // 20
 * @internal                                                                                                           // 21
 */                                                                                                                    // 22
function getTextContentAccessor() {                                                                                    // 23
  if (!contentKey && ExecutionEnvironment.canUseDOM) {                                                                 // 24
    // Prefer textContent to innerText because many browsers support both but                                          // 25
    // SVG <text> elements don't support innerText even when <div> does.                                               // 26
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';                              // 27
  }                                                                                                                    // 28
  return contentKey;                                                                                                   // 29
}                                                                                                                      // 30
                                                                                                                       // 31
module.exports = getTextContentAccessor;                                                                               // 32
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"SyntheticCompositionEvent.js":["./SyntheticEvent",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SyntheticCompositionEvent.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var SyntheticEvent = require('./SyntheticEvent');                                                                      // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * @interface Event                                                                                                    // 16
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents                                              // 17
 */                                                                                                                    // 18
var CompositionEventInterface = {                                                                                      // 19
  data: null                                                                                                           // 20
};                                                                                                                     // 21
                                                                                                                       // 22
/**                                                                                                                    // 23
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 24
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 25
 * @param {object} nativeEvent Native browser event.                                                                   // 26
 * @extends {SyntheticUIEvent}                                                                                         // 27
 */                                                                                                                    // 28
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                   // 29
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 30
}                                                                                                                      // 31
                                                                                                                       // 32
SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);                                     // 33
                                                                                                                       // 34
module.exports = SyntheticCompositionEvent;                                                                            // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"SyntheticEvent.js":["object-assign","./PooledClass","fbjs/lib/emptyFunction","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SyntheticEvent.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _assign = require('object-assign');                                                                                // 13
                                                                                                                       // 14
var PooledClass = require('./PooledClass');                                                                            // 15
                                                                                                                       // 16
var emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 17
var warning = require('fbjs/lib/warning');                                                                             // 18
                                                                                                                       // 19
var didWarnForAddedNewProperty = false;                                                                                // 20
var isProxySupported = typeof Proxy === 'function';                                                                    // 21
                                                                                                                       // 22
var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];
                                                                                                                       // 24
/**                                                                                                                    // 25
 * @interface Event                                                                                                    // 26
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 27
 */                                                                                                                    // 28
var EventInterface = {                                                                                                 // 29
  type: null,                                                                                                          // 30
  target: null,                                                                                                        // 31
  // currentTarget is set when dispatching; no use in copying it here                                                  // 32
  currentTarget: emptyFunction.thatReturnsNull,                                                                        // 33
  eventPhase: null,                                                                                                    // 34
  bubbles: null,                                                                                                       // 35
  cancelable: null,                                                                                                    // 36
  timeStamp: function (event) {                                                                                        // 37
    return event.timeStamp || Date.now();                                                                              // 38
  },                                                                                                                   // 39
  defaultPrevented: null,                                                                                              // 40
  isTrusted: null                                                                                                      // 41
};                                                                                                                     // 42
                                                                                                                       // 43
/**                                                                                                                    // 44
 * Synthetic events are dispatched by event plugins, typically in response to a                                        // 45
 * top-level event delegation handler.                                                                                 // 46
 *                                                                                                                     // 47
 * These systems should generally use pooling to reduce the frequency of garbage                                       // 48
 * collection. The system should check `isPersistent` to determine whether the                                         // 49
 * event should be released into the pool after being dispatched. Users that                                           // 50
 * need a persisted event should invoke `persist`.                                                                     // 51
 *                                                                                                                     // 52
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by                                           // 53
 * normalizing browser quirks. Subclasses do not necessarily have to implement a                                       // 54
 * DOM interface; custom application-specific events can also subclass this.                                           // 55
 *                                                                                                                     // 56
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 57
 * @param {*} targetInst Marker identifying the event target.                                                          // 58
 * @param {object} nativeEvent Native browser event.                                                                   // 59
 * @param {DOMEventTarget} nativeEventTarget Target node.                                                              // 60
 */                                                                                                                    // 61
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {                                  // 62
  if (process.env.NODE_ENV !== 'production') {                                                                         // 63
    // these have a getter/setter for warnings                                                                         // 64
    delete this.nativeEvent;                                                                                           // 65
    delete this.preventDefault;                                                                                        // 66
    delete this.stopPropagation;                                                                                       // 67
  }                                                                                                                    // 68
                                                                                                                       // 69
  this.dispatchConfig = dispatchConfig;                                                                                // 70
  this._targetInst = targetInst;                                                                                       // 71
  this.nativeEvent = nativeEvent;                                                                                      // 72
                                                                                                                       // 73
  var Interface = this.constructor.Interface;                                                                          // 74
  for (var propName in Interface) {                                                                                    // 75
    if (!Interface.hasOwnProperty(propName)) {                                                                         // 76
      continue;                                                                                                        // 77
    }                                                                                                                  // 78
    if (process.env.NODE_ENV !== 'production') {                                                                       // 79
      delete this[propName]; // this has a getter/setter for warnings                                                  // 80
    }                                                                                                                  // 81
    var normalize = Interface[propName];                                                                               // 82
    if (normalize) {                                                                                                   // 83
      this[propName] = normalize(nativeEvent);                                                                         // 84
    } else {                                                                                                           // 85
      if (propName === 'target') {                                                                                     // 86
        this.target = nativeEventTarget;                                                                               // 87
      } else {                                                                                                         // 88
        this[propName] = nativeEvent[propName];                                                                        // 89
      }                                                                                                                // 90
    }                                                                                                                  // 91
  }                                                                                                                    // 92
                                                                                                                       // 93
  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {                                                                                              // 95
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 96
  } else {                                                                                                             // 97
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;                                                          // 98
  }                                                                                                                    // 99
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;                                                          // 100
  return this;                                                                                                         // 101
}                                                                                                                      // 102
                                                                                                                       // 103
_assign(SyntheticEvent.prototype, {                                                                                    // 104
                                                                                                                       // 105
  preventDefault: function () {                                                                                        // 106
    this.defaultPrevented = true;                                                                                      // 107
    var event = this.nativeEvent;                                                                                      // 108
    if (!event) {                                                                                                      // 109
      return;                                                                                                          // 110
    }                                                                                                                  // 111
                                                                                                                       // 112
    if (event.preventDefault) {                                                                                        // 113
      event.preventDefault();                                                                                          // 114
    } else if (typeof event.returnValue !== 'unknown') {                                                               // 115
      // eslint-disable-line valid-typeof                                                                              // 116
      event.returnValue = false;                                                                                       // 117
    }                                                                                                                  // 118
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 119
  },                                                                                                                   // 120
                                                                                                                       // 121
  stopPropagation: function () {                                                                                       // 122
    var event = this.nativeEvent;                                                                                      // 123
    if (!event) {                                                                                                      // 124
      return;                                                                                                          // 125
    }                                                                                                                  // 126
                                                                                                                       // 127
    if (event.stopPropagation) {                                                                                       // 128
      event.stopPropagation();                                                                                         // 129
    } else if (typeof event.cancelBubble !== 'unknown') {                                                              // 130
      // eslint-disable-line valid-typeof                                                                              // 131
      // The ChangeEventPlugin registers a "propertychange" event for                                                  // 132
      // IE. This event does not support bubbling or cancelling, and                                                   // 133
      // any references to cancelBubble throw "Member not found".  A                                                   // 134
      // typeof check of "unknown" circumvents this issue (and is also                                                 // 135
      // IE specific).                                                                                                 // 136
      event.cancelBubble = true;                                                                                       // 137
    }                                                                                                                  // 138
                                                                                                                       // 139
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;                                                         // 140
  },                                                                                                                   // 141
                                                                                                                       // 142
  /**                                                                                                                  // 143
   * We release all dispatched `SyntheticEvent`s after each event loop, adding                                         // 144
   * them back into the pool. This allows a way to hold onto a reference that                                          // 145
   * won't be added back into the pool.                                                                                // 146
   */                                                                                                                  // 147
  persist: function () {                                                                                               // 148
    this.isPersistent = emptyFunction.thatReturnsTrue;                                                                 // 149
  },                                                                                                                   // 150
                                                                                                                       // 151
  /**                                                                                                                  // 152
   * Checks if this event should be released back into the pool.                                                       // 153
   *                                                                                                                   // 154
   * @return {boolean} True if this should not be released, false otherwise.                                           // 155
   */                                                                                                                  // 156
  isPersistent: emptyFunction.thatReturnsFalse,                                                                        // 157
                                                                                                                       // 158
  /**                                                                                                                  // 159
   * `PooledClass` looks for `destructor` on each instance it releases.                                                // 160
   */                                                                                                                  // 161
  destructor: function () {                                                                                            // 162
    var Interface = this.constructor.Interface;                                                                        // 163
    for (var propName in Interface) {                                                                                  // 164
      if (process.env.NODE_ENV !== 'production') {                                                                     // 165
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));      // 166
      } else {                                                                                                         // 167
        this[propName] = null;                                                                                         // 168
      }                                                                                                                // 169
    }                                                                                                                  // 170
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {                                                      // 171
      this[shouldBeReleasedProperties[i]] = null;                                                                      // 172
    }                                                                                                                  // 173
    if (process.env.NODE_ENV !== 'production') {                                                                       // 174
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));             // 175
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }                                                                                                                  // 178
  }                                                                                                                    // 179
                                                                                                                       // 180
});                                                                                                                    // 181
                                                                                                                       // 182
SyntheticEvent.Interface = EventInterface;                                                                             // 183
                                                                                                                       // 184
if (process.env.NODE_ENV !== 'production') {                                                                           // 185
  if (isProxySupported) {                                                                                              // 186
    /*eslint-disable no-func-assign */                                                                                 // 187
    SyntheticEvent = new Proxy(SyntheticEvent, {                                                                       // 188
      construct: function (target, args) {                                                                             // 189
        return this.apply(target, Object.create(target.prototype), args);                                              // 190
      },                                                                                                               // 191
      apply: function (constructor, that, args) {                                                                      // 192
        return new Proxy(constructor.apply(that, args), {                                                              // 193
          set: function (target, prop, value) {                                                                        // 194
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;                                                                       // 197
            }                                                                                                          // 198
            target[prop] = value;                                                                                      // 199
            return true;                                                                                               // 200
          }                                                                                                            // 201
        });                                                                                                            // 202
      }                                                                                                                // 203
    });                                                                                                                // 204
    /*eslint-enable no-func-assign */                                                                                  // 205
  }                                                                                                                    // 206
}                                                                                                                      // 207
/**                                                                                                                    // 208
 * Helper to reduce boilerplate when creating subclasses.                                                              // 209
 *                                                                                                                     // 210
 * @param {function} Class                                                                                             // 211
 * @param {?object} Interface                                                                                          // 212
 */                                                                                                                    // 213
SyntheticEvent.augmentClass = function (Class, Interface) {                                                            // 214
  var Super = this;                                                                                                    // 215
                                                                                                                       // 216
  var E = function () {};                                                                                              // 217
  E.prototype = Super.prototype;                                                                                       // 218
  var prototype = new E();                                                                                             // 219
                                                                                                                       // 220
  _assign(prototype, Class.prototype);                                                                                 // 221
  Class.prototype = prototype;                                                                                         // 222
  Class.prototype.constructor = Class;                                                                                 // 223
                                                                                                                       // 224
  Class.Interface = _assign({}, Super.Interface, Interface);                                                           // 225
  Class.augmentClass = Super.augmentClass;                                                                             // 226
                                                                                                                       // 227
  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);                                                     // 228
};                                                                                                                     // 229
                                                                                                                       // 230
PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);                                              // 231
                                                                                                                       // 232
module.exports = SyntheticEvent;                                                                                       // 233
                                                                                                                       // 234
/**                                                                                                                    // 235
  * Helper to nullify syntheticEvent instance properties when destructing                                              // 236
  *                                                                                                                    // 237
  * @param {object} SyntheticEvent                                                                                     // 238
  * @param {String} propName                                                                                           // 239
  * @return {object} defineProperty object                                                                             // 240
  */                                                                                                                   // 241
function getPooledWarningPropertyDefinition(propName, getVal) {                                                        // 242
  var isFunction = typeof getVal === 'function';                                                                       // 243
  return {                                                                                                             // 244
    configurable: true,                                                                                                // 245
    set: set,                                                                                                          // 246
    get: get                                                                                                           // 247
  };                                                                                                                   // 248
                                                                                                                       // 249
  function set(val) {                                                                                                  // 250
    var action = isFunction ? 'setting the method' : 'setting the property';                                           // 251
    warn(action, 'This is effectively a no-op');                                                                       // 252
    return val;                                                                                                        // 253
  }                                                                                                                    // 254
                                                                                                                       // 255
  function get() {                                                                                                     // 256
    var action = isFunction ? 'accessing the method' : 'accessing the property';                                       // 257
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';                                      // 258
    warn(action, result);                                                                                              // 259
    return getVal;                                                                                                     // 260
  }                                                                                                                    // 261
                                                                                                                       // 262
  function warn(action, result) {                                                                                      // 263
    var warningCondition = false;                                                                                      // 264
    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }                                                                                                                    // 266
}                                                                                                                      // 267
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"SyntheticInputEvent.js":["./SyntheticEvent",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SyntheticInputEvent.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var SyntheticEvent = require('./SyntheticEvent');                                                                      // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * @interface Event                                                                                                    // 16
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105                                                       // 17
 *      /#events-inputevents                                                                                           // 18
 */                                                                                                                    // 19
var InputEventInterface = {                                                                                            // 20
  data: null                                                                                                           // 21
};                                                                                                                     // 22
                                                                                                                       // 23
/**                                                                                                                    // 24
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 25
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 26
 * @param {object} nativeEvent Native browser event.                                                                   // 27
 * @extends {SyntheticUIEvent}                                                                                         // 28
 */                                                                                                                    // 29
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 30
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 31
}                                                                                                                      // 32
                                                                                                                       // 33
SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);                                                 // 34
                                                                                                                       // 35
module.exports = SyntheticInputEvent;                                                                                  // 36
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ChangeEventPlugin.js":["./EventPluginHub","./EventPropagators","fbjs/lib/ExecutionEnvironment","./ReactDOMComponentTree","./ReactUpdates","./SyntheticEvent","./getEventTarget","./isEventSupported","./isTextInputElement",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ChangeEventPlugin.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var EventPluginHub = require('./EventPluginHub');                                                                      // 13
var EventPropagators = require('./EventPropagators');                                                                  // 14
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 15
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 16
var ReactUpdates = require('./ReactUpdates');                                                                          // 17
var SyntheticEvent = require('./SyntheticEvent');                                                                      // 18
                                                                                                                       // 19
var getEventTarget = require('./getEventTarget');                                                                      // 20
var isEventSupported = require('./isEventSupported');                                                                  // 21
var isTextInputElement = require('./isTextInputElement');                                                              // 22
                                                                                                                       // 23
var eventTypes = {                                                                                                     // 24
  change: {                                                                                                            // 25
    phasedRegistrationNames: {                                                                                         // 26
      bubbled: 'onChange',                                                                                             // 27
      captured: 'onChangeCapture'                                                                                      // 28
    },                                                                                                                 // 29
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }                                                                                                                    // 31
};                                                                                                                     // 32
                                                                                                                       // 33
/**                                                                                                                    // 34
 * For IE shims                                                                                                        // 35
 */                                                                                                                    // 36
var activeElement = null;                                                                                              // 37
var activeElementInst = null;                                                                                          // 38
var activeElementValue = null;                                                                                         // 39
var activeElementValueProp = null;                                                                                     // 40
                                                                                                                       // 41
/**                                                                                                                    // 42
 * SECTION: handle `change` event                                                                                      // 43
 */                                                                                                                    // 44
function shouldUseChangeEvent(elem) {                                                                                  // 45
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();                                                         // 46
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';                                        // 47
}                                                                                                                      // 48
                                                                                                                       // 49
var doesChangeEventBubble = false;                                                                                     // 50
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 51
  // See `handleChange` comment below                                                                                  // 52
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);         // 53
}                                                                                                                      // 54
                                                                                                                       // 55
function manualDispatchChangeEvent(nativeEvent) {                                                                      // 56
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 58
                                                                                                                       // 59
  // If change and propertychange bubbled, we'd just bind to it like all the                                           // 60
  // other events and have it go through ReactBrowserEventEmitter. Since it                                            // 61
  // doesn't, we manually listen for the events and so we have to enqueue and                                          // 62
  // process the abstract event manually.                                                                              // 63
  //                                                                                                                   // 64
  // Batching is necessary here in order to ensure that all event handlers run                                         // 65
  // before the next rerender (including event handlers attached to ancestor                                           // 66
  // elements instead of directly on the input). Without this, controlled                                              // 67
  // components don't work properly in conjunction with event bubbling because                                         // 68
  // the component is rerendered and the value reverted before all the event                                           // 69
  // handlers can run. See https://github.com/facebook/react/issues/708.                                               // 70
  ReactUpdates.batchedUpdates(runEventInBatch, event);                                                                 // 71
}                                                                                                                      // 72
                                                                                                                       // 73
function runEventInBatch(event) {                                                                                      // 74
  EventPluginHub.enqueueEvents(event);                                                                                 // 75
  EventPluginHub.processEventQueue(false);                                                                             // 76
}                                                                                                                      // 77
                                                                                                                       // 78
function startWatchingForChangeEventIE8(target, targetInst) {                                                          // 79
  activeElement = target;                                                                                              // 80
  activeElementInst = targetInst;                                                                                      // 81
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);                                                    // 82
}                                                                                                                      // 83
                                                                                                                       // 84
function stopWatchingForChangeEventIE8() {                                                                             // 85
  if (!activeElement) {                                                                                                // 86
    return;                                                                                                            // 87
  }                                                                                                                    // 88
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);                                                    // 89
  activeElement = null;                                                                                                // 90
  activeElementInst = null;                                                                                            // 91
}                                                                                                                      // 92
                                                                                                                       // 93
function getTargetInstForChangeEvent(topLevelType, targetInst) {                                                       // 94
  if (topLevelType === 'topChange') {                                                                                  // 95
    return targetInst;                                                                                                 // 96
  }                                                                                                                    // 97
}                                                                                                                      // 98
function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {                                             // 99
  if (topLevelType === 'topFocus') {                                                                                   // 100
    // stopWatching() should be a noop here but we call it just in case we                                             // 101
    // missed a blur event somehow.                                                                                    // 102
    stopWatchingForChangeEventIE8();                                                                                   // 103
    startWatchingForChangeEventIE8(target, targetInst);                                                                // 104
  } else if (topLevelType === 'topBlur') {                                                                             // 105
    stopWatchingForChangeEventIE8();                                                                                   // 106
  }                                                                                                                    // 107
}                                                                                                                      // 108
                                                                                                                       // 109
/**                                                                                                                    // 110
 * SECTION: handle `input` event                                                                                       // 111
 */                                                                                                                    // 112
var isInputEventSupported = false;                                                                                     // 113
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 114
  // IE9 claims to support the input event but fails to trigger it when                                                // 115
  // deleting text, so we ignore its input events.                                                                     // 116
  // IE10+ fire input events to often, such when a placeholder                                                         // 117
  // changes or when an input with a placeholder is focused.                                                           // 118
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);         // 119
}                                                                                                                      // 120
                                                                                                                       // 121
/**                                                                                                                    // 122
 * (For IE <=11) Replacement getter/setter for the `value` property that gets                                          // 123
 * set on the active element.                                                                                          // 124
 */                                                                                                                    // 125
var newValueProp = {                                                                                                   // 126
  get: function () {                                                                                                   // 127
    return activeElementValueProp.get.call(this);                                                                      // 128
  },                                                                                                                   // 129
  set: function (val) {                                                                                                // 130
    // Cast to a string so we can do equality checks.                                                                  // 131
    activeElementValue = '' + val;                                                                                     // 132
    activeElementValueProp.set.call(this, val);                                                                        // 133
  }                                                                                                                    // 134
};                                                                                                                     // 135
                                                                                                                       // 136
/**                                                                                                                    // 137
 * (For IE <=11) Starts tracking propertychange events on the passed-in element                                        // 138
 * and override the value property so that we can distinguish user events from                                         // 139
 * value changes in JS.                                                                                                // 140
 */                                                                                                                    // 141
function startWatchingForValueChange(target, targetInst) {                                                             // 142
  activeElement = target;                                                                                              // 143
  activeElementInst = targetInst;                                                                                      // 144
  activeElementValue = target.value;                                                                                   // 145
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');                     // 146
                                                                                                                       // 147
  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only                                        // 148
  // on DOM elements                                                                                                   // 149
  Object.defineProperty(activeElement, 'value', newValueProp);                                                         // 150
  if (activeElement.attachEvent) {                                                                                     // 151
    activeElement.attachEvent('onpropertychange', handlePropertyChange);                                               // 152
  } else {                                                                                                             // 153
    activeElement.addEventListener('propertychange', handlePropertyChange, false);                                     // 154
  }                                                                                                                    // 155
}                                                                                                                      // 156
                                                                                                                       // 157
/**                                                                                                                    // 158
 * (For IE <=11) Removes the event listeners from the currently-tracked element,                                       // 159
 * if any exists.                                                                                                      // 160
 */                                                                                                                    // 161
function stopWatchingForValueChange() {                                                                                // 162
  if (!activeElement) {                                                                                                // 163
    return;                                                                                                            // 164
  }                                                                                                                    // 165
                                                                                                                       // 166
  // delete restores the original property definition                                                                  // 167
  delete activeElement.value;                                                                                          // 168
                                                                                                                       // 169
  if (activeElement.detachEvent) {                                                                                     // 170
    activeElement.detachEvent('onpropertychange', handlePropertyChange);                                               // 171
  } else {                                                                                                             // 172
    activeElement.removeEventListener('propertychange', handlePropertyChange, false);                                  // 173
  }                                                                                                                    // 174
                                                                                                                       // 175
  activeElement = null;                                                                                                // 176
  activeElementInst = null;                                                                                            // 177
  activeElementValue = null;                                                                                           // 178
  activeElementValueProp = null;                                                                                       // 179
}                                                                                                                      // 180
                                                                                                                       // 181
/**                                                                                                                    // 182
 * (For IE <=11) Handles a propertychange event, sending a `change` event if                                           // 183
 * the value of the active element has changed.                                                                        // 184
 */                                                                                                                    // 185
function handlePropertyChange(nativeEvent) {                                                                           // 186
  if (nativeEvent.propertyName !== 'value') {                                                                          // 187
    return;                                                                                                            // 188
  }                                                                                                                    // 189
  var value = nativeEvent.srcElement.value;                                                                            // 190
  if (value === activeElementValue) {                                                                                  // 191
    return;                                                                                                            // 192
  }                                                                                                                    // 193
  activeElementValue = value;                                                                                          // 194
                                                                                                                       // 195
  manualDispatchChangeEvent(nativeEvent);                                                                              // 196
}                                                                                                                      // 197
                                                                                                                       // 198
/**                                                                                                                    // 199
 * If a `change` event should be fired, returns the target's ID.                                                       // 200
 */                                                                                                                    // 201
function getTargetInstForInputEvent(topLevelType, targetInst) {                                                        // 202
  if (topLevelType === 'topInput') {                                                                                   // 203
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly                                           // 204
    // what we want so fall through here and trigger an abstract event                                                 // 205
    return targetInst;                                                                                                 // 206
  }                                                                                                                    // 207
}                                                                                                                      // 208
                                                                                                                       // 209
function handleEventsForInputEventIE(topLevelType, target, targetInst) {                                               // 210
  if (topLevelType === 'topFocus') {                                                                                   // 211
    // In IE8, we can capture almost all .value changes by adding a                                                    // 212
    // propertychange handler and looking for events with propertyName                                                 // 213
    // equal to 'value'                                                                                                // 214
    // In IE9-11, propertychange fires for most input events but is buggy and                                          // 215
    // doesn't fire when text is deleted, but conveniently, selectionchange                                            // 216
    // appears to fire in all of the remaining cases so we catch those and                                             // 217
    // forward the event if the value has changed                                                                      // 218
    // In either case, we don't want to call the event handler if the value                                            // 219
    // is changed from JS so we redefine a setter for `.value` that updates                                            // 220
    // our activeElementValue variable, allowing us to ignore those changes                                            // 221
    //                                                                                                                 // 222
    // stopWatching() should be a noop here but we call it just in case we                                             // 223
    // missed a blur event somehow.                                                                                    // 224
    stopWatchingForValueChange();                                                                                      // 225
    startWatchingForValueChange(target, targetInst);                                                                   // 226
  } else if (topLevelType === 'topBlur') {                                                                             // 227
    stopWatchingForValueChange();                                                                                      // 228
  }                                                                                                                    // 229
}                                                                                                                      // 230
                                                                                                                       // 231
// For IE8 and IE9.                                                                                                    // 232
function getTargetInstForInputEventIE(topLevelType, targetInst) {                                                      // 233
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {         // 234
    // On the selectionchange event, the target is just document which isn't                                           // 235
    // helpful for us so just check activeElement instead.                                                             // 236
    //                                                                                                                 // 237
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire                                          // 238
    // propertychange on the first input event after setting `value` from a                                            // 239
    // script and fires only keydown, keypress, keyup. Catching keyup usually                                          // 240
    // gets it and catching keydown lets us fire an event for the first                                                // 241
    // keystroke if user does a key repeat (it'll be a little delayed: right                                           // 242
    // before the second keystroke). Other input methods (e.g., paste) seem to                                         // 243
    // fire selectionchange normally.                                                                                  // 244
    if (activeElement && activeElement.value !== activeElementValue) {                                                 // 245
      activeElementValue = activeElement.value;                                                                        // 246
      return activeElementInst;                                                                                        // 247
    }                                                                                                                  // 248
  }                                                                                                                    // 249
}                                                                                                                      // 250
                                                                                                                       // 251
/**                                                                                                                    // 252
 * SECTION: handle `click` event                                                                                       // 253
 */                                                                                                                    // 254
function shouldUseClickEvent(elem) {                                                                                   // 255
  // Use the `click` event to detect changes to checkbox and radio inputs.                                             // 256
  // This approach works across all browsers, whereas `change` does not fire                                           // 257
  // until `blur` in IE8.                                                                                              // 258
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}                                                                                                                      // 260
                                                                                                                       // 261
function getTargetInstForClickEvent(topLevelType, targetInst) {                                                        // 262
  if (topLevelType === 'topClick') {                                                                                   // 263
    return targetInst;                                                                                                 // 264
  }                                                                                                                    // 265
}                                                                                                                      // 266
                                                                                                                       // 267
/**                                                                                                                    // 268
 * This plugin creates an `onChange` event that normalizes change events                                               // 269
 * across form elements. This event fires at a time when it's possible to                                              // 270
 * change the element's value without seeing a flicker.                                                                // 271
 *                                                                                                                     // 272
 * Supported elements are:                                                                                             // 273
 * - input (see `isTextInputElement`)                                                                                  // 274
 * - textarea                                                                                                          // 275
 * - select                                                                                                            // 276
 */                                                                                                                    // 277
var ChangeEventPlugin = {                                                                                              // 278
                                                                                                                       // 279
  eventTypes: eventTypes,                                                                                              // 280
                                                                                                                       // 281
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 282
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;                      // 283
                                                                                                                       // 284
    var getTargetInstFunc, handleEventFunc;                                                                            // 285
    if (shouldUseChangeEvent(targetNode)) {                                                                            // 286
      if (doesChangeEventBubble) {                                                                                     // 287
        getTargetInstFunc = getTargetInstForChangeEvent;                                                               // 288
      } else {                                                                                                         // 289
        handleEventFunc = handleEventsForChangeEventIE8;                                                               // 290
      }                                                                                                                // 291
    } else if (isTextInputElement(targetNode)) {                                                                       // 292
      if (isInputEventSupported) {                                                                                     // 293
        getTargetInstFunc = getTargetInstForInputEvent;                                                                // 294
      } else {                                                                                                         // 295
        getTargetInstFunc = getTargetInstForInputEventIE;                                                              // 296
        handleEventFunc = handleEventsForInputEventIE;                                                                 // 297
      }                                                                                                                // 298
    } else if (shouldUseClickEvent(targetNode)) {                                                                      // 299
      getTargetInstFunc = getTargetInstForClickEvent;                                                                  // 300
    }                                                                                                                  // 301
                                                                                                                       // 302
    if (getTargetInstFunc) {                                                                                           // 303
      var inst = getTargetInstFunc(topLevelType, targetInst);                                                          // 304
      if (inst) {                                                                                                      // 305
        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);                 // 306
        event.type = 'change';                                                                                         // 307
        EventPropagators.accumulateTwoPhaseDispatches(event);                                                          // 308
        return event;                                                                                                  // 309
      }                                                                                                                // 310
    }                                                                                                                  // 311
                                                                                                                       // 312
    if (handleEventFunc) {                                                                                             // 313
      handleEventFunc(topLevelType, targetNode, targetInst);                                                           // 314
    }                                                                                                                  // 315
  }                                                                                                                    // 316
                                                                                                                       // 317
};                                                                                                                     // 318
                                                                                                                       // 319
module.exports = ChangeEventPlugin;                                                                                    // 320
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactUpdates.js":["./reactProdInvariant","object-assign","./CallbackQueue","./PooledClass","./ReactFeatureFlags","./ReactReconciler","./Transaction","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactUpdates.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant'),                                                                  // 13
    _assign = require('object-assign');                                                                                // 14
                                                                                                                       // 15
var CallbackQueue = require('./CallbackQueue');                                                                        // 16
var PooledClass = require('./PooledClass');                                                                            // 17
var ReactFeatureFlags = require('./ReactFeatureFlags');                                                                // 18
var ReactReconciler = require('./ReactReconciler');                                                                    // 19
var Transaction = require('./Transaction');                                                                            // 20
                                                                                                                       // 21
var invariant = require('fbjs/lib/invariant');                                                                         // 22
                                                                                                                       // 23
var dirtyComponents = [];                                                                                              // 24
var updateBatchNumber = 0;                                                                                             // 25
var asapCallbackQueue = CallbackQueue.getPooled();                                                                     // 26
var asapEnqueued = false;                                                                                              // 27
                                                                                                                       // 28
var batchingStrategy = null;                                                                                           // 29
                                                                                                                       // 30
function ensureInjected() {                                                                                            // 31
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}                                                                                                                      // 33
                                                                                                                       // 34
var NESTED_UPDATES = {                                                                                                 // 35
  initialize: function () {                                                                                            // 36
    this.dirtyComponentsLength = dirtyComponents.length;                                                               // 37
  },                                                                                                                   // 38
  close: function () {                                                                                                 // 39
    if (this.dirtyComponentsLength !== dirtyComponents.length) {                                                       // 40
      // Additional updates were enqueued by componentDidUpdate handlers or                                            // 41
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run                                        // 42
      // these new updates so that if A's componentDidUpdate calls setState on                                         // 43
      // B, B will update before the callback A's updater provided when calling                                        // 44
      // setState.                                                                                                     // 45
      dirtyComponents.splice(0, this.dirtyComponentsLength);                                                           // 46
      flushBatchedUpdates();                                                                                           // 47
    } else {                                                                                                           // 48
      dirtyComponents.length = 0;                                                                                      // 49
    }                                                                                                                  // 50
  }                                                                                                                    // 51
};                                                                                                                     // 52
                                                                                                                       // 53
var UPDATE_QUEUEING = {                                                                                                // 54
  initialize: function () {                                                                                            // 55
    this.callbackQueue.reset();                                                                                        // 56
  },                                                                                                                   // 57
  close: function () {                                                                                                 // 58
    this.callbackQueue.notifyAll();                                                                                    // 59
  }                                                                                                                    // 60
};                                                                                                                     // 61
                                                                                                                       // 62
var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];                                                          // 63
                                                                                                                       // 64
function ReactUpdatesFlushTransaction() {                                                                              // 65
  this.reinitializeTransaction();                                                                                      // 66
  this.dirtyComponentsLength = null;                                                                                   // 67
  this.callbackQueue = CallbackQueue.getPooled();                                                                      // 68
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(                                        // 69
  /* useCreateElement */true);                                                                                         // 70
}                                                                                                                      // 71
                                                                                                                       // 72
_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {                                                         // 73
  getTransactionWrappers: function () {                                                                                // 74
    return TRANSACTION_WRAPPERS;                                                                                       // 75
  },                                                                                                                   // 76
                                                                                                                       // 77
  destructor: function () {                                                                                            // 78
    this.dirtyComponentsLength = null;                                                                                 // 79
    CallbackQueue.release(this.callbackQueue);                                                                         // 80
    this.callbackQueue = null;                                                                                         // 81
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);                                         // 82
    this.reconcileTransaction = null;                                                                                  // 83
  },                                                                                                                   // 84
                                                                                                                       // 85
  perform: function (method, scope, a) {                                                                               // 86
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`                                         // 87
    // with this transaction's wrappers around it.                                                                     // 88
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }                                                                                                                    // 90
});                                                                                                                    // 91
                                                                                                                       // 92
PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);                                                                // 93
                                                                                                                       // 94
function batchedUpdates(callback, a, b, c, d, e) {                                                                     // 95
  ensureInjected();                                                                                                    // 96
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);                                                     // 97
}                                                                                                                      // 98
                                                                                                                       // 99
/**                                                                                                                    // 100
 * Array comparator for ReactComponents by mount ordering.                                                             // 101
 *                                                                                                                     // 102
 * @param {ReactComponent} c1 first component you're comparing                                                         // 103
 * @param {ReactComponent} c2 second component you're comparing                                                        // 104
 * @return {number} Return value usable by Array.prototype.sort().                                                     // 105
 */                                                                                                                    // 106
function mountOrderComparator(c1, c2) {                                                                                // 107
  return c1._mountOrder - c2._mountOrder;                                                                              // 108
}                                                                                                                      // 109
                                                                                                                       // 110
function runBatchedUpdates(transaction) {                                                                              // 111
  var len = transaction.dirtyComponentsLength;                                                                         // 112
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;
                                                                                                                       // 114
  // Since reconciling a component higher in the owner hierarchy usually (not                                          // 115
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile                                         // 116
  // them before their children by sorting the array.                                                                  // 117
  dirtyComponents.sort(mountOrderComparator);                                                                          // 118
                                                                                                                       // 119
  // Any updates enqueued while reconciling must be performed after this entire                                        // 120
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and                                         // 121
  // C, B could update twice in a single batch if C's render enqueues an update                                        // 122
  // to B (since B would have already updated, we should skip it, and the only                                         // 123
  // way we can know to do so is by checking the batch counter).                                                       // 124
  updateBatchNumber++;                                                                                                 // 125
                                                                                                                       // 126
  for (var i = 0; i < len; i++) {                                                                                      // 127
    // If a component is unmounted before pending changes apply, it will still                                         // 128
    // be here, but we assume that it has cleared its _pendingCallbacks and                                            // 129
    // that performUpdateIfNecessary is a noop.                                                                        // 130
    var component = dirtyComponents[i];                                                                                // 131
                                                                                                                       // 132
    // If performUpdateIfNecessary happens to enqueue any new updates, we                                              // 133
    // shouldn't execute the callbacks until the next render happens, so                                               // 134
    // stash the callbacks first                                                                                       // 135
    var callbacks = component._pendingCallbacks;                                                                       // 136
    component._pendingCallbacks = null;                                                                                // 137
                                                                                                                       // 138
    var markerName;                                                                                                    // 139
    if (ReactFeatureFlags.logTopLevelRenders) {                                                                        // 140
      var namedComponent = component;                                                                                  // 141
      // Duck type TopLevelWrapper. This is probably always true.                                                      // 142
      if (component._currentElement.type.isReactTopLevelWrapper) {                                                     // 143
        namedComponent = component._renderedComponent;                                                                 // 144
      }                                                                                                                // 145
      markerName = 'React update: ' + namedComponent.getName();                                                        // 146
      console.time(markerName);                                                                                        // 147
    }                                                                                                                  // 148
                                                                                                                       // 149
    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);          // 150
                                                                                                                       // 151
    if (markerName) {                                                                                                  // 152
      console.timeEnd(markerName);                                                                                     // 153
    }                                                                                                                  // 154
                                                                                                                       // 155
    if (callbacks) {                                                                                                   // 156
      for (var j = 0; j < callbacks.length; j++) {                                                                     // 157
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());                                // 158
      }                                                                                                                // 159
    }                                                                                                                  // 160
  }                                                                                                                    // 161
}                                                                                                                      // 162
                                                                                                                       // 163
var flushBatchedUpdates = function () {                                                                                // 164
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents                                            // 165
  // array and perform any updates enqueued by mount-ready handlers (i.e.,                                             // 166
  // componentDidUpdate) but we need to check here too in order to catch                                               // 167
  // updates enqueued by setState callbacks and asap calls.                                                            // 168
  while (dirtyComponents.length || asapEnqueued) {                                                                     // 169
    if (dirtyComponents.length) {                                                                                      // 170
      var transaction = ReactUpdatesFlushTransaction.getPooled();                                                      // 171
      transaction.perform(runBatchedUpdates, null, transaction);                                                       // 172
      ReactUpdatesFlushTransaction.release(transaction);                                                               // 173
    }                                                                                                                  // 174
                                                                                                                       // 175
    if (asapEnqueued) {                                                                                                // 176
      asapEnqueued = false;                                                                                            // 177
      var queue = asapCallbackQueue;                                                                                   // 178
      asapCallbackQueue = CallbackQueue.getPooled();                                                                   // 179
      queue.notifyAll();                                                                                               // 180
      CallbackQueue.release(queue);                                                                                    // 181
    }                                                                                                                  // 182
  }                                                                                                                    // 183
};                                                                                                                     // 184
                                                                                                                       // 185
/**                                                                                                                    // 186
 * Mark a component as needing a rerender, adding an optional callback to a                                            // 187
 * list of functions which will be executed once the rerender occurs.                                                  // 188
 */                                                                                                                    // 189
function enqueueUpdate(component) {                                                                                    // 190
  ensureInjected();                                                                                                    // 191
                                                                                                                       // 192
  // Various parts of our code (such as ReactCompositeComponent's                                                      // 193
  // _renderValidatedComponent) assume that calls to render aren't nested;                                             // 194
  // verify that that's the case. (This is called by each top-level update                                             // 195
  // function, like setState, forceUpdate, etc.; creation and                                                          // 196
  // destruction of top-level components is guarded in ReactMount.)                                                    // 197
                                                                                                                       // 198
  if (!batchingStrategy.isBatchingUpdates) {                                                                           // 199
    batchingStrategy.batchedUpdates(enqueueUpdate, component);                                                         // 200
    return;                                                                                                            // 201
  }                                                                                                                    // 202
                                                                                                                       // 203
  dirtyComponents.push(component);                                                                                     // 204
  if (component._updateBatchNumber == null) {                                                                          // 205
    component._updateBatchNumber = updateBatchNumber + 1;                                                              // 206
  }                                                                                                                    // 207
}                                                                                                                      // 208
                                                                                                                       // 209
/**                                                                                                                    // 210
 * Enqueue a callback to be run at the end of the current batching cycle. Throws                                       // 211
 * if no updates are currently being performed.                                                                        // 212
 */                                                                                                                    // 213
function asap(callback, context) {                                                                                     // 214
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
  asapCallbackQueue.enqueue(callback, context);                                                                        // 216
  asapEnqueued = true;                                                                                                 // 217
}                                                                                                                      // 218
                                                                                                                       // 219
var ReactUpdatesInjection = {                                                                                          // 220
  injectReconcileTransaction: function (ReconcileTransaction) {                                                        // 221
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;                                                     // 223
  },                                                                                                                   // 224
                                                                                                                       // 225
  injectBatchingStrategy: function (_batchingStrategy) {                                                               // 226
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;                                                                              // 230
  }                                                                                                                    // 231
};                                                                                                                     // 232
                                                                                                                       // 233
var ReactUpdates = {                                                                                                   // 234
  /**                                                                                                                  // 235
   * React references `ReactReconcileTransaction` using this property in order                                         // 236
   * to allow dependency injection.                                                                                    // 237
   *                                                                                                                   // 238
   * @internal                                                                                                         // 239
   */                                                                                                                  // 240
  ReactReconcileTransaction: null,                                                                                     // 241
                                                                                                                       // 242
  batchedUpdates: batchedUpdates,                                                                                      // 243
  enqueueUpdate: enqueueUpdate,                                                                                        // 244
  flushBatchedUpdates: flushBatchedUpdates,                                                                            // 245
  injection: ReactUpdatesInjection,                                                                                    // 246
  asap: asap                                                                                                           // 247
};                                                                                                                     // 248
                                                                                                                       // 249
module.exports = ReactUpdates;                                                                                         // 250
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"CallbackQueue.js":["./reactProdInvariant","./PooledClass","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/CallbackQueue.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var _prodInvariant = require('./reactProdInvariant');                                                                  // 14
                                                                                                                       // 15
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 17
var PooledClass = require('./PooledClass');                                                                            // 18
                                                                                                                       // 19
var invariant = require('fbjs/lib/invariant');                                                                         // 20
                                                                                                                       // 21
/**                                                                                                                    // 22
 * A specialized pseudo-event module to help keep track of components waiting to                                       // 23
 * be notified when their DOM representations are available for use.                                                   // 24
 *                                                                                                                     // 25
 * This implements `PooledClass`, so you should never need to instantiate this.                                        // 26
 * Instead, use `CallbackQueue.getPooled()`.                                                                           // 27
 *                                                                                                                     // 28
 * @class ReactMountReady                                                                                              // 29
 * @implements PooledClass                                                                                             // 30
 * @internal                                                                                                           // 31
 */                                                                                                                    // 32
                                                                                                                       // 33
var CallbackQueue = function () {                                                                                      // 34
  function CallbackQueue(arg) {                                                                                        // 35
    _classCallCheck(this, CallbackQueue);                                                                              // 36
                                                                                                                       // 37
    this._callbacks = null;                                                                                            // 38
    this._contexts = null;                                                                                             // 39
    this._arg = arg;                                                                                                   // 40
  }                                                                                                                    // 41
                                                                                                                       // 42
  /**                                                                                                                  // 43
   * Enqueues a callback to be invoked when `notifyAll` is invoked.                                                    // 44
   *                                                                                                                   // 45
   * @param {function} callback Invoked when `notifyAll` is invoked.                                                   // 46
   * @param {?object} context Context to call `callback` with.                                                         // 47
   * @internal                                                                                                         // 48
   */                                                                                                                  // 49
                                                                                                                       // 50
                                                                                                                       // 51
  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {                                              // 52
    this._callbacks = this._callbacks || [];                                                                           // 53
    this._callbacks.push(callback);                                                                                    // 54
    this._contexts = this._contexts || [];                                                                             // 55
    this._contexts.push(context);                                                                                      // 56
  };                                                                                                                   // 57
                                                                                                                       // 58
  /**                                                                                                                  // 59
   * Invokes all enqueued callbacks and clears the queue. This is invoked after                                        // 60
   * the DOM representation of a component has been created or updated.                                                // 61
   *                                                                                                                   // 62
   * @internal                                                                                                         // 63
   */                                                                                                                  // 64
                                                                                                                       // 65
                                                                                                                       // 66
  CallbackQueue.prototype.notifyAll = function notifyAll() {                                                           // 67
    var callbacks = this._callbacks;                                                                                   // 68
    var contexts = this._contexts;                                                                                     // 69
    var arg = this._arg;                                                                                               // 70
    if (callbacks && contexts) {                                                                                       // 71
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;                                                                                          // 73
      this._contexts = null;                                                                                           // 74
      for (var i = 0; i < callbacks.length; i++) {                                                                     // 75
        callbacks[i].call(contexts[i], arg);                                                                           // 76
      }                                                                                                                // 77
      callbacks.length = 0;                                                                                            // 78
      contexts.length = 0;                                                                                             // 79
    }                                                                                                                  // 80
  };                                                                                                                   // 81
                                                                                                                       // 82
  CallbackQueue.prototype.checkpoint = function checkpoint() {                                                         // 83
    return this._callbacks ? this._callbacks.length : 0;                                                               // 84
  };                                                                                                                   // 85
                                                                                                                       // 86
  CallbackQueue.prototype.rollback = function rollback(len) {                                                          // 87
    if (this._callbacks && this._contexts) {                                                                           // 88
      this._callbacks.length = len;                                                                                    // 89
      this._contexts.length = len;                                                                                     // 90
    }                                                                                                                  // 91
  };                                                                                                                   // 92
                                                                                                                       // 93
  /**                                                                                                                  // 94
   * Resets the internal queue.                                                                                        // 95
   *                                                                                                                   // 96
   * @internal                                                                                                         // 97
   */                                                                                                                  // 98
                                                                                                                       // 99
                                                                                                                       // 100
  CallbackQueue.prototype.reset = function reset() {                                                                   // 101
    this._callbacks = null;                                                                                            // 102
    this._contexts = null;                                                                                             // 103
  };                                                                                                                   // 104
                                                                                                                       // 105
  /**                                                                                                                  // 106
   * `PooledClass` looks for this.                                                                                     // 107
   */                                                                                                                  // 108
                                                                                                                       // 109
                                                                                                                       // 110
  CallbackQueue.prototype.destructor = function destructor() {                                                         // 111
    this.reset();                                                                                                      // 112
  };                                                                                                                   // 113
                                                                                                                       // 114
  return CallbackQueue;                                                                                                // 115
}();                                                                                                                   // 116
                                                                                                                       // 117
module.exports = PooledClass.addPoolingTo(CallbackQueue);                                                              // 118
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactFeatureFlags.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactFeatureFlags.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var ReactFeatureFlags = {                                                                                              // 14
  // When true, call console.time() before and .timeEnd() after each top-level                                         // 15
  // render (both initial renders and updates). Useful when looking at prod-mode                                       // 16
  // timeline profiles in Chrome, for example.                                                                         // 17
  logTopLevelRenders: false                                                                                            // 18
};                                                                                                                     // 19
                                                                                                                       // 20
module.exports = ReactFeatureFlags;                                                                                    // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ReactReconciler.js":["./ReactRef","./ReactInstrumentation","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactReconciler.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ReactRef = require('./ReactRef');                                                                                  // 13
var ReactInstrumentation = require('./ReactInstrumentation');                                                          // 14
                                                                                                                       // 15
var warning = require('fbjs/lib/warning');                                                                             // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * Helper to call ReactRef.attachRefs with this composite component, split out                                         // 19
 * to avoid allocations in the transaction mount-ready queue.                                                          // 20
 */                                                                                                                    // 21
function attachRefs() {                                                                                                // 22
  ReactRef.attachRefs(this, this._currentElement);                                                                     // 23
}                                                                                                                      // 24
                                                                                                                       // 25
var ReactReconciler = {                                                                                                // 26
                                                                                                                       // 27
  /**                                                                                                                  // 28
   * Initializes the component, renders markup, and registers event listeners.                                         // 29
   *                                                                                                                   // 30
   * @param {ReactComponent} internalInstance                                                                          // 31
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 32
   * @param {?object} the containing host component instance                                                           // 33
   * @param {?object} info about the host container                                                                    // 34
   * @return {?string} Rendered markup to be inserted into the DOM.                                                    // 35
   * @final                                                                                                            // 36
   * @internal                                                                                                         // 37
   */                                                                                                                  // 38
  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
  ) {                                                                                                                  // 40
    if (process.env.NODE_ENV !== 'production') {                                                                       // 41
      if (internalInstance._debugID !== 0) {                                                                           // 42
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }                                                                                                                // 44
    }                                                                                                                  // 45
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);  // 46
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {                            // 47
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);                                          // 48
    }                                                                                                                  // 49
    if (process.env.NODE_ENV !== 'production') {                                                                       // 50
      if (internalInstance._debugID !== 0) {                                                                           // 51
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);                                    // 52
      }                                                                                                                // 53
    }                                                                                                                  // 54
    return markup;                                                                                                     // 55
  },                                                                                                                   // 56
                                                                                                                       // 57
  /**                                                                                                                  // 58
   * Returns a value that can be passed to                                                                             // 59
   * ReactComponentEnvironment.replaceNodeWithMarkup.                                                                  // 60
   */                                                                                                                  // 61
  getHostNode: function (internalInstance) {                                                                           // 62
    return internalInstance.getHostNode();                                                                             // 63
  },                                                                                                                   // 64
                                                                                                                       // 65
  /**                                                                                                                  // 66
   * Releases any resources allocated by `mountComponent`.                                                             // 67
   *                                                                                                                   // 68
   * @final                                                                                                            // 69
   * @internal                                                                                                         // 70
   */                                                                                                                  // 71
  unmountComponent: function (internalInstance, safely) {                                                              // 72
    if (process.env.NODE_ENV !== 'production') {                                                                       // 73
      if (internalInstance._debugID !== 0) {                                                                           // 74
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);                            // 75
      }                                                                                                                // 76
    }                                                                                                                  // 77
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);                                           // 78
    internalInstance.unmountComponent(safely);                                                                         // 79
    if (process.env.NODE_ENV !== 'production') {                                                                       // 80
      if (internalInstance._debugID !== 0) {                                                                           // 81
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);                                  // 82
      }                                                                                                                // 83
    }                                                                                                                  // 84
  },                                                                                                                   // 85
                                                                                                                       // 86
  /**                                                                                                                  // 87
   * Update a component using a new element.                                                                           // 88
   *                                                                                                                   // 89
   * @param {ReactComponent} internalInstance                                                                          // 90
   * @param {ReactElement} nextElement                                                                                 // 91
   * @param {ReactReconcileTransaction} transaction                                                                    // 92
   * @param {object} context                                                                                           // 93
   * @internal                                                                                                         // 94
   */                                                                                                                  // 95
  receiveComponent: function (internalInstance, nextElement, transaction, context) {                                   // 96
    var prevElement = internalInstance._currentElement;                                                                // 97
                                                                                                                       // 98
    if (nextElement === prevElement && context === internalInstance._context) {                                        // 99
      // Since elements are immutable after the owner is rendered,                                                     // 100
      // we can do a cheap identity compare here to determine if this is a                                             // 101
      // superfluous reconcile. It's possible for state to be mutable but such                                         // 102
      // change should trigger an update of the owner which would recreate                                             // 103
      // the element. We explicitly check for the existence of an owner since                                          // 104
      // it's possible for an element created outside a composite to be                                                // 105
      // deeply mutated and reused.                                                                                    // 106
                                                                                                                       // 107
      // TODO: Bailing out early is just a perf optimization right?                                                    // 108
      // TODO: Removing the return statement should affect correctness?                                                // 109
      return;                                                                                                          // 110
    }                                                                                                                  // 111
                                                                                                                       // 112
    if (process.env.NODE_ENV !== 'production') {                                                                       // 113
      if (internalInstance._debugID !== 0) {                                                                           // 114
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);                // 115
      }                                                                                                                // 116
    }                                                                                                                  // 117
                                                                                                                       // 118
    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);                                             // 119
                                                                                                                       // 120
    if (refsChanged) {                                                                                                 // 121
      ReactRef.detachRefs(internalInstance, prevElement);                                                              // 122
    }                                                                                                                  // 123
                                                                                                                       // 124
    internalInstance.receiveComponent(nextElement, transaction, context);                                              // 125
                                                                                                                       // 126
    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {             // 127
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);                                          // 128
    }                                                                                                                  // 129
                                                                                                                       // 130
    if (process.env.NODE_ENV !== 'production') {                                                                       // 131
      if (internalInstance._debugID !== 0) {                                                                           // 132
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);                                   // 133
      }                                                                                                                // 134
    }                                                                                                                  // 135
  },                                                                                                                   // 136
                                                                                                                       // 137
  /**                                                                                                                  // 138
   * Flush any dirty changes in a component.                                                                           // 139
   *                                                                                                                   // 140
   * @param {ReactComponent} internalInstance                                                                          // 141
   * @param {ReactReconcileTransaction} transaction                                                                    // 142
   * @internal                                                                                                         // 143
   */                                                                                                                  // 144
  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {                              // 145
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {                                                   // 146
      // The component's enqueued batch number should always be the current                                            // 147
      // batch or the following one.                                                                                   // 148
      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;                                                                                                          // 150
    }                                                                                                                  // 151
    if (process.env.NODE_ENV !== 'production') {                                                                       // 152
      if (internalInstance._debugID !== 0) {                                                                           // 153
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }                                                                                                                // 155
    }                                                                                                                  // 156
    internalInstance.performUpdateIfNecessary(transaction);                                                            // 157
    if (process.env.NODE_ENV !== 'production') {                                                                       // 158
      if (internalInstance._debugID !== 0) {                                                                           // 159
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);                                   // 160
      }                                                                                                                // 161
    }                                                                                                                  // 162
  }                                                                                                                    // 163
                                                                                                                       // 164
};                                                                                                                     // 165
                                                                                                                       // 166
module.exports = ReactReconciler;                                                                                      // 167
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactRef.js":["./ReactOwner",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactRef.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var ReactOwner = require('./ReactOwner');                                                                              // 14
                                                                                                                       // 15
var ReactRef = {};                                                                                                     // 16
                                                                                                                       // 17
function attachRef(ref, component, owner) {                                                                            // 18
  if (typeof ref === 'function') {                                                                                     // 19
    ref(component.getPublicInstance());                                                                                // 20
  } else {                                                                                                             // 21
    // Legacy ref                                                                                                      // 22
    ReactOwner.addComponentAsRefTo(component, ref, owner);                                                             // 23
  }                                                                                                                    // 24
}                                                                                                                      // 25
                                                                                                                       // 26
function detachRef(ref, component, owner) {                                                                            // 27
  if (typeof ref === 'function') {                                                                                     // 28
    ref(null);                                                                                                         // 29
  } else {                                                                                                             // 30
    // Legacy ref                                                                                                      // 31
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);                                                        // 32
  }                                                                                                                    // 33
}                                                                                                                      // 34
                                                                                                                       // 35
ReactRef.attachRefs = function (instance, element) {                                                                   // 36
  if (element === null || typeof element !== 'object') {                                                               // 37
    return;                                                                                                            // 38
  }                                                                                                                    // 39
  var ref = element.ref;                                                                                               // 40
  if (ref != null) {                                                                                                   // 41
    attachRef(ref, instance, element._owner);                                                                          // 42
  }                                                                                                                    // 43
};                                                                                                                     // 44
                                                                                                                       // 45
ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {                                                      // 46
  // If either the owner or a `ref` has changed, make sure the newest owner                                            // 47
  // has stored a reference to `this`, and the previous owner (if different)                                           // 48
  // has forgotten the reference to `this`. We use the element instead                                                 // 49
  // of the public this.props because the post processing cannot determine                                             // 50
  // a ref. The ref conceptually lives on the element.                                                                 // 51
                                                                                                                       // 52
  // TODO: Should this even be possible? The owner cannot change because                                               // 53
  // it's forbidden by shouldUpdateReactComponent. The ref can change                                                  // 54
  // if you swap the keys of but not the refs. Reconsider where this check                                             // 55
  // is made. It probably belongs where the key checking and                                                           // 56
  // instantiateReactComponent is done.                                                                                // 57
                                                                                                                       // 58
  var prevRef = null;                                                                                                  // 59
  var prevOwner = null;                                                                                                // 60
  if (prevElement !== null && typeof prevElement === 'object') {                                                       // 61
    prevRef = prevElement.ref;                                                                                         // 62
    prevOwner = prevElement._owner;                                                                                    // 63
  }                                                                                                                    // 64
                                                                                                                       // 65
  var nextRef = null;                                                                                                  // 66
  var nextOwner = null;                                                                                                // 67
  if (nextElement !== null && typeof nextElement === 'object') {                                                       // 68
    nextRef = nextElement.ref;                                                                                         // 69
    nextOwner = nextElement._owner;                                                                                    // 70
  }                                                                                                                    // 71
                                                                                                                       // 72
  return prevRef !== nextRef ||                                                                                        // 73
  // If owner changes but we have an unchanged function ref, don't update refs                                         // 74
  typeof nextRef === 'string' && nextOwner !== prevOwner;                                                              // 75
};                                                                                                                     // 76
                                                                                                                       // 77
ReactRef.detachRefs = function (instance, element) {                                                                   // 78
  if (element === null || typeof element !== 'object') {                                                               // 79
    return;                                                                                                            // 80
  }                                                                                                                    // 81
  var ref = element.ref;                                                                                               // 82
  if (ref != null) {                                                                                                   // 83
    detachRef(ref, instance, element._owner);                                                                          // 84
  }                                                                                                                    // 85
};                                                                                                                     // 86
                                                                                                                       // 87
module.exports = ReactRef;                                                                                             // 88
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactOwner.js":["./reactProdInvariant","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactOwner.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var _prodInvariant = require('./reactProdInvariant');                                                                  // 14
                                                                                                                       // 15
var invariant = require('fbjs/lib/invariant');                                                                         // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * @param {?object} object                                                                                             // 19
 * @return {boolean} True if `object` is a valid owner.                                                                // 20
 * @final                                                                                                              // 21
 */                                                                                                                    // 22
function isValidOwner(object) {                                                                                        // 23
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');               // 24
}                                                                                                                      // 25
                                                                                                                       // 26
/**                                                                                                                    // 27
 * ReactOwners are capable of storing references to owned components.                                                  // 28
 *                                                                                                                     // 29
 * All components are capable of //being// referenced by owner components, but                                         // 30
 * only ReactOwner components are capable of //referencing// owned components.                                         // 31
 * The named reference is known as a "ref".                                                                            // 32
 *                                                                                                                     // 33
 * Refs are available when mounted and updated during reconciliation.                                                  // 34
 *                                                                                                                     // 35
 *   var MyComponent = React.createClass({                                                                             // 36
 *     render: function() {                                                                                            // 37
 *       return (                                                                                                      // 38
 *         <div onClick={this.handleClick}>                                                                            // 39
 *           <CustomComponent ref="custom" />                                                                          // 40
 *         </div>                                                                                                      // 41
 *       );                                                                                                            // 42
 *     },                                                                                                              // 43
 *     handleClick: function() {                                                                                       // 44
 *       this.refs.custom.handleClick();                                                                               // 45
 *     },                                                                                                              // 46
 *     componentDidMount: function() {                                                                                 // 47
 *       this.refs.custom.initialize();                                                                                // 48
 *     }                                                                                                               // 49
 *   });                                                                                                               // 50
 *                                                                                                                     // 51
 * Refs should rarely be used. When refs are used, they should only be done to                                         // 52
 * control data that is not handled by React's data flow.                                                              // 53
 *                                                                                                                     // 54
 * @class ReactOwner                                                                                                   // 55
 */                                                                                                                    // 56
var ReactOwner = {                                                                                                     // 57
  /**                                                                                                                  // 58
   * Adds a component by ref to an owner component.                                                                    // 59
   *                                                                                                                   // 60
   * @param {ReactComponent} component Component to reference.                                                         // 61
   * @param {string} ref Name by which to refer to the component.                                                      // 62
   * @param {ReactOwner} owner Component on which to record the ref.                                                   // 63
   * @final                                                                                                            // 64
   * @internal                                                                                                         // 65
   */                                                                                                                  // 66
  addComponentAsRefTo: function (component, ref, owner) {                                                              // 67
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);                                                                                   // 69
  },                                                                                                                   // 70
                                                                                                                       // 71
  /**                                                                                                                  // 72
   * Removes a component by ref from an owner component.                                                               // 73
   *                                                                                                                   // 74
   * @param {ReactComponent} component Component to dereference.                                                       // 75
   * @param {string} ref Name of the ref to remove.                                                                    // 76
   * @param {ReactOwner} owner Component on which the ref is recorded.                                                 // 77
   * @final                                                                                                            // 78
   * @internal                                                                                                         // 79
   */                                                                                                                  // 80
  removeComponentAsRefFrom: function (component, ref, owner) {                                                         // 81
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();                                                               // 83
    // Check that `component`'s owner is still alive and that `component` is still the current ref                     // 84
    // because we do not want to detach the ref if another component stole it.                                         // 85
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {                      // 86
      owner.detachRef(ref);                                                                                            // 87
    }                                                                                                                  // 88
  }                                                                                                                    // 89
                                                                                                                       // 90
};                                                                                                                     // 91
                                                                                                                       // 92
module.exports = ReactOwner;                                                                                           // 93
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactInstrumentation.js":["./ReactDebugTool",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactInstrumentation.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2016-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
// Trust the developer to only use ReactInstrumentation with a __DEV__ check                                           // 14
                                                                                                                       // 15
var debugTool = null;                                                                                                  // 16
                                                                                                                       // 17
if (process.env.NODE_ENV !== 'production') {                                                                           // 18
  var ReactDebugTool = require('./ReactDebugTool');                                                                    // 19
  debugTool = ReactDebugTool;                                                                                          // 20
}                                                                                                                      // 21
                                                                                                                       // 22
module.exports = { debugTool: debugTool };                                                                             // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDebugTool.js":["./ReactInvalidSetStateWarningHook","./ReactHostOperationHistoryHook","react/lib/ReactComponentTreeHook","fbjs/lib/ExecutionEnvironment","fbjs/lib/performanceNow","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDebugTool.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2016-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var ReactInvalidSetStateWarningHook = require('./ReactInvalidSetStateWarningHook');                                    // 14
var ReactHostOperationHistoryHook = require('./ReactHostOperationHistoryHook');                                        // 15
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                              // 16
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 17
                                                                                                                       // 18
var performanceNow = require('fbjs/lib/performanceNow');                                                               // 19
var warning = require('fbjs/lib/warning');                                                                             // 20
                                                                                                                       // 21
var hooks = [];                                                                                                        // 22
var didHookThrowForEvent = {};                                                                                         // 23
                                                                                                                       // 24
function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {                                                  // 25
  try {                                                                                                                // 26
    fn.call(context, arg1, arg2, arg3, arg4, arg5);                                                                    // 27
  } catch (e) {                                                                                                        // 28
    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;                                                                                // 30
  }                                                                                                                    // 31
}                                                                                                                      // 32
                                                                                                                       // 33
function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {                                                              // 34
  for (var i = 0; i < hooks.length; i++) {                                                                             // 35
    var hook = hooks[i];                                                                                               // 36
    var fn = hook[event];                                                                                              // 37
    if (fn) {                                                                                                          // 38
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);                                                         // 39
    }                                                                                                                  // 40
  }                                                                                                                    // 41
}                                                                                                                      // 42
                                                                                                                       // 43
var isProfiling = false;                                                                                               // 44
var flushHistory = [];                                                                                                 // 45
var lifeCycleTimerStack = [];                                                                                          // 46
var currentFlushNesting = 0;                                                                                           // 47
var currentFlushMeasurements = [];                                                                                     // 48
var currentFlushStartTime = 0;                                                                                         // 49
var currentTimerDebugID = null;                                                                                        // 50
var currentTimerStartTime = 0;                                                                                         // 51
var currentTimerNestedFlushDuration = 0;                                                                               // 52
var currentTimerType = null;                                                                                           // 53
                                                                                                                       // 54
var lifeCycleTimerHasWarned = false;                                                                                   // 55
                                                                                                                       // 56
function clearHistory() {                                                                                              // 57
  ReactComponentTreeHook.purgeUnmountedComponents();                                                                   // 58
  ReactHostOperationHistoryHook.clearHistory();                                                                        // 59
}                                                                                                                      // 60
                                                                                                                       // 61
function getTreeSnapshot(registeredIDs) {                                                                              // 62
  return registeredIDs.reduce(function (tree, id) {                                                                    // 63
    var ownerID = ReactComponentTreeHook.getOwnerID(id);                                                               // 64
    var parentID = ReactComponentTreeHook.getParentID(id);                                                             // 65
    tree[id] = {                                                                                                       // 66
      displayName: ReactComponentTreeHook.getDisplayName(id),                                                          // 67
      text: ReactComponentTreeHook.getText(id),                                                                        // 68
      updateCount: ReactComponentTreeHook.getUpdateCount(id),                                                          // 69
      childIDs: ReactComponentTreeHook.getChildIDs(id),                                                                // 70
      // Text nodes don't have owners but this is close enough.                                                        // 71
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,                                // 72
      parentID: parentID                                                                                               // 73
    };                                                                                                                 // 74
    return tree;                                                                                                       // 75
  }, {});                                                                                                              // 76
}                                                                                                                      // 77
                                                                                                                       // 78
function resetMeasurements() {                                                                                         // 79
  var previousStartTime = currentFlushStartTime;                                                                       // 80
  var previousMeasurements = currentFlushMeasurements;                                                                 // 81
  var previousOperations = ReactHostOperationHistoryHook.getHistory();                                                 // 82
                                                                                                                       // 83
  if (currentFlushNesting === 0) {                                                                                     // 84
    currentFlushStartTime = 0;                                                                                         // 85
    currentFlushMeasurements = [];                                                                                     // 86
    clearHistory();                                                                                                    // 87
    return;                                                                                                            // 88
  }                                                                                                                    // 89
                                                                                                                       // 90
  if (previousMeasurements.length || previousOperations.length) {                                                      // 91
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();                                                     // 92
    flushHistory.push({                                                                                                // 93
      duration: performanceNow() - previousStartTime,                                                                  // 94
      measurements: previousMeasurements || [],                                                                        // 95
      operations: previousOperations || [],                                                                            // 96
      treeSnapshot: getTreeSnapshot(registeredIDs)                                                                     // 97
    });                                                                                                                // 98
  }                                                                                                                    // 99
                                                                                                                       // 100
  clearHistory();                                                                                                      // 101
  currentFlushStartTime = performanceNow();                                                                            // 102
  currentFlushMeasurements = [];                                                                                       // 103
}                                                                                                                      // 104
                                                                                                                       // 105
function checkDebugID(debugID) {                                                                                       // 106
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;                           // 107
                                                                                                                       // 108
  if (allowRoot && debugID === 0) {                                                                                    // 109
    return;                                                                                                            // 110
  }                                                                                                                    // 111
  if (!debugID) {                                                                                                      // 112
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;      // 113
  }                                                                                                                    // 114
}                                                                                                                      // 115
                                                                                                                       // 116
function beginLifeCycleTimer(debugID, timerType) {                                                                     // 117
  if (currentFlushNesting === 0) {                                                                                     // 118
    return;                                                                                                            // 119
  }                                                                                                                    // 120
  if (currentTimerType && !lifeCycleTimerHasWarned) {                                                                  // 121
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;                                                                                    // 123
  }                                                                                                                    // 124
  currentTimerStartTime = performanceNow();                                                                            // 125
  currentTimerNestedFlushDuration = 0;                                                                                 // 126
  currentTimerDebugID = debugID;                                                                                       // 127
  currentTimerType = timerType;                                                                                        // 128
}                                                                                                                      // 129
                                                                                                                       // 130
function endLifeCycleTimer(debugID, timerType) {                                                                       // 131
  if (currentFlushNesting === 0) {                                                                                     // 132
    return;                                                                                                            // 133
  }                                                                                                                    // 134
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {                                                    // 135
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;                                                                                    // 137
  }                                                                                                                    // 138
  if (isProfiling) {                                                                                                   // 139
    currentFlushMeasurements.push({                                                                                    // 140
      timerType: timerType,                                                                                            // 141
      instanceID: debugID,                                                                                             // 142
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration                             // 143
    });                                                                                                                // 144
  }                                                                                                                    // 145
  currentTimerStartTime = 0;                                                                                           // 146
  currentTimerNestedFlushDuration = 0;                                                                                 // 147
  currentTimerDebugID = null;                                                                                          // 148
  currentTimerType = null;                                                                                             // 149
}                                                                                                                      // 150
                                                                                                                       // 151
function pauseCurrentLifeCycleTimer() {                                                                                // 152
  var currentTimer = {                                                                                                 // 153
    startTime: currentTimerStartTime,                                                                                  // 154
    nestedFlushStartTime: performanceNow(),                                                                            // 155
    debugID: currentTimerDebugID,                                                                                      // 156
    timerType: currentTimerType                                                                                        // 157
  };                                                                                                                   // 158
  lifeCycleTimerStack.push(currentTimer);                                                                              // 159
  currentTimerStartTime = 0;                                                                                           // 160
  currentTimerNestedFlushDuration = 0;                                                                                 // 161
  currentTimerDebugID = null;                                                                                          // 162
  currentTimerType = null;                                                                                             // 163
}                                                                                                                      // 164
                                                                                                                       // 165
function resumeCurrentLifeCycleTimer() {                                                                               // 166
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),                                                               // 167
      startTime = _lifeCycleTimerStack$.startTime,                                                                     // 168
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,                                               // 169
      debugID = _lifeCycleTimerStack$.debugID,                                                                         // 170
      timerType = _lifeCycleTimerStack$.timerType;                                                                     // 171
                                                                                                                       // 172
  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;                                                   // 173
  currentTimerStartTime = startTime;                                                                                   // 174
  currentTimerNestedFlushDuration += nestedFlushDuration;                                                              // 175
  currentTimerDebugID = debugID;                                                                                       // 176
  currentTimerType = timerType;                                                                                        // 177
}                                                                                                                      // 178
                                                                                                                       // 179
var lastMarkTimeStamp = 0;                                                                                             // 180
var canUsePerformanceMeasure =                                                                                         // 181
// $FlowFixMe https://github.com/facebook/flow/issues/2345                                                             // 182
typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
                                                                                                                       // 184
function shouldMark(debugID) {                                                                                         // 185
  if (!isProfiling || !canUsePerformanceMeasure) {                                                                     // 186
    return false;                                                                                                      // 187
  }                                                                                                                    // 188
  var element = ReactComponentTreeHook.getElement(debugID);                                                            // 189
  if (element == null || typeof element !== 'object') {                                                                // 190
    return false;                                                                                                      // 191
  }                                                                                                                    // 192
  var isHostElement = typeof element.type === 'string';                                                                // 193
  if (isHostElement) {                                                                                                 // 194
    return false;                                                                                                      // 195
  }                                                                                                                    // 196
  return true;                                                                                                         // 197
}                                                                                                                      // 198
                                                                                                                       // 199
function markBegin(debugID, markType) {                                                                                // 200
  if (!shouldMark(debugID)) {                                                                                          // 201
    return;                                                                                                            // 202
  }                                                                                                                    // 203
                                                                                                                       // 204
  var markName = debugID + '::' + markType;                                                                            // 205
  lastMarkTimeStamp = performanceNow();                                                                                // 206
  performance.mark(markName);                                                                                          // 207
}                                                                                                                      // 208
                                                                                                                       // 209
function markEnd(debugID, markType) {                                                                                  // 210
  if (!shouldMark(debugID)) {                                                                                          // 211
    return;                                                                                                            // 212
  }                                                                                                                    // 213
                                                                                                                       // 214
  var markName = debugID + '::' + markType;                                                                            // 215
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';                                       // 216
                                                                                                                       // 217
  // Chrome has an issue of dropping markers recorded too fast:                                                        // 218
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652                                                      // 219
  // To work around this, we will not report very small measurements.                                                  // 220
  // I determined the magic number by tweaking it back and forth.                                                      // 221
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.                                         // 222
  // When the bug is fixed, we can `measure()` unconditionally if we want to.                                          // 223
  var timeStamp = performanceNow();                                                                                    // 224
  if (timeStamp - lastMarkTimeStamp > 0.1) {                                                                           // 225
    var measurementName = displayName + ' [' + markType + ']';                                                         // 226
    performance.measure(measurementName, markName);                                                                    // 227
  }                                                                                                                    // 228
                                                                                                                       // 229
  performance.clearMarks(markName);                                                                                    // 230
  performance.clearMeasures(measurementName);                                                                          // 231
}                                                                                                                      // 232
                                                                                                                       // 233
var ReactDebugTool = {                                                                                                 // 234
  addHook: function (hook) {                                                                                           // 235
    hooks.push(hook);                                                                                                  // 236
  },                                                                                                                   // 237
  removeHook: function (hook) {                                                                                        // 238
    for (var i = 0; i < hooks.length; i++) {                                                                           // 239
      if (hooks[i] === hook) {                                                                                         // 240
        hooks.splice(i, 1);                                                                                            // 241
        i--;                                                                                                           // 242
      }                                                                                                                // 243
    }                                                                                                                  // 244
  },                                                                                                                   // 245
  isProfiling: function () {                                                                                           // 246
    return isProfiling;                                                                                                // 247
  },                                                                                                                   // 248
  beginProfiling: function () {                                                                                        // 249
    if (isProfiling) {                                                                                                 // 250
      return;                                                                                                          // 251
    }                                                                                                                  // 252
                                                                                                                       // 253
    isProfiling = true;                                                                                                // 254
    flushHistory.length = 0;                                                                                           // 255
    resetMeasurements();                                                                                               // 256
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);                                                             // 257
  },                                                                                                                   // 258
  endProfiling: function () {                                                                                          // 259
    if (!isProfiling) {                                                                                                // 260
      return;                                                                                                          // 261
    }                                                                                                                  // 262
                                                                                                                       // 263
    isProfiling = false;                                                                                               // 264
    resetMeasurements();                                                                                               // 265
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);                                                          // 266
  },                                                                                                                   // 267
  getFlushHistory: function () {                                                                                       // 268
    return flushHistory;                                                                                               // 269
  },                                                                                                                   // 270
  onBeginFlush: function () {                                                                                          // 271
    currentFlushNesting++;                                                                                             // 272
    resetMeasurements();                                                                                               // 273
    pauseCurrentLifeCycleTimer();                                                                                      // 274
    emitEvent('onBeginFlush');                                                                                         // 275
  },                                                                                                                   // 276
  onEndFlush: function () {                                                                                            // 277
    resetMeasurements();                                                                                               // 278
    currentFlushNesting--;                                                                                             // 279
    resumeCurrentLifeCycleTimer();                                                                                     // 280
    emitEvent('onEndFlush');                                                                                           // 281
  },                                                                                                                   // 282
  onBeginLifeCycleTimer: function (debugID, timerType) {                                                               // 283
    checkDebugID(debugID);                                                                                             // 284
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);                                                            // 285
    markBegin(debugID, timerType);                                                                                     // 286
    beginLifeCycleTimer(debugID, timerType);                                                                           // 287
  },                                                                                                                   // 288
  onEndLifeCycleTimer: function (debugID, timerType) {                                                                 // 289
    checkDebugID(debugID);                                                                                             // 290
    endLifeCycleTimer(debugID, timerType);                                                                             // 291
    markEnd(debugID, timerType);                                                                                       // 292
    emitEvent('onEndLifeCycleTimer', debugID, timerType);                                                              // 293
  },                                                                                                                   // 294
  onBeginProcessingChildContext: function () {                                                                         // 295
    emitEvent('onBeginProcessingChildContext');                                                                        // 296
  },                                                                                                                   // 297
  onEndProcessingChildContext: function () {                                                                           // 298
    emitEvent('onEndProcessingChildContext');                                                                          // 299
  },                                                                                                                   // 300
  onHostOperation: function (operation) {                                                                              // 301
    checkDebugID(operation.instanceID);                                                                                // 302
    emitEvent('onHostOperation', operation);                                                                           // 303
  },                                                                                                                   // 304
  onSetState: function () {                                                                                            // 305
    emitEvent('onSetState');                                                                                           // 306
  },                                                                                                                   // 307
  onSetChildren: function (debugID, childDebugIDs) {                                                                   // 308
    checkDebugID(debugID);                                                                                             // 309
    childDebugIDs.forEach(checkDebugID);                                                                               // 310
    emitEvent('onSetChildren', debugID, childDebugIDs);                                                                // 311
  },                                                                                                                   // 312
  onBeforeMountComponent: function (debugID, element, parentDebugID) {                                                 // 313
    checkDebugID(debugID);                                                                                             // 314
    checkDebugID(parentDebugID, true);                                                                                 // 315
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);                                              // 316
    markBegin(debugID, 'mount');                                                                                       // 317
  },                                                                                                                   // 318
  onMountComponent: function (debugID) {                                                                               // 319
    checkDebugID(debugID);                                                                                             // 320
    markEnd(debugID, 'mount');                                                                                         // 321
    emitEvent('onMountComponent', debugID);                                                                            // 322
  },                                                                                                                   // 323
  onBeforeUpdateComponent: function (debugID, element) {                                                               // 324
    checkDebugID(debugID);                                                                                             // 325
    emitEvent('onBeforeUpdateComponent', debugID, element);                                                            // 326
    markBegin(debugID, 'update');                                                                                      // 327
  },                                                                                                                   // 328
  onUpdateComponent: function (debugID) {                                                                              // 329
    checkDebugID(debugID);                                                                                             // 330
    markEnd(debugID, 'update');                                                                                        // 331
    emitEvent('onUpdateComponent', debugID);                                                                           // 332
  },                                                                                                                   // 333
  onBeforeUnmountComponent: function (debugID) {                                                                       // 334
    checkDebugID(debugID);                                                                                             // 335
    emitEvent('onBeforeUnmountComponent', debugID);                                                                    // 336
    markBegin(debugID, 'unmount');                                                                                     // 337
  },                                                                                                                   // 338
  onUnmountComponent: function (debugID) {                                                                             // 339
    checkDebugID(debugID);                                                                                             // 340
    markEnd(debugID, 'unmount');                                                                                       // 341
    emitEvent('onUnmountComponent', debugID);                                                                          // 342
  },                                                                                                                   // 343
  onTestEvent: function () {                                                                                           // 344
    emitEvent('onTestEvent');                                                                                          // 345
  }                                                                                                                    // 346
};                                                                                                                     // 347
                                                                                                                       // 348
// TODO remove these when RN/www gets updated                                                                          // 349
ReactDebugTool.addDevtool = ReactDebugTool.addHook;                                                                    // 350
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;                                                              // 351
                                                                                                                       // 352
ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);                                                               // 353
ReactDebugTool.addHook(ReactComponentTreeHook);                                                                        // 354
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';                                                // 355
if (/[?&]react_perf\b/.test(url)) {                                                                                    // 356
  ReactDebugTool.beginProfiling();                                                                                     // 357
}                                                                                                                      // 358
                                                                                                                       // 359
module.exports = ReactDebugTool;                                                                                       // 360
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactInvalidSetStateWarningHook.js":["fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactInvalidSetStateWarningHook.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2016-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var warning = require('fbjs/lib/warning');                                                                             // 14
                                                                                                                       // 15
if (process.env.NODE_ENV !== 'production') {                                                                           // 16
  var processingChildContext = false;                                                                                  // 17
                                                                                                                       // 18
  var warnInvalidSetState = function () {                                                                              // 19
    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };                                                                                                                   // 21
}                                                                                                                      // 22
                                                                                                                       // 23
var ReactInvalidSetStateWarningHook = {                                                                                // 24
  onBeginProcessingChildContext: function () {                                                                         // 25
    processingChildContext = true;                                                                                     // 26
  },                                                                                                                   // 27
  onEndProcessingChildContext: function () {                                                                           // 28
    processingChildContext = false;                                                                                    // 29
  },                                                                                                                   // 30
  onSetState: function () {                                                                                            // 31
    warnInvalidSetState();                                                                                             // 32
  }                                                                                                                    // 33
};                                                                                                                     // 34
                                                                                                                       // 35
module.exports = ReactInvalidSetStateWarningHook;                                                                      // 36
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactHostOperationHistoryHook.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactHostOperationHistoryHook.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2016-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var history = [];                                                                                                      // 14
                                                                                                                       // 15
var ReactHostOperationHistoryHook = {                                                                                  // 16
  onHostOperation: function (operation) {                                                                              // 17
    history.push(operation);                                                                                           // 18
  },                                                                                                                   // 19
  clearHistory: function () {                                                                                          // 20
    if (ReactHostOperationHistoryHook._preventClearing) {                                                              // 21
      // Should only be used for tests.                                                                                // 22
      return;                                                                                                          // 23
    }                                                                                                                  // 24
                                                                                                                       // 25
    history = [];                                                                                                      // 26
  },                                                                                                                   // 27
  getHistory: function () {                                                                                            // 28
    return history;                                                                                                    // 29
  }                                                                                                                    // 30
};                                                                                                                     // 31
                                                                                                                       // 32
module.exports = ReactHostOperationHistoryHook;                                                                        // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Transaction.js":["./reactProdInvariant","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/Transaction.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var _prodInvariant = require('./reactProdInvariant');                                                                  // 14
                                                                                                                       // 15
var invariant = require('fbjs/lib/invariant');                                                                         // 16
                                                                                                                       // 17
var OBSERVED_ERROR = {};                                                                                               // 18
                                                                                                                       // 19
/**                                                                                                                    // 20
 * `Transaction` creates a black box that is able to wrap any method such that                                         // 21
 * certain invariants are maintained before and after the method is invoked                                            // 22
 * (Even if an exception is thrown while invoking the wrapped method). Whoever                                         // 23
 * instantiates a transaction can provide enforcers of the invariants at                                               // 24
 * creation time. The `Transaction` class itself will supply one additional                                            // 25
 * automatic invariant for you - the invariant that any transaction instance                                           // 26
 * should not be run while it is already being run. You would typically create a                                       // 27
 * single instance of a `Transaction` for reuse multiple times, that potentially                                       // 28
 * is used to wrap several different methods. Wrappers are extremely simple -                                          // 29
 * they only require implementing two methods.                                                                         // 30
 *                                                                                                                     // 31
 * <pre>                                                                                                               // 32
 *                       wrappers (injected at creation time)                                                          // 33
 *                                      +        +                                                                     // 34
 *                                      |        |                                                                     // 35
 *                    +-----------------|--------|--------------+                                                      // 36
 *                    |                 v        |              |                                                      // 37
 *                    |      +---------------+   |              |                                                      // 38
 *                    |   +--|    wrapper1   |---|----+         |                                                      // 39
 *                    |   |  +---------------+   v    |         |                                                      // 40
 *                    |   |          +-------------+  |         |                                                      // 41
 *                    |   |     +----|   wrapper2  |--------+   |                                                      // 42
 *                    |   |     |    +-------------+  |     |   |                                                      // 43
 *                    |   |     |                     |     |   |                                                      // 44
 *                    |   v     v                     v     v   | wrapper                                              // 45
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants                                           // 46
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained                                           // 47
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->                                             // 48
 *                    | |   | |   |   |         |   |   | |   | |                                                      // 49
 *                    | |   | |   |   |         |   |   | |   | |                                                      // 50
 *                    | |   | |   |   |         |   |   | |   | |                                                      // 51
 *                    | +---+ +---+   +---------+   +---+ +---+ |                                                      // 52
 *                    |  initialize                    close    |                                                      // 53
 *                    +-----------------------------------------+                                                      // 54
 * </pre>                                                                                                              // 55
 *                                                                                                                     // 56
 * Use cases:                                                                                                          // 57
 * - Preserving the input selection ranges before/after reconciliation.                                                // 58
 *   Restoring selection even in the event of an unexpected error.                                                     // 59
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,                                          // 60
 *   while guaranteeing that afterwards, the event system is reactivated.                                              // 61
 * - Flushing a queue of collected DOM mutations to the main UI thread after a                                         // 62
 *   reconciliation takes place in a worker thread.                                                                    // 63
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new                                         // 64
 *   content.                                                                                                          // 65
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue                                         // 66
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).                                                      // 67
 * - (Future use case): Layout calculations before and after DOM updates.                                              // 68
 *                                                                                                                     // 69
 * Transactional plugin API:                                                                                           // 70
 * - A module that has an `initialize` method that returns any precomputation.                                         // 71
 * - and a `close` method that accepts the precomputation. `close` is invoked                                          // 72
 *   when the wrapped process is completed, or has failed.                                                             // 73
 *                                                                                                                     // 74
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules                                             // 75
 * that implement `initialize` and `close`.                                                                            // 76
 * @return {Transaction} Single transaction for reuse in thread.                                                       // 77
 *                                                                                                                     // 78
 * @class Transaction                                                                                                  // 79
 */                                                                                                                    // 80
var TransactionImpl = {                                                                                                // 81
  /**                                                                                                                  // 82
   * Sets up this instance so that it is prepared for collecting metrics. Does                                         // 83
   * so such that this setup method may be used on an instance that is already                                         // 84
   * initialized, in a way that does not consume additional memory upon reuse.                                         // 85
   * That can be useful if you decide to make your subclass of this mixin a                                            // 86
   * "PooledClass".                                                                                                    // 87
   */                                                                                                                  // 88
  reinitializeTransaction: function () {                                                                               // 89
    this.transactionWrappers = this.getTransactionWrappers();                                                          // 90
    if (this.wrapperInitData) {                                                                                        // 91
      this.wrapperInitData.length = 0;                                                                                 // 92
    } else {                                                                                                           // 93
      this.wrapperInitData = [];                                                                                       // 94
    }                                                                                                                  // 95
    this._isInTransaction = false;                                                                                     // 96
  },                                                                                                                   // 97
                                                                                                                       // 98
  _isInTransaction: false,                                                                                             // 99
                                                                                                                       // 100
  /**                                                                                                                  // 101
   * @abstract                                                                                                         // 102
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.                                                // 103
   */                                                                                                                  // 104
  getTransactionWrappers: null,                                                                                        // 105
                                                                                                                       // 106
  isInTransaction: function () {                                                                                       // 107
    return !!this._isInTransaction;                                                                                    // 108
  },                                                                                                                   // 109
                                                                                                                       // 110
  /**                                                                                                                  // 111
   * Executes the function within a safety window. Use this for the top level                                          // 112
   * methods that result in large amounts of computation/mutations that would                                          // 113
   * need to be safety checked. The optional arguments helps prevent the need                                          // 114
   * to bind in many cases.                                                                                            // 115
   *                                                                                                                   // 116
   * @param {function} method Member of scope to call.                                                                 // 117
   * @param {Object} scope Scope to invoke from.                                                                       // 118
   * @param {Object?=} a Argument to pass to the method.                                                               // 119
   * @param {Object?=} b Argument to pass to the method.                                                               // 120
   * @param {Object?=} c Argument to pass to the method.                                                               // 121
   * @param {Object?=} d Argument to pass to the method.                                                               // 122
   * @param {Object?=} e Argument to pass to the method.                                                               // 123
   * @param {Object?=} f Argument to pass to the method.                                                               // 124
   *                                                                                                                   // 125
   * @return {*} Return value from `method`.                                                                           // 126
   */                                                                                                                  // 127
  perform: function (method, scope, a, b, c, d, e, f) {                                                                // 128
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;                                                                                                   // 130
    var ret;                                                                                                           // 131
    try {                                                                                                              // 132
      this._isInTransaction = true;                                                                                    // 133
      // Catching errors makes debugging more difficult, so we start with                                              // 134
      // errorThrown set to true before setting it to false after calling                                              // 135
      // close -- if it's still set to true in the finally block, it means                                             // 136
      // one of these calls threw.                                                                                     // 137
      errorThrown = true;                                                                                              // 138
      this.initializeAll(0);                                                                                           // 139
      ret = method.call(scope, a, b, c, d, e, f);                                                                      // 140
      errorThrown = false;                                                                                             // 141
    } finally {                                                                                                        // 142
      try {                                                                                                            // 143
        if (errorThrown) {                                                                                             // 144
          // If `method` throws, prefer to show that stack trace over any thrown                                       // 145
          // by invoking `closeAll`.                                                                                   // 146
          try {                                                                                                        // 147
            this.closeAll(0);                                                                                          // 148
          } catch (err) {}                                                                                             // 149
        } else {                                                                                                       // 150
          // Since `method` didn't throw, we don't want to silence the exception                                       // 151
          // here.                                                                                                     // 152
          this.closeAll(0);                                                                                            // 153
        }                                                                                                              // 154
      } finally {                                                                                                      // 155
        this._isInTransaction = false;                                                                                 // 156
      }                                                                                                                // 157
    }                                                                                                                  // 158
    return ret;                                                                                                        // 159
  },                                                                                                                   // 160
                                                                                                                       // 161
  initializeAll: function (startIndex) {                                                                               // 162
    var transactionWrappers = this.transactionWrappers;                                                                // 163
    for (var i = startIndex; i < transactionWrappers.length; i++) {                                                    // 164
      var wrapper = transactionWrappers[i];                                                                            // 165
      try {                                                                                                            // 166
        // Catching errors makes debugging more difficult, so we start with the                                        // 167
        // OBSERVED_ERROR state before overwriting it with the real return value                                       // 168
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally                                         // 169
        // block, it means wrapper.initialize threw.                                                                   // 170
        this.wrapperInitData[i] = OBSERVED_ERROR;                                                                      // 171
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;                           // 172
      } finally {                                                                                                      // 173
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {                                                              // 174
          // The initializer for wrapper i threw an error; initialize the                                              // 175
          // remaining wrappers but silence any exceptions from them to ensure                                         // 176
          // that the first error is the one to bubble up.                                                             // 177
          try {                                                                                                        // 178
            this.initializeAll(i + 1);                                                                                 // 179
          } catch (err) {}                                                                                             // 180
        }                                                                                                              // 181
      }                                                                                                                // 182
    }                                                                                                                  // 183
  },                                                                                                                   // 184
                                                                                                                       // 185
  /**                                                                                                                  // 186
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into                                       // 187
   * them the respective return values of `this.transactionWrappers.init[i]`                                           // 188
   * (`close`rs that correspond to initializers that failed will not be                                                // 189
   * invoked).                                                                                                         // 190
   */                                                                                                                  // 191
  closeAll: function (startIndex) {                                                                                    // 192
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;                                                                // 194
    for (var i = startIndex; i < transactionWrappers.length; i++) {                                                    // 195
      var wrapper = transactionWrappers[i];                                                                            // 196
      var initData = this.wrapperInitData[i];                                                                          // 197
      var errorThrown;                                                                                                 // 198
      try {                                                                                                            // 199
        // Catching errors makes debugging more difficult, so we start with                                            // 200
        // errorThrown set to true before setting it to false after calling                                            // 201
        // close -- if it's still set to true in the finally block, it means                                           // 202
        // wrapper.close threw.                                                                                        // 203
        errorThrown = true;                                                                                            // 204
        if (initData !== OBSERVED_ERROR && wrapper.close) {                                                            // 205
          wrapper.close.call(this, initData);                                                                          // 206
        }                                                                                                              // 207
        errorThrown = false;                                                                                           // 208
      } finally {                                                                                                      // 209
        if (errorThrown) {                                                                                             // 210
          // The closer for wrapper i threw an error; close the remaining                                              // 211
          // wrappers but silence any exceptions from them to ensure that the                                          // 212
          // first error is the one to bubble up.                                                                      // 213
          try {                                                                                                        // 214
            this.closeAll(i + 1);                                                                                      // 215
          } catch (e) {}                                                                                               // 216
        }                                                                                                              // 217
      }                                                                                                                // 218
    }                                                                                                                  // 219
    this.wrapperInitData.length = 0;                                                                                   // 220
  }                                                                                                                    // 221
};                                                                                                                     // 222
                                                                                                                       // 223
module.exports = TransactionImpl;                                                                                      // 224
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"getEventTarget.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/getEventTarget.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * Gets the target node from a native browser event by accounting for                                                  // 14
 * inconsistencies in browser DOM APIs.                                                                                // 15
 *                                                                                                                     // 16
 * @param {object} nativeEvent Native browser event.                                                                   // 17
 * @return {DOMEventTarget} Target node.                                                                               // 18
 */                                                                                                                    // 19
                                                                                                                       // 20
function getEventTarget(nativeEvent) {                                                                                 // 21
  var target = nativeEvent.target || nativeEvent.srcElement || window;                                                 // 22
                                                                                                                       // 23
  // Normalize SVG <use> element events #4963                                                                          // 24
  if (target.correspondingUseElement) {                                                                                // 25
    target = target.correspondingUseElement;                                                                           // 26
  }                                                                                                                    // 27
                                                                                                                       // 28
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).                                                       // 29
  // @see http://www.quirksmode.org/js/events_properties.html                                                          // 30
  return target.nodeType === 3 ? target.parentNode : target;                                                           // 31
}                                                                                                                      // 32
                                                                                                                       // 33
module.exports = getEventTarget;                                                                                       // 34
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"isEventSupported.js":["fbjs/lib/ExecutionEnvironment",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/isEventSupported.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 13
                                                                                                                       // 14
var useHasFeature;                                                                                                     // 15
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 16
  useHasFeature = document.implementation && document.implementation.hasFeature &&                                     // 17
  // always returns true in newer browsers as per the standard.                                                        // 18
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature                                                 // 19
  document.implementation.hasFeature('', '') !== true;                                                                 // 20
}                                                                                                                      // 21
                                                                                                                       // 22
/**                                                                                                                    // 23
 * Checks if an event is supported in the current execution environment.                                               // 24
 *                                                                                                                     // 25
 * NOTE: This will not work correctly for non-generic events such as `change`,                                         // 26
 * `reset`, `load`, `error`, and `select`.                                                                             // 27
 *                                                                                                                     // 28
 * Borrows from Modernizr.                                                                                             // 29
 *                                                                                                                     // 30
 * @param {string} eventNameSuffix Event name, e.g. "click".                                                           // 31
 * @param {?boolean} capture Check if the capture phase is supported.                                                  // 32
 * @return {boolean} True if the event is supported.                                                                   // 33
 * @internal                                                                                                           // 34
 * @license Modernizr 3.0.0pre (Custom Build) | MIT                                                                    // 35
 */                                                                                                                    // 36
function isEventSupported(eventNameSuffix, capture) {                                                                  // 37
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {                               // 38
    return false;                                                                                                      // 39
  }                                                                                                                    // 40
                                                                                                                       // 41
  var eventName = 'on' + eventNameSuffix;                                                                              // 42
  var isSupported = eventName in document;                                                                             // 43
                                                                                                                       // 44
  if (!isSupported) {                                                                                                  // 45
    var element = document.createElement('div');                                                                       // 46
    element.setAttribute(eventName, 'return;');                                                                        // 47
    isSupported = typeof element[eventName] === 'function';                                                            // 48
  }                                                                                                                    // 49
                                                                                                                       // 50
  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {                                                  // 51
    // This is the only way to test support for the `wheel` event in IE9+.                                             // 52
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');                                           // 53
  }                                                                                                                    // 54
                                                                                                                       // 55
  return isSupported;                                                                                                  // 56
}                                                                                                                      // 57
                                                                                                                       // 58
module.exports = isEventSupported;                                                                                     // 59
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"isTextInputElement.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/isTextInputElement.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
/**                                                                                                                    // 14
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary     // 15
 */                                                                                                                    // 16
                                                                                                                       // 17
var supportedInputTypes = {                                                                                            // 18
  'color': true,                                                                                                       // 19
  'date': true,                                                                                                        // 20
  'datetime': true,                                                                                                    // 21
  'datetime-local': true,                                                                                              // 22
  'email': true,                                                                                                       // 23
  'month': true,                                                                                                       // 24
  'number': true,                                                                                                      // 25
  'password': true,                                                                                                    // 26
  'range': true,                                                                                                       // 27
  'search': true,                                                                                                      // 28
  'tel': true,                                                                                                         // 29
  'text': true,                                                                                                        // 30
  'time': true,                                                                                                        // 31
  'url': true,                                                                                                         // 32
  'week': true                                                                                                         // 33
};                                                                                                                     // 34
                                                                                                                       // 35
function isTextInputElement(elem) {                                                                                    // 36
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();                                                 // 37
                                                                                                                       // 38
  if (nodeName === 'input') {                                                                                          // 39
    return !!supportedInputTypes[elem.type];                                                                           // 40
  }                                                                                                                    // 41
                                                                                                                       // 42
  if (nodeName === 'textarea') {                                                                                       // 43
    return true;                                                                                                       // 44
  }                                                                                                                    // 45
                                                                                                                       // 46
  return false;                                                                                                        // 47
}                                                                                                                      // 48
                                                                                                                       // 49
module.exports = isTextInputElement;                                                                                   // 50
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"DefaultEventPluginOrder.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/DefaultEventPluginOrder.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * Module that is injectable into `EventPluginHub`, that specifies a                                                   // 14
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about                                          // 15
 * plugins, without having to package every one of them. This is better than                                           // 16
 * having plugins be ordered in the same order that they are injected because                                          // 17
 * that ordering would be influenced by the packaging order.                                                           // 18
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that                                                // 19
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.                                         // 20
 */                                                                                                                    // 21
                                                                                                                       // 22
var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
                                                                                                                       // 24
module.exports = DefaultEventPluginOrder;                                                                              // 25
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"EnterLeaveEventPlugin.js":["./EventPropagators","./ReactDOMComponentTree","./SyntheticMouseEvent",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/EnterLeaveEventPlugin.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var EventPropagators = require('./EventPropagators');                                                                  // 13
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 14
var SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 15
                                                                                                                       // 16
var eventTypes = {                                                                                                     // 17
  mouseEnter: {                                                                                                        // 18
    registrationName: 'onMouseEnter',                                                                                  // 19
    dependencies: ['topMouseOut', 'topMouseOver']                                                                      // 20
  },                                                                                                                   // 21
  mouseLeave: {                                                                                                        // 22
    registrationName: 'onMouseLeave',                                                                                  // 23
    dependencies: ['topMouseOut', 'topMouseOver']                                                                      // 24
  }                                                                                                                    // 25
};                                                                                                                     // 26
                                                                                                                       // 27
var EnterLeaveEventPlugin = {                                                                                          // 28
                                                                                                                       // 29
  eventTypes: eventTypes,                                                                                              // 30
                                                                                                                       // 31
  /**                                                                                                                  // 32
   * For almost every interaction we care about, there will be both a top-level                                        // 33
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that                                         // 34
   * we do not extract duplicate events. However, moving the mouse into the                                            // 35
   * browser from outside will not fire a `mouseout` event. In this case, we use                                       // 36
   * the `mouseover` top-level event.                                                                                  // 37
   */                                                                                                                  // 38
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 39
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {                   // 40
      return null;                                                                                                     // 41
    }                                                                                                                  // 42
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {                                           // 43
      // Must not be a mouse in or mouse out - ignoring.                                                               // 44
      return null;                                                                                                     // 45
    }                                                                                                                  // 46
                                                                                                                       // 47
    var win;                                                                                                           // 48
    if (nativeEventTarget.window === nativeEventTarget) {                                                              // 49
      // `nativeEventTarget` is probably a window object.                                                              // 50
      win = nativeEventTarget;                                                                                         // 51
    } else {                                                                                                           // 52
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.                                           // 53
      var doc = nativeEventTarget.ownerDocument;                                                                       // 54
      if (doc) {                                                                                                       // 55
        win = doc.defaultView || doc.parentWindow;                                                                     // 56
      } else {                                                                                                         // 57
        win = window;                                                                                                  // 58
      }                                                                                                                // 59
    }                                                                                                                  // 60
                                                                                                                       // 61
    var from;                                                                                                          // 62
    var to;                                                                                                            // 63
    if (topLevelType === 'topMouseOut') {                                                                              // 64
      from = targetInst;                                                                                               // 65
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;                                                // 66
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;                                 // 67
    } else {                                                                                                           // 68
      // Moving to a node from outside the window.                                                                     // 69
      from = null;                                                                                                     // 70
      to = targetInst;                                                                                                 // 71
    }                                                                                                                  // 72
                                                                                                                       // 73
    if (from === to) {                                                                                                 // 74
      // Nothing pertains to our managed components.                                                                   // 75
      return null;                                                                                                     // 76
    }                                                                                                                  // 77
                                                                                                                       // 78
    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);                               // 79
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);                                     // 80
                                                                                                                       // 81
    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);            // 82
    leave.type = 'mouseleave';                                                                                         // 83
    leave.target = fromNode;                                                                                           // 84
    leave.relatedTarget = toNode;                                                                                      // 85
                                                                                                                       // 86
    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);              // 87
    enter.type = 'mouseenter';                                                                                         // 88
    enter.target = toNode;                                                                                             // 89
    enter.relatedTarget = fromNode;                                                                                    // 90
                                                                                                                       // 91
    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);                                           // 92
                                                                                                                       // 93
    return [leave, enter];                                                                                             // 94
  }                                                                                                                    // 95
                                                                                                                       // 96
};                                                                                                                     // 97
                                                                                                                       // 98
module.exports = EnterLeaveEventPlugin;                                                                                // 99
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"SyntheticMouseEvent.js":["./SyntheticUIEvent","./ViewportMetrics","./getEventModifierState",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SyntheticMouseEvent.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 13
var ViewportMetrics = require('./ViewportMetrics');                                                                    // 14
                                                                                                                       // 15
var getEventModifierState = require('./getEventModifierState');                                                        // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * @interface MouseEvent                                                                                               // 19
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 20
 */                                                                                                                    // 21
var MouseEventInterface = {                                                                                            // 22
  screenX: null,                                                                                                       // 23
  screenY: null,                                                                                                       // 24
  clientX: null,                                                                                                       // 25
  clientY: null,                                                                                                       // 26
  ctrlKey: null,                                                                                                       // 27
  shiftKey: null,                                                                                                      // 28
  altKey: null,                                                                                                        // 29
  metaKey: null,                                                                                                       // 30
  getModifierState: getEventModifierState,                                                                             // 31
  button: function (event) {                                                                                           // 32
    // Webkit, Firefox, IE9+                                                                                           // 33
    // which:  1 2 3                                                                                                   // 34
    // button: 0 1 2 (standard)                                                                                        // 35
    var button = event.button;                                                                                         // 36
    if ('which' in event) {                                                                                            // 37
      return button;                                                                                                   // 38
    }                                                                                                                  // 39
    // IE<9                                                                                                            // 40
    // which:  undefined                                                                                               // 41
    // button: 0 0 0                                                                                                   // 42
    // button: 1 4 2 (onmouseup)                                                                                       // 43
    return button === 2 ? 2 : button === 4 ? 1 : 0;                                                                    // 44
  },                                                                                                                   // 45
  buttons: null,                                                                                                       // 46
  relatedTarget: function (event) {                                                                                    // 47
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);      // 48
  },                                                                                                                   // 49
  // "Proprietary" Interface.                                                                                          // 50
  pageX: function (event) {                                                                                            // 51
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;                         // 52
  },                                                                                                                   // 53
  pageY: function (event) {                                                                                            // 54
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;                          // 55
  }                                                                                                                    // 56
};                                                                                                                     // 57
                                                                                                                       // 58
/**                                                                                                                    // 59
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 60
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 61
 * @param {object} nativeEvent Native browser event.                                                                   // 62
 * @extends {SyntheticUIEvent}                                                                                         // 63
 */                                                                                                                    // 64
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 65
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                  // 66
}                                                                                                                      // 67
                                                                                                                       // 68
SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);                                               // 69
                                                                                                                       // 70
module.exports = SyntheticMouseEvent;                                                                                  // 71
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"SyntheticUIEvent.js":["./SyntheticEvent","./getEventTarget",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SyntheticUIEvent.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var SyntheticEvent = require('./SyntheticEvent');                                                                      // 13
                                                                                                                       // 14
var getEventTarget = require('./getEventTarget');                                                                      // 15
                                                                                                                       // 16
/**                                                                                                                    // 17
 * @interface UIEvent                                                                                                  // 18
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 19
 */                                                                                                                    // 20
var UIEventInterface = {                                                                                               // 21
  view: function (event) {                                                                                             // 22
    if (event.view) {                                                                                                  // 23
      return event.view;                                                                                               // 24
    }                                                                                                                  // 25
                                                                                                                       // 26
    var target = getEventTarget(event);                                                                                // 27
    if (target.window === target) {                                                                                    // 28
      // target is a window object                                                                                     // 29
      return target;                                                                                                   // 30
    }                                                                                                                  // 31
                                                                                                                       // 32
    var doc = target.ownerDocument;                                                                                    // 33
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.                                             // 34
    if (doc) {                                                                                                         // 35
      return doc.defaultView || doc.parentWindow;                                                                      // 36
    } else {                                                                                                           // 37
      return window;                                                                                                   // 38
    }                                                                                                                  // 39
  },                                                                                                                   // 40
  detail: function (event) {                                                                                           // 41
    return event.detail || 0;                                                                                          // 42
  }                                                                                                                    // 43
};                                                                                                                     // 44
                                                                                                                       // 45
/**                                                                                                                    // 46
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 47
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 48
 * @param {object} nativeEvent Native browser event.                                                                   // 49
 * @extends {SyntheticEvent}                                                                                           // 50
 */                                                                                                                    // 51
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                            // 52
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 53
}                                                                                                                      // 54
                                                                                                                       // 55
SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);                                                       // 56
                                                                                                                       // 57
module.exports = SyntheticUIEvent;                                                                                     // 58
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ViewportMetrics.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ViewportMetrics.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ViewportMetrics = {                                                                                                // 13
                                                                                                                       // 14
  currentScrollLeft: 0,                                                                                                // 15
                                                                                                                       // 16
  currentScrollTop: 0,                                                                                                 // 17
                                                                                                                       // 18
  refreshScrollValues: function (scrollPosition) {                                                                     // 19
    ViewportMetrics.currentScrollLeft = scrollPosition.x;                                                              // 20
    ViewportMetrics.currentScrollTop = scrollPosition.y;                                                               // 21
  }                                                                                                                    // 22
                                                                                                                       // 23
};                                                                                                                     // 24
                                                                                                                       // 25
module.exports = ViewportMetrics;                                                                                      // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getEventModifierState.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/getEventModifierState.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * Translation from modifier key to the associated property in the event.                                              // 14
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers                                                        // 15
 */                                                                                                                    // 16
                                                                                                                       // 17
var modifierKeyToProp = {                                                                                              // 18
  'Alt': 'altKey',                                                                                                     // 19
  'Control': 'ctrlKey',                                                                                                // 20
  'Meta': 'metaKey',                                                                                                   // 21
  'Shift': 'shiftKey'                                                                                                  // 22
};                                                                                                                     // 23
                                                                                                                       // 24
// IE8 does not implement getModifierState so we simply map it to the only                                             // 25
// modifier keys exposed by the event itself, does not support Lock-keys.                                              // 26
// Currently, all major browsers except Chrome seems to support Lock-keys.                                             // 27
function modifierStateGetter(keyArg) {                                                                                 // 28
  var syntheticEvent = this;                                                                                           // 29
  var nativeEvent = syntheticEvent.nativeEvent;                                                                        // 30
  if (nativeEvent.getModifierState) {                                                                                  // 31
    return nativeEvent.getModifierState(keyArg);                                                                       // 32
  }                                                                                                                    // 33
  var keyProp = modifierKeyToProp[keyArg];                                                                             // 34
  return keyProp ? !!nativeEvent[keyProp] : false;                                                                     // 35
}                                                                                                                      // 36
                                                                                                                       // 37
function getEventModifierState(nativeEvent) {                                                                          // 38
  return modifierStateGetter;                                                                                          // 39
}                                                                                                                      // 40
                                                                                                                       // 41
module.exports = getEventModifierState;                                                                                // 42
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"HTMLDOMPropertyConfig.js":["./DOMProperty",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/HTMLDOMPropertyConfig.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var DOMProperty = require('./DOMProperty');                                                                            // 13
                                                                                                                       // 14
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;                                                       // 15
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;                                                       // 16
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;                                                       // 17
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;                                     // 18
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;                                 // 19
                                                                                                                       // 20
var HTMLDOMPropertyConfig = {                                                                                          // 21
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {                                                                                                        // 23
    /**                                                                                                                // 24
     * Standard Properties                                                                                             // 25
     */                                                                                                                // 26
    accept: 0,                                                                                                         // 27
    acceptCharset: 0,                                                                                                  // 28
    accessKey: 0,                                                                                                      // 29
    action: 0,                                                                                                         // 30
    allowFullScreen: HAS_BOOLEAN_VALUE,                                                                                // 31
    allowTransparency: 0,                                                                                              // 32
    alt: 0,                                                                                                            // 33
    // specifies target context for links with `preload` type                                                          // 34
    as: 0,                                                                                                             // 35
    async: HAS_BOOLEAN_VALUE,                                                                                          // 36
    autoComplete: 0,                                                                                                   // 37
    // autoFocus is polyfilled/normalized by AutoFocusUtils                                                            // 38
    // autoFocus: HAS_BOOLEAN_VALUE,                                                                                   // 39
    autoPlay: HAS_BOOLEAN_VALUE,                                                                                       // 40
    capture: HAS_BOOLEAN_VALUE,                                                                                        // 41
    cellPadding: 0,                                                                                                    // 42
    cellSpacing: 0,                                                                                                    // 43
    charSet: 0,                                                                                                        // 44
    challenge: 0,                                                                                                      // 45
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                    // 46
    cite: 0,                                                                                                           // 47
    classID: 0,                                                                                                        // 48
    className: 0,                                                                                                      // 49
    cols: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 50
    colSpan: 0,                                                                                                        // 51
    content: 0,                                                                                                        // 52
    contentEditable: 0,                                                                                                // 53
    contextMenu: 0,                                                                                                    // 54
    controls: HAS_BOOLEAN_VALUE,                                                                                       // 55
    coords: 0,                                                                                                         // 56
    crossOrigin: 0,                                                                                                    // 57
    data: 0, // For `<object />` acts as `src`.                                                                        // 58
    dateTime: 0,                                                                                                       // 59
    'default': HAS_BOOLEAN_VALUE,                                                                                      // 60
    defer: HAS_BOOLEAN_VALUE,                                                                                          // 61
    dir: 0,                                                                                                            // 62
    disabled: HAS_BOOLEAN_VALUE,                                                                                       // 63
    download: HAS_OVERLOADED_BOOLEAN_VALUE,                                                                            // 64
    draggable: 0,                                                                                                      // 65
    encType: 0,                                                                                                        // 66
    form: 0,                                                                                                           // 67
    formAction: 0,                                                                                                     // 68
    formEncType: 0,                                                                                                    // 69
    formMethod: 0,                                                                                                     // 70
    formNoValidate: HAS_BOOLEAN_VALUE,                                                                                 // 71
    formTarget: 0,                                                                                                     // 72
    frameBorder: 0,                                                                                                    // 73
    headers: 0,                                                                                                        // 74
    height: 0,                                                                                                         // 75
    hidden: HAS_BOOLEAN_VALUE,                                                                                         // 76
    high: 0,                                                                                                           // 77
    href: 0,                                                                                                           // 78
    hrefLang: 0,                                                                                                       // 79
    htmlFor: 0,                                                                                                        // 80
    httpEquiv: 0,                                                                                                      // 81
    icon: 0,                                                                                                           // 82
    id: 0,                                                                                                             // 83
    inputMode: 0,                                                                                                      // 84
    integrity: 0,                                                                                                      // 85
    is: 0,                                                                                                             // 86
    keyParams: 0,                                                                                                      // 87
    keyType: 0,                                                                                                        // 88
    kind: 0,                                                                                                           // 89
    label: 0,                                                                                                          // 90
    lang: 0,                                                                                                           // 91
    list: 0,                                                                                                           // 92
    loop: HAS_BOOLEAN_VALUE,                                                                                           // 93
    low: 0,                                                                                                            // 94
    manifest: 0,                                                                                                       // 95
    marginHeight: 0,                                                                                                   // 96
    marginWidth: 0,                                                                                                    // 97
    max: 0,                                                                                                            // 98
    maxLength: 0,                                                                                                      // 99
    media: 0,                                                                                                          // 100
    mediaGroup: 0,                                                                                                     // 101
    method: 0,                                                                                                         // 102
    min: 0,                                                                                                            // 103
    minLength: 0,                                                                                                      // 104
    // Caution; `option.selected` is not updated if `select.multiple` is                                               // 105
    // disabled with `removeAttribute`.                                                                                // 106
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 107
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                      // 108
    name: 0,                                                                                                           // 109
    nonce: 0,                                                                                                          // 110
    noValidate: HAS_BOOLEAN_VALUE,                                                                                     // 111
    open: HAS_BOOLEAN_VALUE,                                                                                           // 112
    optimum: 0,                                                                                                        // 113
    pattern: 0,                                                                                                        // 114
    placeholder: 0,                                                                                                    // 115
    playsInline: HAS_BOOLEAN_VALUE,                                                                                    // 116
    poster: 0,                                                                                                         // 117
    preload: 0,                                                                                                        // 118
    profile: 0,                                                                                                        // 119
    radioGroup: 0,                                                                                                     // 120
    readOnly: HAS_BOOLEAN_VALUE,                                                                                       // 121
    referrerPolicy: 0,                                                                                                 // 122
    rel: 0,                                                                                                            // 123
    required: HAS_BOOLEAN_VALUE,                                                                                       // 124
    reversed: HAS_BOOLEAN_VALUE,                                                                                       // 125
    role: 0,                                                                                                           // 126
    rows: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 127
    rowSpan: HAS_NUMERIC_VALUE,                                                                                        // 128
    sandbox: 0,                                                                                                        // 129
    scope: 0,                                                                                                          // 130
    scoped: HAS_BOOLEAN_VALUE,                                                                                         // 131
    scrolling: 0,                                                                                                      // 132
    seamless: HAS_BOOLEAN_VALUE,                                                                                       // 133
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 134
    shape: 0,                                                                                                          // 135
    size: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 136
    sizes: 0,                                                                                                          // 137
    span: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 138
    spellCheck: 0,                                                                                                     // 139
    src: 0,                                                                                                            // 140
    srcDoc: 0,                                                                                                         // 141
    srcLang: 0,                                                                                                        // 142
    srcSet: 0,                                                                                                         // 143
    start: HAS_NUMERIC_VALUE,                                                                                          // 144
    step: 0,                                                                                                           // 145
    style: 0,                                                                                                          // 146
    summary: 0,                                                                                                        // 147
    tabIndex: 0,                                                                                                       // 148
    target: 0,                                                                                                         // 149
    title: 0,                                                                                                          // 150
    // Setting .type throws on non-<input> tags                                                                        // 151
    type: 0,                                                                                                           // 152
    useMap: 0,                                                                                                         // 153
    value: 0,                                                                                                          // 154
    width: 0,                                                                                                          // 155
    wmode: 0,                                                                                                          // 156
    wrap: 0,                                                                                                           // 157
                                                                                                                       // 158
    /**                                                                                                                // 159
     * RDFa Properties                                                                                                 // 160
     */                                                                                                                // 161
    about: 0,                                                                                                          // 162
    datatype: 0,                                                                                                       // 163
    inlist: 0,                                                                                                         // 164
    prefix: 0,                                                                                                         // 165
    // property is also supported for OpenGraph in meta tags.                                                          // 166
    property: 0,                                                                                                       // 167
    resource: 0,                                                                                                       // 168
    'typeof': 0,                                                                                                       // 169
    vocab: 0,                                                                                                          // 170
                                                                                                                       // 171
    /**                                                                                                                // 172
     * Non-standard Properties                                                                                         // 173
     */                                                                                                                // 174
    // autoCapitalize and autoCorrect are supported in Mobile Safari for                                               // 175
    // keyboard hints.                                                                                                 // 176
    autoCapitalize: 0,                                                                                                 // 177
    autoCorrect: 0,                                                                                                    // 178
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads                                  // 179
    autoSave: 0,                                                                                                       // 180
    // color is for Safari mask-icon link                                                                              // 181
    color: 0,                                                                                                          // 182
    // itemProp, itemScope, itemType are for                                                                           // 183
    // Microdata support. See http://schema.org/docs/gs.html                                                           // 184
    itemProp: 0,                                                                                                       // 185
    itemScope: HAS_BOOLEAN_VALUE,                                                                                      // 186
    itemType: 0,                                                                                                       // 187
    // itemID and itemRef are for Microdata support as well but                                                        // 188
    // only specified in the WHATWG spec document. See                                                                 // 189
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api                                         // 190
    itemID: 0,                                                                                                         // 191
    itemRef: 0,                                                                                                        // 192
    // results show looking glass icon and recent searches on input                                                    // 193
    // search fields in WebKit/Blink                                                                                   // 194
    results: 0,                                                                                                        // 195
    // IE-only attribute that specifies security restrictions on an iframe                                             // 196
    // as an alternative to the sandbox attribute on IE<10                                                             // 197
    security: 0,                                                                                                       // 198
    // IE-only attribute that controls focus behavior                                                                  // 199
    unselectable: 0                                                                                                    // 200
  },                                                                                                                   // 201
  DOMAttributeNames: {                                                                                                 // 202
    acceptCharset: 'accept-charset',                                                                                   // 203
    className: 'class',                                                                                                // 204
    htmlFor: 'for',                                                                                                    // 205
    httpEquiv: 'http-equiv'                                                                                            // 206
  },                                                                                                                   // 207
  DOMPropertyNames: {}                                                                                                 // 208
};                                                                                                                     // 209
                                                                                                                       // 210
module.exports = HTMLDOMPropertyConfig;                                                                                // 211
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactComponentBrowserEnvironment.js":["./DOMChildrenOperations","./ReactDOMIDOperations",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactComponentBrowserEnvironment.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var DOMChildrenOperations = require('./DOMChildrenOperations');                                                        // 13
var ReactDOMIDOperations = require('./ReactDOMIDOperations');                                                          // 14
                                                                                                                       // 15
/**                                                                                                                    // 16
 * Abstracts away all functionality of the reconciler that requires knowledge of                                       // 17
 * the browser context. TODO: These callers should be refactored to avoid the                                          // 18
 * need for this injection.                                                                                            // 19
 */                                                                                                                    // 20
var ReactComponentBrowserEnvironment = {                                                                               // 21
                                                                                                                       // 22
  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,                                      // 23
                                                                                                                       // 24
  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup                                        // 25
                                                                                                                       // 26
};                                                                                                                     // 27
                                                                                                                       // 28
module.exports = ReactComponentBrowserEnvironment;                                                                     // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"DOMChildrenOperations.js":["./DOMLazyTree","./Danger","./ReactDOMComponentTree","./ReactInstrumentation","./createMicrosoftUnsafeLocalFunction","./setInnerHTML","./setTextContent",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/DOMChildrenOperations.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var DOMLazyTree = require('./DOMLazyTree');                                                                            // 13
var Danger = require('./Danger');                                                                                      // 14
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 15
var ReactInstrumentation = require('./ReactInstrumentation');                                                          // 16
                                                                                                                       // 17
var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');                              // 18
var setInnerHTML = require('./setInnerHTML');                                                                          // 19
var setTextContent = require('./setTextContent');                                                                      // 20
                                                                                                                       // 21
function getNodeAfter(parentNode, node) {                                                                              // 22
  // Special case for text components, which return [open, close] comments                                             // 23
  // from getHostNode.                                                                                                 // 24
  if (Array.isArray(node)) {                                                                                           // 25
    node = node[1];                                                                                                    // 26
  }                                                                                                                    // 27
  return node ? node.nextSibling : parentNode.firstChild;                                                              // 28
}                                                                                                                      // 29
                                                                                                                       // 30
/**                                                                                                                    // 31
 * Inserts `childNode` as a child of `parentNode` at the `index`.                                                      // 32
 *                                                                                                                     // 33
 * @param {DOMElement} parentNode Parent node in which to insert.                                                      // 34
 * @param {DOMElement} childNode Child node to insert.                                                                 // 35
 * @param {number} index Index at which to insert the child.                                                           // 36
 * @internal                                                                                                           // 37
 */                                                                                                                    // 38
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {               // 39
  // We rely exclusively on `insertBefore(node, null)` instead of also using                                           // 40
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so                                         // 41
  // we are careful to use `null`.)                                                                                    // 42
  parentNode.insertBefore(childNode, referenceNode);                                                                   // 43
});                                                                                                                    // 44
                                                                                                                       // 45
function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {                                                 // 46
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);                                                  // 47
}                                                                                                                      // 48
                                                                                                                       // 49
function moveChild(parentNode, childNode, referenceNode) {                                                             // 50
  if (Array.isArray(childNode)) {                                                                                      // 51
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);                                          // 52
  } else {                                                                                                             // 53
    insertChildAt(parentNode, childNode, referenceNode);                                                               // 54
  }                                                                                                                    // 55
}                                                                                                                      // 56
                                                                                                                       // 57
function removeChild(parentNode, childNode) {                                                                          // 58
  if (Array.isArray(childNode)) {                                                                                      // 59
    var closingComment = childNode[1];                                                                                 // 60
    childNode = childNode[0];                                                                                          // 61
    removeDelimitedText(parentNode, childNode, closingComment);                                                        // 62
    parentNode.removeChild(closingComment);                                                                            // 63
  }                                                                                                                    // 64
  parentNode.removeChild(childNode);                                                                                   // 65
}                                                                                                                      // 66
                                                                                                                       // 67
function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {                                // 68
  var node = openingComment;                                                                                           // 69
  while (true) {                                                                                                       // 70
    var nextNode = node.nextSibling;                                                                                   // 71
    insertChildAt(parentNode, node, referenceNode);                                                                    // 72
    if (node === closingComment) {                                                                                     // 73
      break;                                                                                                           // 74
    }                                                                                                                  // 75
    node = nextNode;                                                                                                   // 76
  }                                                                                                                    // 77
}                                                                                                                      // 78
                                                                                                                       // 79
function removeDelimitedText(parentNode, startNode, closingComment) {                                                  // 80
  while (true) {                                                                                                       // 81
    var node = startNode.nextSibling;                                                                                  // 82
    if (node === closingComment) {                                                                                     // 83
      // The closing comment is removed by ReactMultiChild.                                                            // 84
      break;                                                                                                           // 85
    } else {                                                                                                           // 86
      parentNode.removeChild(node);                                                                                    // 87
    }                                                                                                                  // 88
  }                                                                                                                    // 89
}                                                                                                                      // 90
                                                                                                                       // 91
function replaceDelimitedText(openingComment, closingComment, stringText) {                                            // 92
  var parentNode = openingComment.parentNode;                                                                          // 93
  var nodeAfterComment = openingComment.nextSibling;                                                                   // 94
  if (nodeAfterComment === closingComment) {                                                                           // 95
    // There are no text nodes between the opening and closing comments; insert                                        // 96
    // a new one if stringText isn't empty.                                                                            // 97
    if (stringText) {                                                                                                  // 98
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);                                // 99
    }                                                                                                                  // 100
  } else {                                                                                                             // 101
    if (stringText) {                                                                                                  // 102
      // Set the text content of the first node after the opening comment, and                                         // 103
      // remove all following nodes up until the closing comment.                                                      // 104
      setTextContent(nodeAfterComment, stringText);                                                                    // 105
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);                                               // 106
    } else {                                                                                                           // 107
      removeDelimitedText(parentNode, openingComment, closingComment);                                                 // 108
    }                                                                                                                  // 109
  }                                                                                                                    // 110
                                                                                                                       // 111
  if (process.env.NODE_ENV !== 'production') {                                                                         // 112
    ReactInstrumentation.debugTool.onHostOperation({                                                                   // 113
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,                                  // 114
      type: 'replace text',                                                                                            // 115
      payload: stringText                                                                                              // 116
    });                                                                                                                // 117
  }                                                                                                                    // 118
}                                                                                                                      // 119
                                                                                                                       // 120
var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;                                        // 121
if (process.env.NODE_ENV !== 'production') {                                                                           // 122
  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {                                       // 123
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);                                                         // 124
    if (prevInstance._debugID !== 0) {                                                                                 // 125
      ReactInstrumentation.debugTool.onHostOperation({                                                                 // 126
        instanceID: prevInstance._debugID,                                                                             // 127
        type: 'replace with',                                                                                          // 128
        payload: markup.toString()                                                                                     // 129
      });                                                                                                              // 130
    } else {                                                                                                           // 131
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);                                       // 132
      if (nextInstance._debugID !== 0) {                                                                               // 133
        ReactInstrumentation.debugTool.onHostOperation({                                                               // 134
          instanceID: nextInstance._debugID,                                                                           // 135
          type: 'mount',                                                                                               // 136
          payload: markup.toString()                                                                                   // 137
        });                                                                                                            // 138
      }                                                                                                                // 139
    }                                                                                                                  // 140
  };                                                                                                                   // 141
}                                                                                                                      // 142
                                                                                                                       // 143
/**                                                                                                                    // 144
 * Operations for updating with DOM children.                                                                          // 145
 */                                                                                                                    // 146
var DOMChildrenOperations = {                                                                                          // 147
                                                                                                                       // 148
  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,                                                  // 149
                                                                                                                       // 150
  replaceDelimitedText: replaceDelimitedText,                                                                          // 151
                                                                                                                       // 152
  /**                                                                                                                  // 153
   * Updates a component's children by processing a series of updates. The                                             // 154
   * update configurations are each expected to have a `parentNode` property.                                          // 155
   *                                                                                                                   // 156
   * @param {array<object>} updates List of update configurations.                                                     // 157
   * @internal                                                                                                         // 158
   */                                                                                                                  // 159
  processUpdates: function (parentNode, updates) {                                                                     // 160
    if (process.env.NODE_ENV !== 'production') {                                                                       // 161
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;                          // 162
    }                                                                                                                  // 163
                                                                                                                       // 164
    for (var k = 0; k < updates.length; k++) {                                                                         // 165
      var update = updates[k];                                                                                         // 166
      switch (update.type) {                                                                                           // 167
        case 'INSERT_MARKUP':                                                                                          // 168
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));               // 169
          if (process.env.NODE_ENV !== 'production') {                                                                 // 170
            ReactInstrumentation.debugTool.onHostOperation({                                                           // 171
              instanceID: parentNodeDebugID,                                                                           // 172
              type: 'insert child',                                                                                    // 173
              payload: { toIndex: update.toIndex, content: update.content.toString() }                                 // 174
            });                                                                                                        // 175
          }                                                                                                            // 176
          break;                                                                                                       // 177
        case 'MOVE_EXISTING':                                                                                          // 178
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));                          // 179
          if (process.env.NODE_ENV !== 'production') {                                                                 // 180
            ReactInstrumentation.debugTool.onHostOperation({                                                           // 181
              instanceID: parentNodeDebugID,                                                                           // 182
              type: 'move child',                                                                                      // 183
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }                                        // 184
            });                                                                                                        // 185
          }                                                                                                            // 186
          break;                                                                                                       // 187
        case 'SET_MARKUP':                                                                                             // 188
          setInnerHTML(parentNode, update.content);                                                                    // 189
          if (process.env.NODE_ENV !== 'production') {                                                                 // 190
            ReactInstrumentation.debugTool.onHostOperation({                                                           // 191
              instanceID: parentNodeDebugID,                                                                           // 192
              type: 'replace children',                                                                                // 193
              payload: update.content.toString()                                                                       // 194
            });                                                                                                        // 195
          }                                                                                                            // 196
          break;                                                                                                       // 197
        case 'TEXT_CONTENT':                                                                                           // 198
          setTextContent(parentNode, update.content);                                                                  // 199
          if (process.env.NODE_ENV !== 'production') {                                                                 // 200
            ReactInstrumentation.debugTool.onHostOperation({                                                           // 201
              instanceID: parentNodeDebugID,                                                                           // 202
              type: 'replace text',                                                                                    // 203
              payload: update.content.toString()                                                                       // 204
            });                                                                                                        // 205
          }                                                                                                            // 206
          break;                                                                                                       // 207
        case 'REMOVE_NODE':                                                                                            // 208
          removeChild(parentNode, update.fromNode);                                                                    // 209
          if (process.env.NODE_ENV !== 'production') {                                                                 // 210
            ReactInstrumentation.debugTool.onHostOperation({                                                           // 211
              instanceID: parentNodeDebugID,                                                                           // 212
              type: 'remove child',                                                                                    // 213
              payload: { fromIndex: update.fromIndex }                                                                 // 214
            });                                                                                                        // 215
          }                                                                                                            // 216
          break;                                                                                                       // 217
      }                                                                                                                // 218
    }                                                                                                                  // 219
  }                                                                                                                    // 220
                                                                                                                       // 221
};                                                                                                                     // 222
                                                                                                                       // 223
module.exports = DOMChildrenOperations;                                                                                // 224
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"DOMLazyTree.js":["./DOMNamespaces","./setInnerHTML","./createMicrosoftUnsafeLocalFunction","./setTextContent",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/DOMLazyTree.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2015-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var DOMNamespaces = require('./DOMNamespaces');                                                                        // 13
var setInnerHTML = require('./setInnerHTML');                                                                          // 14
                                                                                                                       // 15
var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');                              // 16
var setTextContent = require('./setTextContent');                                                                      // 17
                                                                                                                       // 18
var ELEMENT_NODE_TYPE = 1;                                                                                             // 19
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;                                                                                  // 20
                                                                                                                       // 21
/**                                                                                                                    // 22
 * In IE (8-11) and Edge, appending nodes with no children is dramatically                                             // 23
 * faster than appending a full subtree, so we essentially queue up the                                                // 24
 * .appendChild calls here and apply them so each node is added to its parent                                          // 25
 * before any children are added.                                                                                      // 26
 *                                                                                                                     // 27
 * In other browsers, doing so is slower or neutral compared to the other order                                        // 28
 * (in Firefox, twice as slow) so we only do this inversion in IE.                                                     // 29
 *                                                                                                                     // 30
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.                                              // 31
 */                                                                                                                    // 32
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);
                                                                                                                       // 34
function insertTreeChildren(tree) {                                                                                    // 35
  if (!enableLazy) {                                                                                                   // 36
    return;                                                                                                            // 37
  }                                                                                                                    // 38
  var node = tree.node;                                                                                                // 39
  var children = tree.children;                                                                                        // 40
  if (children.length) {                                                                                               // 41
    for (var i = 0; i < children.length; i++) {                                                                        // 42
      insertTreeBefore(node, children[i], null);                                                                       // 43
    }                                                                                                                  // 44
  } else if (tree.html != null) {                                                                                      // 45
    setInnerHTML(node, tree.html);                                                                                     // 46
  } else if (tree.text != null) {                                                                                      // 47
    setTextContent(node, tree.text);                                                                                   // 48
  }                                                                                                                    // 49
}                                                                                                                      // 50
                                                                                                                       // 51
var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {                 // 52
  // DocumentFragments aren't actually part of the DOM after insertion so                                              // 53
  // appending children won't update the DOM. We need to ensure the fragment                                           // 54
  // is properly populated first, breaking out of our lazy approach for just                                           // 55
  // this level. Also, some <object> plugins (like Flash Player) will read                                             // 56
  // <param> nodes immediately upon insertion into the DOM, so <object>                                                // 57
  // must also be populated prior to insertion into the DOM.                                                           // 58
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);                                                                                          // 60
    parentNode.insertBefore(tree.node, referenceNode);                                                                 // 61
  } else {                                                                                                             // 62
    parentNode.insertBefore(tree.node, referenceNode);                                                                 // 63
    insertTreeChildren(tree);                                                                                          // 64
  }                                                                                                                    // 65
});                                                                                                                    // 66
                                                                                                                       // 67
function replaceChildWithTree(oldNode, newTree) {                                                                      // 68
  oldNode.parentNode.replaceChild(newTree.node, oldNode);                                                              // 69
  insertTreeChildren(newTree);                                                                                         // 70
}                                                                                                                      // 71
                                                                                                                       // 72
function queueChild(parentTree, childTree) {                                                                           // 73
  if (enableLazy) {                                                                                                    // 74
    parentTree.children.push(childTree);                                                                               // 75
  } else {                                                                                                             // 76
    parentTree.node.appendChild(childTree.node);                                                                       // 77
  }                                                                                                                    // 78
}                                                                                                                      // 79
                                                                                                                       // 80
function queueHTML(tree, html) {                                                                                       // 81
  if (enableLazy) {                                                                                                    // 82
    tree.html = html;                                                                                                  // 83
  } else {                                                                                                             // 84
    setInnerHTML(tree.node, html);                                                                                     // 85
  }                                                                                                                    // 86
}                                                                                                                      // 87
                                                                                                                       // 88
function queueText(tree, text) {                                                                                       // 89
  if (enableLazy) {                                                                                                    // 90
    tree.text = text;                                                                                                  // 91
  } else {                                                                                                             // 92
    setTextContent(tree.node, text);                                                                                   // 93
  }                                                                                                                    // 94
}                                                                                                                      // 95
                                                                                                                       // 96
function toString() {                                                                                                  // 97
  return this.node.nodeName;                                                                                           // 98
}                                                                                                                      // 99
                                                                                                                       // 100
function DOMLazyTree(node) {                                                                                           // 101
  return {                                                                                                             // 102
    node: node,                                                                                                        // 103
    children: [],                                                                                                      // 104
    html: null,                                                                                                        // 105
    text: null,                                                                                                        // 106
    toString: toString                                                                                                 // 107
  };                                                                                                                   // 108
}                                                                                                                      // 109
                                                                                                                       // 110
DOMLazyTree.insertTreeBefore = insertTreeBefore;                                                                       // 111
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;                                                               // 112
DOMLazyTree.queueChild = queueChild;                                                                                   // 113
DOMLazyTree.queueHTML = queueHTML;                                                                                     // 114
DOMLazyTree.queueText = queueText;                                                                                     // 115
                                                                                                                       // 116
module.exports = DOMLazyTree;                                                                                          // 117
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"DOMNamespaces.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/DOMNamespaces.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var DOMNamespaces = {                                                                                                  // 13
  html: 'http://www.w3.org/1999/xhtml',                                                                                // 14
  mathml: 'http://www.w3.org/1998/Math/MathML',                                                                        // 15
  svg: 'http://www.w3.org/2000/svg'                                                                                    // 16
};                                                                                                                     // 17
                                                                                                                       // 18
module.exports = DOMNamespaces;                                                                                        // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setInnerHTML.js":["fbjs/lib/ExecutionEnvironment","./DOMNamespaces","./createMicrosoftUnsafeLocalFunction",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/setInnerHTML.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 13
var DOMNamespaces = require('./DOMNamespaces');                                                                        // 14
                                                                                                                       // 15
var WHITESPACE_TEST = /^[ \r\n\t\f]/;                                                                                  // 16
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;                                          // 17
                                                                                                                       // 18
var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');                              // 19
                                                                                                                       // 20
// SVG temp container for IE lacking innerHTML                                                                         // 21
var reusableSVGContainer;                                                                                              // 22
                                                                                                                       // 23
/**                                                                                                                    // 24
 * Set the innerHTML property of a node, ensuring that whitespace is preserved                                         // 25
 * even in IE8.                                                                                                        // 26
 *                                                                                                                     // 27
 * @param {DOMElement} node                                                                                            // 28
 * @param {string} html                                                                                                // 29
 * @internal                                                                                                           // 30
 */                                                                                                                    // 31
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {                                          // 32
  // IE does not have innerHTML for SVG nodes, so instead we inject the                                                // 33
  // new markup in a temp node and then move the child nodes across into                                               // 34
  // the target node                                                                                                   // 35
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {                                             // 36
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');                                      // 37
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';                                                        // 38
    var svgNode = reusableSVGContainer.firstChild;                                                                     // 39
    while (svgNode.firstChild) {                                                                                       // 40
      node.appendChild(svgNode.firstChild);                                                                            // 41
    }                                                                                                                  // 42
  } else {                                                                                                             // 43
    node.innerHTML = html;                                                                                             // 44
  }                                                                                                                    // 45
});                                                                                                                    // 46
                                                                                                                       // 47
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 48
  // IE8: When updating a just created node with innerHTML only leading                                                // 49
  // whitespace is removed. When updating an existing node with innerHTML                                              // 50
  // whitespace in root TextNodes is also collapsed.                                                                   // 51
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html                                              // 52
                                                                                                                       // 53
  // Feature detection; only IE8 is known to behave improperly like this.                                              // 54
  var testElement = document.createElement('div');                                                                     // 55
  testElement.innerHTML = ' ';                                                                                         // 56
  if (testElement.innerHTML === '') {                                                                                  // 57
    setInnerHTML = function (node, html) {                                                                             // 58
      // Magic theory: IE8 supposedly differentiates between added and updated                                         // 59
      // nodes when processing innerHTML, innerHTML on updated nodes suffers                                           // 60
      // from worse whitespace behavior. Re-adding a node like this triggers                                           // 61
      // the initial and more favorable whitespace behavior.                                                           // 62
      // TODO: What to do on a detached node?                                                                          // 63
      if (node.parentNode) {                                                                                           // 64
        node.parentNode.replaceChild(node, node);                                                                      // 65
      }                                                                                                                // 66
                                                                                                                       // 67
      // We also implement a workaround for non-visible tags disappearing into                                         // 68
      // thin air on IE8, this only happens if there is no visible text                                                // 69
      // in-front of the non-visible tags. Piggyback on the whitespace fix                                             // 70
      // and simply check if any non-visible tags appear in the source.                                                // 71
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {                               // 72
        // Recover leading whitespace by temporarily prepending any character.                                         // 73
        // \uFEFF has the potential advantage of being zero-width/invisible.                                           // 74
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode                                        // 75
        // in hopes that this is preserved even if "\uFEFF" is transformed to                                          // 76
        // the actual Unicode character (by Babel, for example).                                                       // 77
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216                                          // 78
        node.innerHTML = String.fromCharCode(0xFEFF) + html;                                                           // 79
                                                                                                                       // 80
        // deleteData leaves an empty `TextNode` which offsets the index of all                                        // 81
        // children. Definitely want to avoid this.                                                                    // 82
        var textNode = node.firstChild;                                                                                // 83
        if (textNode.data.length === 1) {                                                                              // 84
          node.removeChild(textNode);                                                                                  // 85
        } else {                                                                                                       // 86
          textNode.deleteData(0, 1);                                                                                   // 87
        }                                                                                                              // 88
      } else {                                                                                                         // 89
        node.innerHTML = html;                                                                                         // 90
      }                                                                                                                // 91
    };                                                                                                                 // 92
  }                                                                                                                    // 93
  testElement = null;                                                                                                  // 94
}                                                                                                                      // 95
                                                                                                                       // 96
module.exports = setInnerHTML;                                                                                         // 97
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"createMicrosoftUnsafeLocalFunction.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/createMicrosoftUnsafeLocalFunction.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
/* globals MSApp */                                                                                                    // 11
                                                                                                                       // 12
'use strict';                                                                                                          // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * Create a function which has 'unsafe' privileges (required by windows8 apps)                                         // 16
 */                                                                                                                    // 17
                                                                                                                       // 18
var createMicrosoftUnsafeLocalFunction = function (func) {                                                             // 19
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {                                                 // 20
    return function (arg0, arg1, arg2, arg3) {                                                                         // 21
      MSApp.execUnsafeLocalFunction(function () {                                                                      // 22
        return func(arg0, arg1, arg2, arg3);                                                                           // 23
      });                                                                                                              // 24
    };                                                                                                                 // 25
  } else {                                                                                                             // 26
    return func;                                                                                                       // 27
  }                                                                                                                    // 28
};                                                                                                                     // 29
                                                                                                                       // 30
module.exports = createMicrosoftUnsafeLocalFunction;                                                                   // 31
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setTextContent.js":["fbjs/lib/ExecutionEnvironment","./escapeTextContentForBrowser","./setInnerHTML",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/setTextContent.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 13
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 14
var setInnerHTML = require('./setInnerHTML');                                                                          // 15
                                                                                                                       // 16
/**                                                                                                                    // 17
 * Set the textContent property of a node, ensuring that whitespace is preserved                                       // 18
 * even in IE8. innerText is a poor substitute for textContent and, among many                                         // 19
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves                                        // 20
 * as it should.                                                                                                       // 21
 *                                                                                                                     // 22
 * @param {DOMElement} node                                                                                            // 23
 * @param {string} text                                                                                                // 24
 * @internal                                                                                                           // 25
 */                                                                                                                    // 26
var setTextContent = function (node, text) {                                                                           // 27
  if (text) {                                                                                                          // 28
    var firstChild = node.firstChild;                                                                                  // 29
                                                                                                                       // 30
    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {                                    // 31
      firstChild.nodeValue = text;                                                                                     // 32
      return;                                                                                                          // 33
    }                                                                                                                  // 34
  }                                                                                                                    // 35
  node.textContent = text;                                                                                             // 36
};                                                                                                                     // 37
                                                                                                                       // 38
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 39
  if (!('textContent' in document.documentElement)) {                                                                  // 40
    setTextContent = function (node, text) {                                                                           // 41
      if (node.nodeType === 3) {                                                                                       // 42
        node.nodeValue = text;                                                                                         // 43
        return;                                                                                                        // 44
      }                                                                                                                // 45
      setInnerHTML(node, escapeTextContentForBrowser(text));                                                           // 46
    };                                                                                                                 // 47
  }                                                                                                                    // 48
}                                                                                                                      // 49
                                                                                                                       // 50
module.exports = setTextContent;                                                                                       // 51
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"escapeTextContentForBrowser.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/escapeTextContentForBrowser.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2016-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 * Based on the escape-html library, which is used under the MIT License below:                                        // 9
 *                                                                                                                     // 10
 * Copyright (c) 2012-2013 TJ Holowaychuk                                                                              // 11
 * Copyright (c) 2015 Andreas Lubbe                                                                                    // 12
 * Copyright (c) 2015 Tiancheng "Timothy" Gu                                                                           // 13
 *                                                                                                                     // 14
 * Permission is hereby granted, free of charge, to any person obtaining                                               // 15
 * a copy of this software and associated documentation files (the                                                     // 16
 * 'Software'), to deal in the Software without restriction, including                                                 // 17
 * without limitation the rights to use, copy, modify, merge, publish,                                                 // 18
 * distribute, sublicense, and/or sell copies of the Software, and to                                                  // 19
 * permit persons to whom the Software is furnished to do so, subject to                                               // 20
 * the following conditions:                                                                                           // 21
 *                                                                                                                     // 22
 * The above copyright notice and this permission notice shall be                                                      // 23
 * included in all copies or substantial portions of the Software.                                                     // 24
 *                                                                                                                     // 25
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,                                                     // 26
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                  // 27
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.                                              // 28
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY                                                // 29
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,                                                // 30
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE                                                   // 31
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                              // 32
 *                                                                                                                     // 33
 */                                                                                                                    // 34
                                                                                                                       // 35
'use strict';                                                                                                          // 36
                                                                                                                       // 37
// code copied and modified from escape-html                                                                           // 38
/**                                                                                                                    // 39
 * Module variables.                                                                                                   // 40
 * @private                                                                                                            // 41
 */                                                                                                                    // 42
                                                                                                                       // 43
var matchHtmlRegExp = /["'&<>]/;                                                                                       // 44
                                                                                                                       // 45
/**                                                                                                                    // 46
 * Escape special characters in the given string of html.                                                              // 47
 *                                                                                                                     // 48
 * @param  {string} string The string to escape for inserting into HTML                                                // 49
 * @return {string}                                                                                                    // 50
 * @public                                                                                                             // 51
 */                                                                                                                    // 52
                                                                                                                       // 53
function escapeHtml(string) {                                                                                          // 54
  var str = '' + string;                                                                                               // 55
  var match = matchHtmlRegExp.exec(str);                                                                               // 56
                                                                                                                       // 57
  if (!match) {                                                                                                        // 58
    return str;                                                                                                        // 59
  }                                                                                                                    // 60
                                                                                                                       // 61
  var escape;                                                                                                          // 62
  var html = '';                                                                                                       // 63
  var index = 0;                                                                                                       // 64
  var lastIndex = 0;                                                                                                   // 65
                                                                                                                       // 66
  for (index = match.index; index < str.length; index++) {                                                             // 67
    switch (str.charCodeAt(index)) {                                                                                   // 68
      case 34:                                                                                                         // 69
        // "                                                                                                           // 70
        escape = '&quot;';                                                                                             // 71
        break;                                                                                                         // 72
      case 38:                                                                                                         // 73
        // &                                                                                                           // 74
        escape = '&amp;';                                                                                              // 75
        break;                                                                                                         // 76
      case 39:                                                                                                         // 77
        // '                                                                                                           // 78
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'                                             // 79
        break;                                                                                                         // 80
      case 60:                                                                                                         // 81
        // <                                                                                                           // 82
        escape = '&lt;';                                                                                               // 83
        break;                                                                                                         // 84
      case 62:                                                                                                         // 85
        // >                                                                                                           // 86
        escape = '&gt;';                                                                                               // 87
        break;                                                                                                         // 88
      default:                                                                                                         // 89
        continue;                                                                                                      // 90
    }                                                                                                                  // 91
                                                                                                                       // 92
    if (lastIndex !== index) {                                                                                         // 93
      html += str.substring(lastIndex, index);                                                                         // 94
    }                                                                                                                  // 95
                                                                                                                       // 96
    lastIndex = index + 1;                                                                                             // 97
    html += escape;                                                                                                    // 98
  }                                                                                                                    // 99
                                                                                                                       // 100
  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;                                          // 101
}                                                                                                                      // 102
// end code copied and modified from escape-html                                                                       // 103
                                                                                                                       // 104
                                                                                                                       // 105
/**                                                                                                                    // 106
 * Escapes text to prevent scripting attacks.                                                                          // 107
 *                                                                                                                     // 108
 * @param {*} text Text value to escape.                                                                               // 109
 * @return {string} An escaped string.                                                                                 // 110
 */                                                                                                                    // 111
function escapeTextContentForBrowser(text) {                                                                           // 112
  if (typeof text === 'boolean' || typeof text === 'number') {                                                         // 113
    // this shortcircuit helps perf for types that we know will never have                                             // 114
    // special characters, especially given that this function is used often                                           // 115
    // for numeric dom ids.                                                                                            // 116
    return '' + text;                                                                                                  // 117
  }                                                                                                                    // 118
  return escapeHtml(text);                                                                                             // 119
}                                                                                                                      // 120
                                                                                                                       // 121
module.exports = escapeTextContentForBrowser;                                                                          // 122
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Danger.js":["./reactProdInvariant","./DOMLazyTree","fbjs/lib/ExecutionEnvironment","fbjs/lib/createNodesFromMarkup","fbjs/lib/emptyFunction","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/Danger.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var DOMLazyTree = require('./DOMLazyTree');                                                                            // 15
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 16
                                                                                                                       // 17
var createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');                                                 // 18
var emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 19
var invariant = require('fbjs/lib/invariant');                                                                         // 20
                                                                                                                       // 21
var Danger = {                                                                                                         // 22
                                                                                                                       // 23
  /**                                                                                                                  // 24
   * Replaces a node with a string of markup at its current position within its                                        // 25
   * parent. The markup must render into a single root node.                                                           // 26
   *                                                                                                                   // 27
   * @param {DOMElement} oldChild Child node to replace.                                                               // 28
   * @param {string} markup Markup to render in place of the child node.                                               // 29
   * @internal                                                                                                         // 30
   */                                                                                                                  // 31
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {                                                      // 32
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;
                                                                                                                       // 36
    if (typeof markup === 'string') {                                                                                  // 37
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];                                                  // 38
      oldChild.parentNode.replaceChild(newChild, oldChild);                                                            // 39
    } else {                                                                                                           // 40
      DOMLazyTree.replaceChildWithTree(oldChild, markup);                                                              // 41
    }                                                                                                                  // 42
  }                                                                                                                    // 43
                                                                                                                       // 44
};                                                                                                                     // 45
                                                                                                                       // 46
module.exports = Danger;                                                                                               // 47
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMIDOperations.js":["./DOMChildrenOperations","./ReactDOMComponentTree",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMIDOperations.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var DOMChildrenOperations = require('./DOMChildrenOperations');                                                        // 13
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 14
                                                                                                                       // 15
/**                                                                                                                    // 16
 * Operations used to process updates to DOM nodes.                                                                    // 17
 */                                                                                                                    // 18
var ReactDOMIDOperations = {                                                                                           // 19
                                                                                                                       // 20
  /**                                                                                                                  // 21
   * Updates a component's children by processing a series of updates.                                                 // 22
   *                                                                                                                   // 23
   * @param {array<object>} updates List of update configurations.                                                     // 24
   * @internal                                                                                                         // 25
   */                                                                                                                  // 26
  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {                                                  // 27
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);                                                  // 28
    DOMChildrenOperations.processUpdates(node, updates);                                                               // 29
  }                                                                                                                    // 30
};                                                                                                                     // 31
                                                                                                                       // 32
module.exports = ReactDOMIDOperations;                                                                                 // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMComponent.js":["./reactProdInvariant","object-assign","./AutoFocusUtils","./CSSPropertyOperations","./DOMLazyTree","./DOMNamespaces","./DOMProperty","./DOMPropertyOperations","./EventPluginHub","./EventPluginRegistry","./ReactBrowserEventEmitter","./ReactDOMComponentFlags","./ReactDOMComponentTree","./ReactDOMInput","./ReactDOMOption","./ReactDOMSelect","./ReactDOMTextarea","./ReactInstrumentation","./ReactMultiChild","./ReactServerRenderingTransaction","fbjs/lib/emptyFunction","./escapeTextContentForBrowser","fbjs/lib/invariant","./isEventSupported","fbjs/lib/shallowEqual","./validateDOMNesting","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMComponent.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
/* global hasOwnProperty:true */                                                                                       // 11
                                                                                                                       // 12
'use strict';                                                                                                          // 13
                                                                                                                       // 14
var _prodInvariant = require('./reactProdInvariant'),                                                                  // 15
    _assign = require('object-assign');                                                                                // 16
                                                                                                                       // 17
var AutoFocusUtils = require('./AutoFocusUtils');                                                                      // 18
var CSSPropertyOperations = require('./CSSPropertyOperations');                                                        // 19
var DOMLazyTree = require('./DOMLazyTree');                                                                            // 20
var DOMNamespaces = require('./DOMNamespaces');                                                                        // 21
var DOMProperty = require('./DOMProperty');                                                                            // 22
var DOMPropertyOperations = require('./DOMPropertyOperations');                                                        // 23
var EventPluginHub = require('./EventPluginHub');                                                                      // 24
var EventPluginRegistry = require('./EventPluginRegistry');                                                            // 25
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 26
var ReactDOMComponentFlags = require('./ReactDOMComponentFlags');                                                      // 27
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 28
var ReactDOMInput = require('./ReactDOMInput');                                                                        // 29
var ReactDOMOption = require('./ReactDOMOption');                                                                      // 30
var ReactDOMSelect = require('./ReactDOMSelect');                                                                      // 31
var ReactDOMTextarea = require('./ReactDOMTextarea');                                                                  // 32
var ReactInstrumentation = require('./ReactInstrumentation');                                                          // 33
var ReactMultiChild = require('./ReactMultiChild');                                                                    // 34
var ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');                                    // 35
                                                                                                                       // 36
var emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 37
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 38
var invariant = require('fbjs/lib/invariant');                                                                         // 39
var isEventSupported = require('./isEventSupported');                                                                  // 40
var shallowEqual = require('fbjs/lib/shallowEqual');                                                                   // 41
var validateDOMNesting = require('./validateDOMNesting');                                                              // 42
var warning = require('fbjs/lib/warning');                                                                             // 43
                                                                                                                       // 44
var Flags = ReactDOMComponentFlags;                                                                                    // 45
var deleteListener = EventPluginHub.deleteListener;                                                                    // 46
var getNode = ReactDOMComponentTree.getNodeFromInstance;                                                               // 47
var listenTo = ReactBrowserEventEmitter.listenTo;                                                                      // 48
var registrationNameModules = EventPluginRegistry.registrationNameModules;                                             // 49
                                                                                                                       // 50
// For quickly matching children type, to test if can be treated as content.                                           // 51
var CONTENT_TYPES = { 'string': true, 'number': true };                                                                // 52
                                                                                                                       // 53
var STYLE = 'style';                                                                                                   // 54
var HTML = '__html';                                                                                                   // 55
var RESERVED_PROPS = {                                                                                                 // 56
  children: null,                                                                                                      // 57
  dangerouslySetInnerHTML: null,                                                                                       // 58
  suppressContentEditableWarning: null                                                                                 // 59
};                                                                                                                     // 60
                                                                                                                       // 61
// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).                                                     // 62
var DOC_FRAGMENT_TYPE = 11;                                                                                            // 63
                                                                                                                       // 64
function getDeclarationErrorAddendum(internalInstance) {                                                               // 65
  if (internalInstance) {                                                                                              // 66
    var owner = internalInstance._currentElement._owner || null;                                                       // 67
    if (owner) {                                                                                                       // 68
      var name = owner.getName();                                                                                      // 69
      if (name) {                                                                                                      // 70
        return ' This DOM node was rendered by `' + name + '`.';                                                       // 71
      }                                                                                                                // 72
    }                                                                                                                  // 73
  }                                                                                                                    // 74
  return '';                                                                                                           // 75
}                                                                                                                      // 76
                                                                                                                       // 77
function friendlyStringify(obj) {                                                                                      // 78
  if (typeof obj === 'object') {                                                                                       // 79
    if (Array.isArray(obj)) {                                                                                          // 80
      return '[' + obj.map(friendlyStringify).join(', ') + ']';                                                        // 81
    } else {                                                                                                           // 82
      var pairs = [];                                                                                                  // 83
      for (var key in obj) {                                                                                           // 84
        if (Object.prototype.hasOwnProperty.call(obj, key)) {                                                          // 85
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);                                  // 86
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));                                                 // 87
        }                                                                                                              // 88
      }                                                                                                                // 89
      return '{' + pairs.join(', ') + '}';                                                                             // 90
    }                                                                                                                  // 91
  } else if (typeof obj === 'string') {                                                                                // 92
    return JSON.stringify(obj);                                                                                        // 93
  } else if (typeof obj === 'function') {                                                                              // 94
    return '[function object]';                                                                                        // 95
  }                                                                                                                    // 96
  // Differs from JSON.stringify in that undefined because undefined and that                                          // 97
  // inf and nan don't become null                                                                                     // 98
  return String(obj);                                                                                                  // 99
}                                                                                                                      // 100
                                                                                                                       // 101
var styleMutationWarning = {};                                                                                         // 102
                                                                                                                       // 103
function checkAndWarnForMutatedStyle(style1, style2, component) {                                                      // 104
  if (style1 == null || style2 == null) {                                                                              // 105
    return;                                                                                                            // 106
  }                                                                                                                    // 107
  if (shallowEqual(style1, style2)) {                                                                                  // 108
    return;                                                                                                            // 109
  }                                                                                                                    // 110
                                                                                                                       // 111
  var componentName = component._tag;                                                                                  // 112
  var owner = component._currentElement._owner;                                                                        // 113
  var ownerName;                                                                                                       // 114
  if (owner) {                                                                                                         // 115
    ownerName = owner.getName();                                                                                       // 116
  }                                                                                                                    // 117
                                                                                                                       // 118
  var hash = ownerName + '|' + componentName;                                                                          // 119
                                                                                                                       // 120
  if (styleMutationWarning.hasOwnProperty(hash)) {                                                                     // 121
    return;                                                                                                            // 122
  }                                                                                                                    // 123
                                                                                                                       // 124
  styleMutationWarning[hash] = true;                                                                                   // 125
                                                                                                                       // 126
  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}                                                                                                                      // 128
                                                                                                                       // 129
/**                                                                                                                    // 130
 * @param {object} component                                                                                           // 131
 * @param {?object} props                                                                                              // 132
 */                                                                                                                    // 133
function assertValidProps(component, props) {                                                                          // 134
  if (!props) {                                                                                                        // 135
    return;                                                                                                            // 136
  }                                                                                                                    // 137
  // Note the use of `==` which checks for null or undefined.                                                          // 138
  if (voidElementTags[component._tag]) {                                                                               // 139
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }                                                                                                                    // 141
  if (props.dangerouslySetInnerHTML != null) {                                                                         // 142
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }                                                                                                                    // 145
  if (process.env.NODE_ENV !== 'production') {                                                                         // 146
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }                                                                                                                    // 150
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}                                                                                                                      // 152
                                                                                                                       // 153
function enqueuePutListener(inst, registrationName, listener, transaction) {                                           // 154
  if (transaction instanceof ReactServerRenderingTransaction) {                                                        // 155
    return;                                                                                                            // 156
  }                                                                                                                    // 157
  if (process.env.NODE_ENV !== 'production') {                                                                         // 158
    // IE8 has no API for event capturing and the `onScroll` event doesn't                                             // 159
    // bubble.                                                                                                         // 160
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
  }                                                                                                                    // 162
  var containerInfo = inst._hostContainerInfo;                                                                         // 163
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;                  // 164
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;                                   // 165
  listenTo(registrationName, doc);                                                                                     // 166
  transaction.getReactMountReady().enqueue(putListener, {                                                              // 167
    inst: inst,                                                                                                        // 168
    registrationName: registrationName,                                                                                // 169
    listener: listener                                                                                                 // 170
  });                                                                                                                  // 171
}                                                                                                                      // 172
                                                                                                                       // 173
function putListener() {                                                                                               // 174
  var listenerToPut = this;                                                                                            // 175
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);              // 176
}                                                                                                                      // 177
                                                                                                                       // 178
function inputPostMount() {                                                                                            // 179
  var inst = this;                                                                                                     // 180
  ReactDOMInput.postMountWrapper(inst);                                                                                // 181
}                                                                                                                      // 182
                                                                                                                       // 183
function textareaPostMount() {                                                                                         // 184
  var inst = this;                                                                                                     // 185
  ReactDOMTextarea.postMountWrapper(inst);                                                                             // 186
}                                                                                                                      // 187
                                                                                                                       // 188
function optionPostMount() {                                                                                           // 189
  var inst = this;                                                                                                     // 190
  ReactDOMOption.postMountWrapper(inst);                                                                               // 191
}                                                                                                                      // 192
                                                                                                                       // 193
var setAndValidateContentChildDev = emptyFunction;                                                                     // 194
if (process.env.NODE_ENV !== 'production') {                                                                           // 195
  setAndValidateContentChildDev = function (content) {                                                                 // 196
    var hasExistingContent = this._contentDebugID != null;                                                             // 197
    var debugID = this._debugID;                                                                                       // 198
    // This ID represents the inlined child that has no backing instance:                                              // 199
    var contentDebugID = -debugID;                                                                                     // 200
                                                                                                                       // 201
    if (content == null) {                                                                                             // 202
      if (hasExistingContent) {                                                                                        // 203
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);                                       // 204
      }                                                                                                                // 205
      this._contentDebugID = null;                                                                                     // 206
      return;                                                                                                          // 207
    }                                                                                                                  // 208
                                                                                                                       // 209
    validateDOMNesting(null, String(content), this, this._ancestorInfo);                                               // 210
    this._contentDebugID = contentDebugID;                                                                             // 211
    if (hasExistingContent) {                                                                                          // 212
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);                                 // 213
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);                                                // 214
    } else {                                                                                                           // 215
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);                         // 216
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);                                                 // 217
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);                                         // 218
    }                                                                                                                  // 219
  };                                                                                                                   // 220
}                                                                                                                      // 221
                                                                                                                       // 222
// There are so many media events, it makes sense to just                                                              // 223
// maintain a list rather than create a `trapBubbledEvent` for each                                                    // 224
var mediaEvents = {                                                                                                    // 225
  topAbort: 'abort',                                                                                                   // 226
  topCanPlay: 'canplay',                                                                                               // 227
  topCanPlayThrough: 'canplaythrough',                                                                                 // 228
  topDurationChange: 'durationchange',                                                                                 // 229
  topEmptied: 'emptied',                                                                                               // 230
  topEncrypted: 'encrypted',                                                                                           // 231
  topEnded: 'ended',                                                                                                   // 232
  topError: 'error',                                                                                                   // 233
  topLoadedData: 'loadeddata',                                                                                         // 234
  topLoadedMetadata: 'loadedmetadata',                                                                                 // 235
  topLoadStart: 'loadstart',                                                                                           // 236
  topPause: 'pause',                                                                                                   // 237
  topPlay: 'play',                                                                                                     // 238
  topPlaying: 'playing',                                                                                               // 239
  topProgress: 'progress',                                                                                             // 240
  topRateChange: 'ratechange',                                                                                         // 241
  topSeeked: 'seeked',                                                                                                 // 242
  topSeeking: 'seeking',                                                                                               // 243
  topStalled: 'stalled',                                                                                               // 244
  topSuspend: 'suspend',                                                                                               // 245
  topTimeUpdate: 'timeupdate',                                                                                         // 246
  topVolumeChange: 'volumechange',                                                                                     // 247
  topWaiting: 'waiting'                                                                                                // 248
};                                                                                                                     // 249
                                                                                                                       // 250
function trapBubbledEventsLocal() {                                                                                    // 251
  var inst = this;                                                                                                     // 252
  // If a component renders to null or if another component fatals and causes                                          // 253
  // the state of the tree to be corrupted, `node` here can be null.                                                   // 254
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);                                                                                            // 256
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;
                                                                                                                       // 258
  switch (inst._tag) {                                                                                                 // 259
    case 'iframe':                                                                                                     // 260
    case 'object':                                                                                                     // 261
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];             // 262
      break;                                                                                                           // 263
    case 'video':                                                                                                      // 264
    case 'audio':                                                                                                      // 265
                                                                                                                       // 266
      inst._wrapperState.listeners = [];                                                                               // 267
      // Create listener for each media event                                                                          // 268
      for (var event in mediaEvents) {                                                                                 // 269
        if (mediaEvents.hasOwnProperty(event)) {                                                                       // 270
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }                                                                                                              // 272
      }                                                                                                                // 273
      break;                                                                                                           // 274
    case 'source':                                                                                                     // 275
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];           // 276
      break;                                                                                                           // 277
    case 'img':                                                                                                        // 278
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;                                                                                                           // 280
    case 'form':                                                                                                       // 281
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;                                                                                                           // 283
    case 'input':                                                                                                      // 284
    case 'select':                                                                                                     // 285
    case 'textarea':                                                                                                   // 286
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];       // 287
      break;                                                                                                           // 288
  }                                                                                                                    // 289
}                                                                                                                      // 290
                                                                                                                       // 291
function postUpdateSelectWrapper() {                                                                                   // 292
  ReactDOMSelect.postUpdateWrapper(this);                                                                              // 293
}                                                                                                                      // 294
                                                                                                                       // 295
// For HTML, certain tags should omit their close tag. We keep a whitelist for                                         // 296
// those special-case tags.                                                                                            // 297
                                                                                                                       // 298
var omittedCloseTags = {                                                                                               // 299
  'area': true,                                                                                                        // 300
  'base': true,                                                                                                        // 301
  'br': true,                                                                                                          // 302
  'col': true,                                                                                                         // 303
  'embed': true,                                                                                                       // 304
  'hr': true,                                                                                                          // 305
  'img': true,                                                                                                         // 306
  'input': true,                                                                                                       // 307
  'keygen': true,                                                                                                      // 308
  'link': true,                                                                                                        // 309
  'meta': true,                                                                                                        // 310
  'param': true,                                                                                                       // 311
  'source': true,                                                                                                      // 312
  'track': true,                                                                                                       // 313
  'wbr': true                                                                                                          // 314
};                                                                                                                     // 315
                                                                                                                       // 316
var newlineEatingTags = {                                                                                              // 317
  'listing': true,                                                                                                     // 318
  'pre': true,                                                                                                         // 319
  'textarea': true                                                                                                     // 320
};                                                                                                                     // 321
                                                                                                                       // 322
// For HTML, certain tags cannot have children. This has the same purpose as                                           // 323
// `omittedCloseTags` except that `menuitem` should still have its closing tag.                                        // 324
                                                                                                                       // 325
var voidElementTags = _assign({                                                                                        // 326
  'menuitem': true                                                                                                     // 327
}, omittedCloseTags);                                                                                                  // 328
                                                                                                                       // 329
// We accept any tag to be rendered but since this gets injected into arbitrary                                        // 330
// HTML, we want to make sure that it's a safe tag.                                                                    // 331
// http://www.w3.org/TR/REC-xml/#NT-Name                                                                               // 332
                                                                                                                       // 333
var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset                                              // 334
var validatedTagCache = {};                                                                                            // 335
var hasOwnProperty = {}.hasOwnProperty;                                                                                // 336
                                                                                                                       // 337
function validateDangerousTag(tag) {                                                                                   // 338
  if (!hasOwnProperty.call(validatedTagCache, tag)) {                                                                  // 339
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;                                                                                     // 341
  }                                                                                                                    // 342
}                                                                                                                      // 343
                                                                                                                       // 344
function isCustomComponent(tagName, props) {                                                                           // 345
  return tagName.indexOf('-') >= 0 || props.is != null;                                                                // 346
}                                                                                                                      // 347
                                                                                                                       // 348
var globalIdCounter = 1;                                                                                               // 349
                                                                                                                       // 350
/**                                                                                                                    // 351
 * Creates a new React class that is idempotent and capable of containing other                                        // 352
 * React components. It accepts event listeners and DOM properties that are                                            // 353
 * valid according to `DOMProperty`.                                                                                   // 354
 *                                                                                                                     // 355
 *  - Event listeners: `onClick`, `onMouseDown`, etc.                                                                  // 356
 *  - DOM properties: `className`, `name`, `title`, etc.                                                               // 357
 *                                                                                                                     // 358
 * The `style` property functions differently from the DOM API. It accepts an                                          // 359
 * object mapping of style properties to values.                                                                       // 360
 *                                                                                                                     // 361
 * @constructor ReactDOMComponent                                                                                      // 362
 * @extends ReactMultiChild                                                                                            // 363
 */                                                                                                                    // 364
function ReactDOMComponent(element) {                                                                                  // 365
  var tag = element.type;                                                                                              // 366
  validateDangerousTag(tag);                                                                                           // 367
  this._currentElement = element;                                                                                      // 368
  this._tag = tag.toLowerCase();                                                                                       // 369
  this._namespaceURI = null;                                                                                           // 370
  this._renderedChildren = null;                                                                                       // 371
  this._previousStyle = null;                                                                                          // 372
  this._previousStyleCopy = null;                                                                                      // 373
  this._hostNode = null;                                                                                               // 374
  this._hostParent = null;                                                                                             // 375
  this._rootNodeID = 0;                                                                                                // 376
  this._domID = 0;                                                                                                     // 377
  this._hostContainerInfo = null;                                                                                      // 378
  this._wrapperState = null;                                                                                           // 379
  this._topLevelWrapper = null;                                                                                        // 380
  this._flags = 0;                                                                                                     // 381
  if (process.env.NODE_ENV !== 'production') {                                                                         // 382
    this._ancestorInfo = null;                                                                                         // 383
    setAndValidateContentChildDev.call(this, null);                                                                    // 384
  }                                                                                                                    // 385
}                                                                                                                      // 386
                                                                                                                       // 387
ReactDOMComponent.displayName = 'ReactDOMComponent';                                                                   // 388
                                                                                                                       // 389
ReactDOMComponent.Mixin = {                                                                                            // 390
                                                                                                                       // 391
  /**                                                                                                                  // 392
   * Generates root tag markup then recurses. This method has side effects and                                         // 393
   * is not idempotent.                                                                                                // 394
   *                                                                                                                   // 395
   * @internal                                                                                                         // 396
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 397
   * @param {?ReactDOMComponent} the parent component instance                                                         // 398
   * @param {?object} info about the host container                                                                    // 399
   * @param {object} context                                                                                           // 400
   * @return {string} The computed markup.                                                                             // 401
   */                                                                                                                  // 402
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {                                     // 403
    this._rootNodeID = globalIdCounter++;                                                                              // 404
    this._domID = hostContainerInfo._idCounter++;                                                                      // 405
    this._hostParent = hostParent;                                                                                     // 406
    this._hostContainerInfo = hostContainerInfo;                                                                       // 407
                                                                                                                       // 408
    var props = this._currentElement.props;                                                                            // 409
                                                                                                                       // 410
    switch (this._tag) {                                                                                               // 411
      case 'audio':                                                                                                    // 412
      case 'form':                                                                                                     // 413
      case 'iframe':                                                                                                   // 414
      case 'img':                                                                                                      // 415
      case 'link':                                                                                                     // 416
      case 'object':                                                                                                   // 417
      case 'source':                                                                                                   // 418
      case 'video':                                                                                                    // 419
        this._wrapperState = {                                                                                         // 420
          listeners: null                                                                                              // 421
        };                                                                                                             // 422
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);                                        // 423
        break;                                                                                                         // 424
      case 'input':                                                                                                    // 425
        ReactDOMInput.mountWrapper(this, props, hostParent);                                                           // 426
        props = ReactDOMInput.getHostProps(this, props);                                                               // 427
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);                                        // 428
        break;                                                                                                         // 429
      case 'option':                                                                                                   // 430
        ReactDOMOption.mountWrapper(this, props, hostParent);                                                          // 431
        props = ReactDOMOption.getHostProps(this, props);                                                              // 432
        break;                                                                                                         // 433
      case 'select':                                                                                                   // 434
        ReactDOMSelect.mountWrapper(this, props, hostParent);                                                          // 435
        props = ReactDOMSelect.getHostProps(this, props);                                                              // 436
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);                                        // 437
        break;                                                                                                         // 438
      case 'textarea':                                                                                                 // 439
        ReactDOMTextarea.mountWrapper(this, props, hostParent);                                                        // 440
        props = ReactDOMTextarea.getHostProps(this, props);                                                            // 441
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);                                        // 442
        break;                                                                                                         // 443
    }                                                                                                                  // 444
                                                                                                                       // 445
    assertValidProps(this, props);                                                                                     // 446
                                                                                                                       // 447
    // We create tags in the namespace of their parent container, except HTML                                          // 448
    // tags get no namespace.                                                                                          // 449
    var namespaceURI;                                                                                                  // 450
    var parentTag;                                                                                                     // 451
    if (hostParent != null) {                                                                                          // 452
      namespaceURI = hostParent._namespaceURI;                                                                         // 453
      parentTag = hostParent._tag;                                                                                     // 454
    } else if (hostContainerInfo._tag) {                                                                               // 455
      namespaceURI = hostContainerInfo._namespaceURI;                                                                  // 456
      parentTag = hostContainerInfo._tag;                                                                              // 457
    }                                                                                                                  // 458
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {                 // 459
      namespaceURI = DOMNamespaces.html;                                                                               // 460
    }                                                                                                                  // 461
    if (namespaceURI === DOMNamespaces.html) {                                                                         // 462
      if (this._tag === 'svg') {                                                                                       // 463
        namespaceURI = DOMNamespaces.svg;                                                                              // 464
      } else if (this._tag === 'math') {                                                                               // 465
        namespaceURI = DOMNamespaces.mathml;                                                                           // 466
      }                                                                                                                // 467
    }                                                                                                                  // 468
    this._namespaceURI = namespaceURI;                                                                                 // 469
                                                                                                                       // 470
    if (process.env.NODE_ENV !== 'production') {                                                                       // 471
      var parentInfo;                                                                                                  // 472
      if (hostParent != null) {                                                                                        // 473
        parentInfo = hostParent._ancestorInfo;                                                                         // 474
      } else if (hostContainerInfo._tag) {                                                                             // 475
        parentInfo = hostContainerInfo._ancestorInfo;                                                                  // 476
      }                                                                                                                // 477
      if (parentInfo) {                                                                                                // 478
        // parentInfo should always be present except for the top-level                                                // 479
        // component when server rendering                                                                             // 480
        validateDOMNesting(this._tag, null, this, parentInfo);                                                         // 481
      }                                                                                                                // 482
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);                        // 483
    }                                                                                                                  // 484
                                                                                                                       // 485
    var mountImage;                                                                                                    // 486
    if (transaction.useCreateElement) {                                                                                // 487
      var ownerDocument = hostContainerInfo._ownerDocument;                                                            // 488
      var el;                                                                                                          // 489
      if (namespaceURI === DOMNamespaces.html) {                                                                       // 490
        if (this._tag === 'script') {                                                                                  // 491
          // Create the script via .innerHTML so its "parser-inserted" flag is                                         // 492
          // set to true and it does not execute                                                                       // 493
          var div = ownerDocument.createElement('div');                                                                // 494
          var type = this._currentElement.type;                                                                        // 495
          div.innerHTML = '<' + type + '></' + type + '>';                                                             // 496
          el = div.removeChild(div.firstChild);                                                                        // 497
        } else if (props.is) {                                                                                         // 498
          el = ownerDocument.createElement(this._currentElement.type, props.is);                                       // 499
        } else {                                                                                                       // 500
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.             // 501
          // See discussion in https://github.com/facebook/react/pull/6896                                             // 502
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240                                    // 503
          el = ownerDocument.createElement(this._currentElement.type);                                                 // 504
        }                                                                                                              // 505
      } else {                                                                                                         // 506
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);                                   // 507
      }                                                                                                                // 508
      ReactDOMComponentTree.precacheNode(this, el);                                                                    // 509
      this._flags |= Flags.hasCachedChildNodes;                                                                        // 510
      if (!this._hostParent) {                                                                                         // 511
        DOMPropertyOperations.setAttributeForRoot(el);                                                                 // 512
      }                                                                                                                // 513
      this._updateDOMProperties(null, props, transaction);                                                             // 514
      var lazyTree = DOMLazyTree(el);                                                                                  // 515
      this._createInitialChildren(transaction, props, context, lazyTree);                                              // 516
      mountImage = lazyTree;                                                                                           // 517
    } else {                                                                                                           // 518
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);                                      // 519
      var tagContent = this._createContentMarkup(transaction, props, context);                                         // 520
      if (!tagContent && omittedCloseTags[this._tag]) {                                                                // 521
        mountImage = tagOpen + '/>';                                                                                   // 522
      } else {                                                                                                         // 523
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';                              // 524
      }                                                                                                                // 525
    }                                                                                                                  // 526
                                                                                                                       // 527
    switch (this._tag) {                                                                                               // 528
      case 'input':                                                                                                    // 529
        transaction.getReactMountReady().enqueue(inputPostMount, this);                                                // 530
        if (props.autoFocus) {                                                                                         // 531
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);                            // 532
        }                                                                                                              // 533
        break;                                                                                                         // 534
      case 'textarea':                                                                                                 // 535
        transaction.getReactMountReady().enqueue(textareaPostMount, this);                                             // 536
        if (props.autoFocus) {                                                                                         // 537
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);                            // 538
        }                                                                                                              // 539
        break;                                                                                                         // 540
      case 'select':                                                                                                   // 541
        if (props.autoFocus) {                                                                                         // 542
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);                            // 543
        }                                                                                                              // 544
        break;                                                                                                         // 545
      case 'button':                                                                                                   // 546
        if (props.autoFocus) {                                                                                         // 547
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);                            // 548
        }                                                                                                              // 549
        break;                                                                                                         // 550
      case 'option':                                                                                                   // 551
        transaction.getReactMountReady().enqueue(optionPostMount, this);                                               // 552
        break;                                                                                                         // 553
    }                                                                                                                  // 554
                                                                                                                       // 555
    return mountImage;                                                                                                 // 556
  },                                                                                                                   // 557
                                                                                                                       // 558
  /**                                                                                                                  // 559
   * Creates markup for the open tag and all attributes.                                                               // 560
   *                                                                                                                   // 561
   * This method has side effects because events get registered.                                                       // 562
   *                                                                                                                   // 563
   * Iterating over object properties is faster than iterating over arrays.                                            // 564
   * @see http://jsperf.com/obj-vs-arr-iteration                                                                       // 565
   *                                                                                                                   // 566
   * @private                                                                                                          // 567
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 568
   * @param {object} props                                                                                             // 569
   * @return {string} Markup of opening tag.                                                                           // 570
   */                                                                                                                  // 571
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {                                                 // 572
    var ret = '<' + this._currentElement.type;                                                                         // 573
                                                                                                                       // 574
    for (var propKey in props) {                                                                                       // 575
      if (!props.hasOwnProperty(propKey)) {                                                                            // 576
        continue;                                                                                                      // 577
      }                                                                                                                // 578
      var propValue = props[propKey];                                                                                  // 579
      if (propValue == null) {                                                                                         // 580
        continue;                                                                                                      // 581
      }                                                                                                                // 582
      if (registrationNameModules.hasOwnProperty(propKey)) {                                                           // 583
        if (propValue) {                                                                                               // 584
          enqueuePutListener(this, propKey, propValue, transaction);                                                   // 585
        }                                                                                                              // 586
      } else {                                                                                                         // 587
        if (propKey === STYLE) {                                                                                       // 588
          if (propValue) {                                                                                             // 589
            if (process.env.NODE_ENV !== 'production') {                                                               // 590
              // See `_updateDOMProperties`. style block                                                               // 591
              this._previousStyle = propValue;                                                                         // 592
            }                                                                                                          // 593
            propValue = this._previousStyleCopy = _assign({}, props.style);                                            // 594
          }                                                                                                            // 595
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);                                    // 596
        }                                                                                                              // 597
        var markup = null;                                                                                             // 598
        if (this._tag != null && isCustomComponent(this._tag, props)) {                                                // 599
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {                                                               // 600
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);                         // 601
          }                                                                                                            // 602
        } else {                                                                                                       // 603
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);                                  // 604
        }                                                                                                              // 605
        if (markup) {                                                                                                  // 606
          ret += ' ' + markup;                                                                                         // 607
        }                                                                                                              // 608
      }                                                                                                                // 609
    }                                                                                                                  // 610
                                                                                                                       // 611
    // For static pages, no need to put React ID and checksum. Saves lots of                                           // 612
    // bytes.                                                                                                          // 613
    if (transaction.renderToStaticMarkup) {                                                                            // 614
      return ret;                                                                                                      // 615
    }                                                                                                                  // 616
                                                                                                                       // 617
    if (!this._hostParent) {                                                                                           // 618
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();                                                        // 619
    }                                                                                                                  // 620
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);                                                 // 621
    return ret;                                                                                                        // 622
  },                                                                                                                   // 623
                                                                                                                       // 624
  /**                                                                                                                  // 625
   * Creates markup for the content between the tags.                                                                  // 626
   *                                                                                                                   // 627
   * @private                                                                                                          // 628
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 629
   * @param {object} props                                                                                             // 630
   * @param {object} context                                                                                           // 631
   * @return {string} Content markup.                                                                                  // 632
   */                                                                                                                  // 633
  _createContentMarkup: function (transaction, props, context) {                                                       // 634
    var ret = '';                                                                                                      // 635
                                                                                                                       // 636
    // Intentional use of != to avoid catching zero/false.                                                             // 637
    var innerHTML = props.dangerouslySetInnerHTML;                                                                     // 638
    if (innerHTML != null) {                                                                                           // 639
      if (innerHTML.__html != null) {                                                                                  // 640
        ret = innerHTML.__html;                                                                                        // 641
      }                                                                                                                // 642
    } else {                                                                                                           // 643
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;                                 // 644
      var childrenToUse = contentToUse != null ? null : props.children;                                                // 645
      if (contentToUse != null) {                                                                                      // 646
        // TODO: Validate that text is allowed as a child of this node                                                 // 647
        ret = escapeTextContentForBrowser(contentToUse);                                                               // 648
        if (process.env.NODE_ENV !== 'production') {                                                                   // 649
          setAndValidateContentChildDev.call(this, contentToUse);                                                      // 650
        }                                                                                                              // 651
      } else if (childrenToUse != null) {                                                                              // 652
        var mountImages = this.mountChildren(childrenToUse, transaction, context);                                     // 653
        ret = mountImages.join('');                                                                                    // 654
      }                                                                                                                // 655
    }                                                                                                                  // 656
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {                                                      // 657
      // text/html ignores the first character in these tags if it's a newline                                         // 658
      // Prefer to break application/xml over text/html (for now) by adding                                            // 659
      // a newline specifically to get eaten by the parser. (Alternately for                                           // 660
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first                                       // 661
      // \r is normalized out by HTMLTextAreaElement#value.)                                                           // 662
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>                                       // 663
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>                                            // 664
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>                                                        // 665
      // See: Parsing of "textarea" "listing" and "pre" elements                                                       // 666
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>                                            // 667
      return '\n' + ret;                                                                                               // 668
    } else {                                                                                                           // 669
      return ret;                                                                                                      // 670
    }                                                                                                                  // 671
  },                                                                                                                   // 672
                                                                                                                       // 673
  _createInitialChildren: function (transaction, props, context, lazyTree) {                                           // 674
    // Intentional use of != to avoid catching zero/false.                                                             // 675
    var innerHTML = props.dangerouslySetInnerHTML;                                                                     // 676
    if (innerHTML != null) {                                                                                           // 677
      if (innerHTML.__html != null) {                                                                                  // 678
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);                                                             // 679
      }                                                                                                                // 680
    } else {                                                                                                           // 681
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;                                 // 682
      var childrenToUse = contentToUse != null ? null : props.children;                                                // 683
      // TODO: Validate that text is allowed as a child of this node                                                   // 684
      if (contentToUse != null) {                                                                                      // 685
        // Avoid setting textContent when the text is empty. In IE11 setting                                           // 686
        // textContent on a text area will cause the placeholder to not                                                // 687
        // show within the textarea until it has been focused and blurred again.                                       // 688
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553                                        // 689
        if (contentToUse !== '') {                                                                                     // 690
          if (process.env.NODE_ENV !== 'production') {                                                                 // 691
            setAndValidateContentChildDev.call(this, contentToUse);                                                    // 692
          }                                                                                                            // 693
          DOMLazyTree.queueText(lazyTree, contentToUse);                                                               // 694
        }                                                                                                              // 695
      } else if (childrenToUse != null) {                                                                              // 696
        var mountImages = this.mountChildren(childrenToUse, transaction, context);                                     // 697
        for (var i = 0; i < mountImages.length; i++) {                                                                 // 698
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);                                                            // 699
        }                                                                                                              // 700
      }                                                                                                                // 701
    }                                                                                                                  // 702
  },                                                                                                                   // 703
                                                                                                                       // 704
  /**                                                                                                                  // 705
   * Receives a next element and updates the component.                                                                // 706
   *                                                                                                                   // 707
   * @internal                                                                                                         // 708
   * @param {ReactElement} nextElement                                                                                 // 709
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 710
   * @param {object} context                                                                                           // 711
   */                                                                                                                  // 712
  receiveComponent: function (nextElement, transaction, context) {                                                     // 713
    var prevElement = this._currentElement;                                                                            // 714
    this._currentElement = nextElement;                                                                                // 715
    this.updateComponent(transaction, prevElement, nextElement, context);                                              // 716
  },                                                                                                                   // 717
                                                                                                                       // 718
  /**                                                                                                                  // 719
   * Updates a DOM component after it has already been allocated and                                                   // 720
   * attached to the DOM. Reconciles the root DOM node, then recurses.                                                 // 721
   *                                                                                                                   // 722
   * @param {ReactReconcileTransaction} transaction                                                                    // 723
   * @param {ReactElement} prevElement                                                                                 // 724
   * @param {ReactElement} nextElement                                                                                 // 725
   * @internal                                                                                                         // 726
   * @overridable                                                                                                      // 727
   */                                                                                                                  // 728
  updateComponent: function (transaction, prevElement, nextElement, context) {                                         // 729
    var lastProps = prevElement.props;                                                                                 // 730
    var nextProps = this._currentElement.props;                                                                        // 731
                                                                                                                       // 732
    switch (this._tag) {                                                                                               // 733
      case 'input':                                                                                                    // 734
        lastProps = ReactDOMInput.getHostProps(this, lastProps);                                                       // 735
        nextProps = ReactDOMInput.getHostProps(this, nextProps);                                                       // 736
        break;                                                                                                         // 737
      case 'option':                                                                                                   // 738
        lastProps = ReactDOMOption.getHostProps(this, lastProps);                                                      // 739
        nextProps = ReactDOMOption.getHostProps(this, nextProps);                                                      // 740
        break;                                                                                                         // 741
      case 'select':                                                                                                   // 742
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);                                                      // 743
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);                                                      // 744
        break;                                                                                                         // 745
      case 'textarea':                                                                                                 // 746
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);                                                    // 747
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);                                                    // 748
        break;                                                                                                         // 749
    }                                                                                                                  // 750
                                                                                                                       // 751
    assertValidProps(this, nextProps);                                                                                 // 752
    this._updateDOMProperties(lastProps, nextProps, transaction);                                                      // 753
    this._updateDOMChildren(lastProps, nextProps, transaction, context);                                               // 754
                                                                                                                       // 755
    switch (this._tag) {                                                                                               // 756
      case 'input':                                                                                                    // 757
        // Update the wrapper around inputs *after* updating props. This has to                                        // 758
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations                                      // 759
        // raise warnings and prevent the new value from being assigned.                                               // 760
        ReactDOMInput.updateWrapper(this);                                                                             // 761
        break;                                                                                                         // 762
      case 'textarea':                                                                                                 // 763
        ReactDOMTextarea.updateWrapper(this);                                                                          // 764
        break;                                                                                                         // 765
      case 'select':                                                                                                   // 766
        // <select> value update needs to occur after <option> children                                                // 767
        // reconciliation                                                                                              // 768
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);                                       // 769
        break;                                                                                                         // 770
    }                                                                                                                  // 771
  },                                                                                                                   // 772
                                                                                                                       // 773
  /**                                                                                                                  // 774
   * Reconciles the properties by detecting differences in property values and                                         // 775
   * updating the DOM as necessary. This function is probably the single most                                          // 776
   * critical path for performance optimization.                                                                       // 777
   *                                                                                                                   // 778
   * TODO: Benchmark whether checking for changed values in memory actually                                            // 779
   *       improves performance (especially statically positioned elements).                                           // 780
   * TODO: Benchmark the effects of putting this at the top since 99% of props                                         // 781
   *       do not change for a given reconciliation.                                                                   // 782
   * TODO: Benchmark areas that can be improved with caching.                                                          // 783
   *                                                                                                                   // 784
   * @private                                                                                                          // 785
   * @param {object} lastProps                                                                                         // 786
   * @param {object} nextProps                                                                                         // 787
   * @param {?DOMElement} node                                                                                         // 788
   */                                                                                                                  // 789
  _updateDOMProperties: function (lastProps, nextProps, transaction) {                                                 // 790
    var propKey;                                                                                                       // 791
    var styleName;                                                                                                     // 792
    var styleUpdates;                                                                                                  // 793
    for (propKey in lastProps) {                                                                                       // 794
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {     // 795
        continue;                                                                                                      // 796
      }                                                                                                                // 797
      if (propKey === STYLE) {                                                                                         // 798
        var lastStyle = this._previousStyleCopy;                                                                       // 799
        for (styleName in lastStyle) {                                                                                 // 800
          if (lastStyle.hasOwnProperty(styleName)) {                                                                   // 801
            styleUpdates = styleUpdates || {};                                                                         // 802
            styleUpdates[styleName] = '';                                                                              // 803
          }                                                                                                            // 804
        }                                                                                                              // 805
        this._previousStyleCopy = null;                                                                                // 806
      } else if (registrationNameModules.hasOwnProperty(propKey)) {                                                    // 807
        if (lastProps[propKey]) {                                                                                      // 808
          // Only call deleteListener if there was a listener previously or                                            // 809
          // else willDeleteListener gets called when there wasn't actually a                                          // 810
          // listener (e.g., onClick={null})                                                                           // 811
          deleteListener(this, propKey);                                                                               // 812
        }                                                                                                              // 813
      } else if (isCustomComponent(this._tag, lastProps)) {                                                            // 814
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {                                                                 // 815
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);                                       // 816
        }                                                                                                              // 817
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {                          // 818
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);                                          // 819
      }                                                                                                                // 820
    }                                                                                                                  // 821
    for (propKey in nextProps) {                                                                                       // 822
      var nextProp = nextProps[propKey];                                                                               // 823
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {       // 825
        continue;                                                                                                      // 826
      }                                                                                                                // 827
      if (propKey === STYLE) {                                                                                         // 828
        if (nextProp) {                                                                                                // 829
          if (process.env.NODE_ENV !== 'production') {                                                                 // 830
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);                           // 831
            this._previousStyle = nextProp;                                                                            // 832
          }                                                                                                            // 833
          nextProp = this._previousStyleCopy = _assign({}, nextProp);                                                  // 834
        } else {                                                                                                       // 835
          this._previousStyleCopy = null;                                                                              // 836
        }                                                                                                              // 837
        if (lastProp) {                                                                                                // 838
          // Unset styles on `lastProp` but not on `nextProp`.                                                         // 839
          for (styleName in lastProp) {                                                                                // 840
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {            // 841
              styleUpdates = styleUpdates || {};                                                                       // 842
              styleUpdates[styleName] = '';                                                                            // 843
            }                                                                                                          // 844
          }                                                                                                            // 845
          // Update styles that changed since `lastProp`.                                                              // 846
          for (styleName in nextProp) {                                                                                // 847
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {                   // 848
              styleUpdates = styleUpdates || {};                                                                       // 849
              styleUpdates[styleName] = nextProp[styleName];                                                           // 850
            }                                                                                                          // 851
          }                                                                                                            // 852
        } else {                                                                                                       // 853
          // Relies on `updateStylesByID` not mutating `styleUpdates`.                                                 // 854
          styleUpdates = nextProp;                                                                                     // 855
        }                                                                                                              // 856
      } else if (registrationNameModules.hasOwnProperty(propKey)) {                                                    // 857
        if (nextProp) {                                                                                                // 858
          enqueuePutListener(this, propKey, nextProp, transaction);                                                    // 859
        } else if (lastProp) {                                                                                         // 860
          deleteListener(this, propKey);                                                                               // 861
        }                                                                                                              // 862
      } else if (isCustomComponent(this._tag, nextProps)) {                                                            // 863
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {                                                                 // 864
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);                                // 865
        }                                                                                                              // 866
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {                          // 867
        var node = getNode(this);                                                                                      // 868
        // If we're updating to null or undefined, we should remove the property                                       // 869
        // from the DOM node instead of inadvertently setting to a string. This                                        // 870
        // brings us in line with the same behavior we have on initial render.                                         // 871
        if (nextProp != null) {                                                                                        // 872
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);                                          // 873
        } else {                                                                                                       // 874
          DOMPropertyOperations.deleteValueForProperty(node, propKey);                                                 // 875
        }                                                                                                              // 876
      }                                                                                                                // 877
    }                                                                                                                  // 878
    if (styleUpdates) {                                                                                                // 879
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);                                      // 880
    }                                                                                                                  // 881
  },                                                                                                                   // 882
                                                                                                                       // 883
  /**                                                                                                                  // 884
   * Reconciles the children with the various properties that affect the                                               // 885
   * children content.                                                                                                 // 886
   *                                                                                                                   // 887
   * @param {object} lastProps                                                                                         // 888
   * @param {object} nextProps                                                                                         // 889
   * @param {ReactReconcileTransaction} transaction                                                                    // 890
   * @param {object} context                                                                                           // 891
   */                                                                                                                  // 892
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {                                          // 893
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;                            // 894
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;                            // 895
                                                                                                                       // 896
    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;                      // 897
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;                      // 898
                                                                                                                       // 899
    // Note the use of `!=` which checks for null or undefined.                                                        // 900
    var lastChildren = lastContent != null ? null : lastProps.children;                                                // 901
    var nextChildren = nextContent != null ? null : nextProps.children;                                                // 902
                                                                                                                       // 903
    // If we're switching from children to content/html or vice versa, remove                                          // 904
    // the old content                                                                                                 // 905
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;                                                // 906
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;                                                // 907
    if (lastChildren != null && nextChildren == null) {                                                                // 908
      this.updateChildren(null, transaction, context);                                                                 // 909
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {                                                        // 910
      this.updateTextContent('');                                                                                      // 911
      if (process.env.NODE_ENV !== 'production') {                                                                     // 912
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);                                               // 913
      }                                                                                                                // 914
    }                                                                                                                  // 915
                                                                                                                       // 916
    if (nextContent != null) {                                                                                         // 917
      if (lastContent !== nextContent) {                                                                               // 918
        this.updateTextContent('' + nextContent);                                                                      // 919
        if (process.env.NODE_ENV !== 'production') {                                                                   // 920
          setAndValidateContentChildDev.call(this, nextContent);                                                       // 921
        }                                                                                                              // 922
      }                                                                                                                // 923
    } else if (nextHtml != null) {                                                                                     // 924
      if (lastHtml !== nextHtml) {                                                                                     // 925
        this.updateMarkup('' + nextHtml);                                                                              // 926
      }                                                                                                                // 927
      if (process.env.NODE_ENV !== 'production') {                                                                     // 928
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);                                               // 929
      }                                                                                                                // 930
    } else if (nextChildren != null) {                                                                                 // 931
      if (process.env.NODE_ENV !== 'production') {                                                                     // 932
        setAndValidateContentChildDev.call(this, null);                                                                // 933
      }                                                                                                                // 934
                                                                                                                       // 935
      this.updateChildren(nextChildren, transaction, context);                                                         // 936
    }                                                                                                                  // 937
  },                                                                                                                   // 938
                                                                                                                       // 939
  getHostNode: function () {                                                                                           // 940
    return getNode(this);                                                                                              // 941
  },                                                                                                                   // 942
                                                                                                                       // 943
  /**                                                                                                                  // 944
   * Destroys all event registrations for this instance. Does not remove from                                          // 945
   * the DOM. That must be done by the parent.                                                                         // 946
   *                                                                                                                   // 947
   * @internal                                                                                                         // 948
   */                                                                                                                  // 949
  unmountComponent: function (safely) {                                                                                // 950
    switch (this._tag) {                                                                                               // 951
      case 'audio':                                                                                                    // 952
      case 'form':                                                                                                     // 953
      case 'iframe':                                                                                                   // 954
      case 'img':                                                                                                      // 955
      case 'link':                                                                                                     // 956
      case 'object':                                                                                                   // 957
      case 'source':                                                                                                   // 958
      case 'video':                                                                                                    // 959
        var listeners = this._wrapperState.listeners;                                                                  // 960
        if (listeners) {                                                                                               // 961
          for (var i = 0; i < listeners.length; i++) {                                                                 // 962
            listeners[i].remove();                                                                                     // 963
          }                                                                                                            // 964
        }                                                                                                              // 965
        break;                                                                                                         // 966
      case 'html':                                                                                                     // 967
      case 'head':                                                                                                     // 968
      case 'body':                                                                                                     // 969
        /**                                                                                                            // 970
         * Components like <html> <head> and <body> can't be removed or added                                          // 971
         * easily in a cross-browser way, however it's valuable to be able to                                          // 972
         * take advantage of React's reconciliation for styling and <title>                                            // 973
         * management. So we just document it and throw in dangerous cases.                                            // 974
         */                                                                                                            // 975
        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;                                                                                                         // 977
    }                                                                                                                  // 978
                                                                                                                       // 979
    this.unmountChildren(safely);                                                                                      // 980
    ReactDOMComponentTree.uncacheNode(this);                                                                           // 981
    EventPluginHub.deleteAllListeners(this);                                                                           // 982
    this._rootNodeID = 0;                                                                                              // 983
    this._domID = 0;                                                                                                   // 984
    this._wrapperState = null;                                                                                         // 985
                                                                                                                       // 986
    if (process.env.NODE_ENV !== 'production') {                                                                       // 987
      setAndValidateContentChildDev.call(this, null);                                                                  // 988
    }                                                                                                                  // 989
  },                                                                                                                   // 990
                                                                                                                       // 991
  getPublicInstance: function () {                                                                                     // 992
    return getNode(this);                                                                                              // 993
  }                                                                                                                    // 994
                                                                                                                       // 995
};                                                                                                                     // 996
                                                                                                                       // 997
_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);                                  // 998
                                                                                                                       // 999
module.exports = ReactDOMComponent;                                                                                    // 1000
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"AutoFocusUtils.js":["./ReactDOMComponentTree","fbjs/lib/focusNode",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/AutoFocusUtils.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 13
                                                                                                                       // 14
var focusNode = require('fbjs/lib/focusNode');                                                                         // 15
                                                                                                                       // 16
var AutoFocusUtils = {                                                                                                 // 17
  focusDOMComponent: function () {                                                                                     // 18
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));                                                        // 19
  }                                                                                                                    // 20
};                                                                                                                     // 21
                                                                                                                       // 22
module.exports = AutoFocusUtils;                                                                                       // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"CSSPropertyOperations.js":["./CSSProperty","fbjs/lib/ExecutionEnvironment","./ReactInstrumentation","fbjs/lib/camelizeStyleName","./dangerousStyleValue","fbjs/lib/hyphenateStyleName","fbjs/lib/memoizeStringOnly","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/CSSPropertyOperations.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var CSSProperty = require('./CSSProperty');                                                                            // 13
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14
var ReactInstrumentation = require('./ReactInstrumentation');                                                          // 15
                                                                                                                       // 16
var camelizeStyleName = require('fbjs/lib/camelizeStyleName');                                                         // 17
var dangerousStyleValue = require('./dangerousStyleValue');                                                            // 18
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');                                                       // 19
var memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');                                                         // 20
var warning = require('fbjs/lib/warning');                                                                             // 21
                                                                                                                       // 22
var processStyleName = memoizeStringOnly(function (styleName) {                                                        // 23
  return hyphenateStyleName(styleName);                                                                                // 24
});                                                                                                                    // 25
                                                                                                                       // 26
var hasShorthandPropertyBug = false;                                                                                   // 27
var styleFloatAccessor = 'cssFloat';                                                                                   // 28
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 29
  var tempStyle = document.createElement('div').style;                                                                 // 30
  try {                                                                                                                // 31
    // IE8 throws "Invalid argument." if resetting shorthand style properties.                                         // 32
    tempStyle.font = '';                                                                                               // 33
  } catch (e) {                                                                                                        // 34
    hasShorthandPropertyBug = true;                                                                                    // 35
  }                                                                                                                    // 36
  // IE8 only supports accessing cssFloat (standard) as styleFloat                                                     // 37
  if (document.documentElement.style.cssFloat === undefined) {                                                         // 38
    styleFloatAccessor = 'styleFloat';                                                                                 // 39
  }                                                                                                                    // 40
}                                                                                                                      // 41
                                                                                                                       // 42
if (process.env.NODE_ENV !== 'production') {                                                                           // 43
  // 'msTransform' is correct, but the other prefixes should be capitalized                                            // 44
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;                                                          // 45
                                                                                                                       // 46
  // style values shouldn't contain a semicolon                                                                        // 47
  var badStyleValueWithSemicolonPattern = /;\s*$/;                                                                     // 48
                                                                                                                       // 49
  var warnedStyleNames = {};                                                                                           // 50
  var warnedStyleValues = {};                                                                                          // 51
  var warnedForNaNValue = false;                                                                                       // 52
                                                                                                                       // 53
  var warnHyphenatedStyleName = function (name, owner) {                                                               // 54
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {                                             // 55
      return;                                                                                                          // 56
    }                                                                                                                  // 57
                                                                                                                       // 58
    warnedStyleNames[name] = true;                                                                                     // 59
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };                                                                                                                   // 61
                                                                                                                       // 62
  var warnBadVendoredStyleName = function (name, owner) {                                                              // 63
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {                                             // 64
      return;                                                                                                          // 65
    }                                                                                                                  // 66
                                                                                                                       // 67
    warnedStyleNames[name] = true;                                                                                     // 68
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };                                                                                                                   // 70
                                                                                                                       // 71
  var warnStyleValueWithSemicolon = function (name, value, owner) {                                                    // 72
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {                                         // 73
      return;                                                                                                          // 74
    }                                                                                                                  // 75
                                                                                                                       // 76
    warnedStyleValues[value] = true;                                                                                   // 77
    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };                                                                                                                   // 79
                                                                                                                       // 80
  var warnStyleValueIsNaN = function (name, value, owner) {                                                            // 81
    if (warnedForNaNValue) {                                                                                           // 82
      return;                                                                                                          // 83
    }                                                                                                                  // 84
                                                                                                                       // 85
    warnedForNaNValue = true;                                                                                          // 86
    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };                                                                                                                   // 88
                                                                                                                       // 89
  var checkRenderMessage = function (owner) {                                                                          // 90
    if (owner) {                                                                                                       // 91
      var name = owner.getName();                                                                                      // 92
      if (name) {                                                                                                      // 93
        return ' Check the render method of `' + name + '`.';                                                          // 94
      }                                                                                                                // 95
    }                                                                                                                  // 96
    return '';                                                                                                         // 97
  };                                                                                                                   // 98
                                                                                                                       // 99
  /**                                                                                                                  // 100
   * @param {string} name                                                                                              // 101
   * @param {*} value                                                                                                  // 102
   * @param {ReactDOMComponent} component                                                                              // 103
   */                                                                                                                  // 104
  var warnValidStyle = function (name, value, component) {                                                             // 105
    var owner;                                                                                                         // 106
    if (component) {                                                                                                   // 107
      owner = component._currentElement._owner;                                                                        // 108
    }                                                                                                                  // 109
    if (name.indexOf('-') > -1) {                                                                                      // 110
      warnHyphenatedStyleName(name, owner);                                                                            // 111
    } else if (badVendoredStyleNamePattern.test(name)) {                                                               // 112
      warnBadVendoredStyleName(name, owner);                                                                           // 113
    } else if (badStyleValueWithSemicolonPattern.test(value)) {                                                        // 114
      warnStyleValueWithSemicolon(name, value, owner);                                                                 // 115
    }                                                                                                                  // 116
                                                                                                                       // 117
    if (typeof value === 'number' && isNaN(value)) {                                                                   // 118
      warnStyleValueIsNaN(name, value, owner);                                                                         // 119
    }                                                                                                                  // 120
  };                                                                                                                   // 121
}                                                                                                                      // 122
                                                                                                                       // 123
/**                                                                                                                    // 124
 * Operations for dealing with CSS properties.                                                                         // 125
 */                                                                                                                    // 126
var CSSPropertyOperations = {                                                                                          // 127
                                                                                                                       // 128
  /**                                                                                                                  // 129
   * Serializes a mapping of style properties for use as inline styles:                                                // 130
   *                                                                                                                   // 131
   *   > createMarkupForStyles({width: '200px', height: 0})                                                            // 132
   *   "width:200px;height:0;"                                                                                         // 133
   *                                                                                                                   // 134
   * Undefined values are ignored so that declarative programming is easier.                                           // 135
   * The result should be HTML-escaped before insertion into the DOM.                                                  // 136
   *                                                                                                                   // 137
   * @param {object} styles                                                                                            // 138
   * @param {ReactDOMComponent} component                                                                              // 139
   * @return {?string}                                                                                                 // 140
   */                                                                                                                  // 141
  createMarkupForStyles: function (styles, component) {                                                                // 142
    var serialized = '';                                                                                               // 143
    for (var styleName in styles) {                                                                                    // 144
      if (!styles.hasOwnProperty(styleName)) {                                                                         // 145
        continue;                                                                                                      // 146
      }                                                                                                                // 147
      var styleValue = styles[styleName];                                                                              // 148
      if (process.env.NODE_ENV !== 'production') {                                                                     // 149
        warnValidStyle(styleName, styleValue, component);                                                              // 150
      }                                                                                                                // 151
      if (styleValue != null) {                                                                                        // 152
        serialized += processStyleName(styleName) + ':';                                                               // 153
        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';                                     // 154
      }                                                                                                                // 155
    }                                                                                                                  // 156
    return serialized || null;                                                                                         // 157
  },                                                                                                                   // 158
                                                                                                                       // 159
  /**                                                                                                                  // 160
   * Sets the value for multiple styles on a node.  If a value is specified as                                         // 161
   * '' (empty string), the corresponding style property will be unset.                                                // 162
   *                                                                                                                   // 163
   * @param {DOMElement} node                                                                                          // 164
   * @param {object} styles                                                                                            // 165
   * @param {ReactDOMComponent} component                                                                              // 166
   */                                                                                                                  // 167
  setValueForStyles: function (node, styles, component) {                                                              // 168
    if (process.env.NODE_ENV !== 'production') {                                                                       // 169
      ReactInstrumentation.debugTool.onHostOperation({                                                                 // 170
        instanceID: component._debugID,                                                                                // 171
        type: 'update styles',                                                                                         // 172
        payload: styles                                                                                                // 173
      });                                                                                                              // 174
    }                                                                                                                  // 175
                                                                                                                       // 176
    var style = node.style;                                                                                            // 177
    for (var styleName in styles) {                                                                                    // 178
      if (!styles.hasOwnProperty(styleName)) {                                                                         // 179
        continue;                                                                                                      // 180
      }                                                                                                                // 181
      if (process.env.NODE_ENV !== 'production') {                                                                     // 182
        warnValidStyle(styleName, styles[styleName], component);                                                       // 183
      }                                                                                                                // 184
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);                                   // 185
      if (styleName === 'float' || styleName === 'cssFloat') {                                                         // 186
        styleName = styleFloatAccessor;                                                                                // 187
      }                                                                                                                // 188
      if (styleValue) {                                                                                                // 189
        style[styleName] = styleValue;                                                                                 // 190
      } else {                                                                                                         // 191
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];                 // 192
        if (expansion) {                                                                                               // 193
          // Shorthand property that IE8 won't like unsetting, so unset each                                           // 194
          // component to placate it                                                                                   // 195
          for (var individualStyleName in expansion) {                                                                 // 196
            style[individualStyleName] = '';                                                                           // 197
          }                                                                                                            // 198
        } else {                                                                                                       // 199
          style[styleName] = '';                                                                                       // 200
        }                                                                                                              // 201
      }                                                                                                                // 202
    }                                                                                                                  // 203
  }                                                                                                                    // 204
                                                                                                                       // 205
};                                                                                                                     // 206
                                                                                                                       // 207
module.exports = CSSPropertyOperations;                                                                                // 208
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"CSSProperty.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/CSSProperty.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * CSS properties which accept numbers but are not in units of "px".                                                   // 14
 */                                                                                                                    // 15
                                                                                                                       // 16
var isUnitlessNumber = {                                                                                               // 17
  animationIterationCount: true,                                                                                       // 18
  borderImageOutset: true,                                                                                             // 19
  borderImageSlice: true,                                                                                              // 20
  borderImageWidth: true,                                                                                              // 21
  boxFlex: true,                                                                                                       // 22
  boxFlexGroup: true,                                                                                                  // 23
  boxOrdinalGroup: true,                                                                                               // 24
  columnCount: true,                                                                                                   // 25
  flex: true,                                                                                                          // 26
  flexGrow: true,                                                                                                      // 27
  flexPositive: true,                                                                                                  // 28
  flexShrink: true,                                                                                                    // 29
  flexNegative: true,                                                                                                  // 30
  flexOrder: true,                                                                                                     // 31
  gridRow: true,                                                                                                       // 32
  gridColumn: true,                                                                                                    // 33
  fontWeight: true,                                                                                                    // 34
  lineClamp: true,                                                                                                     // 35
  lineHeight: true,                                                                                                    // 36
  opacity: true,                                                                                                       // 37
  order: true,                                                                                                         // 38
  orphans: true,                                                                                                       // 39
  tabSize: true,                                                                                                       // 40
  widows: true,                                                                                                        // 41
  zIndex: true,                                                                                                        // 42
  zoom: true,                                                                                                          // 43
                                                                                                                       // 44
  // SVG-related properties                                                                                            // 45
  fillOpacity: true,                                                                                                   // 46
  floodOpacity: true,                                                                                                  // 47
  stopOpacity: true,                                                                                                   // 48
  strokeDasharray: true,                                                                                               // 49
  strokeDashoffset: true,                                                                                              // 50
  strokeMiterlimit: true,                                                                                              // 51
  strokeOpacity: true,                                                                                                 // 52
  strokeWidth: true                                                                                                    // 53
};                                                                                                                     // 54
                                                                                                                       // 55
/**                                                                                                                    // 56
 * @param {string} prefix vendor-specific prefix, eg: Webkit                                                           // 57
 * @param {string} key style name, eg: transitionDuration                                                              // 58
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:                                        // 59
 * WebkitTransitionDuration                                                                                            // 60
 */                                                                                                                    // 61
function prefixKey(prefix, key) {                                                                                      // 62
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);                                                      // 63
}                                                                                                                      // 64
                                                                                                                       // 65
/**                                                                                                                    // 66
 * Support style names that may come passed in prefixed by adding permutations                                         // 67
 * of vendor prefixes.                                                                                                 // 68
 */                                                                                                                    // 69
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];                                                                           // 70
                                                                                                                       // 71
// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an                                        // 72
// infinite loop, because it iterates over the newly added props too.                                                  // 73
Object.keys(isUnitlessNumber).forEach(function (prop) {                                                                // 74
  prefixes.forEach(function (prefix) {                                                                                 // 75
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];                                                // 76
  });                                                                                                                  // 77
});                                                                                                                    // 78
                                                                                                                       // 79
/**                                                                                                                    // 80
 * Most style properties can be unset by doing .style[prop] = '' but IE8                                               // 81
 * doesn't like doing that with shorthand properties so for the properties that                                        // 82
 * IE8 breaks on, which are listed here, we instead unset each of the                                                  // 83
 * individual properties. See http://bugs.jquery.com/ticket/12385.                                                     // 84
 * The 4-value 'clock' properties like margin, padding, border-width seem to                                           // 85
 * behave without any problems. Curiously, list-style works too without any                                            // 86
 * special prodding.                                                                                                   // 87
 */                                                                                                                    // 88
var shorthandPropertyExpansions = {                                                                                    // 89
  background: {                                                                                                        // 90
    backgroundAttachment: true,                                                                                        // 91
    backgroundColor: true,                                                                                             // 92
    backgroundImage: true,                                                                                             // 93
    backgroundPositionX: true,                                                                                         // 94
    backgroundPositionY: true,                                                                                         // 95
    backgroundRepeat: true                                                                                             // 96
  },                                                                                                                   // 97
  backgroundPosition: {                                                                                                // 98
    backgroundPositionX: true,                                                                                         // 99
    backgroundPositionY: true                                                                                          // 100
  },                                                                                                                   // 101
  border: {                                                                                                            // 102
    borderWidth: true,                                                                                                 // 103
    borderStyle: true,                                                                                                 // 104
    borderColor: true                                                                                                  // 105
  },                                                                                                                   // 106
  borderBottom: {                                                                                                      // 107
    borderBottomWidth: true,                                                                                           // 108
    borderBottomStyle: true,                                                                                           // 109
    borderBottomColor: true                                                                                            // 110
  },                                                                                                                   // 111
  borderLeft: {                                                                                                        // 112
    borderLeftWidth: true,                                                                                             // 113
    borderLeftStyle: true,                                                                                             // 114
    borderLeftColor: true                                                                                              // 115
  },                                                                                                                   // 116
  borderRight: {                                                                                                       // 117
    borderRightWidth: true,                                                                                            // 118
    borderRightStyle: true,                                                                                            // 119
    borderRightColor: true                                                                                             // 120
  },                                                                                                                   // 121
  borderTop: {                                                                                                         // 122
    borderTopWidth: true,                                                                                              // 123
    borderTopStyle: true,                                                                                              // 124
    borderTopColor: true                                                                                               // 125
  },                                                                                                                   // 126
  font: {                                                                                                              // 127
    fontStyle: true,                                                                                                   // 128
    fontVariant: true,                                                                                                 // 129
    fontWeight: true,                                                                                                  // 130
    fontSize: true,                                                                                                    // 131
    lineHeight: true,                                                                                                  // 132
    fontFamily: true                                                                                                   // 133
  },                                                                                                                   // 134
  outline: {                                                                                                           // 135
    outlineWidth: true,                                                                                                // 136
    outlineStyle: true,                                                                                                // 137
    outlineColor: true                                                                                                 // 138
  }                                                                                                                    // 139
};                                                                                                                     // 140
                                                                                                                       // 141
var CSSProperty = {                                                                                                    // 142
  isUnitlessNumber: isUnitlessNumber,                                                                                  // 143
  shorthandPropertyExpansions: shorthandPropertyExpansions                                                             // 144
};                                                                                                                     // 145
                                                                                                                       // 146
module.exports = CSSProperty;                                                                                          // 147
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"dangerousStyleValue.js":["./CSSProperty","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/dangerousStyleValue.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var CSSProperty = require('./CSSProperty');                                                                            // 13
var warning = require('fbjs/lib/warning');                                                                             // 14
                                                                                                                       // 15
var isUnitlessNumber = CSSProperty.isUnitlessNumber;                                                                   // 16
var styleWarnings = {};                                                                                                // 17
                                                                                                                       // 18
/**                                                                                                                    // 19
 * Convert a value into the proper css writable value. The style name `name`                                           // 20
 * should be logical (no hyphens), as specified                                                                        // 21
 * in `CSSProperty.isUnitlessNumber`.                                                                                  // 22
 *                                                                                                                     // 23
 * @param {string} name CSS property name such as `topMargin`.                                                         // 24
 * @param {*} value CSS property value such as `10px`.                                                                 // 25
 * @param {ReactDOMComponent} component                                                                                // 26
 * @return {string} Normalized style value with dimensions applied.                                                    // 27
 */                                                                                                                    // 28
function dangerousStyleValue(name, value, component) {                                                                 // 29
  // Note that we've removed escapeTextForBrowser() calls here since the                                               // 30
  // whole string will be escaped when the attribute is injected into                                                  // 31
  // the markup. If you provide unsafe user data here they can inject                                                  // 32
  // arbitrary CSS which may be problematic (I couldn't repro this):                                                   // 33
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet                                                    // 34
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/                                                // 35
  // This is not an XSS hole but instead a potential CSS injection issue                                               // 36
  // which has lead to a greater discussion about how we're going to                                                   // 37
  // trust URLs moving forward. See #2115901                                                                           // 38
                                                                                                                       // 39
  var isEmpty = value == null || typeof value === 'boolean' || value === '';                                           // 40
  if (isEmpty) {                                                                                                       // 41
    return '';                                                                                                         // 42
  }                                                                                                                    // 43
                                                                                                                       // 44
  var isNonNumeric = isNaN(value);                                                                                     // 45
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {                // 46
    return '' + value; // cast to string                                                                               // 47
  }                                                                                                                    // 48
                                                                                                                       // 49
  if (typeof value === 'string') {                                                                                     // 50
    if (process.env.NODE_ENV !== 'production') {                                                                       // 51
      // Allow '0' to pass through without warning. 0 is already special and                                           // 52
      // doesn't require units, so we don't need to warn about it.                                                     // 53
      if (component && value !== '0') {                                                                                // 54
        var owner = component._currentElement._owner;                                                                  // 55
        var ownerName = owner ? owner.getName() : null;                                                                // 56
        if (ownerName && !styleWarnings[ownerName]) {                                                                  // 57
          styleWarnings[ownerName] = {};                                                                               // 58
        }                                                                                                              // 59
        var warned = false;                                                                                            // 60
        if (ownerName) {                                                                                               // 61
          var warnings = styleWarnings[ownerName];                                                                     // 62
          warned = warnings[name];                                                                                     // 63
          if (!warned) {                                                                                               // 64
            warnings[name] = true;                                                                                     // 65
          }                                                                                                            // 66
        }                                                                                                              // 67
        if (!warned) {                                                                                                 // 68
          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }                                                                                                              // 70
      }                                                                                                                // 71
    }                                                                                                                  // 72
    value = value.trim();                                                                                              // 73
  }                                                                                                                    // 74
  return value + 'px';                                                                                                 // 75
}                                                                                                                      // 76
                                                                                                                       // 77
module.exports = dangerousStyleValue;                                                                                  // 78
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"DOMPropertyOperations.js":["./DOMProperty","./ReactDOMComponentTree","./ReactInstrumentation","./quoteAttributeValueForBrowser","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/DOMPropertyOperations.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var DOMProperty = require('./DOMProperty');                                                                            // 13
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 14
var ReactInstrumentation = require('./ReactInstrumentation');                                                          // 15
                                                                                                                       // 16
var quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');                                        // 17
var warning = require('fbjs/lib/warning');                                                                             // 18
                                                                                                                       // 19
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};                                                                                    // 21
var validatedAttributeNameCache = {};                                                                                  // 22
                                                                                                                       // 23
function isAttributeNameSafe(attributeName) {                                                                          // 24
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {                                                     // 25
    return true;                                                                                                       // 26
  }                                                                                                                    // 27
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {                                                       // 28
    return false;                                                                                                      // 29
  }                                                                                                                    // 30
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {                                                                // 31
    validatedAttributeNameCache[attributeName] = true;                                                                 // 32
    return true;                                                                                                       // 33
  }                                                                                                                    // 34
  illegalAttributeNameCache[attributeName] = true;                                                                     // 35
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;      // 36
  return false;                                                                                                        // 37
}                                                                                                                      // 38
                                                                                                                       // 39
function shouldIgnoreValue(propertyInfo, value) {                                                                      // 40
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}                                                                                                                      // 42
                                                                                                                       // 43
/**                                                                                                                    // 44
 * Operations for dealing with DOM properties.                                                                         // 45
 */                                                                                                                    // 46
var DOMPropertyOperations = {                                                                                          // 47
                                                                                                                       // 48
  /**                                                                                                                  // 49
   * Creates markup for the ID property.                                                                               // 50
   *                                                                                                                   // 51
   * @param {string} id Unescaped ID.                                                                                  // 52
   * @return {string} Markup string.                                                                                   // 53
   */                                                                                                                  // 54
  createMarkupForID: function (id) {                                                                                   // 55
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);                                    // 56
  },                                                                                                                   // 57
                                                                                                                       // 58
  setAttributeForID: function (node, id) {                                                                             // 59
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);                                                              // 60
  },                                                                                                                   // 61
                                                                                                                       // 62
  createMarkupForRoot: function () {                                                                                   // 63
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';                                                                    // 64
  },                                                                                                                   // 65
                                                                                                                       // 66
  setAttributeForRoot: function (node) {                                                                               // 67
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');                                                            // 68
  },                                                                                                                   // 69
                                                                                                                       // 70
  /**                                                                                                                  // 71
   * Creates markup for a property.                                                                                    // 72
   *                                                                                                                   // 73
   * @param {string} name                                                                                              // 74
   * @param {*} value                                                                                                  // 75
   * @return {?string} Markup string, or null if the property was invalid.                                             // 76
   */                                                                                                                  // 77
  createMarkupForProperty: function (name, value) {                                                                    // 78
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;              // 79
    if (propertyInfo) {                                                                                                // 80
      if (shouldIgnoreValue(propertyInfo, value)) {                                                                    // 81
        return '';                                                                                                     // 82
      }                                                                                                                // 83
      var attributeName = propertyInfo.attributeName;                                                                  // 84
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {                  // 85
        return attributeName + '=""';                                                                                  // 86
      }                                                                                                                // 87
      return attributeName + '=' + quoteAttributeValueForBrowser(value);                                               // 88
    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 89
      if (value == null) {                                                                                             // 90
        return '';                                                                                                     // 91
      }                                                                                                                // 92
      return name + '=' + quoteAttributeValueForBrowser(value);                                                        // 93
    }                                                                                                                  // 94
    return null;                                                                                                       // 95
  },                                                                                                                   // 96
                                                                                                                       // 97
  /**                                                                                                                  // 98
   * Creates markup for a custom property.                                                                             // 99
   *                                                                                                                   // 100
   * @param {string} name                                                                                              // 101
   * @param {*} value                                                                                                  // 102
   * @return {string} Markup string, or empty string if the property was invalid.                                      // 103
   */                                                                                                                  // 104
  createMarkupForCustomAttribute: function (name, value) {                                                             // 105
    if (!isAttributeNameSafe(name) || value == null) {                                                                 // 106
      return '';                                                                                                       // 107
    }                                                                                                                  // 108
    return name + '=' + quoteAttributeValueForBrowser(value);                                                          // 109
  },                                                                                                                   // 110
                                                                                                                       // 111
  /**                                                                                                                  // 112
   * Sets the value for a property on a node.                                                                          // 113
   *                                                                                                                   // 114
   * @param {DOMElement} node                                                                                          // 115
   * @param {string} name                                                                                              // 116
   * @param {*} value                                                                                                  // 117
   */                                                                                                                  // 118
  setValueForProperty: function (node, name, value) {                                                                  // 119
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;              // 120
    if (propertyInfo) {                                                                                                // 121
      var mutationMethod = propertyInfo.mutationMethod;                                                                // 122
      if (mutationMethod) {                                                                                            // 123
        mutationMethod(node, value);                                                                                   // 124
      } else if (shouldIgnoreValue(propertyInfo, value)) {                                                             // 125
        this.deleteValueForProperty(node, name);                                                                       // 126
        return;                                                                                                        // 127
      } else if (propertyInfo.mustUseProperty) {                                                                       // 128
        // Contrary to `setAttribute`, object properties are properly                                                  // 129
        // `toString`ed by IE8/9.                                                                                      // 130
        node[propertyInfo.propertyName] = value;                                                                       // 131
      } else {                                                                                                         // 132
        var attributeName = propertyInfo.attributeName;                                                                // 133
        var namespace = propertyInfo.attributeNamespace;                                                               // 134
        // `setAttribute` with objects becomes only `[object]` in IE8/9,                                               // 135
        // ('' + value) makes it output the correct toString()-value.                                                  // 136
        if (namespace) {                                                                                               // 137
          node.setAttributeNS(namespace, attributeName, '' + value);                                                   // 138
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {         // 139
          node.setAttribute(attributeName, '');                                                                        // 140
        } else {                                                                                                       // 141
          node.setAttribute(attributeName, '' + value);                                                                // 142
        }                                                                                                              // 143
      }                                                                                                                // 144
    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 145
      DOMPropertyOperations.setValueForAttribute(node, name, value);                                                   // 146
      return;                                                                                                          // 147
    }                                                                                                                  // 148
                                                                                                                       // 149
    if (process.env.NODE_ENV !== 'production') {                                                                       // 150
      var payload = {};                                                                                                // 151
      payload[name] = value;                                                                                           // 152
      ReactInstrumentation.debugTool.onHostOperation({                                                                 // 153
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,                                          // 154
        type: 'update attribute',                                                                                      // 155
        payload: payload                                                                                               // 156
      });                                                                                                              // 157
    }                                                                                                                  // 158
  },                                                                                                                   // 159
                                                                                                                       // 160
  setValueForAttribute: function (node, name, value) {                                                                 // 161
    if (!isAttributeNameSafe(name)) {                                                                                  // 162
      return;                                                                                                          // 163
    }                                                                                                                  // 164
    if (value == null) {                                                                                               // 165
      node.removeAttribute(name);                                                                                      // 166
    } else {                                                                                                           // 167
      node.setAttribute(name, '' + value);                                                                             // 168
    }                                                                                                                  // 169
                                                                                                                       // 170
    if (process.env.NODE_ENV !== 'production') {                                                                       // 171
      var payload = {};                                                                                                // 172
      payload[name] = value;                                                                                           // 173
      ReactInstrumentation.debugTool.onHostOperation({                                                                 // 174
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,                                          // 175
        type: 'update attribute',                                                                                      // 176
        payload: payload                                                                                               // 177
      });                                                                                                              // 178
    }                                                                                                                  // 179
  },                                                                                                                   // 180
                                                                                                                       // 181
  /**                                                                                                                  // 182
   * Deletes an attributes from a node.                                                                                // 183
   *                                                                                                                   // 184
   * @param {DOMElement} node                                                                                          // 185
   * @param {string} name                                                                                              // 186
   */                                                                                                                  // 187
  deleteValueForAttribute: function (node, name) {                                                                     // 188
    node.removeAttribute(name);                                                                                        // 189
    if (process.env.NODE_ENV !== 'production') {                                                                       // 190
      ReactInstrumentation.debugTool.onHostOperation({                                                                 // 191
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,                                          // 192
        type: 'remove attribute',                                                                                      // 193
        payload: name                                                                                                  // 194
      });                                                                                                              // 195
    }                                                                                                                  // 196
  },                                                                                                                   // 197
                                                                                                                       // 198
  /**                                                                                                                  // 199
   * Deletes the value for a property on a node.                                                                       // 200
   *                                                                                                                   // 201
   * @param {DOMElement} node                                                                                          // 202
   * @param {string} name                                                                                              // 203
   */                                                                                                                  // 204
  deleteValueForProperty: function (node, name) {                                                                      // 205
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;              // 206
    if (propertyInfo) {                                                                                                // 207
      var mutationMethod = propertyInfo.mutationMethod;                                                                // 208
      if (mutationMethod) {                                                                                            // 209
        mutationMethod(node, undefined);                                                                               // 210
      } else if (propertyInfo.mustUseProperty) {                                                                       // 211
        var propName = propertyInfo.propertyName;                                                                      // 212
        if (propertyInfo.hasBooleanValue) {                                                                            // 213
          node[propName] = false;                                                                                      // 214
        } else {                                                                                                       // 215
          node[propName] = '';                                                                                         // 216
        }                                                                                                              // 217
      } else {                                                                                                         // 218
        node.removeAttribute(propertyInfo.attributeName);                                                              // 219
      }                                                                                                                // 220
    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 221
      node.removeAttribute(name);                                                                                      // 222
    }                                                                                                                  // 223
                                                                                                                       // 224
    if (process.env.NODE_ENV !== 'production') {                                                                       // 225
      ReactInstrumentation.debugTool.onHostOperation({                                                                 // 226
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,                                          // 227
        type: 'remove attribute',                                                                                      // 228
        payload: name                                                                                                  // 229
      });                                                                                                              // 230
    }                                                                                                                  // 231
  }                                                                                                                    // 232
                                                                                                                       // 233
};                                                                                                                     // 234
                                                                                                                       // 235
module.exports = DOMPropertyOperations;                                                                                // 236
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"quoteAttributeValueForBrowser.js":["./escapeTextContentForBrowser",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/quoteAttributeValueForBrowser.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * Escapes attribute value to prevent scripting attacks.                                                               // 16
 *                                                                                                                     // 17
 * @param {*} value Value to escape.                                                                                   // 18
 * @return {string} An escaped string.                                                                                 // 19
 */                                                                                                                    // 20
function quoteAttributeValueForBrowser(value) {                                                                        // 21
  return '"' + escapeTextContentForBrowser(value) + '"';                                                               // 22
}                                                                                                                      // 23
                                                                                                                       // 24
module.exports = quoteAttributeValueForBrowser;                                                                        // 25
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactBrowserEventEmitter.js":["object-assign","./EventPluginRegistry","./ReactEventEmitterMixin","./ViewportMetrics","./getVendorPrefixedEventName","./isEventSupported",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactBrowserEventEmitter.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _assign = require('object-assign');                                                                                // 13
                                                                                                                       // 14
var EventPluginRegistry = require('./EventPluginRegistry');                                                            // 15
var ReactEventEmitterMixin = require('./ReactEventEmitterMixin');                                                      // 16
var ViewportMetrics = require('./ViewportMetrics');                                                                    // 17
                                                                                                                       // 18
var getVendorPrefixedEventName = require('./getVendorPrefixedEventName');                                              // 19
var isEventSupported = require('./isEventSupported');                                                                  // 20
                                                                                                                       // 21
/**                                                                                                                    // 22
 * Summary of `ReactBrowserEventEmitter` event handling:                                                               // 23
 *                                                                                                                     // 24
 *  - Top-level delegation is used to trap most native browser events. This                                            // 25
 *    may only occur in the main thread and is the responsibility of                                                   // 26
 *    ReactEventListener, which is injected and can therefore support pluggable                                        // 27
 *    event sources. This is the only work that occurs in the main thread.                                             // 28
 *                                                                                                                     // 29
 *  - We normalize and de-duplicate events to account for browser quirks. This                                         // 30
 *    may be done in the worker thread.                                                                                // 31
 *                                                                                                                     // 32
 *  - Forward these native events (with the associated top-level type used to                                          // 33
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want                                        // 34
 *    to extract any synthetic events.                                                                                 // 35
 *                                                                                                                     // 36
 *  - The `EventPluginHub` will then process each event by annotating them with                                        // 37
 *    "dispatches", a sequence of listeners and IDs that care about that event.                                        // 38
 *                                                                                                                     // 39
 *  - The `EventPluginHub` then dispatches the events.                                                                 // 40
 *                                                                                                                     // 41
 * Overview of React and the event system:                                                                             // 42
 *                                                                                                                     // 43
 * +------------+    .                                                                                                 // 44
 * |    DOM     |    .                                                                                                 // 45
 * +------------+    .                                                                                                 // 46
 *       |           .                                                                                                 // 47
 *       v           .                                                                                                 // 48
 * +------------+    .                                                                                                 // 49
 * | ReactEvent |    .                                                                                                 // 50
 * |  Listener  |    .                                                                                                 // 51
 * +------------+    .                         +-----------+                                                           // 52
 *       |           .               +--------+|SimpleEvent|                                                           // 53
 *       |           .               |         |Plugin     |                                                           // 54
 * +-----|------+    .               v         +-----------+                                                           // 55
 * |     |      |    .    +--------------+                    +------------+                                           // 56
 * |     +-----------.--->|EventPluginHub|                    |    Event   |                                           // 57
 * |            |    .    |              |     +-----------+  | Propagators|                                           // 58
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|                                           // 59
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|                                           // 60
 * |            |    .    |              |     +-----------+  |  utilities |                                           // 61
 * |     +-----------.--->|              |                    +------------+                                           // 62
 * |     |      |    .    +--------------+                                                                             // 63
 * +-----|------+    .                ^        +-----------+                                                           // 64
 *       |           .                |        |Enter/Leave|                                                           // 65
 *       +           .                +-------+|Plugin     |                                                           // 66
 * +-------------+   .                         +-----------+                                                           // 67
 * | application |   .                                                                                                 // 68
 * |-------------|   .                                                                                                 // 69
 * |             |   .                                                                                                 // 70
 * |             |   .                                                                                                 // 71
 * +-------------+   .                                                                                                 // 72
 *                   .                                                                                                 // 73
 *    React Core     .  General Purpose Event Plugin System                                                            // 74
 */                                                                                                                    // 75
                                                                                                                       // 76
var hasEventPageXY;                                                                                                    // 77
var alreadyListeningTo = {};                                                                                           // 78
var isMonitoringScrollValue = false;                                                                                   // 79
var reactTopListenersCounter = 0;                                                                                      // 80
                                                                                                                       // 81
// For events like 'submit' which don't consistently bubble (which we trap at a                                        // 82
// lower node than `document`), binding at `document` would cause duplicate                                            // 83
// events so we don't include them here                                                                                // 84
var topEventMapping = {                                                                                                // 85
  topAbort: 'abort',                                                                                                   // 86
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',                                       // 87
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',                     // 88
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',                                 // 89
  topBlur: 'blur',                                                                                                     // 90
  topCanPlay: 'canplay',                                                                                               // 91
  topCanPlayThrough: 'canplaythrough',                                                                                 // 92
  topChange: 'change',                                                                                                 // 93
  topClick: 'click',                                                                                                   // 94
  topCompositionEnd: 'compositionend',                                                                                 // 95
  topCompositionStart: 'compositionstart',                                                                             // 96
  topCompositionUpdate: 'compositionupdate',                                                                           // 97
  topContextMenu: 'contextmenu',                                                                                       // 98
  topCopy: 'copy',                                                                                                     // 99
  topCut: 'cut',                                                                                                       // 100
  topDoubleClick: 'dblclick',                                                                                          // 101
  topDrag: 'drag',                                                                                                     // 102
  topDragEnd: 'dragend',                                                                                               // 103
  topDragEnter: 'dragenter',                                                                                           // 104
  topDragExit: 'dragexit',                                                                                             // 105
  topDragLeave: 'dragleave',                                                                                           // 106
  topDragOver: 'dragover',                                                                                             // 107
  topDragStart: 'dragstart',                                                                                           // 108
  topDrop: 'drop',                                                                                                     // 109
  topDurationChange: 'durationchange',                                                                                 // 110
  topEmptied: 'emptied',                                                                                               // 111
  topEncrypted: 'encrypted',                                                                                           // 112
  topEnded: 'ended',                                                                                                   // 113
  topError: 'error',                                                                                                   // 114
  topFocus: 'focus',                                                                                                   // 115
  topInput: 'input',                                                                                                   // 116
  topKeyDown: 'keydown',                                                                                               // 117
  topKeyPress: 'keypress',                                                                                             // 118
  topKeyUp: 'keyup',                                                                                                   // 119
  topLoadedData: 'loadeddata',                                                                                         // 120
  topLoadedMetadata: 'loadedmetadata',                                                                                 // 121
  topLoadStart: 'loadstart',                                                                                           // 122
  topMouseDown: 'mousedown',                                                                                           // 123
  topMouseMove: 'mousemove',                                                                                           // 124
  topMouseOut: 'mouseout',                                                                                             // 125
  topMouseOver: 'mouseover',                                                                                           // 126
  topMouseUp: 'mouseup',                                                                                               // 127
  topPaste: 'paste',                                                                                                   // 128
  topPause: 'pause',                                                                                                   // 129
  topPlay: 'play',                                                                                                     // 130
  topPlaying: 'playing',                                                                                               // 131
  topProgress: 'progress',                                                                                             // 132
  topRateChange: 'ratechange',                                                                                         // 133
  topScroll: 'scroll',                                                                                                 // 134
  topSeeked: 'seeked',                                                                                                 // 135
  topSeeking: 'seeking',                                                                                               // 136
  topSelectionChange: 'selectionchange',                                                                               // 137
  topStalled: 'stalled',                                                                                               // 138
  topSuspend: 'suspend',                                                                                               // 139
  topTextInput: 'textInput',                                                                                           // 140
  topTimeUpdate: 'timeupdate',                                                                                         // 141
  topTouchCancel: 'touchcancel',                                                                                       // 142
  topTouchEnd: 'touchend',                                                                                             // 143
  topTouchMove: 'touchmove',                                                                                           // 144
  topTouchStart: 'touchstart',                                                                                         // 145
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',                                    // 146
  topVolumeChange: 'volumechange',                                                                                     // 147
  topWaiting: 'waiting',                                                                                               // 148
  topWheel: 'wheel'                                                                                                    // 149
};                                                                                                                     // 150
                                                                                                                       // 151
/**                                                                                                                    // 152
 * To ensure no conflicts with other potential React instances on the page                                             // 153
 */                                                                                                                    // 154
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);                                          // 155
                                                                                                                       // 156
function getListeningForDocument(mountAt) {                                                                            // 157
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`                                              // 158
  // directly.                                                                                                         // 159
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {                                             // 160
    mountAt[topListenersIDKey] = reactTopListenersCounter++;                                                           // 161
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};                                                               // 162
  }                                                                                                                    // 163
  return alreadyListeningTo[mountAt[topListenersIDKey]];                                                               // 164
}                                                                                                                      // 165
                                                                                                                       // 166
/**                                                                                                                    // 167
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For                                         // 168
 * example:                                                                                                            // 169
 *                                                                                                                     // 170
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);                                                        // 171
 *                                                                                                                     // 172
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.                                        // 173
 *                                                                                                                     // 174
 * @internal                                                                                                           // 175
 */                                                                                                                    // 176
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {                                                   // 177
                                                                                                                       // 178
  /**                                                                                                                  // 179
   * Injectable event backend                                                                                          // 180
   */                                                                                                                  // 181
  ReactEventListener: null,                                                                                            // 182
                                                                                                                       // 183
  injection: {                                                                                                         // 184
    /**                                                                                                                // 185
     * @param {object} ReactEventListener                                                                              // 186
     */                                                                                                                // 187
    injectReactEventListener: function (ReactEventListener) {                                                          // 188
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);                                   // 189
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;                                                // 190
    }                                                                                                                  // 191
  },                                                                                                                   // 192
                                                                                                                       // 193
  /**                                                                                                                  // 194
   * Sets whether or not any created callbacks should be enabled.                                                      // 195
   *                                                                                                                   // 196
   * @param {boolean} enabled True if callbacks should be enabled.                                                     // 197
   */                                                                                                                  // 198
  setEnabled: function (enabled) {                                                                                     // 199
    if (ReactBrowserEventEmitter.ReactEventListener) {                                                                 // 200
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);                                                 // 201
    }                                                                                                                  // 202
  },                                                                                                                   // 203
                                                                                                                       // 204
  /**                                                                                                                  // 205
   * @return {boolean} True if callbacks are enabled.                                                                  // 206
   */                                                                                                                  // 207
  isEnabled: function () {                                                                                             // 208
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },                                                                                                                   // 210
                                                                                                                       // 211
  /**                                                                                                                  // 212
   * We listen for bubbled touch events on the document object.                                                        // 213
   *                                                                                                                   // 214
   * Firefox v8.01 (and possibly others) exhibited strange behavior when                                               // 215
   * mounting `onmousemove` events at some node that was not the document                                              // 216
   * element. The symptoms were that if your mouse is not moving over something                                        // 217
   * contained within that mount point (for example on the background) the                                             // 218
   * top-level listeners for `onmousemove` won't be called. However, if you                                            // 219
   * register the `mousemove` on the document object, then it will of course                                           // 220
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting                                         // 221
   * top-level listeners to the document object only, at least for these                                               // 222
   * movement types of events and possibly all events.                                                                 // 223
   *                                                                                                                   // 224
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html                                         // 225
   *                                                                                                                   // 226
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but                                         // 227
   * they bubble to document.                                                                                          // 228
   *                                                                                                                   // 229
   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 230
   * @param {object} contentDocumentHandle Document which owns the container                                           // 231
   */                                                                                                                  // 232
  listenTo: function (registrationName, contentDocumentHandle) {                                                       // 233
    var mountAt = contentDocumentHandle;                                                                               // 234
    var isListening = getListeningForDocument(mountAt);                                                                // 235
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];                             // 236
                                                                                                                       // 237
    for (var i = 0; i < dependencies.length; i++) {                                                                    // 238
      var dependency = dependencies[i];                                                                                // 239
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {                                      // 240
        if (dependency === 'topWheel') {                                                                               // 241
          if (isEventSupported('wheel')) {                                                                             // 242
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);                // 243
          } else if (isEventSupported('mousewheel')) {                                                                 // 244
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);           // 245
          } else {                                                                                                     // 246
            // Firefox needs to capture a different mouse scroll event.                                                // 247
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html                                             // 248
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);       // 249
          }                                                                                                            // 250
        } else if (dependency === 'topScroll') {                                                                       // 251
                                                                                                                       // 252
          if (isEventSupported('scroll', true)) {                                                                      // 253
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);             // 254
          } else {                                                                                                     // 255
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }                                                                                                            // 257
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {                                            // 258
                                                                                                                       // 259
          if (isEventSupported('focus', true)) {                                                                       // 260
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);               // 261
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);                 // 262
          } else if (isEventSupported('focusin')) {                                                                    // 263
            // IE has `focusin` and `focusout` events which bubble.                                                    // 264
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html                                // 265
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);              // 266
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);              // 267
          }                                                                                                            // 268
                                                                                                                       // 269
          // to make sure blur and focus event listeners are only attached once                                        // 270
          isListening.topBlur = true;                                                                                  // 271
          isListening.topFocus = true;                                                                                 // 272
        } else if (topEventMapping.hasOwnProperty(dependency)) {                                                       // 273
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }                                                                                                              // 275
                                                                                                                       // 276
        isListening[dependency] = true;                                                                                // 277
      }                                                                                                                // 278
    }                                                                                                                  // 279
  },                                                                                                                   // 280
                                                                                                                       // 281
  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {                                                 // 282
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);        // 283
  },                                                                                                                   // 284
                                                                                                                       // 285
  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {                                                // 286
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);       // 287
  },                                                                                                                   // 288
                                                                                                                       // 289
  /**                                                                                                                  // 290
   * Protect against document.createEvent() returning null                                                             // 291
   * Some popup blocker extensions appear to do this:                                                                  // 292
   * https://github.com/facebook/react/issues/6887                                                                     // 293
   */                                                                                                                  // 294
  supportsEventPageXY: function () {                                                                                   // 295
    if (!document.createEvent) {                                                                                       // 296
      return false;                                                                                                    // 297
    }                                                                                                                  // 298
    var ev = document.createEvent('MouseEvent');                                                                       // 299
    return ev != null && 'pageX' in ev;                                                                                // 300
  },                                                                                                                   // 301
                                                                                                                       // 302
  /**                                                                                                                  // 303
   * Listens to window scroll and resize events. We cache scroll values so that                                        // 304
   * application code can access them without triggering reflows.                                                      // 305
   *                                                                                                                   // 306
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when                                           // 307
   * pageX/pageY isn't supported (legacy browsers).                                                                    // 308
   *                                                                                                                   // 309
   * NOTE: Scroll events do not bubble.                                                                                // 310
   *                                                                                                                   // 311
   * @see http://www.quirksmode.org/dom/events/scroll.html                                                             // 312
   */                                                                                                                  // 313
  ensureScrollValueMonitoring: function () {                                                                           // 314
    if (hasEventPageXY === undefined) {                                                                                // 315
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();                                                 // 316
    }                                                                                                                  // 317
    if (!hasEventPageXY && !isMonitoringScrollValue) {                                                                 // 318
      var refresh = ViewportMetrics.refreshScrollValues;                                                               // 319
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);                                         // 320
      isMonitoringScrollValue = true;                                                                                  // 321
    }                                                                                                                  // 322
  }                                                                                                                    // 323
                                                                                                                       // 324
});                                                                                                                    // 325
                                                                                                                       // 326
module.exports = ReactBrowserEventEmitter;                                                                             // 327
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactEventEmitterMixin.js":["./EventPluginHub",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactEventEmitterMixin.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var EventPluginHub = require('./EventPluginHub');                                                                      // 13
                                                                                                                       // 14
function runEventQueueInBatch(events) {                                                                                // 15
  EventPluginHub.enqueueEvents(events);                                                                                // 16
  EventPluginHub.processEventQueue(false);                                                                             // 17
}                                                                                                                      // 18
                                                                                                                       // 19
var ReactEventEmitterMixin = {                                                                                         // 20
                                                                                                                       // 21
  /**                                                                                                                  // 22
   * Streams a fired top-level event to `EventPluginHub` where plugins have the                                        // 23
   * opportunity to create `ReactEvent`s to be dispatched.                                                             // 24
   */                                                                                                                  // 25
  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                // 26
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);               // 27
    runEventQueueInBatch(events);                                                                                      // 28
  }                                                                                                                    // 29
};                                                                                                                     // 30
                                                                                                                       // 31
module.exports = ReactEventEmitterMixin;                                                                               // 32
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"getVendorPrefixedEventName.js":["fbjs/lib/ExecutionEnvironment",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/getVendorPrefixedEventName.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.                     // 16
 *                                                                                                                     // 17
 * @param {string} styleProp                                                                                           // 18
 * @param {string} eventName                                                                                           // 19
 * @returns {object}                                                                                                   // 20
 */                                                                                                                    // 21
function makePrefixMap(styleProp, eventName) {                                                                         // 22
  var prefixes = {};                                                                                                   // 23
                                                                                                                       // 24
  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();                                                         // 25
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;                                                               // 26
  prefixes['Moz' + styleProp] = 'moz' + eventName;                                                                     // 27
  prefixes['ms' + styleProp] = 'MS' + eventName;                                                                       // 28
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();                                                           // 29
                                                                                                                       // 30
  return prefixes;                                                                                                     // 31
}                                                                                                                      // 32
                                                                                                                       // 33
/**                                                                                                                    // 34
 * A list of event names to a configurable list of vendor prefixes.                                                    // 35
 */                                                                                                                    // 36
var vendorPrefixes = {                                                                                                 // 37
  animationend: makePrefixMap('Animation', 'AnimationEnd'),                                                            // 38
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),                                                // 39
  animationstart: makePrefixMap('Animation', 'AnimationStart'),                                                        // 40
  transitionend: makePrefixMap('Transition', 'TransitionEnd')                                                          // 41
};                                                                                                                     // 42
                                                                                                                       // 43
/**                                                                                                                    // 44
 * Event names that have already been detected and prefixed (if applicable).                                           // 45
 */                                                                                                                    // 46
var prefixedEventNames = {};                                                                                           // 47
                                                                                                                       // 48
/**                                                                                                                    // 49
 * Element to check for prefixes on.                                                                                   // 50
 */                                                                                                                    // 51
var style = {};                                                                                                        // 52
                                                                                                                       // 53
/**                                                                                                                    // 54
 * Bootstrap if a DOM exists.                                                                                          // 55
 */                                                                                                                    // 56
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 57
  style = document.createElement('div').style;                                                                         // 58
                                                                                                                       // 59
  // On some platforms, in particular some releases of Android 4.x,                                                    // 60
  // the un-prefixed "animation" and "transition" properties are defined on the                                        // 61
  // style object but the events that fire will still be prefixed, so we need                                          // 62
  // to check if the un-prefixed events are usable, and if not remove them from the map.                               // 63
  if (!('AnimationEvent' in window)) {                                                                                 // 64
    delete vendorPrefixes.animationend.animation;                                                                      // 65
    delete vendorPrefixes.animationiteration.animation;                                                                // 66
    delete vendorPrefixes.animationstart.animation;                                                                    // 67
  }                                                                                                                    // 68
                                                                                                                       // 69
  // Same as above                                                                                                     // 70
  if (!('TransitionEvent' in window)) {                                                                                // 71
    delete vendorPrefixes.transitionend.transition;                                                                    // 72
  }                                                                                                                    // 73
}                                                                                                                      // 74
                                                                                                                       // 75
/**                                                                                                                    // 76
 * Attempts to determine the correct vendor prefixed event name.                                                       // 77
 *                                                                                                                     // 78
 * @param {string} eventName                                                                                           // 79
 * @returns {string}                                                                                                   // 80
 */                                                                                                                    // 81
function getVendorPrefixedEventName(eventName) {                                                                       // 82
  if (prefixedEventNames[eventName]) {                                                                                 // 83
    return prefixedEventNames[eventName];                                                                              // 84
  } else if (!vendorPrefixes[eventName]) {                                                                             // 85
    return eventName;                                                                                                  // 86
  }                                                                                                                    // 87
                                                                                                                       // 88
  var prefixMap = vendorPrefixes[eventName];                                                                           // 89
                                                                                                                       // 90
  for (var styleProp in prefixMap) {                                                                                   // 91
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {                                                   // 92
      return prefixedEventNames[eventName] = prefixMap[styleProp];                                                     // 93
    }                                                                                                                  // 94
  }                                                                                                                    // 95
                                                                                                                       // 96
  return '';                                                                                                           // 97
}                                                                                                                      // 98
                                                                                                                       // 99
module.exports = getVendorPrefixedEventName;                                                                           // 100
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMInput.js":["./reactProdInvariant","object-assign","./DOMPropertyOperations","./LinkedValueUtils","./ReactDOMComponentTree","./ReactUpdates","fbjs/lib/invariant","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMInput.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant'),                                                                  // 13
    _assign = require('object-assign');                                                                                // 14
                                                                                                                       // 15
var DOMPropertyOperations = require('./DOMPropertyOperations');                                                        // 16
var LinkedValueUtils = require('./LinkedValueUtils');                                                                  // 17
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 18
var ReactUpdates = require('./ReactUpdates');                                                                          // 19
                                                                                                                       // 20
var invariant = require('fbjs/lib/invariant');                                                                         // 21
var warning = require('fbjs/lib/warning');                                                                             // 22
                                                                                                                       // 23
var didWarnValueLink = false;                                                                                          // 24
var didWarnCheckedLink = false;                                                                                        // 25
var didWarnValueDefaultValue = false;                                                                                  // 26
var didWarnCheckedDefaultChecked = false;                                                                              // 27
var didWarnControlledToUncontrolled = false;                                                                           // 28
var didWarnUncontrolledToControlled = false;                                                                           // 29
                                                                                                                       // 30
function forceUpdateIfMounted() {                                                                                      // 31
  if (this._rootNodeID) {                                                                                              // 32
    // DOM component is still mounted; update                                                                          // 33
    ReactDOMInput.updateWrapper(this);                                                                                 // 34
  }                                                                                                                    // 35
}                                                                                                                      // 36
                                                                                                                       // 37
function isControlled(props) {                                                                                         // 38
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';                                               // 39
  return usesChecked ? props.checked != null : props.value != null;                                                    // 40
}                                                                                                                      // 41
                                                                                                                       // 42
/**                                                                                                                    // 43
 * Implements an <input> host component that allows setting these optional                                             // 44
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.                                                    // 45
 *                                                                                                                     // 46
 * If `checked` or `value` are not supplied (or null/undefined), user actions                                          // 47
 * that affect the checked state or value will trigger updates to the element.                                         // 48
 *                                                                                                                     // 49
 * If they are supplied (and not null/undefined), the rendered element will not                                        // 50
 * trigger updates to the element. Instead, the props must change in order for                                         // 51
 * the rendered element to be updated.                                                                                 // 52
 *                                                                                                                     // 53
 * The rendered element will be initialized as unchecked (or `defaultChecked`)                                         // 54
 * with an empty value (or `defaultValue`).                                                                            // 55
 *                                                                                                                     // 56
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html                                             // 57
 */                                                                                                                    // 58
var ReactDOMInput = {                                                                                                  // 59
  getHostProps: function (inst, props) {                                                                               // 60
    var value = LinkedValueUtils.getValue(props);                                                                      // 61
    var checked = LinkedValueUtils.getChecked(props);                                                                  // 62
                                                                                                                       // 63
    var hostProps = _assign({                                                                                          // 64
      // Make sure we set .type before any other properties (setting .value                                            // 65
      // before .type means .value is lost in IE11 and below)                                                          // 66
      type: undefined,                                                                                                 // 67
      // Make sure we set .step before .value (setting .value before .step                                             // 68
      // means .value is rounded on mount, based upon step precision)                                                  // 69
      step: undefined,                                                                                                 // 70
      // Make sure we set .min & .max before .value (to ensure proper order                                            // 71
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)                                     // 72
      min: undefined,                                                                                                  // 73
      max: undefined                                                                                                   // 74
    }, props, {                                                                                                        // 75
      defaultChecked: undefined,                                                                                       // 76
      defaultValue: undefined,                                                                                         // 77
      value: value != null ? value : inst._wrapperState.initialValue,                                                  // 78
      checked: checked != null ? checked : inst._wrapperState.initialChecked,                                          // 79
      onChange: inst._wrapperState.onChange                                                                            // 80
    });                                                                                                                // 81
                                                                                                                       // 82
    return hostProps;                                                                                                  // 83
  },                                                                                                                   // 84
                                                                                                                       // 85
  mountWrapper: function (inst, props) {                                                                               // 86
    if (process.env.NODE_ENV !== 'production') {                                                                       // 87
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);                                    // 88
                                                                                                                       // 89
      var owner = inst._currentElement._owner;                                                                         // 90
                                                                                                                       // 91
      if (props.valueLink !== undefined && !didWarnValueLink) {                                                        // 92
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;                                                                                       // 94
      }                                                                                                                // 95
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {                                                    // 96
        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;                                                                                     // 98
      }                                                                                                                // 99
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {        // 100
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;                                                                           // 102
      }                                                                                                                // 103
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {                // 104
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;                                                                               // 106
      }                                                                                                                // 107
    }                                                                                                                  // 108
                                                                                                                       // 109
    var defaultValue = props.defaultValue;                                                                             // 110
    inst._wrapperState = {                                                                                             // 111
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,                                    // 112
      initialValue: props.value != null ? props.value : defaultValue,                                                  // 113
      listeners: null,                                                                                                 // 114
      onChange: _handleChange.bind(inst)                                                                               // 115
    };                                                                                                                 // 116
                                                                                                                       // 117
    if (process.env.NODE_ENV !== 'production') {                                                                       // 118
      inst._wrapperState.controlled = isControlled(props);                                                             // 119
    }                                                                                                                  // 120
  },                                                                                                                   // 121
                                                                                                                       // 122
  updateWrapper: function (inst) {                                                                                     // 123
    var props = inst._currentElement.props;                                                                            // 124
                                                                                                                       // 125
    if (process.env.NODE_ENV !== 'production') {                                                                       // 126
      var controlled = isControlled(props);                                                                            // 127
      var owner = inst._currentElement._owner;                                                                         // 128
                                                                                                                       // 129
      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {                          // 130
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;                                                                        // 132
      }                                                                                                                // 133
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {                          // 134
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;                                                                        // 136
      }                                                                                                                // 137
    }                                                                                                                  // 138
                                                                                                                       // 139
    // TODO: Shouldn't this be getChecked(props)?                                                                      // 140
    var checked = props.checked;                                                                                       // 141
    if (checked != null) {                                                                                             // 142
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }                                                                                                                  // 144
                                                                                                                       // 145
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                        // 146
    var value = LinkedValueUtils.getValue(props);                                                                      // 147
    if (value != null) {                                                                                               // 148
                                                                                                                       // 149
      // Cast `value` to a string to ensure the value is set correctly. While                                          // 150
      // browsers typically do this as necessary, jsdom doesn't.                                                       // 151
      var newValue = '' + value;                                                                                       // 152
                                                                                                                       // 153
      // To avoid side effects (such as losing text selection), only set value if changed                              // 154
      if (newValue !== node.value) {                                                                                   // 155
        node.value = newValue;                                                                                         // 156
      }                                                                                                                // 157
    } else {                                                                                                           // 158
      if (props.value == null && props.defaultValue != null) {                                                         // 159
        // In Chrome, assigning defaultValue to certain input types triggers input validation.                         // 160
        // For number inputs, the display value loses trailing decimal points. For email inputs,                       // 161
        // Chrome raises "The specified value <x> is not a valid email address".                                       // 162
        //                                                                                                             // 163
        // Here we check to see if the defaultValue has actually changed, avoiding these problems                      // 164
        // when the user is inputting text                                                                             // 165
        //                                                                                                             // 166
        // https://github.com/facebook/react/issues/7253                                                               // 167
        if (node.defaultValue !== '' + props.defaultValue) {                                                           // 168
          node.defaultValue = '' + props.defaultValue;                                                                 // 169
        }                                                                                                              // 170
      }                                                                                                                // 171
      if (props.checked == null && props.defaultChecked != null) {                                                     // 172
        node.defaultChecked = !!props.defaultChecked;                                                                  // 173
      }                                                                                                                // 174
    }                                                                                                                  // 175
  },                                                                                                                   // 176
                                                                                                                       // 177
  postMountWrapper: function (inst) {                                                                                  // 178
    var props = inst._currentElement.props;                                                                            // 179
                                                                                                                       // 180
    // This is in postMount because we need access to the DOM node, which is not                                       // 181
    // available until after the component has mounted.                                                                // 182
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                        // 183
                                                                                                                       // 184
    // Detach value from defaultValue. We won't do anything if we're working on                                        // 185
    // submit or reset inputs as those values & defaultValues are linked. They                                         // 186
    // are not resetable nodes so this operation doesn't matter and actually                                           // 187
    // removes browser-default values (eg "Submit Query") when no value is                                             // 188
    // provided.                                                                                                       // 189
                                                                                                                       // 190
    switch (props.type) {                                                                                              // 191
      case 'submit':                                                                                                   // 192
      case 'reset':                                                                                                    // 193
        break;                                                                                                         // 194
      case 'color':                                                                                                    // 195
      case 'date':                                                                                                     // 196
      case 'datetime':                                                                                                 // 197
      case 'datetime-local':                                                                                           // 198
      case 'month':                                                                                                    // 199
      case 'time':                                                                                                     // 200
      case 'week':                                                                                                     // 201
        // This fixes the no-show issue on iOS Safari and Android Chrome:                                              // 202
        // https://github.com/facebook/react/issues/7233                                                               // 203
        node.value = '';                                                                                               // 204
        node.value = node.defaultValue;                                                                                // 205
        break;                                                                                                         // 206
      default:                                                                                                         // 207
        node.value = node.value;                                                                                       // 208
        break;                                                                                                         // 209
    }                                                                                                                  // 210
                                                                                                                       // 211
    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug                          // 212
    // this is needed to work around a chrome bug where setting defaultChecked                                         // 213
    // will sometimes influence the value of checked (even after detachment).                                          // 214
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416                                         // 215
    // We need to temporarily unset name to avoid disrupting radio button groups.                                      // 216
    var name = node.name;                                                                                              // 217
    if (name !== '') {                                                                                                 // 218
      node.name = '';                                                                                                  // 219
    }                                                                                                                  // 220
    node.defaultChecked = !node.defaultChecked;                                                                        // 221
    node.defaultChecked = !node.defaultChecked;                                                                        // 222
    if (name !== '') {                                                                                                 // 223
      node.name = name;                                                                                                // 224
    }                                                                                                                  // 225
  }                                                                                                                    // 226
};                                                                                                                     // 227
                                                                                                                       // 228
function _handleChange(event) {                                                                                        // 229
  var props = this._currentElement.props;                                                                              // 230
                                                                                                                       // 231
  var returnValue = LinkedValueUtils.executeOnChange(props, event);                                                    // 232
                                                                                                                       // 233
  // Here we use asap to wait until all updates have propagated, which                                                 // 234
  // is important when using controlled components within layers:                                                      // 235
  // https://github.com/facebook/react/issues/1698                                                                     // 236
  ReactUpdates.asap(forceUpdateIfMounted, this);                                                                       // 237
                                                                                                                       // 238
  var name = props.name;                                                                                               // 239
  if (props.type === 'radio' && name != null) {                                                                        // 240
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);                                                    // 241
    var queryRoot = rootNode;                                                                                          // 242
                                                                                                                       // 243
    while (queryRoot.parentNode) {                                                                                     // 244
      queryRoot = queryRoot.parentNode;                                                                                // 245
    }                                                                                                                  // 246
                                                                                                                       // 247
    // If `rootNode.form` was non-null, then we could try `form.elements`,                                             // 248
    // but that sometimes behaves strangely in IE8. We could also try using                                            // 249
    // `form.getElementsByName`, but that will only return direct children                                             // 250
    // and won't include inputs that use the HTML5 `form=` attribute. Since                                            // 251
    // the input might not even be in a form, let's just use the global                                                // 252
    // `querySelectorAll` to ensure we don't miss anything.                                                            // 253
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');             // 254
                                                                                                                       // 255
    for (var i = 0; i < group.length; i++) {                                                                           // 256
      var otherNode = group[i];                                                                                        // 257
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {                                                // 258
        continue;                                                                                                      // 259
      }                                                                                                                // 260
      // This will throw if radio buttons rendered by different copies of React                                        // 261
      // and the same name are rendered into the same form (same as #1939).                                            // 262
      // That's probably okay; we don't support it just as we don't support                                            // 263
      // mixing React radio buttons with non-React ones.                                                               // 264
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);                                        // 265
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that                                            // 267
      // was previously checked to update will cause it to be come re-checked                                          // 268
      // as appropriate.                                                                                               // 269
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);                                                          // 270
    }                                                                                                                  // 271
  }                                                                                                                    // 272
                                                                                                                       // 273
  return returnValue;                                                                                                  // 274
}                                                                                                                      // 275
                                                                                                                       // 276
module.exports = ReactDOMInput;                                                                                        // 277
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"LinkedValueUtils.js":["./reactProdInvariant","react/lib/React","./ReactPropTypesSecret","fbjs/lib/invariant","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/LinkedValueUtils.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var React = require('react/lib/React');                                                                                // 15
var ReactPropTypesSecret = require('./ReactPropTypesSecret');                                                          // 16
                                                                                                                       // 17
var invariant = require('fbjs/lib/invariant');                                                                         // 18
var warning = require('fbjs/lib/warning');                                                                             // 19
                                                                                                                       // 20
var hasReadOnlyValue = {                                                                                               // 21
  'button': true,                                                                                                      // 22
  'checkbox': true,                                                                                                    // 23
  'image': true,                                                                                                       // 24
  'hidden': true,                                                                                                      // 25
  'radio': true,                                                                                                       // 26
  'reset': true,                                                                                                       // 27
  'submit': true                                                                                                       // 28
};                                                                                                                     // 29
                                                                                                                       // 30
function _assertSingleLink(inputProps) {                                                                               // 31
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}                                                                                                                      // 33
function _assertValueLink(inputProps) {                                                                                // 34
  _assertSingleLink(inputProps);                                                                                       // 35
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}                                                                                                                      // 37
                                                                                                                       // 38
function _assertCheckedLink(inputProps) {                                                                              // 39
  _assertSingleLink(inputProps);                                                                                       // 40
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}                                                                                                                      // 42
                                                                                                                       // 43
var propTypes = {                                                                                                      // 44
  value: function (props, propName, componentName) {                                                                   // 45
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {      // 46
      return null;                                                                                                     // 47
    }                                                                                                                  // 48
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },                                                                                                                   // 50
  checked: function (props, propName, componentName) {                                                                 // 51
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {                                      // 52
      return null;                                                                                                     // 53
    }                                                                                                                  // 54
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },                                                                                                                   // 56
  onChange: React.PropTypes.func                                                                                       // 57
};                                                                                                                     // 58
                                                                                                                       // 59
var loggedTypeFailures = {};                                                                                           // 60
function getDeclarationErrorAddendum(owner) {                                                                          // 61
  if (owner) {                                                                                                         // 62
    var name = owner.getName();                                                                                        // 63
    if (name) {                                                                                                        // 64
      return ' Check the render method of `' + name + '`.';                                                            // 65
    }                                                                                                                  // 66
  }                                                                                                                    // 67
  return '';                                                                                                           // 68
}                                                                                                                      // 69
                                                                                                                       // 70
/**                                                                                                                    // 71
 * Provide a linked `value` attribute for controlled forms. You should not use                                         // 72
 * this outside of the ReactDOM controlled form components.                                                            // 73
 */                                                                                                                    // 74
var LinkedValueUtils = {                                                                                               // 75
  checkPropTypes: function (tagName, props, owner) {                                                                   // 76
    for (var propName in propTypes) {                                                                                  // 77
      if (propTypes.hasOwnProperty(propName)) {                                                                        // 78
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);                 // 79
      }                                                                                                                // 80
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                          // 81
        // Only monitor this failure once because there tends to be a lot of the                                       // 82
        // same error.                                                                                                 // 83
        loggedTypeFailures[error.message] = true;                                                                      // 84
                                                                                                                       // 85
        var addendum = getDeclarationErrorAddendum(owner);                                                             // 86
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }                                                                                                                // 88
    }                                                                                                                  // 89
  },                                                                                                                   // 90
                                                                                                                       // 91
  /**                                                                                                                  // 92
   * @param {object} inputProps Props for form component                                                               // 93
   * @return {*} current value of the input either from value prop or link.                                            // 94
   */                                                                                                                  // 95
  getValue: function (inputProps) {                                                                                    // 96
    if (inputProps.valueLink) {                                                                                        // 97
      _assertValueLink(inputProps);                                                                                    // 98
      return inputProps.valueLink.value;                                                                               // 99
    }                                                                                                                  // 100
    return inputProps.value;                                                                                           // 101
  },                                                                                                                   // 102
                                                                                                                       // 103
  /**                                                                                                                  // 104
   * @param {object} inputProps Props for form component                                                               // 105
   * @return {*} current checked status of the input either from checked prop                                          // 106
   *             or link.                                                                                              // 107
   */                                                                                                                  // 108
  getChecked: function (inputProps) {                                                                                  // 109
    if (inputProps.checkedLink) {                                                                                      // 110
      _assertCheckedLink(inputProps);                                                                                  // 111
      return inputProps.checkedLink.value;                                                                             // 112
    }                                                                                                                  // 113
    return inputProps.checked;                                                                                         // 114
  },                                                                                                                   // 115
                                                                                                                       // 116
  /**                                                                                                                  // 117
   * @param {object} inputProps Props for form component                                                               // 118
   * @param {SyntheticEvent} event change event to handle                                                              // 119
   */                                                                                                                  // 120
  executeOnChange: function (inputProps, event) {                                                                      // 121
    if (inputProps.valueLink) {                                                                                        // 122
      _assertValueLink(inputProps);                                                                                    // 123
      return inputProps.valueLink.requestChange(event.target.value);                                                   // 124
    } else if (inputProps.checkedLink) {                                                                               // 125
      _assertCheckedLink(inputProps);                                                                                  // 126
      return inputProps.checkedLink.requestChange(event.target.checked);                                               // 127
    } else if (inputProps.onChange) {                                                                                  // 128
      return inputProps.onChange.call(undefined, event);                                                               // 129
    }                                                                                                                  // 130
  }                                                                                                                    // 131
};                                                                                                                     // 132
                                                                                                                       // 133
module.exports = LinkedValueUtils;                                                                                     // 134
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactPropTypesSecret.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactPropTypesSecret.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';                                             // 14
                                                                                                                       // 15
module.exports = ReactPropTypesSecret;                                                                                 // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ReactDOMOption.js":["object-assign","react/lib/React","./ReactDOMComponentTree","./ReactDOMSelect","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMOption.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _assign = require('object-assign');                                                                                // 13
                                                                                                                       // 14
var React = require('react/lib/React');                                                                                // 15
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 16
var ReactDOMSelect = require('./ReactDOMSelect');                                                                      // 17
                                                                                                                       // 18
var warning = require('fbjs/lib/warning');                                                                             // 19
var didWarnInvalidOptionChildren = false;                                                                              // 20
                                                                                                                       // 21
function flattenChildren(children) {                                                                                   // 22
  var content = '';                                                                                                    // 23
                                                                                                                       // 24
  // Flatten children and warn if they aren't strings or numbers;                                                      // 25
  // invalid types are ignored.                                                                                        // 26
  React.Children.forEach(children, function (child) {                                                                  // 27
    if (child == null) {                                                                                               // 28
      return;                                                                                                          // 29
    }                                                                                                                  // 30
    if (typeof child === 'string' || typeof child === 'number') {                                                      // 31
      content += child;                                                                                                // 32
    } else if (!didWarnInvalidOptionChildren) {                                                                        // 33
      didWarnInvalidOptionChildren = true;                                                                             // 34
      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }                                                                                                                  // 36
  });                                                                                                                  // 37
                                                                                                                       // 38
  return content;                                                                                                      // 39
}                                                                                                                      // 40
                                                                                                                       // 41
/**                                                                                                                    // 42
 * Implements an <option> host component that warns when `selected` is set.                                            // 43
 */                                                                                                                    // 44
var ReactDOMOption = {                                                                                                 // 45
  mountWrapper: function (inst, props, hostParent) {                                                                   // 46
    // TODO (yungsters): Remove support for `selected` in <option>.                                                    // 47
    if (process.env.NODE_ENV !== 'production') {                                                                       // 48
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }                                                                                                                  // 50
                                                                                                                       // 51
    // Look up whether this option is 'selected'                                                                       // 52
    var selectValue = null;                                                                                            // 53
    if (hostParent != null) {                                                                                          // 54
      var selectParent = hostParent;                                                                                   // 55
                                                                                                                       // 56
      if (selectParent._tag === 'optgroup') {                                                                          // 57
        selectParent = selectParent._hostParent;                                                                       // 58
      }                                                                                                                // 59
                                                                                                                       // 60
      if (selectParent != null && selectParent._tag === 'select') {                                                    // 61
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);                                              // 62
      }                                                                                                                // 63
    }                                                                                                                  // 64
                                                                                                                       // 65
    // If the value is null (e.g., no specified value or after initial mount)                                          // 66
    // or missing (e.g., for <datalist>), we don't change props.selected                                               // 67
    var selected = null;                                                                                               // 68
    if (selectValue != null) {                                                                                         // 69
      var value;                                                                                                       // 70
      if (props.value != null) {                                                                                       // 71
        value = props.value + '';                                                                                      // 72
      } else {                                                                                                         // 73
        value = flattenChildren(props.children);                                                                       // 74
      }                                                                                                                // 75
      selected = false;                                                                                                // 76
      if (Array.isArray(selectValue)) {                                                                                // 77
        // multiple                                                                                                    // 78
        for (var i = 0; i < selectValue.length; i++) {                                                                 // 79
          if ('' + selectValue[i] === value) {                                                                         // 80
            selected = true;                                                                                           // 81
            break;                                                                                                     // 82
          }                                                                                                            // 83
        }                                                                                                              // 84
      } else {                                                                                                         // 85
        selected = '' + selectValue === value;                                                                         // 86
      }                                                                                                                // 87
    }                                                                                                                  // 88
                                                                                                                       // 89
    inst._wrapperState = { selected: selected };                                                                       // 90
  },                                                                                                                   // 91
                                                                                                                       // 92
  postMountWrapper: function (inst) {                                                                                  // 93
    // value="" should make a value attribute (#6219)                                                                  // 94
    var props = inst._currentElement.props;                                                                            // 95
    if (props.value != null) {                                                                                         // 96
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                      // 97
      node.setAttribute('value', props.value);                                                                         // 98
    }                                                                                                                  // 99
  },                                                                                                                   // 100
                                                                                                                       // 101
  getHostProps: function (inst, props) {                                                                               // 102
    var hostProps = _assign({ selected: undefined, children: undefined }, props);                                      // 103
                                                                                                                       // 104
    // Read state only from initial mount because <select> updates value                                               // 105
    // manually; we need the initial state only for server rendering                                                   // 106
    if (inst._wrapperState.selected != null) {                                                                         // 107
      hostProps.selected = inst._wrapperState.selected;                                                                // 108
    }                                                                                                                  // 109
                                                                                                                       // 110
    var content = flattenChildren(props.children);                                                                     // 111
                                                                                                                       // 112
    if (content) {                                                                                                     // 113
      hostProps.children = content;                                                                                    // 114
    }                                                                                                                  // 115
                                                                                                                       // 116
    return hostProps;                                                                                                  // 117
  }                                                                                                                    // 118
                                                                                                                       // 119
};                                                                                                                     // 120
                                                                                                                       // 121
module.exports = ReactDOMOption;                                                                                       // 122
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMSelect.js":["object-assign","./LinkedValueUtils","./ReactDOMComponentTree","./ReactUpdates","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMSelect.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _assign = require('object-assign');                                                                                // 13
                                                                                                                       // 14
var LinkedValueUtils = require('./LinkedValueUtils');                                                                  // 15
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 16
var ReactUpdates = require('./ReactUpdates');                                                                          // 17
                                                                                                                       // 18
var warning = require('fbjs/lib/warning');                                                                             // 19
                                                                                                                       // 20
var didWarnValueLink = false;                                                                                          // 21
var didWarnValueDefaultValue = false;                                                                                  // 22
                                                                                                                       // 23
function updateOptionsIfPendingUpdateAndMounted() {                                                                    // 24
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {                                                          // 25
    this._wrapperState.pendingUpdate = false;                                                                          // 26
                                                                                                                       // 27
    var props = this._currentElement.props;                                                                            // 28
    var value = LinkedValueUtils.getValue(props);                                                                      // 29
                                                                                                                       // 30
    if (value != null) {                                                                                               // 31
      updateOptions(this, Boolean(props.multiple), value);                                                             // 32
    }                                                                                                                  // 33
  }                                                                                                                    // 34
}                                                                                                                      // 35
                                                                                                                       // 36
function getDeclarationErrorAddendum(owner) {                                                                          // 37
  if (owner) {                                                                                                         // 38
    var name = owner.getName();                                                                                        // 39
    if (name) {                                                                                                        // 40
      return ' Check the render method of `' + name + '`.';                                                            // 41
    }                                                                                                                  // 42
  }                                                                                                                    // 43
  return '';                                                                                                           // 44
}                                                                                                                      // 45
                                                                                                                       // 46
var valuePropNames = ['value', 'defaultValue'];                                                                        // 47
                                                                                                                       // 48
/**                                                                                                                    // 49
 * Validation function for `value` and `defaultValue`.                                                                 // 50
 * @private                                                                                                            // 51
 */                                                                                                                    // 52
function checkSelectPropTypes(inst, props) {                                                                           // 53
  var owner = inst._currentElement._owner;                                                                             // 54
  LinkedValueUtils.checkPropTypes('select', props, owner);                                                             // 55
                                                                                                                       // 56
  if (props.valueLink !== undefined && !didWarnValueLink) {                                                            // 57
    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;                                                                                           // 59
  }                                                                                                                    // 60
                                                                                                                       // 61
  for (var i = 0; i < valuePropNames.length; i++) {                                                                    // 62
    var propName = valuePropNames[i];                                                                                  // 63
    if (props[propName] == null) {                                                                                     // 64
      continue;                                                                                                        // 65
    }                                                                                                                  // 66
    var isArray = Array.isArray(props[propName]);                                                                      // 67
    if (props.multiple && !isArray) {                                                                                  // 68
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {                                                                           // 70
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }                                                                                                                  // 72
  }                                                                                                                    // 73
}                                                                                                                      // 74
                                                                                                                       // 75
/**                                                                                                                    // 76
 * @param {ReactDOMComponent} inst                                                                                     // 77
 * @param {boolean} multiple                                                                                           // 78
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).                                         // 79
 * @private                                                                                                            // 80
 */                                                                                                                    // 81
function updateOptions(inst, multiple, propValue) {                                                                    // 82
  var selectedValue, i;                                                                                                // 83
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;                                               // 84
                                                                                                                       // 85
  if (multiple) {                                                                                                      // 86
    selectedValue = {};                                                                                                // 87
    for (i = 0; i < propValue.length; i++) {                                                                           // 88
      selectedValue['' + propValue[i]] = true;                                                                         // 89
    }                                                                                                                  // 90
    for (i = 0; i < options.length; i++) {                                                                             // 91
      var selected = selectedValue.hasOwnProperty(options[i].value);                                                   // 92
      if (options[i].selected !== selected) {                                                                          // 93
        options[i].selected = selected;                                                                                // 94
      }                                                                                                                // 95
    }                                                                                                                  // 96
  } else {                                                                                                             // 97
    // Do not set `select.value` as exact behavior isn't consistent across all                                         // 98
    // browsers for all cases.                                                                                         // 99
    selectedValue = '' + propValue;                                                                                    // 100
    for (i = 0; i < options.length; i++) {                                                                             // 101
      if (options[i].value === selectedValue) {                                                                        // 102
        options[i].selected = true;                                                                                    // 103
        return;                                                                                                        // 104
      }                                                                                                                // 105
    }                                                                                                                  // 106
    if (options.length) {                                                                                              // 107
      options[0].selected = true;                                                                                      // 108
    }                                                                                                                  // 109
  }                                                                                                                    // 110
}                                                                                                                      // 111
                                                                                                                       // 112
/**                                                                                                                    // 113
 * Implements a <select> host component that allows optionally setting the                                             // 114
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a                                        // 115
 * stringable. If `multiple` is true, the prop must be an array of stringables.                                        // 116
 *                                                                                                                     // 117
 * If `value` is not supplied (or null/undefined), user actions that change the                                        // 118
 * selected option will trigger updates to the rendered options.                                                       // 119
 *                                                                                                                     // 120
 * If it is supplied (and not null/undefined), the rendered options will not                                           // 121
 * update in response to user actions. Instead, the `value` prop must change in                                        // 122
 * order for the rendered options to update.                                                                           // 123
 *                                                                                                                     // 124
 * If `defaultValue` is provided, any options with the supplied values will be                                         // 125
 * selected.                                                                                                           // 126
 */                                                                                                                    // 127
var ReactDOMSelect = {                                                                                                 // 128
  getHostProps: function (inst, props) {                                                                               // 129
    return _assign({}, props, {                                                                                        // 130
      onChange: inst._wrapperState.onChange,                                                                           // 131
      value: undefined                                                                                                 // 132
    });                                                                                                                // 133
  },                                                                                                                   // 134
                                                                                                                       // 135
  mountWrapper: function (inst, props) {                                                                               // 136
    if (process.env.NODE_ENV !== 'production') {                                                                       // 137
      checkSelectPropTypes(inst, props);                                                                               // 138
    }                                                                                                                  // 139
                                                                                                                       // 140
    var value = LinkedValueUtils.getValue(props);                                                                      // 141
    inst._wrapperState = {                                                                                             // 142
      pendingUpdate: false,                                                                                            // 143
      initialValue: value != null ? value : props.defaultValue,                                                        // 144
      listeners: null,                                                                                                 // 145
      onChange: _handleChange.bind(inst),                                                                              // 146
      wasMultiple: Boolean(props.multiple)                                                                             // 147
    };                                                                                                                 // 148
                                                                                                                       // 149
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {                  // 150
      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;                                                                                 // 152
    }                                                                                                                  // 153
  },                                                                                                                   // 154
                                                                                                                       // 155
  getSelectValueContext: function (inst) {                                                                             // 156
    // ReactDOMOption looks at this initial value so the initial generated                                             // 157
    // markup has correct `selected` attributes                                                                        // 158
    return inst._wrapperState.initialValue;                                                                            // 159
  },                                                                                                                   // 160
                                                                                                                       // 161
  postUpdateWrapper: function (inst) {                                                                                 // 162
    var props = inst._currentElement.props;                                                                            // 163
                                                                                                                       // 164
    // After the initial mount, we control selected-ness manually so don't pass                                        // 165
    // this value down                                                                                                 // 166
    inst._wrapperState.initialValue = undefined;                                                                       // 167
                                                                                                                       // 168
    var wasMultiple = inst._wrapperState.wasMultiple;                                                                  // 169
    inst._wrapperState.wasMultiple = Boolean(props.multiple);                                                          // 170
                                                                                                                       // 171
    var value = LinkedValueUtils.getValue(props);                                                                      // 172
    if (value != null) {                                                                                               // 173
      inst._wrapperState.pendingUpdate = false;                                                                        // 174
      updateOptions(inst, Boolean(props.multiple), value);                                                             // 175
    } else if (wasMultiple !== Boolean(props.multiple)) {                                                              // 176
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.                                              // 177
      if (props.defaultValue != null) {                                                                                // 178
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);                                              // 179
      } else {                                                                                                         // 180
        // Revert the select back to its default unselected state.                                                     // 181
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');                                        // 182
      }                                                                                                                // 183
    }                                                                                                                  // 184
  }                                                                                                                    // 185
};                                                                                                                     // 186
                                                                                                                       // 187
function _handleChange(event) {                                                                                        // 188
  var props = this._currentElement.props;                                                                              // 189
  var returnValue = LinkedValueUtils.executeOnChange(props, event);                                                    // 190
                                                                                                                       // 191
  if (this._rootNodeID) {                                                                                              // 192
    this._wrapperState.pendingUpdate = true;                                                                           // 193
  }                                                                                                                    // 194
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);                                                     // 195
  return returnValue;                                                                                                  // 196
}                                                                                                                      // 197
                                                                                                                       // 198
module.exports = ReactDOMSelect;                                                                                       // 199
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMTextarea.js":["./reactProdInvariant","object-assign","./LinkedValueUtils","./ReactDOMComponentTree","./ReactUpdates","fbjs/lib/invariant","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMTextarea.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant'),                                                                  // 13
    _assign = require('object-assign');                                                                                // 14
                                                                                                                       // 15
var LinkedValueUtils = require('./LinkedValueUtils');                                                                  // 16
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 17
var ReactUpdates = require('./ReactUpdates');                                                                          // 18
                                                                                                                       // 19
var invariant = require('fbjs/lib/invariant');                                                                         // 20
var warning = require('fbjs/lib/warning');                                                                             // 21
                                                                                                                       // 22
var didWarnValueLink = false;                                                                                          // 23
var didWarnValDefaultVal = false;                                                                                      // 24
                                                                                                                       // 25
function forceUpdateIfMounted() {                                                                                      // 26
  if (this._rootNodeID) {                                                                                              // 27
    // DOM component is still mounted; update                                                                          // 28
    ReactDOMTextarea.updateWrapper(this);                                                                              // 29
  }                                                                                                                    // 30
}                                                                                                                      // 31
                                                                                                                       // 32
/**                                                                                                                    // 33
 * Implements a <textarea> host component that allows setting `value`, and                                             // 34
 * `defaultValue`. This differs from the traditional DOM API because value is                                          // 35
 * usually set as PCDATA children.                                                                                     // 36
 *                                                                                                                     // 37
 * If `value` is not supplied (or null/undefined), user actions that affect the                                        // 38
 * value will trigger updates to the element.                                                                          // 39
 *                                                                                                                     // 40
 * If `value` is supplied (and not null/undefined), the rendered element will                                          // 41
 * not trigger updates to the element. Instead, the `value` prop must change in                                        // 42
 * order for the rendered element to be updated.                                                                       // 43
 *                                                                                                                     // 44
 * The rendered element will be initialized with an empty value, the prop                                              // 45
 * `defaultValue` if specified, or the children content (deprecated).                                                  // 46
 */                                                                                                                    // 47
var ReactDOMTextarea = {                                                                                               // 48
  getHostProps: function (inst, props) {                                                                               // 49
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;
                                                                                                                       // 51
    // Always set children to the same thing. In IE9, the selection range will                                         // 52
    // get reset if `textContent` is mutated.  We could add a check in setTextContent                                  // 53
    // to only set the value if/when the value differs from the node value (which would                                // 54
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.                                 // 55
    // The value can be a boolean or object so that's why it's forced to be a string.                                  // 56
    var hostProps = _assign({}, props, {                                                                               // 57
      value: undefined,                                                                                                // 58
      defaultValue: undefined,                                                                                         // 59
      children: '' + inst._wrapperState.initialValue,                                                                  // 60
      onChange: inst._wrapperState.onChange                                                                            // 61
    });                                                                                                                // 62
                                                                                                                       // 63
    return hostProps;                                                                                                  // 64
  },                                                                                                                   // 65
                                                                                                                       // 66
  mountWrapper: function (inst, props) {                                                                               // 67
    if (process.env.NODE_ENV !== 'production') {                                                                       // 68
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);                                 // 69
      if (props.valueLink !== undefined && !didWarnValueLink) {                                                        // 70
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;                                                                                       // 72
      }                                                                                                                // 73
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {                    // 74
        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;                                                                                   // 76
      }                                                                                                                // 77
    }                                                                                                                  // 78
                                                                                                                       // 79
    var value = LinkedValueUtils.getValue(props);                                                                      // 80
    var initialValue = value;                                                                                          // 81
                                                                                                                       // 82
    // Only bother fetching default value if we're going to use it                                                     // 83
    if (value == null) {                                                                                               // 84
      var defaultValue = props.defaultValue;                                                                           // 85
      // TODO (yungsters): Remove support for children content in <textarea>.                                          // 86
      var children = props.children;                                                                                   // 87
      if (children != null) {                                                                                          // 88
        if (process.env.NODE_ENV !== 'production') {                                                                   // 89
          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }                                                                                                              // 91
        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {                                                                                 // 93
          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];                                                                                      // 95
        }                                                                                                              // 96
                                                                                                                       // 97
        defaultValue = '' + children;                                                                                  // 98
      }                                                                                                                // 99
      if (defaultValue == null) {                                                                                      // 100
        defaultValue = '';                                                                                             // 101
      }                                                                                                                // 102
      initialValue = defaultValue;                                                                                     // 103
    }                                                                                                                  // 104
                                                                                                                       // 105
    inst._wrapperState = {                                                                                             // 106
      initialValue: '' + initialValue,                                                                                 // 107
      listeners: null,                                                                                                 // 108
      onChange: _handleChange.bind(inst)                                                                               // 109
    };                                                                                                                 // 110
  },                                                                                                                   // 111
                                                                                                                       // 112
  updateWrapper: function (inst) {                                                                                     // 113
    var props = inst._currentElement.props;                                                                            // 114
                                                                                                                       // 115
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                        // 116
    var value = LinkedValueUtils.getValue(props);                                                                      // 117
    if (value != null) {                                                                                               // 118
      // Cast `value` to a string to ensure the value is set correctly. While                                          // 119
      // browsers typically do this as necessary, jsdom doesn't.                                                       // 120
      var newValue = '' + value;                                                                                       // 121
                                                                                                                       // 122
      // To avoid side effects (such as losing text selection), only set value if changed                              // 123
      if (newValue !== node.value) {                                                                                   // 124
        node.value = newValue;                                                                                         // 125
      }                                                                                                                // 126
      if (props.defaultValue == null) {                                                                                // 127
        node.defaultValue = newValue;                                                                                  // 128
      }                                                                                                                // 129
    }                                                                                                                  // 130
    if (props.defaultValue != null) {                                                                                  // 131
      node.defaultValue = props.defaultValue;                                                                          // 132
    }                                                                                                                  // 133
  },                                                                                                                   // 134
                                                                                                                       // 135
  postMountWrapper: function (inst) {                                                                                  // 136
    // This is in postMount because we need access to the DOM node, which is not                                       // 137
    // available until after the component has mounted.                                                                // 138
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                        // 139
    var textContent = node.textContent;                                                                                // 140
                                                                                                                       // 141
    // Only set node.value if textContent is equal to the expected                                                     // 142
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute                                      // 143
    // will populate textContent as well.                                                                              // 144
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/                                          // 145
    if (textContent === inst._wrapperState.initialValue) {                                                             // 146
      node.value = textContent;                                                                                        // 147
    }                                                                                                                  // 148
  }                                                                                                                    // 149
};                                                                                                                     // 150
                                                                                                                       // 151
function _handleChange(event) {                                                                                        // 152
  var props = this._currentElement.props;                                                                              // 153
  var returnValue = LinkedValueUtils.executeOnChange(props, event);                                                    // 154
  ReactUpdates.asap(forceUpdateIfMounted, this);                                                                       // 155
  return returnValue;                                                                                                  // 156
}                                                                                                                      // 157
                                                                                                                       // 158
module.exports = ReactDOMTextarea;                                                                                     // 159
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactMultiChild.js":["./reactProdInvariant","./ReactComponentEnvironment","./ReactInstanceMap","./ReactInstrumentation","react/lib/ReactCurrentOwner","./ReactReconciler","./ReactChildReconciler","fbjs/lib/emptyFunction","./flattenChildren","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactMultiChild.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var ReactComponentEnvironment = require('./ReactComponentEnvironment');                                                // 15
var ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 16
var ReactInstrumentation = require('./ReactInstrumentation');                                                          // 17
                                                                                                                       // 18
var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');                                                        // 19
var ReactReconciler = require('./ReactReconciler');                                                                    // 20
var ReactChildReconciler = require('./ReactChildReconciler');                                                          // 21
                                                                                                                       // 22
var emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 23
var flattenChildren = require('./flattenChildren');                                                                    // 24
var invariant = require('fbjs/lib/invariant');                                                                         // 25
                                                                                                                       // 26
/**                                                                                                                    // 27
 * Make an update for markup to be rendered and inserted at a supplied index.                                          // 28
 *                                                                                                                     // 29
 * @param {string} markup Markup that renders into an element.                                                         // 30
 * @param {number} toIndex Destination index.                                                                          // 31
 * @private                                                                                                            // 32
 */                                                                                                                    // 33
function makeInsertMarkup(markup, afterNode, toIndex) {                                                                // 34
  // NOTE: Null values reduce hidden classes.                                                                          // 35
  return {                                                                                                             // 36
    type: 'INSERT_MARKUP',                                                                                             // 37
    content: markup,                                                                                                   // 38
    fromIndex: null,                                                                                                   // 39
    fromNode: null,                                                                                                    // 40
    toIndex: toIndex,                                                                                                  // 41
    afterNode: afterNode                                                                                               // 42
  };                                                                                                                   // 43
}                                                                                                                      // 44
                                                                                                                       // 45
/**                                                                                                                    // 46
 * Make an update for moving an existing element to another index.                                                     // 47
 *                                                                                                                     // 48
 * @param {number} fromIndex Source index of the existing element.                                                     // 49
 * @param {number} toIndex Destination index of the element.                                                           // 50
 * @private                                                                                                            // 51
 */                                                                                                                    // 52
function makeMove(child, afterNode, toIndex) {                                                                         // 53
  // NOTE: Null values reduce hidden classes.                                                                          // 54
  return {                                                                                                             // 55
    type: 'MOVE_EXISTING',                                                                                             // 56
    content: null,                                                                                                     // 57
    fromIndex: child._mountIndex,                                                                                      // 58
    fromNode: ReactReconciler.getHostNode(child),                                                                      // 59
    toIndex: toIndex,                                                                                                  // 60
    afterNode: afterNode                                                                                               // 61
  };                                                                                                                   // 62
}                                                                                                                      // 63
                                                                                                                       // 64
/**                                                                                                                    // 65
 * Make an update for removing an element at an index.                                                                 // 66
 *                                                                                                                     // 67
 * @param {number} fromIndex Index of the element to remove.                                                           // 68
 * @private                                                                                                            // 69
 */                                                                                                                    // 70
function makeRemove(child, node) {                                                                                     // 71
  // NOTE: Null values reduce hidden classes.                                                                          // 72
  return {                                                                                                             // 73
    type: 'REMOVE_NODE',                                                                                               // 74
    content: null,                                                                                                     // 75
    fromIndex: child._mountIndex,                                                                                      // 76
    fromNode: node,                                                                                                    // 77
    toIndex: null,                                                                                                     // 78
    afterNode: null                                                                                                    // 79
  };                                                                                                                   // 80
}                                                                                                                      // 81
                                                                                                                       // 82
/**                                                                                                                    // 83
 * Make an update for setting the markup of a node.                                                                    // 84
 *                                                                                                                     // 85
 * @param {string} markup Markup that renders into an element.                                                         // 86
 * @private                                                                                                            // 87
 */                                                                                                                    // 88
function makeSetMarkup(markup) {                                                                                       // 89
  // NOTE: Null values reduce hidden classes.                                                                          // 90
  return {                                                                                                             // 91
    type: 'SET_MARKUP',                                                                                                // 92
    content: markup,                                                                                                   // 93
    fromIndex: null,                                                                                                   // 94
    fromNode: null,                                                                                                    // 95
    toIndex: null,                                                                                                     // 96
    afterNode: null                                                                                                    // 97
  };                                                                                                                   // 98
}                                                                                                                      // 99
                                                                                                                       // 100
/**                                                                                                                    // 101
 * Make an update for setting the text content.                                                                        // 102
 *                                                                                                                     // 103
 * @param {string} textContent Text content to set.                                                                    // 104
 * @private                                                                                                            // 105
 */                                                                                                                    // 106
function makeTextContent(textContent) {                                                                                // 107
  // NOTE: Null values reduce hidden classes.                                                                          // 108
  return {                                                                                                             // 109
    type: 'TEXT_CONTENT',                                                                                              // 110
    content: textContent,                                                                                              // 111
    fromIndex: null,                                                                                                   // 112
    fromNode: null,                                                                                                    // 113
    toIndex: null,                                                                                                     // 114
    afterNode: null                                                                                                    // 115
  };                                                                                                                   // 116
}                                                                                                                      // 117
                                                                                                                       // 118
/**                                                                                                                    // 119
 * Push an update, if any, onto the queue. Creates a new queue if none is                                              // 120
 * passed and always returns the queue. Mutative.                                                                      // 121
 */                                                                                                                    // 122
function enqueue(queue, update) {                                                                                      // 123
  if (update) {                                                                                                        // 124
    queue = queue || [];                                                                                               // 125
    queue.push(update);                                                                                                // 126
  }                                                                                                                    // 127
  return queue;                                                                                                        // 128
}                                                                                                                      // 129
                                                                                                                       // 130
/**                                                                                                                    // 131
 * Processes any enqueued updates.                                                                                     // 132
 *                                                                                                                     // 133
 * @private                                                                                                            // 134
 */                                                                                                                    // 135
function processQueue(inst, updateQueue) {                                                                             // 136
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);                                                 // 137
}                                                                                                                      // 138
                                                                                                                       // 139
var setChildrenForInstrumentation = emptyFunction;                                                                     // 140
if (process.env.NODE_ENV !== 'production') {                                                                           // 141
  var getDebugID = function (inst) {                                                                                   // 142
    if (!inst._debugID) {                                                                                              // 143
      // Check for ART-like instances. TODO: This is silly/gross.                                                      // 144
      var internal;                                                                                                    // 145
      if (internal = ReactInstanceMap.get(inst)) {                                                                     // 146
        inst = internal;                                                                                               // 147
      }                                                                                                                // 148
    }                                                                                                                  // 149
    return inst._debugID;                                                                                              // 150
  };                                                                                                                   // 151
  setChildrenForInstrumentation = function (children) {                                                                // 152
    var debugID = getDebugID(this);                                                                                    // 153
    // TODO: React Native empty components are also multichild.                                                        // 154
    // This means they still get into this method but don't have _debugID.                                             // 155
    if (debugID !== 0) {                                                                                               // 156
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {      // 157
        return children[key]._debugID;                                                                                 // 158
      }) : []);                                                                                                        // 159
    }                                                                                                                  // 160
  };                                                                                                                   // 161
}                                                                                                                      // 162
                                                                                                                       // 163
/**                                                                                                                    // 164
 * ReactMultiChild are capable of reconciling multiple children.                                                       // 165
 *                                                                                                                     // 166
 * @class ReactMultiChild                                                                                              // 167
 * @internal                                                                                                           // 168
 */                                                                                                                    // 169
var ReactMultiChild = {                                                                                                // 170
                                                                                                                       // 171
  /**                                                                                                                  // 172
   * Provides common functionality for components that must reconcile multiple                                         // 173
   * children. This is used by `ReactDOMComponent` to mount, update, and                                               // 174
   * unmount child components.                                                                                         // 175
   *                                                                                                                   // 176
   * @lends {ReactMultiChild.prototype}                                                                                // 177
   */                                                                                                                  // 178
  Mixin: {                                                                                                             // 179
                                                                                                                       // 180
    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {                                  // 181
      if (process.env.NODE_ENV !== 'production') {                                                                     // 182
        var selfDebugID = getDebugID(this);                                                                            // 183
        if (this._currentElement) {                                                                                    // 184
          try {                                                                                                        // 185
            ReactCurrentOwner.current = this._currentElement._owner;                                                   // 186
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);        // 187
          } finally {                                                                                                  // 188
            ReactCurrentOwner.current = null;                                                                          // 189
          }                                                                                                            // 190
        }                                                                                                              // 191
      }                                                                                                                // 192
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);                           // 193
    },                                                                                                                 // 194
                                                                                                                       // 195
    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;                                                                                                // 197
      var selfDebugID = 0;                                                                                             // 198
      if (process.env.NODE_ENV !== 'production') {                                                                     // 199
        selfDebugID = getDebugID(this);                                                                                // 200
        if (this._currentElement) {                                                                                    // 201
          try {                                                                                                        // 202
            ReactCurrentOwner.current = this._currentElement._owner;                                                   // 203
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);                                   // 204
          } finally {                                                                                                  // 205
            ReactCurrentOwner.current = null;                                                                          // 206
          }                                                                                                            // 207
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;                                                                                         // 209
        }                                                                                                              // 210
      }                                                                                                                // 211
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);                                         // 212
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;                                                                                             // 214
    },                                                                                                                 // 215
                                                                                                                       // 216
    /**                                                                                                                // 217
     * Generates a "mount image" for each of the supplied children. In the case                                        // 218
     * of `ReactDOMComponent`, a mount image is a string of markup.                                                    // 219
     *                                                                                                                 // 220
     * @param {?object} nestedChildren Nested child maps.                                                              // 221
     * @return {array} An array of mounted representations.                                                            // 222
     * @internal                                                                                                       // 223
     */                                                                                                                // 224
    mountChildren: function (nestedChildren, transaction, context) {                                                   // 225
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);                        // 226
      this._renderedChildren = children;                                                                               // 227
                                                                                                                       // 228
      var mountImages = [];                                                                                            // 229
      var index = 0;                                                                                                   // 230
      for (var name in children) {                                                                                     // 231
        if (children.hasOwnProperty(name)) {                                                                           // 232
          var child = children[name];                                                                                  // 233
          var selfDebugID = 0;                                                                                         // 234
          if (process.env.NODE_ENV !== 'production') {                                                                 // 235
            selfDebugID = getDebugID(this);                                                                            // 236
          }                                                                                                            // 237
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;                                                                                 // 239
          mountImages.push(mountImage);                                                                                // 240
        }                                                                                                              // 241
      }                                                                                                                // 242
                                                                                                                       // 243
      if (process.env.NODE_ENV !== 'production') {                                                                     // 244
        setChildrenForInstrumentation.call(this, children);                                                            // 245
      }                                                                                                                // 246
                                                                                                                       // 247
      return mountImages;                                                                                              // 248
    },                                                                                                                 // 249
                                                                                                                       // 250
    /**                                                                                                                // 251
     * Replaces any rendered children with a text content string.                                                      // 252
     *                                                                                                                 // 253
     * @param {string} nextContent String of content.                                                                  // 254
     * @internal                                                                                                       // 255
     */                                                                                                                // 256
    updateTextContent: function (nextContent) {                                                                        // 257
      var prevChildren = this._renderedChildren;                                                                       // 258
      // Remove any rendered children.                                                                                 // 259
      ReactChildReconciler.unmountChildren(prevChildren, false);                                                       // 260
      for (var name in prevChildren) {                                                                                 // 261
        if (prevChildren.hasOwnProperty(name)) {                                                                       // 262
          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }                                                                                                              // 264
      }                                                                                                                // 265
      // Set new text content.                                                                                         // 266
      var updates = [makeTextContent(nextContent)];                                                                    // 267
      processQueue(this, updates);                                                                                     // 268
    },                                                                                                                 // 269
                                                                                                                       // 270
    /**                                                                                                                // 271
     * Replaces any rendered children with a markup string.                                                            // 272
     *                                                                                                                 // 273
     * @param {string} nextMarkup String of markup.                                                                    // 274
     * @internal                                                                                                       // 275
     */                                                                                                                // 276
    updateMarkup: function (nextMarkup) {                                                                              // 277
      var prevChildren = this._renderedChildren;                                                                       // 278
      // Remove any rendered children.                                                                                 // 279
      ReactChildReconciler.unmountChildren(prevChildren, false);                                                       // 280
      for (var name in prevChildren) {                                                                                 // 281
        if (prevChildren.hasOwnProperty(name)) {                                                                       // 282
          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }                                                                                                              // 284
      }                                                                                                                // 285
      var updates = [makeSetMarkup(nextMarkup)];                                                                       // 286
      processQueue(this, updates);                                                                                     // 287
    },                                                                                                                 // 288
                                                                                                                       // 289
    /**                                                                                                                // 290
     * Updates the rendered children with new children.                                                                // 291
     *                                                                                                                 // 292
     * @param {?object} nextNestedChildrenElements Nested child element maps.                                          // 293
     * @param {ReactReconcileTransaction} transaction                                                                  // 294
     * @internal                                                                                                       // 295
     */                                                                                                                // 296
    updateChildren: function (nextNestedChildrenElements, transaction, context) {                                      // 297
      // Hook used by React ART                                                                                        // 298
      this._updateChildren(nextNestedChildrenElements, transaction, context);                                          // 299
    },                                                                                                                 // 300
                                                                                                                       // 301
    /**                                                                                                                // 302
     * @param {?object} nextNestedChildrenElements Nested child element maps.                                          // 303
     * @param {ReactReconcileTransaction} transaction                                                                  // 304
     * @final                                                                                                          // 305
     * @protected                                                                                                      // 306
     */                                                                                                                // 307
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {                                     // 308
      var prevChildren = this._renderedChildren;                                                                       // 309
      var removedNodes = {};                                                                                           // 310
      var mountImages = [];                                                                                            // 311
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {                                                                            // 313
        return;                                                                                                        // 314
      }                                                                                                                // 315
      var updates = null;                                                                                              // 316
      var name;                                                                                                        // 317
      // `nextIndex` will increment for each child in `nextChildren`, but                                              // 318
      // `lastIndex` will be the last index visited in `prevChildren`.                                                 // 319
      var nextIndex = 0;                                                                                               // 320
      var lastIndex = 0;                                                                                               // 321
      // `nextMountIndex` will increment for each newly mounted child.                                                 // 322
      var nextMountIndex = 0;                                                                                          // 323
      var lastPlacedNode = null;                                                                                       // 324
      for (name in nextChildren) {                                                                                     // 325
        if (!nextChildren.hasOwnProperty(name)) {                                                                      // 326
          continue;                                                                                                    // 327
        }                                                                                                              // 328
        var prevChild = prevChildren && prevChildren[name];                                                            // 329
        var nextChild = nextChildren[name];                                                                            // 330
        if (prevChild === nextChild) {                                                                                 // 331
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));                 // 332
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                      // 333
          prevChild._mountIndex = nextIndex;                                                                           // 334
        } else {                                                                                                       // 335
          if (prevChild) {                                                                                             // 336
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.                                       // 337
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                    // 338
            // The `removedNodes` loop below will actually remove the child.                                           // 339
          }                                                                                                            // 340
          // The child must be instantiated before it's mounted.                                                       // 341
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;                                                                                            // 343
        }                                                                                                              // 344
        nextIndex++;                                                                                                   // 345
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);                                                       // 346
      }                                                                                                                // 347
      // Remove children that are no longer present.                                                                   // 348
      for (name in removedNodes) {                                                                                     // 349
        if (removedNodes.hasOwnProperty(name)) {                                                                       // 350
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));                      // 351
        }                                                                                                              // 352
      }                                                                                                                // 353
      if (updates) {                                                                                                   // 354
        processQueue(this, updates);                                                                                   // 355
      }                                                                                                                // 356
      this._renderedChildren = nextChildren;                                                                           // 357
                                                                                                                       // 358
      if (process.env.NODE_ENV !== 'production') {                                                                     // 359
        setChildrenForInstrumentation.call(this, nextChildren);                                                        // 360
      }                                                                                                                // 361
    },                                                                                                                 // 362
                                                                                                                       // 363
    /**                                                                                                                // 364
     * Unmounts all rendered children. This should be used to clean up children                                        // 365
     * when this component is unmounted. It does not actually perform any                                              // 366
     * backend operations.                                                                                             // 367
     *                                                                                                                 // 368
     * @internal                                                                                                       // 369
     */                                                                                                                // 370
    unmountChildren: function (safely) {                                                                               // 371
      var renderedChildren = this._renderedChildren;                                                                   // 372
      ReactChildReconciler.unmountChildren(renderedChildren, safely);                                                  // 373
      this._renderedChildren = null;                                                                                   // 374
    },                                                                                                                 // 375
                                                                                                                       // 376
    /**                                                                                                                // 377
     * Moves a child component to the supplied index.                                                                  // 378
     *                                                                                                                 // 379
     * @param {ReactComponent} child Component to move.                                                                // 380
     * @param {number} toIndex Destination index of the element.                                                       // 381
     * @param {number} lastIndex Last index visited of the siblings of `child`.                                        // 382
     * @protected                                                                                                      // 383
     */                                                                                                                // 384
    moveChild: function (child, afterNode, toIndex, lastIndex) {                                                       // 385
      // If the index of `child` is less than `lastIndex`, then it needs to                                            // 386
      // be moved. Otherwise, we do not need to move it because a child will be                                        // 387
      // inserted or moved before `child`.                                                                             // 388
      if (child._mountIndex < lastIndex) {                                                                             // 389
        return makeMove(child, afterNode, toIndex);                                                                    // 390
      }                                                                                                                // 391
    },                                                                                                                 // 392
                                                                                                                       // 393
    /**                                                                                                                // 394
     * Creates a child component.                                                                                      // 395
     *                                                                                                                 // 396
     * @param {ReactComponent} child Component to create.                                                              // 397
     * @param {string} mountImage Markup to insert.                                                                    // 398
     * @protected                                                                                                      // 399
     */                                                                                                                // 400
    createChild: function (child, afterNode, mountImage) {                                                             // 401
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);                                               // 402
    },                                                                                                                 // 403
                                                                                                                       // 404
    /**                                                                                                                // 405
     * Removes a child component.                                                                                      // 406
     *                                                                                                                 // 407
     * @param {ReactComponent} child Child to remove.                                                                  // 408
     * @protected                                                                                                      // 409
     */                                                                                                                // 410
    removeChild: function (child, node) {                                                                              // 411
      return makeRemove(child, node);                                                                                  // 412
    },                                                                                                                 // 413
                                                                                                                       // 414
    /**                                                                                                                // 415
     * Mounts a child with the supplied name.                                                                          // 416
     *                                                                                                                 // 417
     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 418
     *                                                                                                                 // 419
     * @param {ReactComponent} child Component to mount.                                                               // 420
     * @param {string} name Name of the child.                                                                         // 421
     * @param {number} index Index at which to insert the child.                                                       // 422
     * @param {ReactReconcileTransaction} transaction                                                                  // 423
     * @private                                                                                                        // 424
     */                                                                                                                // 425
    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {                         // 426
      child._mountIndex = index;                                                                                       // 427
      return this.createChild(child, afterNode, mountImage);                                                           // 428
    },                                                                                                                 // 429
                                                                                                                       // 430
    /**                                                                                                                // 431
     * Unmounts a rendered child.                                                                                      // 432
     *                                                                                                                 // 433
     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 434
     *                                                                                                                 // 435
     * @param {ReactComponent} child Component to unmount.                                                             // 436
     * @private                                                                                                        // 437
     */                                                                                                                // 438
    _unmountChild: function (child, node) {                                                                            // 439
      var update = this.removeChild(child, node);                                                                      // 440
      child._mountIndex = null;                                                                                        // 441
      return update;                                                                                                   // 442
    }                                                                                                                  // 443
                                                                                                                       // 444
  }                                                                                                                    // 445
                                                                                                                       // 446
};                                                                                                                     // 447
                                                                                                                       // 448
module.exports = ReactMultiChild;                                                                                      // 449
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactComponentEnvironment.js":["./reactProdInvariant","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactComponentEnvironment.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2014-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var _prodInvariant = require('./reactProdInvariant');                                                                  // 14
                                                                                                                       // 15
var invariant = require('fbjs/lib/invariant');                                                                         // 16
                                                                                                                       // 17
var injected = false;                                                                                                  // 18
                                                                                                                       // 19
var ReactComponentEnvironment = {                                                                                      // 20
                                                                                                                       // 21
  /**                                                                                                                  // 22
   * Optionally injectable hook for swapping out mount images in the middle of                                         // 23
   * the tree.                                                                                                         // 24
   */                                                                                                                  // 25
  replaceNodeWithMarkup: null,                                                                                         // 26
                                                                                                                       // 27
  /**                                                                                                                  // 28
   * Optionally injectable hook for processing a queue of child updates. Will                                          // 29
   * later move into MultiChildComponents.                                                                             // 30
   */                                                                                                                  // 31
  processChildrenUpdates: null,                                                                                        // 32
                                                                                                                       // 33
  injection: {                                                                                                         // 34
    injectEnvironment: function (environment) {                                                                        // 35
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;                             // 37
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;                           // 38
      injected = true;                                                                                                 // 39
    }                                                                                                                  // 40
  }                                                                                                                    // 41
                                                                                                                       // 42
};                                                                                                                     // 43
                                                                                                                       // 44
module.exports = ReactComponentEnvironment;                                                                            // 45
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactInstanceMap.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactInstanceMap.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * `ReactInstanceMap` maintains a mapping from a public facing stateful                                                // 14
 * instance (key) and the internal representation (value). This allows public                                          // 15
 * methods to accept the user facing instance as an argument and map them back                                         // 16
 * to internal methods.                                                                                                // 17
 */                                                                                                                    // 18
                                                                                                                       // 19
// TODO: Replace this with ES6: var ReactInstanceMap = new Map();                                                      // 20
                                                                                                                       // 21
var ReactInstanceMap = {                                                                                               // 22
                                                                                                                       // 23
  /**                                                                                                                  // 24
   * This API should be called `delete` but we'd have to make sure to always                                           // 25
   * transform these to strings for IE support. When this transform is fully                                           // 26
   * supported we can rename it.                                                                                       // 27
   */                                                                                                                  // 28
  remove: function (key) {                                                                                             // 29
    key._reactInternalInstance = undefined;                                                                            // 30
  },                                                                                                                   // 31
                                                                                                                       // 32
  get: function (key) {                                                                                                // 33
    return key._reactInternalInstance;                                                                                 // 34
  },                                                                                                                   // 35
                                                                                                                       // 36
  has: function (key) {                                                                                                // 37
    return key._reactInternalInstance !== undefined;                                                                   // 38
  },                                                                                                                   // 39
                                                                                                                       // 40
  set: function (key, value) {                                                                                         // 41
    key._reactInternalInstance = value;                                                                                // 42
  }                                                                                                                    // 43
                                                                                                                       // 44
};                                                                                                                     // 45
                                                                                                                       // 46
module.exports = ReactInstanceMap;                                                                                     // 47
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ReactChildReconciler.js":["./ReactReconciler","./instantiateReactComponent","./KeyEscapeUtils","./shouldUpdateReactComponent","./traverseAllChildren","fbjs/lib/warning","react/lib/ReactComponentTreeHook",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactChildReconciler.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2014-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ReactReconciler = require('./ReactReconciler');                                                                    // 13
                                                                                                                       // 14
var instantiateReactComponent = require('./instantiateReactComponent');                                                // 15
var KeyEscapeUtils = require('./KeyEscapeUtils');                                                                      // 16
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');                                              // 17
var traverseAllChildren = require('./traverseAllChildren');                                                            // 18
var warning = require('fbjs/lib/warning');                                                                             // 19
                                                                                                                       // 20
var ReactComponentTreeHook;                                                                                            // 21
                                                                                                                       // 22
if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {                                // 23
  // Temporary hack.                                                                                                   // 24
  // Inline requires don't work well with Jest:                                                                        // 25
  // https://github.com/facebook/react/issues/7240                                                                     // 26
  // Remove the inline requires when we don't need them anymore:                                                       // 27
  // https://github.com/facebook/react/pull/7178                                                                       // 28
  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                                // 29
}                                                                                                                      // 30
                                                                                                                       // 31
function instantiateChild(childInstances, child, name, selfDebugID) {                                                  // 32
  // We found a component instance.                                                                                    // 33
  var keyUnique = childInstances[name] === undefined;                                                                  // 34
  if (process.env.NODE_ENV !== 'production') {                                                                         // 35
    if (!ReactComponentTreeHook) {                                                                                     // 36
      ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                            // 37
    }                                                                                                                  // 38
    if (!keyUnique) {                                                                                                  // 39
      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }                                                                                                                  // 41
  }                                                                                                                    // 42
  if (child != null && keyUnique) {                                                                                    // 43
    childInstances[name] = instantiateReactComponent(child, true);                                                     // 44
  }                                                                                                                    // 45
}                                                                                                                      // 46
                                                                                                                       // 47
/**                                                                                                                    // 48
 * ReactChildReconciler provides helpers for initializing or updating a set of                                         // 49
 * children. Its output is suitable for passing it onto ReactMultiChild which                                          // 50
 * does diffed reordering and insertion.                                                                               // 51
 */                                                                                                                    // 52
var ReactChildReconciler = {                                                                                           // 53
  /**                                                                                                                  // 54
   * Generates a "mount image" for each of the supplied children. In the case                                          // 55
   * of `ReactDOMComponent`, a mount image is a string of markup.                                                      // 56
   *                                                                                                                   // 57
   * @param {?object} nestedChildNodes Nested child maps.                                                              // 58
   * @return {?object} A set of child instances.                                                                       // 59
   * @internal                                                                                                         // 60
   */                                                                                                                  // 61
  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots  // 62
  ) {                                                                                                                  // 63
    if (nestedChildNodes == null) {                                                                                    // 64
      return null;                                                                                                     // 65
    }                                                                                                                  // 66
    var childInstances = {};                                                                                           // 67
                                                                                                                       // 68
    if (process.env.NODE_ENV !== 'production') {                                                                       // 69
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {                                       // 70
        return instantiateChild(childInsts, child, name, selfDebugID);                                                 // 71
      }, childInstances);                                                                                              // 72
    } else {                                                                                                           // 73
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);                                         // 74
    }                                                                                                                  // 75
    return childInstances;                                                                                             // 76
  },                                                                                                                   // 77
                                                                                                                       // 78
  /**                                                                                                                  // 79
   * Updates the rendered children and returns a new set of children.                                                  // 80
   *                                                                                                                   // 81
   * @param {?object} prevChildren Previously initialized set of children.                                             // 82
   * @param {?object} nextChildren Flat child element maps.                                                            // 83
   * @param {ReactReconcileTransaction} transaction                                                                    // 84
   * @param {object} context                                                                                           // 85
   * @return {?object} A new set of child instances.                                                                   // 86
   * @internal                                                                                                         // 87
   */                                                                                                                  // 88
  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
  ) {                                                                                                                  // 90
    // We currently don't have a way to track moves here but if we use iterators                                       // 91
    // instead of for..in we can zip the iterators and check if an item has                                            // 92
    // moved.                                                                                                          // 93
    // TODO: If nothing has changed, return the prevChildren object so that we                                         // 94
    // can quickly bailout if nothing has changed.                                                                     // 95
    if (!nextChildren && !prevChildren) {                                                                              // 96
      return;                                                                                                          // 97
    }                                                                                                                  // 98
    var name;                                                                                                          // 99
    var prevChild;                                                                                                     // 100
    for (name in nextChildren) {                                                                                       // 101
      if (!nextChildren.hasOwnProperty(name)) {                                                                        // 102
        continue;                                                                                                      // 103
      }                                                                                                                // 104
      prevChild = prevChildren && prevChildren[name];                                                                  // 105
      var prevElement = prevChild && prevChild._currentElement;                                                        // 106
      var nextElement = nextChildren[name];                                                                            // 107
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {                                 // 108
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);                                // 109
        nextChildren[name] = prevChild;                                                                                // 110
      } else {                                                                                                         // 111
        if (prevChild) {                                                                                               // 112
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);                                                 // 113
          ReactReconciler.unmountComponent(prevChild, false);                                                          // 114
        }                                                                                                              // 115
        // The child must be instantiated before it's mounted.                                                         // 116
        var nextChildInstance = instantiateReactComponent(nextElement, true);                                          // 117
        nextChildren[name] = nextChildInstance;                                                                        // 118
        // Creating mount image now ensures refs are resolved in right order                                           // 119
        // (see https://github.com/facebook/react/pull/7101 for explanation).                                          // 120
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);                                                                         // 122
      }                                                                                                                // 123
    }                                                                                                                  // 124
    // Unmount children that are no longer present.                                                                    // 125
    for (name in prevChildren) {                                                                                       // 126
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {                 // 127
        prevChild = prevChildren[name];                                                                                // 128
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);                                                   // 129
        ReactReconciler.unmountComponent(prevChild, false);                                                            // 130
      }                                                                                                                // 131
    }                                                                                                                  // 132
  },                                                                                                                   // 133
                                                                                                                       // 134
  /**                                                                                                                  // 135
   * Unmounts all rendered children. This should be used to clean up children                                          // 136
   * when this component is unmounted.                                                                                 // 137
   *                                                                                                                   // 138
   * @param {?object} renderedChildren Previously initialized set of children.                                         // 139
   * @internal                                                                                                         // 140
   */                                                                                                                  // 141
  unmountChildren: function (renderedChildren, safely) {                                                               // 142
    for (var name in renderedChildren) {                                                                               // 143
      if (renderedChildren.hasOwnProperty(name)) {                                                                     // 144
        var renderedChild = renderedChildren[name];                                                                    // 145
        ReactReconciler.unmountComponent(renderedChild, safely);                                                       // 146
      }                                                                                                                // 147
    }                                                                                                                  // 148
  }                                                                                                                    // 149
                                                                                                                       // 150
};                                                                                                                     // 151
                                                                                                                       // 152
module.exports = ReactChildReconciler;                                                                                 // 153
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"instantiateReactComponent.js":["./reactProdInvariant","object-assign","./ReactCompositeComponent","./ReactEmptyComponent","./ReactHostComponent","./getNextDebugID","fbjs/lib/invariant","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/instantiateReactComponent.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant'),                                                                  // 13
    _assign = require('object-assign');                                                                                // 14
                                                                                                                       // 15
var ReactCompositeComponent = require('./ReactCompositeComponent');                                                    // 16
var ReactEmptyComponent = require('./ReactEmptyComponent');                                                            // 17
var ReactHostComponent = require('./ReactHostComponent');                                                              // 18
                                                                                                                       // 19
var getNextDebugID = require('./getNextDebugID');                                                                      // 20
var invariant = require('fbjs/lib/invariant');                                                                         // 21
var warning = require('fbjs/lib/warning');                                                                             // 22
                                                                                                                       // 23
// To avoid a cyclic dependency, we create the final class in this module                                              // 24
var ReactCompositeComponentWrapper = function (element) {                                                              // 25
  this.construct(element);                                                                                             // 26
};                                                                                                                     // 27
_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {                                           // 28
  _instantiateReactComponent: instantiateReactComponent                                                                // 29
});                                                                                                                    // 30
                                                                                                                       // 31
function getDeclarationErrorAddendum(owner) {                                                                          // 32
  if (owner) {                                                                                                         // 33
    var name = owner.getName();                                                                                        // 34
    if (name) {                                                                                                        // 35
      return ' Check the render method of `' + name + '`.';                                                            // 36
    }                                                                                                                  // 37
  }                                                                                                                    // 38
  return '';                                                                                                           // 39
}                                                                                                                      // 40
                                                                                                                       // 41
/**                                                                                                                    // 42
 * Check if the type reference is a known internal type. I.e. not a user                                               // 43
 * provided composite type.                                                                                            // 44
 *                                                                                                                     // 45
 * @param {function} type                                                                                              // 46
 * @return {boolean} Returns true if this is a valid internal type.                                                    // 47
 */                                                                                                                    // 48
function isInternalComponentType(type) {                                                                               // 49
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}                                                                                                                      // 51
                                                                                                                       // 52
/**                                                                                                                    // 53
 * Given a ReactNode, create an instance that will actually be mounted.                                                // 54
 *                                                                                                                     // 55
 * @param {ReactNode} node                                                                                             // 56
 * @param {boolean} shouldHaveDebugID                                                                                  // 57
 * @return {object} A new instance of the element's constructor.                                                       // 58
 * @protected                                                                                                          // 59
 */                                                                                                                    // 60
function instantiateReactComponent(node, shouldHaveDebugID) {                                                          // 61
  var instance;                                                                                                        // 62
                                                                                                                       // 63
  if (node === null || node === false) {                                                                               // 64
    instance = ReactEmptyComponent.create(instantiateReactComponent);                                                  // 65
  } else if (typeof node === 'object') {                                                                               // 66
    var element = node;                                                                                                // 67
    var type = element.type;                                                                                           // 68
    if (typeof type !== 'function' && typeof type !== 'string') {                                                      // 69
      var info = '';                                                                                                   // 70
      if (process.env.NODE_ENV !== 'production') {                                                                     // 71
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {       // 72
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';                  // 73
        }                                                                                                              // 74
      }                                                                                                                // 75
      info += getDeclarationErrorAddendum(element._owner);                                                             // 76
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
    }                                                                                                                  // 78
                                                                                                                       // 79
    // Special case string values                                                                                      // 80
    if (typeof element.type === 'string') {                                                                            // 81
      instance = ReactHostComponent.createInternalComponent(element);                                                  // 82
    } else if (isInternalComponentType(element.type)) {                                                                // 83
      // This is temporarily available for custom components that are not string                                       // 84
      // representations. I.e. ART. Once those are updated to use the string                                           // 85
      // representation, we can drop this code path.                                                                   // 86
      instance = new element.type(element);                                                                            // 87
                                                                                                                       // 88
      // We renamed this. Allow the old name for compat. :(                                                            // 89
      if (!instance.getHostNode) {                                                                                     // 90
        instance.getHostNode = instance.getNativeNode;                                                                 // 91
      }                                                                                                                // 92
    } else {                                                                                                           // 93
      instance = new ReactCompositeComponentWrapper(element);                                                          // 94
    }                                                                                                                  // 95
  } else if (typeof node === 'string' || typeof node === 'number') {                                                   // 96
    instance = ReactHostComponent.createInstanceForText(node);                                                         // 97
  } else {                                                                                                             // 98
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
  }                                                                                                                    // 100
                                                                                                                       // 101
  if (process.env.NODE_ENV !== 'production') {                                                                         // 102
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }                                                                                                                    // 104
                                                                                                                       // 105
  // These two fields are used by the DOM and ART diffing algorithms                                                   // 106
  // respectively. Instead of using expandos on components, we should be                                               // 107
  // storing the state needed by the diffing algorithms elsewhere.                                                     // 108
  instance._mountIndex = 0;                                                                                            // 109
  instance._mountImage = null;                                                                                         // 110
                                                                                                                       // 111
  if (process.env.NODE_ENV !== 'production') {                                                                         // 112
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;                                                      // 113
  }                                                                                                                    // 114
                                                                                                                       // 115
  // Internal instances should fully constructed at this point, so they should                                         // 116
  // not get any new fields added to them at this point.                                                               // 117
  if (process.env.NODE_ENV !== 'production') {                                                                         // 118
    if (Object.preventExtensions) {                                                                                    // 119
      Object.preventExtensions(instance);                                                                              // 120
    }                                                                                                                  // 121
  }                                                                                                                    // 122
                                                                                                                       // 123
  return instance;                                                                                                     // 124
}                                                                                                                      // 125
                                                                                                                       // 126
module.exports = instantiateReactComponent;                                                                            // 127
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactCompositeComponent.js":["./reactProdInvariant","object-assign","react/lib/React","./ReactComponentEnvironment","react/lib/ReactCurrentOwner","./ReactErrorUtils","./ReactInstanceMap","./ReactInstrumentation","./ReactNodeTypes","./ReactReconciler","./checkReactTypeSpec","fbjs/lib/emptyObject","fbjs/lib/invariant","fbjs/lib/shallowEqual","./shouldUpdateReactComponent","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactCompositeComponent.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant'),                                                                  // 13
    _assign = require('object-assign');                                                                                // 14
                                                                                                                       // 15
var React = require('react/lib/React');                                                                                // 16
var ReactComponentEnvironment = require('./ReactComponentEnvironment');                                                // 17
var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');                                                        // 18
var ReactErrorUtils = require('./ReactErrorUtils');                                                                    // 19
var ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 20
var ReactInstrumentation = require('./ReactInstrumentation');                                                          // 21
var ReactNodeTypes = require('./ReactNodeTypes');                                                                      // 22
var ReactReconciler = require('./ReactReconciler');                                                                    // 23
                                                                                                                       // 24
if (process.env.NODE_ENV !== 'production') {                                                                           // 25
  var checkReactTypeSpec = require('./checkReactTypeSpec');                                                            // 26
}                                                                                                                      // 27
                                                                                                                       // 28
var emptyObject = require('fbjs/lib/emptyObject');                                                                     // 29
var invariant = require('fbjs/lib/invariant');                                                                         // 30
var shallowEqual = require('fbjs/lib/shallowEqual');                                                                   // 31
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');                                              // 32
var warning = require('fbjs/lib/warning');                                                                             // 33
                                                                                                                       // 34
var CompositeTypes = {                                                                                                 // 35
  ImpureClass: 0,                                                                                                      // 36
  PureClass: 1,                                                                                                        // 37
  StatelessFunctional: 2                                                                                               // 38
};                                                                                                                     // 39
                                                                                                                       // 40
function StatelessComponent(Component) {}                                                                              // 41
StatelessComponent.prototype.render = function () {                                                                    // 42
  var Component = ReactInstanceMap.get(this)._currentElement.type;                                                     // 43
  var element = Component(this.props, this.context, this.updater);                                                     // 44
  warnIfInvalidElement(Component, element);                                                                            // 45
  return element;                                                                                                      // 46
};                                                                                                                     // 47
                                                                                                                       // 48
function warnIfInvalidElement(Component, element) {                                                                    // 49
  if (process.env.NODE_ENV !== 'production') {                                                                         // 50
    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }                                                                                                                    // 53
}                                                                                                                      // 54
                                                                                                                       // 55
function shouldConstruct(Component) {                                                                                  // 56
  return !!(Component.prototype && Component.prototype.isReactComponent);                                              // 57
}                                                                                                                      // 58
                                                                                                                       // 59
function isPureComponent(Component) {                                                                                  // 60
  return !!(Component.prototype && Component.prototype.isPureReactComponent);                                          // 61
}                                                                                                                      // 62
                                                                                                                       // 63
// Separated into a function to contain deoptimizations caused by try/finally.                                         // 64
function measureLifeCyclePerf(fn, debugID, timerType) {                                                                // 65
  if (debugID === 0) {                                                                                                 // 66
    // Top-level wrappers (see ReactMount) and empty components (see                                                   // 67
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.                                                    // 68
    // Both are implementation details that should go away in the future.                                              // 69
    return fn();                                                                                                       // 70
  }                                                                                                                    // 71
                                                                                                                       // 72
  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);                                            // 73
  try {                                                                                                                // 74
    return fn();                                                                                                       // 75
  } finally {                                                                                                          // 76
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);                                            // 77
  }                                                                                                                    // 78
}                                                                                                                      // 79
                                                                                                                       // 80
/**                                                                                                                    // 81
 * ------------------ The Life-Cycle of a Composite Component ------------------                                       // 82
 *                                                                                                                     // 83
 * - constructor: Initialization of state. The instance is now retained.                                               // 84
 *   - componentWillMount                                                                                              // 85
 *   - render                                                                                                          // 86
 *   - [children's constructors]                                                                                       // 87
 *     - [children's componentWillMount and render]                                                                    // 88
 *     - [children's componentDidMount]                                                                                // 89
 *     - componentDidMount                                                                                             // 90
 *                                                                                                                     // 91
 *       Update Phases:                                                                                                // 92
 *       - componentWillReceiveProps (only called if parent updated)                                                   // 93
 *       - shouldComponentUpdate                                                                                       // 94
 *         - componentWillUpdate                                                                                       // 95
 *           - render                                                                                                  // 96
 *           - [children's constructors or receive props phases]                                                       // 97
 *         - componentDidUpdate                                                                                        // 98
 *                                                                                                                     // 99
 *     - componentWillUnmount                                                                                          // 100
 *     - [children's componentWillUnmount]                                                                             // 101
 *   - [children destroyed]                                                                                            // 102
 * - (destroyed): The instance is now blank, released by React and ready for GC.                                       // 103
 *                                                                                                                     // 104
 * -----------------------------------------------------------------------------                                       // 105
 */                                                                                                                    // 106
                                                                                                                       // 107
/**                                                                                                                    // 108
 * An incrementing ID assigned to each component when it is mounted. This is                                           // 109
 * used to enforce the order in which `ReactUpdates` updates dirty components.                                         // 110
 *                                                                                                                     // 111
 * @private                                                                                                            // 112
 */                                                                                                                    // 113
var nextMountID = 1;                                                                                                   // 114
                                                                                                                       // 115
/**                                                                                                                    // 116
 * @lends {ReactCompositeComponent.prototype}                                                                          // 117
 */                                                                                                                    // 118
var ReactCompositeComponent = {                                                                                        // 119
                                                                                                                       // 120
  /**                                                                                                                  // 121
   * Base constructor for all composite component.                                                                     // 122
   *                                                                                                                   // 123
   * @param {ReactElement} element                                                                                     // 124
   * @final                                                                                                            // 125
   * @internal                                                                                                         // 126
   */                                                                                                                  // 127
  construct: function (element) {                                                                                      // 128
    this._currentElement = element;                                                                                    // 129
    this._rootNodeID = 0;                                                                                              // 130
    this._compositeType = null;                                                                                        // 131
    this._instance = null;                                                                                             // 132
    this._hostParent = null;                                                                                           // 133
    this._hostContainerInfo = null;                                                                                    // 134
                                                                                                                       // 135
    // See ReactUpdateQueue                                                                                            // 136
    this._updateBatchNumber = null;                                                                                    // 137
    this._pendingElement = null;                                                                                       // 138
    this._pendingStateQueue = null;                                                                                    // 139
    this._pendingReplaceState = false;                                                                                 // 140
    this._pendingForceUpdate = false;                                                                                  // 141
                                                                                                                       // 142
    this._renderedNodeType = null;                                                                                     // 143
    this._renderedComponent = null;                                                                                    // 144
    this._context = null;                                                                                              // 145
    this._mountOrder = 0;                                                                                              // 146
    this._topLevelWrapper = null;                                                                                      // 147
                                                                                                                       // 148
    // See ReactUpdates and ReactUpdateQueue.                                                                          // 149
    this._pendingCallbacks = null;                                                                                     // 150
                                                                                                                       // 151
    // ComponentWillUnmount shall only be called once                                                                  // 152
    this._calledComponentWillUnmount = false;                                                                          // 153
                                                                                                                       // 154
    if (process.env.NODE_ENV !== 'production') {                                                                       // 155
      this._warnedAboutRefsInRender = false;                                                                           // 156
    }                                                                                                                  // 157
  },                                                                                                                   // 158
                                                                                                                       // 159
  /**                                                                                                                  // 160
   * Initializes the component, renders markup, and registers event listeners.                                         // 161
   *                                                                                                                   // 162
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 163
   * @param {?object} hostParent                                                                                       // 164
   * @param {?object} hostContainerInfo                                                                                // 165
   * @param {?object} context                                                                                          // 166
   * @return {?string} Rendered markup to be inserted into the DOM.                                                    // 167
   * @final                                                                                                            // 168
   * @internal                                                                                                         // 169
   */                                                                                                                  // 170
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {                                     // 171
    var _this = this;                                                                                                  // 172
                                                                                                                       // 173
    this._context = context;                                                                                           // 174
    this._mountOrder = nextMountID++;                                                                                  // 175
    this._hostParent = hostParent;                                                                                     // 176
    this._hostContainerInfo = hostContainerInfo;                                                                       // 177
                                                                                                                       // 178
    var publicProps = this._currentElement.props;                                                                      // 179
    var publicContext = this._processContext(context);                                                                 // 180
                                                                                                                       // 181
    var Component = this._currentElement.type;                                                                         // 182
                                                                                                                       // 183
    var updateQueue = transaction.getUpdateQueue();                                                                    // 184
                                                                                                                       // 185
    // Initialize the public class                                                                                     // 186
    var doConstruct = shouldConstruct(Component);                                                                      // 187
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);                         // 188
    var renderedElement;                                                                                               // 189
                                                                                                                       // 190
    // Support functional components                                                                                   // 191
    if (!doConstruct && (inst == null || inst.render == null)) {                                                       // 192
      renderedElement = inst;                                                                                          // 193
      warnIfInvalidElement(Component, renderedElement);                                                                // 194
      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);                                                                        // 196
      this._compositeType = CompositeTypes.StatelessFunctional;                                                        // 197
    } else {                                                                                                           // 198
      if (isPureComponent(Component)) {                                                                                // 199
        this._compositeType = CompositeTypes.PureClass;                                                                // 200
      } else {                                                                                                         // 201
        this._compositeType = CompositeTypes.ImpureClass;                                                              // 202
      }                                                                                                                // 203
    }                                                                                                                  // 204
                                                                                                                       // 205
    if (process.env.NODE_ENV !== 'production') {                                                                       // 206
      // This will throw later in _renderValidatedComponent, but add an early                                          // 207
      // warning now to help debugging                                                                                 // 208
      if (inst.render == null) {                                                                                       // 209
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }                                                                                                                // 211
                                                                                                                       // 212
      var propsMutated = inst.props !== publicProps;                                                                   // 213
      var componentName = Component.displayName || Component.name || 'Component';                                      // 214
                                                                                                                       // 215
      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
    }                                                                                                                  // 217
                                                                                                                       // 218
    // These should be set up in the constructor, but as a convenience for                                             // 219
    // simpler class abstractions, we set them up after the fact.                                                      // 220
    inst.props = publicProps;                                                                                          // 221
    inst.context = publicContext;                                                                                      // 222
    inst.refs = emptyObject;                                                                                           // 223
    inst.updater = updateQueue;                                                                                        // 224
                                                                                                                       // 225
    this._instance = inst;                                                                                             // 226
                                                                                                                       // 227
    // Store a reference from the instance back to the internal representation                                         // 228
    ReactInstanceMap.set(inst, this);                                                                                  // 229
                                                                                                                       // 230
    if (process.env.NODE_ENV !== 'production') {                                                                       // 231
      // Since plain JS classes are defined without any special initialization                                         // 232
      // logic, we can not catch common errors early. Therefore, we have to                                            // 233
      // catch them here, at initialization time, instead.                                                             // 234
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }                                                                                                                  // 242
                                                                                                                       // 243
    var initialState = inst.state;                                                                                     // 244
    if (initialState === undefined) {                                                                                  // 245
      inst.state = initialState = null;                                                                                // 246
    }                                                                                                                  // 247
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;
                                                                                                                       // 249
    this._pendingStateQueue = null;                                                                                    // 250
    this._pendingReplaceState = false;                                                                                 // 251
    this._pendingForceUpdate = false;                                                                                  // 252
                                                                                                                       // 253
    var markup;                                                                                                        // 254
    if (inst.unstable_handleError) {                                                                                   // 255
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {                                                                                                           // 257
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);         // 258
    }                                                                                                                  // 259
                                                                                                                       // 260
    if (inst.componentDidMount) {                                                                                      // 261
      if (process.env.NODE_ENV !== 'production') {                                                                     // 262
        transaction.getReactMountReady().enqueue(function () {                                                         // 263
          measureLifeCyclePerf(function () {                                                                           // 264
            return inst.componentDidMount();                                                                           // 265
          }, _this._debugID, 'componentDidMount');                                                                     // 266
        });                                                                                                            // 267
      } else {                                                                                                         // 268
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);                                        // 269
      }                                                                                                                // 270
    }                                                                                                                  // 271
                                                                                                                       // 272
    return markup;                                                                                                     // 273
  },                                                                                                                   // 274
                                                                                                                       // 275
  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {                               // 276
    if (process.env.NODE_ENV !== 'production') {                                                                       // 277
      ReactCurrentOwner.current = this;                                                                                // 278
      try {                                                                                                            // 279
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);             // 280
      } finally {                                                                                                      // 281
        ReactCurrentOwner.current = null;                                                                              // 282
      }                                                                                                                // 283
    } else {                                                                                                           // 284
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);               // 285
    }                                                                                                                  // 286
  },                                                                                                                   // 287
                                                                                                                       // 288
  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {                   // 289
    var Component = this._currentElement.type;                                                                         // 290
                                                                                                                       // 291
    if (doConstruct) {                                                                                                 // 292
      if (process.env.NODE_ENV !== 'production') {                                                                     // 293
        return measureLifeCyclePerf(function () {                                                                      // 294
          return new Component(publicProps, publicContext, updateQueue);                                               // 295
        }, this._debugID, 'ctor');                                                                                     // 296
      } else {                                                                                                         // 297
        return new Component(publicProps, publicContext, updateQueue);                                                 // 298
      }                                                                                                                // 299
    }                                                                                                                  // 300
                                                                                                                       // 301
    // This can still be an instance in case of factory components                                                     // 302
    // but we'll count this as time spent rendering as the more common case.                                           // 303
    if (process.env.NODE_ENV !== 'production') {                                                                       // 304
      return measureLifeCyclePerf(function () {                                                                        // 305
        return Component(publicProps, publicContext, updateQueue);                                                     // 306
      }, this._debugID, 'render');                                                                                     // 307
    } else {                                                                                                           // 308
      return Component(publicProps, publicContext, updateQueue);                                                       // 309
    }                                                                                                                  // 310
  },                                                                                                                   // 311
                                                                                                                       // 312
  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;                                                                                                        // 314
    var checkpoint = transaction.checkpoint();                                                                         // 315
    try {                                                                                                              // 316
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);         // 317
    } catch (e) {                                                                                                      // 318
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint     // 319
      transaction.rollback(checkpoint);                                                                                // 320
      this._instance.unstable_handleError(e);                                                                          // 321
      if (this._pendingStateQueue) {                                                                                   // 322
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);                // 323
      }                                                                                                                // 324
      checkpoint = transaction.checkpoint();                                                                           // 325
                                                                                                                       // 326
      this._renderedComponent.unmountComponent(true);                                                                  // 327
      transaction.rollback(checkpoint);                                                                                // 328
                                                                                                                       // 329
      // Try again - we've informed the component about the error, so they can render an error message this time.      // 330
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).                // 331
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);         // 332
    }                                                                                                                  // 333
    return markup;                                                                                                     // 334
  },                                                                                                                   // 335
                                                                                                                       // 336
  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {               // 337
    var inst = this._instance;                                                                                         // 338
                                                                                                                       // 339
    var debugID = 0;                                                                                                   // 340
    if (process.env.NODE_ENV !== 'production') {                                                                       // 341
      debugID = this._debugID;                                                                                         // 342
    }                                                                                                                  // 343
                                                                                                                       // 344
    if (inst.componentWillMount) {                                                                                     // 345
      if (process.env.NODE_ENV !== 'production') {                                                                     // 346
        measureLifeCyclePerf(function () {                                                                             // 347
          return inst.componentWillMount();                                                                            // 348
        }, debugID, 'componentWillMount');                                                                             // 349
      } else {                                                                                                         // 350
        inst.componentWillMount();                                                                                     // 351
      }                                                                                                                // 352
      // When mounting, calls to `setState` by `componentWillMount` will set                                           // 353
      // `this._pendingStateQueue` without triggering a re-render.                                                     // 354
      if (this._pendingStateQueue) {                                                                                   // 355
        inst.state = this._processPendingState(inst.props, inst.context);                                              // 356
      }                                                                                                                // 357
    }                                                                                                                  // 358
                                                                                                                       // 359
    // If not a stateless component, we now render                                                                     // 360
    if (renderedElement === undefined) {                                                                               // 361
      renderedElement = this._renderValidatedComponent();                                                              // 362
    }                                                                                                                  // 363
                                                                                                                       // 364
    var nodeType = ReactNodeTypes.getType(renderedElement);                                                            // 365
    this._renderedNodeType = nodeType;                                                                                 // 366
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );                                                                                                                 // 368
    this._renderedComponent = child;                                                                                   // 369
                                                                                                                       // 370
    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);
                                                                                                                       // 372
    if (process.env.NODE_ENV !== 'production') {                                                                       // 373
      if (debugID !== 0) {                                                                                             // 374
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];                                              // 375
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);                                          // 376
      }                                                                                                                // 377
    }                                                                                                                  // 378
                                                                                                                       // 379
    return markup;                                                                                                     // 380
  },                                                                                                                   // 381
                                                                                                                       // 382
  getHostNode: function () {                                                                                           // 383
    return ReactReconciler.getHostNode(this._renderedComponent);                                                       // 384
  },                                                                                                                   // 385
                                                                                                                       // 386
  /**                                                                                                                  // 387
   * Releases any resources allocated by `mountComponent`.                                                             // 388
   *                                                                                                                   // 389
   * @final                                                                                                            // 390
   * @internal                                                                                                         // 391
   */                                                                                                                  // 392
  unmountComponent: function (safely) {                                                                                // 393
    if (!this._renderedComponent) {                                                                                    // 394
      return;                                                                                                          // 395
    }                                                                                                                  // 396
                                                                                                                       // 397
    var inst = this._instance;                                                                                         // 398
                                                                                                                       // 399
    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {                                              // 400
      inst._calledComponentWillUnmount = true;                                                                         // 401
                                                                                                                       // 402
      if (safely) {                                                                                                    // 403
        var name = this.getName() + '.componentWillUnmount()';                                                         // 404
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));                             // 405
      } else {                                                                                                         // 406
        if (process.env.NODE_ENV !== 'production') {                                                                   // 407
          measureLifeCyclePerf(function () {                                                                           // 408
            return inst.componentWillUnmount();                                                                        // 409
          }, this._debugID, 'componentWillUnmount');                                                                   // 410
        } else {                                                                                                       // 411
          inst.componentWillUnmount();                                                                                 // 412
        }                                                                                                              // 413
      }                                                                                                                // 414
    }                                                                                                                  // 415
                                                                                                                       // 416
    if (this._renderedComponent) {                                                                                     // 417
      ReactReconciler.unmountComponent(this._renderedComponent, safely);                                               // 418
      this._renderedNodeType = null;                                                                                   // 419
      this._renderedComponent = null;                                                                                  // 420
      this._instance = null;                                                                                           // 421
    }                                                                                                                  // 422
                                                                                                                       // 423
    // Reset pending fields                                                                                            // 424
    // Even if this component is scheduled for another update in ReactUpdates,                                         // 425
    // it would still be ignored because these fields are reset.                                                       // 426
    this._pendingStateQueue = null;                                                                                    // 427
    this._pendingReplaceState = false;                                                                                 // 428
    this._pendingForceUpdate = false;                                                                                  // 429
    this._pendingCallbacks = null;                                                                                     // 430
    this._pendingElement = null;                                                                                       // 431
                                                                                                                       // 432
    // These fields do not really need to be reset since this object is no                                             // 433
    // longer accessible.                                                                                              // 434
    this._context = null;                                                                                              // 435
    this._rootNodeID = 0;                                                                                              // 436
    this._topLevelWrapper = null;                                                                                      // 437
                                                                                                                       // 438
    // Delete the reference from the instance to this internal representation                                          // 439
    // which allow the internals to be properly cleaned up even if the user                                            // 440
    // leaks a reference to the public instance.                                                                       // 441
    ReactInstanceMap.remove(inst);                                                                                     // 442
                                                                                                                       // 443
    // Some existing components rely on inst.props even after they've been                                             // 444
    // destroyed (in event handlers).                                                                                  // 445
    // TODO: inst.props = null;                                                                                        // 446
    // TODO: inst.state = null;                                                                                        // 447
    // TODO: inst.context = null;                                                                                      // 448
  },                                                                                                                   // 449
                                                                                                                       // 450
  /**                                                                                                                  // 451
   * Filters the context object to only contain keys specified in                                                      // 452
   * `contextTypes`                                                                                                    // 453
   *                                                                                                                   // 454
   * @param {object} context                                                                                           // 455
   * @return {?object}                                                                                                 // 456
   * @private                                                                                                          // 457
   */                                                                                                                  // 458
  _maskContext: function (context) {                                                                                   // 459
    var Component = this._currentElement.type;                                                                         // 460
    var contextTypes = Component.contextTypes;                                                                         // 461
    if (!contextTypes) {                                                                                               // 462
      return emptyObject;                                                                                              // 463
    }                                                                                                                  // 464
    var maskedContext = {};                                                                                            // 465
    for (var contextName in contextTypes) {                                                                            // 466
      maskedContext[contextName] = context[contextName];                                                               // 467
    }                                                                                                                  // 468
    return maskedContext;                                                                                              // 469
  },                                                                                                                   // 470
                                                                                                                       // 471
  /**                                                                                                                  // 472
   * Filters the context object to only contain keys specified in                                                      // 473
   * `contextTypes`, and asserts that they are valid.                                                                  // 474
   *                                                                                                                   // 475
   * @param {object} context                                                                                           // 476
   * @return {?object}                                                                                                 // 477
   * @private                                                                                                          // 478
   */                                                                                                                  // 479
  _processContext: function (context) {                                                                                // 480
    var maskedContext = this._maskContext(context);                                                                    // 481
    if (process.env.NODE_ENV !== 'production') {                                                                       // 482
      var Component = this._currentElement.type;                                                                       // 483
      if (Component.contextTypes) {                                                                                    // 484
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');                                     // 485
      }                                                                                                                // 486
    }                                                                                                                  // 487
    return maskedContext;                                                                                              // 488
  },                                                                                                                   // 489
                                                                                                                       // 490
  /**                                                                                                                  // 491
   * @param {object} currentContext                                                                                    // 492
   * @return {object}                                                                                                  // 493
   * @private                                                                                                          // 494
   */                                                                                                                  // 495
  _processChildContext: function (currentContext) {                                                                    // 496
    var Component = this._currentElement.type;                                                                         // 497
    var inst = this._instance;                                                                                         // 498
    var childContext;                                                                                                  // 499
                                                                                                                       // 500
    if (inst.getChildContext) {                                                                                        // 501
      if (process.env.NODE_ENV !== 'production') {                                                                     // 502
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();                                                // 503
        try {                                                                                                          // 504
          childContext = inst.getChildContext();                                                                       // 505
        } finally {                                                                                                    // 506
          ReactInstrumentation.debugTool.onEndProcessingChildContext();                                                // 507
        }                                                                                                              // 508
      } else {                                                                                                         // 509
        childContext = inst.getChildContext();                                                                         // 510
      }                                                                                                                // 511
    }                                                                                                                  // 512
                                                                                                                       // 513
    if (childContext) {                                                                                                // 514
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if (process.env.NODE_ENV !== 'production') {                                                                     // 516
        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');                            // 517
      }                                                                                                                // 518
      for (var name in childContext) {                                                                                 // 519
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }                                                                                                                // 521
      return _assign({}, currentContext, childContext);                                                                // 522
    }                                                                                                                  // 523
    return currentContext;                                                                                             // 524
  },                                                                                                                   // 525
                                                                                                                       // 526
  /**                                                                                                                  // 527
   * Assert that the context types are valid                                                                           // 528
   *                                                                                                                   // 529
   * @param {object} typeSpecs Map of context field to a ReactPropType                                                 // 530
   * @param {object} values Runtime values that need to be type-checked                                                // 531
   * @param {string} location e.g. "prop", "context", "child context"                                                  // 532
   * @private                                                                                                          // 533
   */                                                                                                                  // 534
  _checkContextTypes: function (typeSpecs, values, location) {                                                         // 535
    if (process.env.NODE_ENV !== 'production') {                                                                       // 536
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);                            // 537
    }                                                                                                                  // 538
  },                                                                                                                   // 539
                                                                                                                       // 540
  receiveComponent: function (nextElement, transaction, nextContext) {                                                 // 541
    var prevElement = this._currentElement;                                                                            // 542
    var prevContext = this._context;                                                                                   // 543
                                                                                                                       // 544
    this._pendingElement = null;                                                                                       // 545
                                                                                                                       // 546
    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);                             // 547
  },                                                                                                                   // 548
                                                                                                                       // 549
  /**                                                                                                                  // 550
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`                                       // 551
   * is set, update the component.                                                                                     // 552
   *                                                                                                                   // 553
   * @param {ReactReconcileTransaction} transaction                                                                    // 554
   * @internal                                                                                                         // 555
   */                                                                                                                  // 556
  performUpdateIfNecessary: function (transaction) {                                                                   // 557
    if (this._pendingElement != null) {                                                                                // 558
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);                        // 559
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {                                         // 560
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);     // 561
    } else {                                                                                                           // 562
      this._updateBatchNumber = null;                                                                                  // 563
    }                                                                                                                  // 564
  },                                                                                                                   // 565
                                                                                                                       // 566
  /**                                                                                                                  // 567
   * Perform an update to a mounted component. The componentWillReceiveProps and                                       // 568
   * shouldComponentUpdate methods are called, then (assuming the update isn't                                         // 569
   * skipped) the remaining update lifecycle methods are called and the DOM                                            // 570
   * representation is updated.                                                                                        // 571
   *                                                                                                                   // 572
   * By default, this implements React's rendering and reconciliation algorithm.                                       // 573
   * Sophisticated clients may wish to override this.                                                                  // 574
   *                                                                                                                   // 575
   * @param {ReactReconcileTransaction} transaction                                                                    // 576
   * @param {ReactElement} prevParentElement                                                                           // 577
   * @param {ReactElement} nextParentElement                                                                           // 578
   * @internal                                                                                                         // 579
   * @overridable                                                                                                      // 580
   */                                                                                                                  // 581
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;                                                                                         // 583
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;
                                                                                                                       // 585
    var willReceive = false;                                                                                           // 586
    var nextContext;                                                                                                   // 587
                                                                                                                       // 588
    // Determine if the context has changed or not                                                                     // 589
    if (this._context === nextUnmaskedContext) {                                                                       // 590
      nextContext = inst.context;                                                                                      // 591
    } else {                                                                                                           // 592
      nextContext = this._processContext(nextUnmaskedContext);                                                         // 593
      willReceive = true;                                                                                              // 594
    }                                                                                                                  // 595
                                                                                                                       // 596
    var prevProps = prevParentElement.props;                                                                           // 597
    var nextProps = nextParentElement.props;                                                                           // 598
                                                                                                                       // 599
    // Not a simple state update but a props update                                                                    // 600
    if (prevParentElement !== nextParentElement) {                                                                     // 601
      willReceive = true;                                                                                              // 602
    }                                                                                                                  // 603
                                                                                                                       // 604
    // An update here will schedule an update but immediately set                                                      // 605
    // _pendingStateQueue which will ensure that any state updates gets                                                // 606
    // immediately reconciled instead of waiting for the next batch.                                                   // 607
    if (willReceive && inst.componentWillReceiveProps) {                                                               // 608
      if (process.env.NODE_ENV !== 'production') {                                                                     // 609
        measureLifeCyclePerf(function () {                                                                             // 610
          return inst.componentWillReceiveProps(nextProps, nextContext);                                               // 611
        }, this._debugID, 'componentWillReceiveProps');                                                                // 612
      } else {                                                                                                         // 613
        inst.componentWillReceiveProps(nextProps, nextContext);                                                        // 614
      }                                                                                                                // 615
    }                                                                                                                  // 616
                                                                                                                       // 617
    var nextState = this._processPendingState(nextProps, nextContext);                                                 // 618
    var shouldUpdate = true;                                                                                           // 619
                                                                                                                       // 620
    if (!this._pendingForceUpdate) {                                                                                   // 621
      if (inst.shouldComponentUpdate) {                                                                                // 622
        if (process.env.NODE_ENV !== 'production') {                                                                   // 623
          shouldUpdate = measureLifeCyclePerf(function () {                                                            // 624
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);                                      // 625
          }, this._debugID, 'shouldComponentUpdate');                                                                  // 626
        } else {                                                                                                       // 627
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);                                // 628
        }                                                                                                              // 629
      } else {                                                                                                         // 630
        if (this._compositeType === CompositeTypes.PureClass) {                                                        // 631
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);                  // 632
        }                                                                                                              // 633
      }                                                                                                                // 634
    }                                                                                                                  // 635
                                                                                                                       // 636
    if (process.env.NODE_ENV !== 'production') {                                                                       // 637
      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }                                                                                                                  // 639
                                                                                                                       // 640
    this._updateBatchNumber = null;                                                                                    // 641
    if (shouldUpdate) {                                                                                                // 642
      this._pendingForceUpdate = false;                                                                                // 643
      // Will set `this.props`, `this.state` and `this.context`.                                                       // 644
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {                                                                                                           // 646
      // If it's determined that a component should not update, we still want                                          // 647
      // to set props and state but we shortcut the rest of the update.                                                // 648
      this._currentElement = nextParentElement;                                                                        // 649
      this._context = nextUnmaskedContext;                                                                             // 650
      inst.props = nextProps;                                                                                          // 651
      inst.state = nextState;                                                                                          // 652
      inst.context = nextContext;                                                                                      // 653
    }                                                                                                                  // 654
  },                                                                                                                   // 655
                                                                                                                       // 656
  _processPendingState: function (props, context) {                                                                    // 657
    var inst = this._instance;                                                                                         // 658
    var queue = this._pendingStateQueue;                                                                               // 659
    var replace = this._pendingReplaceState;                                                                           // 660
    this._pendingReplaceState = false;                                                                                 // 661
    this._pendingStateQueue = null;                                                                                    // 662
                                                                                                                       // 663
    if (!queue) {                                                                                                      // 664
      return inst.state;                                                                                               // 665
    }                                                                                                                  // 666
                                                                                                                       // 667
    if (replace && queue.length === 1) {                                                                               // 668
      return queue[0];                                                                                                 // 669
    }                                                                                                                  // 670
                                                                                                                       // 671
    var nextState = _assign({}, replace ? queue[0] : inst.state);                                                      // 672
    for (var i = replace ? 1 : 0; i < queue.length; i++) {                                                             // 673
      var partial = queue[i];                                                                                          // 674
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);     // 675
    }                                                                                                                  // 676
                                                                                                                       // 677
    return nextState;                                                                                                  // 678
  },                                                                                                                   // 679
                                                                                                                       // 680
  /**                                                                                                                  // 681
   * Merges new props and state, notifies delegate methods of update and                                               // 682
   * performs update.                                                                                                  // 683
   *                                                                                                                   // 684
   * @param {ReactElement} nextElement Next element                                                                    // 685
   * @param {object} nextProps Next public object to set as properties.                                                // 686
   * @param {?object} nextState Next object to set as state.                                                           // 687
   * @param {?object} nextContext Next public object to set as context.                                                // 688
   * @param {ReactReconcileTransaction} transaction                                                                    // 689
   * @param {?object} unmaskedContext                                                                                  // 690
   * @private                                                                                                          // 691
   */                                                                                                                  // 692
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {   // 693
    var _this2 = this;                                                                                                 // 694
                                                                                                                       // 695
    var inst = this._instance;                                                                                         // 696
                                                                                                                       // 697
    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);                                                      // 698
    var prevProps;                                                                                                     // 699
    var prevState;                                                                                                     // 700
    var prevContext;                                                                                                   // 701
    if (hasComponentDidUpdate) {                                                                                       // 702
      prevProps = inst.props;                                                                                          // 703
      prevState = inst.state;                                                                                          // 704
      prevContext = inst.context;                                                                                      // 705
    }                                                                                                                  // 706
                                                                                                                       // 707
    if (inst.componentWillUpdate) {                                                                                    // 708
      if (process.env.NODE_ENV !== 'production') {                                                                     // 709
        measureLifeCyclePerf(function () {                                                                             // 710
          return inst.componentWillUpdate(nextProps, nextState, nextContext);                                          // 711
        }, this._debugID, 'componentWillUpdate');                                                                      // 712
      } else {                                                                                                         // 713
        inst.componentWillUpdate(nextProps, nextState, nextContext);                                                   // 714
      }                                                                                                                // 715
    }                                                                                                                  // 716
                                                                                                                       // 717
    this._currentElement = nextElement;                                                                                // 718
    this._context = unmaskedContext;                                                                                   // 719
    inst.props = nextProps;                                                                                            // 720
    inst.state = nextState;                                                                                            // 721
    inst.context = nextContext;                                                                                        // 722
                                                                                                                       // 723
    this._updateRenderedComponent(transaction, unmaskedContext);                                                       // 724
                                                                                                                       // 725
    if (hasComponentDidUpdate) {                                                                                       // 726
      if (process.env.NODE_ENV !== 'production') {                                                                     // 727
        transaction.getReactMountReady().enqueue(function () {                                                         // 728
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });                                                                                                            // 730
      } else {                                                                                                         // 731
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }                                                                                                                // 733
    }                                                                                                                  // 734
  },                                                                                                                   // 735
                                                                                                                       // 736
  /**                                                                                                                  // 737
   * Call the component's `render` method and update the DOM accordingly.                                              // 738
   *                                                                                                                   // 739
   * @param {ReactReconcileTransaction} transaction                                                                    // 740
   * @internal                                                                                                         // 741
   */                                                                                                                  // 742
  _updateRenderedComponent: function (transaction, context) {                                                          // 743
    var prevComponentInstance = this._renderedComponent;                                                               // 744
    var prevRenderedElement = prevComponentInstance._currentElement;                                                   // 745
    var nextRenderedElement = this._renderValidatedComponent();                                                        // 746
                                                                                                                       // 747
    var debugID = 0;                                                                                                   // 748
    if (process.env.NODE_ENV !== 'production') {                                                                       // 749
      debugID = this._debugID;                                                                                         // 750
    }                                                                                                                  // 751
                                                                                                                       // 752
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {                                        // 753
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {                                                                                                           // 755
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);                                            // 756
      ReactReconciler.unmountComponent(prevComponentInstance, false);                                                  // 757
                                                                                                                       // 758
      var nodeType = ReactNodeTypes.getType(nextRenderedElement);                                                      // 759
      this._renderedNodeType = nodeType;                                                                               // 760
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );                                                                                                               // 762
      this._renderedComponent = child;                                                                                 // 763
                                                                                                                       // 764
      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);
                                                                                                                       // 766
      if (process.env.NODE_ENV !== 'production') {                                                                     // 767
        if (debugID !== 0) {                                                                                           // 768
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];                                            // 769
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);                                        // 770
        }                                                                                                              // 771
      }                                                                                                                // 772
                                                                                                                       // 773
      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);                                     // 774
    }                                                                                                                  // 775
  },                                                                                                                   // 776
                                                                                                                       // 777
  /**                                                                                                                  // 778
   * Overridden in shallow rendering.                                                                                  // 779
   *                                                                                                                   // 780
   * @protected                                                                                                        // 781
   */                                                                                                                  // 782
  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {                                           // 783
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);                            // 784
  },                                                                                                                   // 785
                                                                                                                       // 786
  /**                                                                                                                  // 787
   * @protected                                                                                                        // 788
   */                                                                                                                  // 789
  _renderValidatedComponentWithoutOwnerOrContext: function () {                                                        // 790
    var inst = this._instance;                                                                                         // 791
    var renderedElement;                                                                                               // 792
                                                                                                                       // 793
    if (process.env.NODE_ENV !== 'production') {                                                                       // 794
      renderedElement = measureLifeCyclePerf(function () {                                                             // 795
        return inst.render();                                                                                          // 796
      }, this._debugID, 'render');                                                                                     // 797
    } else {                                                                                                           // 798
      renderedElement = inst.render();                                                                                 // 799
    }                                                                                                                  // 800
                                                                                                                       // 801
    if (process.env.NODE_ENV !== 'production') {                                                                       // 802
      // We allow auto-mocks to proceed as if they're returning null.                                                  // 803
      if (renderedElement === undefined && inst.render._isMockFunction) {                                              // 804
        // This is probably bad practice. Consider warning here and                                                    // 805
        // deprecating this convenience.                                                                               // 806
        renderedElement = null;                                                                                        // 807
      }                                                                                                                // 808
    }                                                                                                                  // 809
                                                                                                                       // 810
    return renderedElement;                                                                                            // 811
  },                                                                                                                   // 812
                                                                                                                       // 813
  /**                                                                                                                  // 814
   * @private                                                                                                          // 815
   */                                                                                                                  // 816
  _renderValidatedComponent: function () {                                                                             // 817
    var renderedElement;                                                                                               // 818
    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {         // 819
      ReactCurrentOwner.current = this;                                                                                // 820
      try {                                                                                                            // 821
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();                                       // 822
      } finally {                                                                                                      // 823
        ReactCurrentOwner.current = null;                                                                              // 824
      }                                                                                                                // 825
    } else {                                                                                                           // 826
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();                                         // 827
    }                                                                                                                  // 828
    !(                                                                                                                 // 829
    // TODO: An `isValidNode` function would probably be more appropriate                                              // 830
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;
                                                                                                                       // 832
    return renderedElement;                                                                                            // 833
  },                                                                                                                   // 834
                                                                                                                       // 835
  /**                                                                                                                  // 836
   * Lazily allocates the refs object and stores `component` as `ref`.                                                 // 837
   *                                                                                                                   // 838
   * @param {string} ref Reference name.                                                                               // 839
   * @param {component} component Component to store as `ref`.                                                         // 840
   * @final                                                                                                            // 841
   * @private                                                                                                          // 842
   */                                                                                                                  // 843
  attachRef: function (ref, component) {                                                                               // 844
    var inst = this.getPublicInstance();                                                                               // 845
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();                                                       // 847
    if (process.env.NODE_ENV !== 'production') {                                                                       // 848
      var componentName = component && component.getName ? component.getName() : 'a component';                        // 849
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }                                                                                                                  // 851
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;                                                 // 852
    refs[ref] = publicComponentInstance;                                                                               // 853
  },                                                                                                                   // 854
                                                                                                                       // 855
  /**                                                                                                                  // 856
   * Detaches a reference name.                                                                                        // 857
   *                                                                                                                   // 858
   * @param {string} ref Name to dereference.                                                                          // 859
   * @final                                                                                                            // 860
   * @private                                                                                                          // 861
   */                                                                                                                  // 862
  detachRef: function (ref) {                                                                                          // 863
    var refs = this.getPublicInstance().refs;                                                                          // 864
    delete refs[ref];                                                                                                  // 865
  },                                                                                                                   // 866
                                                                                                                       // 867
  /**                                                                                                                  // 868
   * Get a text description of the component that can be used to identify it                                           // 869
   * in error messages.                                                                                                // 870
   * @return {string} The name or null.                                                                                // 871
   * @internal                                                                                                         // 872
   */                                                                                                                  // 873
  getName: function () {                                                                                               // 874
    var type = this._currentElement.type;                                                                              // 875
    var constructor = this._instance && this._instance.constructor;                                                    // 876
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },                                                                                                                   // 878
                                                                                                                       // 879
  /**                                                                                                                  // 880
   * Get the publicly accessible representation of this component - i.e. what                                          // 881
   * is exposed by refs and returned by render. Can be null for stateless                                              // 882
   * components.                                                                                                       // 883
   *                                                                                                                   // 884
   * @return {ReactComponent} the public component instance.                                                           // 885
   * @internal                                                                                                         // 886
   */                                                                                                                  // 887
  getPublicInstance: function () {                                                                                     // 888
    var inst = this._instance;                                                                                         // 889
    if (this._compositeType === CompositeTypes.StatelessFunctional) {                                                  // 890
      return null;                                                                                                     // 891
    }                                                                                                                  // 892
    return inst;                                                                                                       // 893
  },                                                                                                                   // 894
                                                                                                                       // 895
  // Stub                                                                                                              // 896
  _instantiateReactComponent: null                                                                                     // 897
                                                                                                                       // 898
};                                                                                                                     // 899
                                                                                                                       // 900
module.exports = ReactCompositeComponent;                                                                              // 901
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactNodeTypes.js":["./reactProdInvariant","react/lib/React","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactNodeTypes.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var _prodInvariant = require('./reactProdInvariant');                                                                  // 14
                                                                                                                       // 15
var React = require('react/lib/React');                                                                                // 16
                                                                                                                       // 17
var invariant = require('fbjs/lib/invariant');                                                                         // 18
                                                                                                                       // 19
var ReactNodeTypes = {                                                                                                 // 20
  HOST: 0,                                                                                                             // 21
  COMPOSITE: 1,                                                                                                        // 22
  EMPTY: 2,                                                                                                            // 23
                                                                                                                       // 24
  getType: function (node) {                                                                                           // 25
    if (node === null || node === false) {                                                                             // 26
      return ReactNodeTypes.EMPTY;                                                                                     // 27
    } else if (React.isValidElement(node)) {                                                                           // 28
      if (typeof node.type === 'function') {                                                                           // 29
        return ReactNodeTypes.COMPOSITE;                                                                               // 30
      } else {                                                                                                         // 31
        return ReactNodeTypes.HOST;                                                                                    // 32
      }                                                                                                                // 33
    }                                                                                                                  // 34
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }                                                                                                                    // 36
};                                                                                                                     // 37
                                                                                                                       // 38
module.exports = ReactNodeTypes;                                                                                       // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"checkReactTypeSpec.js":["./reactProdInvariant","./ReactPropTypeLocationNames","./ReactPropTypesSecret","fbjs/lib/invariant","fbjs/lib/warning","react/lib/ReactComponentTreeHook",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/checkReactTypeSpec.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                              // 15
var ReactPropTypesSecret = require('./ReactPropTypesSecret');                                                          // 16
                                                                                                                       // 17
var invariant = require('fbjs/lib/invariant');                                                                         // 18
var warning = require('fbjs/lib/warning');                                                                             // 19
                                                                                                                       // 20
var ReactComponentTreeHook;                                                                                            // 21
                                                                                                                       // 22
if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {                                // 23
  // Temporary hack.                                                                                                   // 24
  // Inline requires don't work well with Jest:                                                                        // 25
  // https://github.com/facebook/react/issues/7240                                                                     // 26
  // Remove the inline requires when we don't need them anymore:                                                       // 27
  // https://github.com/facebook/react/pull/7178                                                                       // 28
  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                                // 29
}                                                                                                                      // 30
                                                                                                                       // 31
var loggedTypeFailures = {};                                                                                           // 32
                                                                                                                       // 33
/**                                                                                                                    // 34
 * Assert that the values match with the type specs.                                                                   // 35
 * Error messages are memorized and will only be shown once.                                                           // 36
 *                                                                                                                     // 37
 * @param {object} typeSpecs Map of name to a ReactPropType                                                            // 38
 * @param {object} values Runtime values that need to be type-checked                                                  // 39
 * @param {string} location e.g. "prop", "context", "child context"                                                    // 40
 * @param {string} componentName Name of the component for error messages.                                             // 41
 * @param {?object} element The React element that is being type-checked                                               // 42
 * @param {?number} debugID The React component instance that is being type-checked                                    // 43
 * @private                                                                                                            // 44
 */                                                                                                                    // 45
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {                            // 46
  for (var typeSpecName in typeSpecs) {                                                                                // 47
    if (typeSpecs.hasOwnProperty(typeSpecName)) {                                                                      // 48
      var error;                                                                                                       // 49
      // Prop type validation may throw. In case they do, we don't want to                                             // 50
      // fail the render phase where it didn't fail before. So we log it.                                              // 51
      // After these have been cleaned up, we'll let them throw.                                                       // 52
      try {                                                                                                            // 53
        // This is intentionally an invariant that gets caught. It's the same                                          // 54
        // behavior as without this statement except with a better message.                                            // 55
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);    // 57
      } catch (ex) {                                                                                                   // 58
        error = ex;                                                                                                    // 59
      }                                                                                                                // 60
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                          // 62
        // Only monitor this failure once because there tends to be a lot of the                                       // 63
        // same error.                                                                                                 // 64
        loggedTypeFailures[error.message] = true;                                                                      // 65
                                                                                                                       // 66
        var componentStackInfo = '';                                                                                   // 67
                                                                                                                       // 68
        if (process.env.NODE_ENV !== 'production') {                                                                   // 69
          if (!ReactComponentTreeHook) {                                                                               // 70
            ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                      // 71
          }                                                                                                            // 72
          if (debugID !== null) {                                                                                      // 73
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);                                 // 74
          } else if (element !== null) {                                                                               // 75
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);                              // 76
          }                                                                                                            // 77
        }                                                                                                              // 78
                                                                                                                       // 79
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }                                                                                                                // 81
    }                                                                                                                  // 82
  }                                                                                                                    // 83
}                                                                                                                      // 84
                                                                                                                       // 85
module.exports = checkReactTypeSpec;                                                                                   // 86
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactPropTypeLocationNames.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactPropTypeLocationNames.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var ReactPropTypeLocationNames = {};                                                                                   // 14
                                                                                                                       // 15
if (process.env.NODE_ENV !== 'production') {                                                                           // 16
  ReactPropTypeLocationNames = {                                                                                       // 17
    prop: 'prop',                                                                                                      // 18
    context: 'context',                                                                                                // 19
    childContext: 'child context'                                                                                      // 20
  };                                                                                                                   // 21
}                                                                                                                      // 22
                                                                                                                       // 23
module.exports = ReactPropTypeLocationNames;                                                                           // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"shouldUpdateReactComponent.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/shouldUpdateReactComponent.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * Given a `prevElement` and `nextElement`, determines if the existing                                                 // 14
 * instance should be updated as opposed to being destroyed or replaced by a new                                       // 15
 * instance. Both arguments are elements. This ensures that this logic can                                             // 16
 * operate on stateless trees without any backing instance.                                                            // 17
 *                                                                                                                     // 18
 * @param {?object} prevElement                                                                                        // 19
 * @param {?object} nextElement                                                                                        // 20
 * @return {boolean} True if the existing instance should be updated.                                                  // 21
 * @protected                                                                                                          // 22
 */                                                                                                                    // 23
                                                                                                                       // 24
function shouldUpdateReactComponent(prevElement, nextElement) {                                                        // 25
  var prevEmpty = prevElement === null || prevElement === false;                                                       // 26
  var nextEmpty = nextElement === null || nextElement === false;                                                       // 27
  if (prevEmpty || nextEmpty) {                                                                                        // 28
    return prevEmpty === nextEmpty;                                                                                    // 29
  }                                                                                                                    // 30
                                                                                                                       // 31
  var prevType = typeof prevElement;                                                                                   // 32
  var nextType = typeof nextElement;                                                                                   // 33
  if (prevType === 'string' || prevType === 'number') {                                                                // 34
    return nextType === 'string' || nextType === 'number';                                                             // 35
  } else {                                                                                                             // 36
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;      // 37
  }                                                                                                                    // 38
}                                                                                                                      // 39
                                                                                                                       // 40
module.exports = shouldUpdateReactComponent;                                                                           // 41
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ReactEmptyComponent.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactEmptyComponent.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2014-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var emptyComponentFactory;                                                                                             // 13
                                                                                                                       // 14
var ReactEmptyComponentInjection = {                                                                                   // 15
  injectEmptyComponentFactory: function (factory) {                                                                    // 16
    emptyComponentFactory = factory;                                                                                   // 17
  }                                                                                                                    // 18
};                                                                                                                     // 19
                                                                                                                       // 20
var ReactEmptyComponent = {                                                                                            // 21
  create: function (instantiate) {                                                                                     // 22
    return emptyComponentFactory(instantiate);                                                                         // 23
  }                                                                                                                    // 24
};                                                                                                                     // 25
                                                                                                                       // 26
ReactEmptyComponent.injection = ReactEmptyComponentInjection;                                                          // 27
                                                                                                                       // 28
module.exports = ReactEmptyComponent;                                                                                  // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ReactHostComponent.js":["./reactProdInvariant","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactHostComponent.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2014-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var invariant = require('fbjs/lib/invariant');                                                                         // 15
                                                                                                                       // 16
var genericComponentClass = null;                                                                                      // 17
var textComponentClass = null;                                                                                         // 18
                                                                                                                       // 19
var ReactHostComponentInjection = {                                                                                    // 20
  // This accepts a class that receives the tag string. This is a catch all                                            // 21
  // that can render any kind of tag.                                                                                  // 22
  injectGenericComponentClass: function (componentClass) {                                                             // 23
    genericComponentClass = componentClass;                                                                            // 24
  },                                                                                                                   // 25
  // This accepts a text component class that takes the text string to be                                              // 26
  // rendered as props.                                                                                                // 27
  injectTextComponentClass: function (componentClass) {                                                                // 28
    textComponentClass = componentClass;                                                                               // 29
  }                                                                                                                    // 30
};                                                                                                                     // 31
                                                                                                                       // 32
/**                                                                                                                    // 33
 * Get a host internal component class for a specific tag.                                                             // 34
 *                                                                                                                     // 35
 * @param {ReactElement} element The element to create.                                                                // 36
 * @return {function} The internal class constructor function.                                                         // 37
 */                                                                                                                    // 38
function createInternalComponent(element) {                                                                            // 39
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);                                                                           // 41
}                                                                                                                      // 42
                                                                                                                       // 43
/**                                                                                                                    // 44
 * @param {ReactText} text                                                                                             // 45
 * @return {ReactComponent}                                                                                            // 46
 */                                                                                                                    // 47
function createInstanceForText(text) {                                                                                 // 48
  return new textComponentClass(text);                                                                                 // 49
}                                                                                                                      // 50
                                                                                                                       // 51
/**                                                                                                                    // 52
 * @param {ReactComponent} component                                                                                   // 53
 * @return {boolean}                                                                                                   // 54
 */                                                                                                                    // 55
function isTextComponent(component) {                                                                                  // 56
  return component instanceof textComponentClass;                                                                      // 57
}                                                                                                                      // 58
                                                                                                                       // 59
var ReactHostComponent = {                                                                                             // 60
  createInternalComponent: createInternalComponent,                                                                    // 61
  createInstanceForText: createInstanceForText,                                                                        // 62
  isTextComponent: isTextComponent,                                                                                    // 63
  injection: ReactHostComponentInjection                                                                               // 64
};                                                                                                                     // 65
                                                                                                                       // 66
module.exports = ReactHostComponent;                                                                                   // 67
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"getNextDebugID.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/getNextDebugID.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var nextDebugID = 1;                                                                                                   // 14
                                                                                                                       // 15
function getNextDebugID() {                                                                                            // 16
  return nextDebugID++;                                                                                                // 17
}                                                                                                                      // 18
                                                                                                                       // 19
module.exports = getNextDebugID;                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"KeyEscapeUtils.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/KeyEscapeUtils.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
/**                                                                                                                    // 14
 * Escape and wrap key so it is safe to use as a reactid                                                               // 15
 *                                                                                                                     // 16
 * @param {string} key to be escaped.                                                                                  // 17
 * @return {string} the escaped key.                                                                                   // 18
 */                                                                                                                    // 19
                                                                                                                       // 20
function escape(key) {                                                                                                 // 21
  var escapeRegex = /[=:]/g;                                                                                           // 22
  var escaperLookup = {                                                                                                // 23
    '=': '=0',                                                                                                         // 24
    ':': '=2'                                                                                                          // 25
  };                                                                                                                   // 26
  var escapedString = ('' + key).replace(escapeRegex, function (match) {                                               // 27
    return escaperLookup[match];                                                                                       // 28
  });                                                                                                                  // 29
                                                                                                                       // 30
  return '$' + escapedString;                                                                                          // 31
}                                                                                                                      // 32
                                                                                                                       // 33
/**                                                                                                                    // 34
 * Unescape and unwrap key for human-readable display                                                                  // 35
 *                                                                                                                     // 36
 * @param {string} key to unescape.                                                                                    // 37
 * @return {string} the unescaped key.                                                                                 // 38
 */                                                                                                                    // 39
function unescape(key) {                                                                                               // 40
  var unescapeRegex = /(=0|=2)/g;                                                                                      // 41
  var unescaperLookup = {                                                                                              // 42
    '=0': '=',                                                                                                         // 43
    '=2': ':'                                                                                                          // 44
  };                                                                                                                   // 45
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);                           // 46
                                                                                                                       // 47
  return ('' + keySubstring).replace(unescapeRegex, function (match) {                                                 // 48
    return unescaperLookup[match];                                                                                     // 49
  });                                                                                                                  // 50
}                                                                                                                      // 51
                                                                                                                       // 52
var KeyEscapeUtils = {                                                                                                 // 53
  escape: escape,                                                                                                      // 54
  unescape: unescape                                                                                                   // 55
};                                                                                                                     // 56
                                                                                                                       // 57
module.exports = KeyEscapeUtils;                                                                                       // 58
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"traverseAllChildren.js":["./reactProdInvariant","react/lib/ReactCurrentOwner","./ReactElementSymbol","./getIteratorFn","fbjs/lib/invariant","./KeyEscapeUtils","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/traverseAllChildren.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');                                                        // 15
var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');                                                              // 16
                                                                                                                       // 17
var getIteratorFn = require('./getIteratorFn');                                                                        // 18
var invariant = require('fbjs/lib/invariant');                                                                         // 19
var KeyEscapeUtils = require('./KeyEscapeUtils');                                                                      // 20
var warning = require('fbjs/lib/warning');                                                                             // 21
                                                                                                                       // 22
var SEPARATOR = '.';                                                                                                   // 23
var SUBSEPARATOR = ':';                                                                                                // 24
                                                                                                                       // 25
/**                                                                                                                    // 26
 * This is inlined from ReactElement since this file is shared between                                                 // 27
 * isomorphic and renderers. We could extract this to a                                                                // 28
 *                                                                                                                     // 29
 */                                                                                                                    // 30
                                                                                                                       // 31
/**                                                                                                                    // 32
 * TODO: Test that a single child and an array with one item have the same key                                         // 33
 * pattern.                                                                                                            // 34
 */                                                                                                                    // 35
                                                                                                                       // 36
var didWarnAboutMaps = false;                                                                                          // 37
                                                                                                                       // 38
/**                                                                                                                    // 39
 * Generate a key string that identifies a component within a set.                                                     // 40
 *                                                                                                                     // 41
 * @param {*} component A component that could contain a manual key.                                                   // 42
 * @param {number} index Index that is used if a manual key is not provided.                                           // 43
 * @return {string}                                                                                                    // 44
 */                                                                                                                    // 45
function getComponentKey(component, index) {                                                                           // 46
  // Do some typechecking here since we call this blindly. We want to ensure                                           // 47
  // that we don't block potential future ES APIs.                                                                     // 48
  if (component && typeof component === 'object' && component.key != null) {                                           // 49
    // Explicit key                                                                                                    // 50
    return KeyEscapeUtils.escape(component.key);                                                                       // 51
  }                                                                                                                    // 52
  // Implicit key determined by the index in the set                                                                   // 53
  return index.toString(36);                                                                                           // 54
}                                                                                                                      // 55
                                                                                                                       // 56
/**                                                                                                                    // 57
 * @param {?*} children Children tree container.                                                                       // 58
 * @param {!string} nameSoFar Name of the key path so far.                                                             // 59
 * @param {!function} callback Callback to invoke with each child found.                                               // 60
 * @param {?*} traverseContext Used to pass information throughout the traversal                                       // 61
 * process.                                                                                                            // 62
 * @return {!number} The number of children in this subtree.                                                           // 63
 */                                                                                                                    // 64
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {                                     // 65
  var type = typeof children;                                                                                          // 66
                                                                                                                       // 67
  if (type === 'undefined' || type === 'boolean') {                                                                    // 68
    // All of the above are perceived as null.                                                                         // 69
    children = null;                                                                                                   // 70
  }                                                                                                                    // 71
                                                                                                                       // 72
  if (children === null || type === 'string' || type === 'number' ||                                                   // 73
  // The following is inlined from ReactElement. This means we can optimize                                            // 74
  // some checks. React Fiber also inlines this logic for similar purposes.                                            // 75
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {                                                     // 76
    callback(traverseContext, children,                                                                                // 77
    // If it's the only child, treat the name as if it was wrapped in an array                                         // 78
    // so that it's consistent if the number of children grows.                                                        // 79
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);                                          // 80
    return 1;                                                                                                          // 81
  }                                                                                                                    // 82
                                                                                                                       // 83
  var child;                                                                                                           // 84
  var nextName;                                                                                                        // 85
  var subtreeCount = 0; // Count of children found in the current subtree.                                             // 86
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;                                        // 87
                                                                                                                       // 88
  if (Array.isArray(children)) {                                                                                       // 89
    for (var i = 0; i < children.length; i++) {                                                                        // 90
      child = children[i];                                                                                             // 91
      nextName = nextNamePrefix + getComponentKey(child, i);                                                           // 92
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                             // 93
    }                                                                                                                  // 94
  } else {                                                                                                             // 95
    var iteratorFn = getIteratorFn(children);                                                                          // 96
    if (iteratorFn) {                                                                                                  // 97
      var iterator = iteratorFn.call(children);                                                                        // 98
      var step;                                                                                                        // 99
      if (iteratorFn !== children.entries) {                                                                           // 100
        var ii = 0;                                                                                                    // 101
        while (!(step = iterator.next()).done) {                                                                       // 102
          child = step.value;                                                                                          // 103
          nextName = nextNamePrefix + getComponentKey(child, ii++);                                                    // 104
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                         // 105
        }                                                                                                              // 106
      } else {                                                                                                         // 107
        if (process.env.NODE_ENV !== 'production') {                                                                   // 108
          var mapsAsChildrenAddendum = '';                                                                             // 109
          if (ReactCurrentOwner.current) {                                                                             // 110
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();                                         // 111
            if (mapsAsChildrenOwnerName) {                                                                             // 112
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';               // 113
            }                                                                                                          // 114
          }                                                                                                            // 115
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;                                                                                     // 117
        }                                                                                                              // 118
        // Iterator will provide entry [k,v] tuples rather than values.                                                // 119
        while (!(step = iterator.next()).done) {                                                                       // 120
          var entry = step.value;                                                                                      // 121
          if (entry) {                                                                                                 // 122
            child = entry[1];                                                                                          // 123
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);    // 124
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                       // 125
          }                                                                                                            // 126
        }                                                                                                              // 127
      }                                                                                                                // 128
    } else if (type === 'object') {                                                                                    // 129
      var addendum = '';                                                                                               // 130
      if (process.env.NODE_ENV !== 'production') {                                                                     // 131
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {                                                                                // 133
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }                                                                                                              // 135
        if (ReactCurrentOwner.current) {                                                                               // 136
          var name = ReactCurrentOwner.current.getName();                                                              // 137
          if (name) {                                                                                                  // 138
            addendum += ' Check the render method of `' + name + '`.';                                                 // 139
          }                                                                                                            // 140
        }                                                                                                              // 141
      }                                                                                                                // 142
      var childrenString = String(children);                                                                           // 143
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }                                                                                                                  // 145
  }                                                                                                                    // 146
                                                                                                                       // 147
  return subtreeCount;                                                                                                 // 148
}                                                                                                                      // 149
                                                                                                                       // 150
/**                                                                                                                    // 151
 * Traverses children that are typically specified as `props.children`, but                                            // 152
 * might also be specified through attributes:                                                                         // 153
 *                                                                                                                     // 154
 * - `traverseAllChildren(this.props.children, ...)`                                                                   // 155
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`                                                          // 156
 *                                                                                                                     // 157
 * The `traverseContext` is an optional argument that is passed through the                                            // 158
 * entire traversal. It can be used to store accumulations or anything else that                                       // 159
 * the callback might find relevant.                                                                                   // 160
 *                                                                                                                     // 161
 * @param {?*} children Children tree object.                                                                          // 162
 * @param {!function} callback To invoke upon traversing each child.                                                   // 163
 * @param {?*} traverseContext Context for traversal.                                                                  // 164
 * @return {!number} The number of children in this subtree.                                                           // 165
 */                                                                                                                    // 166
function traverseAllChildren(children, callback, traverseContext) {                                                    // 167
  if (children == null) {                                                                                              // 168
    return 0;                                                                                                          // 169
  }                                                                                                                    // 170
                                                                                                                       // 171
  return traverseAllChildrenImpl(children, '', callback, traverseContext);                                             // 172
}                                                                                                                      // 173
                                                                                                                       // 174
module.exports = traverseAllChildren;                                                                                  // 175
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactElementSymbol.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactElementSymbol.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2014-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
// The Symbol used to tag the ReactElement type. If there is no native Symbol                                          // 14
// nor polyfill, then a plain number is used for performance.                                                          // 15
                                                                                                                       // 16
var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;    // 17
                                                                                                                       // 18
module.exports = REACT_ELEMENT_TYPE;                                                                                   // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getIteratorFn.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/getIteratorFn.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
/* global Symbol */                                                                                                    // 14
                                                                                                                       // 15
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;                                                 // 16
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.                                                        // 17
                                                                                                                       // 18
/**                                                                                                                    // 19
 * Returns the iterator method function contained on the iterable object.                                              // 20
 *                                                                                                                     // 21
 * Be sure to invoke the function with the iterable as context:                                                        // 22
 *                                                                                                                     // 23
 *     var iteratorFn = getIteratorFn(myIterable);                                                                     // 24
 *     if (iteratorFn) {                                                                                               // 25
 *       var iterator = iteratorFn.call(myIterable);                                                                   // 26
 *       ...                                                                                                           // 27
 *     }                                                                                                               // 28
 *                                                                                                                     // 29
 * @param {?object} maybeIterable                                                                                      // 30
 * @return {?function}                                                                                                 // 31
 */                                                                                                                    // 32
function getIteratorFn(maybeIterable) {                                                                                // 33
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {                                                                              // 35
    return iteratorFn;                                                                                                 // 36
  }                                                                                                                    // 37
}                                                                                                                      // 38
                                                                                                                       // 39
module.exports = getIteratorFn;                                                                                        // 40
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flattenChildren.js":["./KeyEscapeUtils","./traverseAllChildren","fbjs/lib/warning","react/lib/ReactComponentTreeHook",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/flattenChildren.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var KeyEscapeUtils = require('./KeyEscapeUtils');                                                                      // 14
var traverseAllChildren = require('./traverseAllChildren');                                                            // 15
var warning = require('fbjs/lib/warning');                                                                             // 16
                                                                                                                       // 17
var ReactComponentTreeHook;                                                                                            // 18
                                                                                                                       // 19
if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {                                // 20
  // Temporary hack.                                                                                                   // 21
  // Inline requires don't work well with Jest:                                                                        // 22
  // https://github.com/facebook/react/issues/7240                                                                     // 23
  // Remove the inline requires when we don't need them anymore:                                                       // 24
  // https://github.com/facebook/react/pull/7178                                                                       // 25
  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                                // 26
}                                                                                                                      // 27
                                                                                                                       // 28
/**                                                                                                                    // 29
 * @param {function} traverseContext Context passed through traversal.                                                 // 30
 * @param {?ReactComponent} child React child component.                                                               // 31
 * @param {!string} name String name of key path to child.                                                             // 32
 * @param {number=} selfDebugID Optional debugID of the current internal instance.                                     // 33
 */                                                                                                                    // 34
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {                                    // 35
  // We found a component instance.                                                                                    // 36
  if (traverseContext && typeof traverseContext === 'object') {                                                        // 37
    var result = traverseContext;                                                                                      // 38
    var keyUnique = result[name] === undefined;                                                                        // 39
    if (process.env.NODE_ENV !== 'production') {                                                                       // 40
      if (!ReactComponentTreeHook) {                                                                                   // 41
        ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                          // 42
      }                                                                                                                // 43
      if (!keyUnique) {                                                                                                // 44
        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }                                                                                                                // 46
    }                                                                                                                  // 47
    if (keyUnique && child != null) {                                                                                  // 48
      result[name] = child;                                                                                            // 49
    }                                                                                                                  // 50
  }                                                                                                                    // 51
}                                                                                                                      // 52
                                                                                                                       // 53
/**                                                                                                                    // 54
 * Flattens children that are typically specified as `props.children`. Any null                                        // 55
 * children will not be included in the resulting object.                                                              // 56
 * @return {!object} flattened children keyed by name.                                                                 // 57
 */                                                                                                                    // 58
function flattenChildren(children, selfDebugID) {                                                                      // 59
  if (children == null) {                                                                                              // 60
    return children;                                                                                                   // 61
  }                                                                                                                    // 62
  var result = {};                                                                                                     // 63
                                                                                                                       // 64
  if (process.env.NODE_ENV !== 'production') {                                                                         // 65
    traverseAllChildren(children, function (traverseContext, child, name) {                                            // 66
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);                                 // 67
    }, result);                                                                                                        // 68
  } else {                                                                                                             // 69
    traverseAllChildren(children, flattenSingleChildIntoContext, result);                                              // 70
  }                                                                                                                    // 71
  return result;                                                                                                       // 72
}                                                                                                                      // 73
                                                                                                                       // 74
module.exports = flattenChildren;                                                                                      // 75
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactServerRenderingTransaction.js":["object-assign","./PooledClass","./Transaction","./ReactInstrumentation","./ReactServerUpdateQueue",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactServerRenderingTransaction.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2014-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _assign = require('object-assign');                                                                                // 13
                                                                                                                       // 14
var PooledClass = require('./PooledClass');                                                                            // 15
var Transaction = require('./Transaction');                                                                            // 16
var ReactInstrumentation = require('./ReactInstrumentation');                                                          // 17
var ReactServerUpdateQueue = require('./ReactServerUpdateQueue');                                                      // 18
                                                                                                                       // 19
/**                                                                                                                    // 20
 * Executed within the scope of the `Transaction` instance. Consider these as                                          // 21
 * being member methods, but with an implied ordering while being isolated from                                        // 22
 * each other.                                                                                                         // 23
 */                                                                                                                    // 24
var TRANSACTION_WRAPPERS = [];                                                                                         // 25
                                                                                                                       // 26
if (process.env.NODE_ENV !== 'production') {                                                                           // 27
  TRANSACTION_WRAPPERS.push({                                                                                          // 28
    initialize: ReactInstrumentation.debugTool.onBeginFlush,                                                           // 29
    close: ReactInstrumentation.debugTool.onEndFlush                                                                   // 30
  });                                                                                                                  // 31
}                                                                                                                      // 32
                                                                                                                       // 33
var noopCallbackQueue = {                                                                                              // 34
  enqueue: function () {}                                                                                              // 35
};                                                                                                                     // 36
                                                                                                                       // 37
/**                                                                                                                    // 38
 * @class ReactServerRenderingTransaction                                                                              // 39
 * @param {boolean} renderToStaticMarkup                                                                               // 40
 */                                                                                                                    // 41
function ReactServerRenderingTransaction(renderToStaticMarkup) {                                                       // 42
  this.reinitializeTransaction();                                                                                      // 43
  this.renderToStaticMarkup = renderToStaticMarkup;                                                                    // 44
  this.useCreateElement = false;                                                                                       // 45
  this.updateQueue = new ReactServerUpdateQueue(this);                                                                 // 46
}                                                                                                                      // 47
                                                                                                                       // 48
var Mixin = {                                                                                                          // 49
  /**                                                                                                                  // 50
   * @see Transaction                                                                                                  // 51
   * @abstract                                                                                                         // 52
   * @final                                                                                                            // 53
   * @return {array} Empty list of operation wrap procedures.                                                          // 54
   */                                                                                                                  // 55
  getTransactionWrappers: function () {                                                                                // 56
    return TRANSACTION_WRAPPERS;                                                                                       // 57
  },                                                                                                                   // 58
                                                                                                                       // 59
  /**                                                                                                                  // 60
   * @return {object} The queue to collect `onDOMReady` callbacks with.                                                // 61
   */                                                                                                                  // 62
  getReactMountReady: function () {                                                                                    // 63
    return noopCallbackQueue;                                                                                          // 64
  },                                                                                                                   // 65
                                                                                                                       // 66
  /**                                                                                                                  // 67
   * @return {object} The queue to collect React async events.                                                         // 68
   */                                                                                                                  // 69
  getUpdateQueue: function () {                                                                                        // 70
    return this.updateQueue;                                                                                           // 71
  },                                                                                                                   // 72
                                                                                                                       // 73
  /**                                                                                                                  // 74
   * `PooledClass` looks for this, and will invoke this before allowing this                                           // 75
   * instance to be reused.                                                                                            // 76
   */                                                                                                                  // 77
  destructor: function () {},                                                                                          // 78
                                                                                                                       // 79
  checkpoint: function () {},                                                                                          // 80
                                                                                                                       // 81
  rollback: function () {}                                                                                             // 82
};                                                                                                                     // 83
                                                                                                                       // 84
_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);                                                // 85
                                                                                                                       // 86
PooledClass.addPoolingTo(ReactServerRenderingTransaction);                                                             // 87
                                                                                                                       // 88
module.exports = ReactServerRenderingTransaction;                                                                      // 89
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactServerUpdateQueue.js":["./ReactUpdateQueue","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactServerUpdateQueue.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2015-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 15
var ReactUpdateQueue = require('./ReactUpdateQueue');                                                                  // 16
                                                                                                                       // 17
var warning = require('fbjs/lib/warning');                                                                             // 18
                                                                                                                       // 19
function warnNoop(publicInstance, callerName) {                                                                        // 20
  if (process.env.NODE_ENV !== 'production') {                                                                         // 21
    var constructor = publicInstance.constructor;                                                                      // 22
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }                                                                                                                    // 24
}                                                                                                                      // 25
                                                                                                                       // 26
/**                                                                                                                    // 27
 * This is the update queue used for server rendering.                                                                 // 28
 * It delegates to ReactUpdateQueue while server rendering is in progress and                                          // 29
 * switches to ReactNoopUpdateQueue after the transaction has completed.                                               // 30
 * @class ReactServerUpdateQueue                                                                                       // 31
 * @param {Transaction} transaction                                                                                    // 32
 */                                                                                                                    // 33
                                                                                                                       // 34
var ReactServerUpdateQueue = function () {                                                                             // 35
  function ReactServerUpdateQueue(transaction) {                                                                       // 36
    _classCallCheck(this, ReactServerUpdateQueue);                                                                     // 37
                                                                                                                       // 38
    this.transaction = transaction;                                                                                    // 39
  }                                                                                                                    // 40
                                                                                                                       // 41
  /**                                                                                                                  // 42
   * Checks whether or not this composite component is mounted.                                                        // 43
   * @param {ReactClass} publicInstance The instance we want to test.                                                  // 44
   * @return {boolean} True if mounted, false otherwise.                                                               // 45
   * @protected                                                                                                        // 46
   * @final                                                                                                            // 47
   */                                                                                                                  // 48
                                                                                                                       // 49
                                                                                                                       // 50
  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {                                    // 51
    return false;                                                                                                      // 52
  };                                                                                                                   // 53
                                                                                                                       // 54
  /**                                                                                                                  // 55
   * Enqueue a callback that will be executed after all the pending updates                                            // 56
   * have processed.                                                                                                   // 57
   *                                                                                                                   // 58
   * @param {ReactClass} publicInstance The instance to use as `this` context.                                         // 59
   * @param {?function} callback Called after state is updated.                                                        // 60
   * @internal                                                                                                         // 61
   */                                                                                                                  // 62
                                                                                                                       // 63
                                                                                                                       // 64
  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {  // 65
    if (this.transaction.isInTransaction()) {                                                                          // 66
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);                                          // 67
    }                                                                                                                  // 68
  };                                                                                                                   // 69
                                                                                                                       // 70
  /**                                                                                                                  // 71
   * Forces an update. This should only be invoked when it is known with                                               // 72
   * certainty that we are **not** in a DOM transaction.                                                               // 73
   *                                                                                                                   // 74
   * You may want to call this when you know that some deeper aspect of the                                            // 75
   * component's state has changed but `setState` was not called.                                                      // 76
   *                                                                                                                   // 77
   * This will not invoke `shouldComponentUpdate`, but it will invoke                                                  // 78
   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 79
   *                                                                                                                   // 80
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 81
   * @internal                                                                                                         // 82
   */                                                                                                                  // 83
                                                                                                                       // 84
                                                                                                                       // 85
  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {                  // 86
    if (this.transaction.isInTransaction()) {                                                                          // 87
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);                                                             // 88
    } else {                                                                                                           // 89
      warnNoop(publicInstance, 'forceUpdate');                                                                         // 90
    }                                                                                                                  // 91
  };                                                                                                                   // 92
                                                                                                                       // 93
  /**                                                                                                                  // 94
   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 95
   * You should treat `this.state` as immutable.                                                                       // 96
   *                                                                                                                   // 97
   * There is no guarantee that `this.state` will be immediately updated, so                                           // 98
   * accessing `this.state` after calling this method may return the old value.                                        // 99
   *                                                                                                                   // 100
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 101
   * @param {object|function} completeState Next state.                                                                // 102
   * @internal                                                                                                         // 103
   */                                                                                                                  // 104
                                                                                                                       // 105
                                                                                                                       // 106
  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {                                                                          // 108
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);                                             // 109
    } else {                                                                                                           // 110
      warnNoop(publicInstance, 'replaceState');                                                                        // 111
    }                                                                                                                  // 112
  };                                                                                                                   // 113
                                                                                                                       // 114
  /**                                                                                                                  // 115
   * Sets a subset of the state. This only exists because _pendingState is                                             // 116
   * internal. This provides a merging strategy that is not available to deep                                          // 117
   * properties which is confusing. TODO: Expose pendingState or don't use it                                          // 118
   * during the merge.                                                                                                 // 119
   *                                                                                                                   // 120
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 121
   * @param {object|function} partialState Next partial state to be merged with state.                                 // 122
   * @internal                                                                                                         // 123
   */                                                                                                                  // 124
                                                                                                                       // 125
                                                                                                                       // 126
  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {          // 127
    if (this.transaction.isInTransaction()) {                                                                          // 128
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);                                                  // 129
    } else {                                                                                                           // 130
      warnNoop(publicInstance, 'setState');                                                                            // 131
    }                                                                                                                  // 132
  };                                                                                                                   // 133
                                                                                                                       // 134
  return ReactServerUpdateQueue;                                                                                       // 135
}();                                                                                                                   // 136
                                                                                                                       // 137
module.exports = ReactServerUpdateQueue;                                                                               // 138
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactUpdateQueue.js":["./reactProdInvariant","react/lib/ReactCurrentOwner","./ReactInstanceMap","./ReactInstrumentation","./ReactUpdates","fbjs/lib/invariant","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactUpdateQueue.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2015-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');                                                        // 15
var ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 16
var ReactInstrumentation = require('./ReactInstrumentation');                                                          // 17
var ReactUpdates = require('./ReactUpdates');                                                                          // 18
                                                                                                                       // 19
var invariant = require('fbjs/lib/invariant');                                                                         // 20
var warning = require('fbjs/lib/warning');                                                                             // 21
                                                                                                                       // 22
function enqueueUpdate(internalInstance) {                                                                             // 23
  ReactUpdates.enqueueUpdate(internalInstance);                                                                        // 24
}                                                                                                                      // 25
                                                                                                                       // 26
function formatUnexpectedArgument(arg) {                                                                               // 27
  var type = typeof arg;                                                                                               // 28
  if (type !== 'object') {                                                                                             // 29
    return type;                                                                                                       // 30
  }                                                                                                                    // 31
  var displayName = arg.constructor && arg.constructor.name || type;                                                   // 32
  var keys = Object.keys(arg);                                                                                         // 33
  if (keys.length > 0 && keys.length < 20) {                                                                           // 34
    return displayName + ' (keys: ' + keys.join(', ') + ')';                                                           // 35
  }                                                                                                                    // 36
  return displayName;                                                                                                  // 37
}                                                                                                                      // 38
                                                                                                                       // 39
function getInternalInstanceReadyForUpdate(publicInstance, callerName) {                                               // 40
  var internalInstance = ReactInstanceMap.get(publicInstance);                                                         // 41
  if (!internalInstance) {                                                                                             // 42
    if (process.env.NODE_ENV !== 'production') {                                                                       // 43
      var ctor = publicInstance.constructor;                                                                           // 44
      // Only warn when we have a callerName. Otherwise we should be silent.                                           // 45
      // We're probably calling from enqueueCallback. We don't want to warn                                            // 46
      // there because we already warned for the corresponding lifecycle method.                                       // 47
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }                                                                                                                  // 49
    return null;                                                                                                       // 50
  }                                                                                                                    // 51
                                                                                                                       // 52
  if (process.env.NODE_ENV !== 'production') {                                                                         // 53
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }                                                                                                                    // 55
                                                                                                                       // 56
  return internalInstance;                                                                                             // 57
}                                                                                                                      // 58
                                                                                                                       // 59
/**                                                                                                                    // 60
 * ReactUpdateQueue allows for state updates to be scheduled into a later                                              // 61
 * reconciliation step.                                                                                                // 62
 */                                                                                                                    // 63
var ReactUpdateQueue = {                                                                                               // 64
                                                                                                                       // 65
  /**                                                                                                                  // 66
   * Checks whether or not this composite component is mounted.                                                        // 67
   * @param {ReactClass} publicInstance The instance we want to test.                                                  // 68
   * @return {boolean} True if mounted, false otherwise.                                                               // 69
   * @protected                                                                                                        // 70
   * @final                                                                                                            // 71
   */                                                                                                                  // 72
  isMounted: function (publicInstance) {                                                                               // 73
    if (process.env.NODE_ENV !== 'production') {                                                                       // 74
      var owner = ReactCurrentOwner.current;                                                                           // 75
      if (owner !== null) {                                                                                            // 76
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;                                                                         // 78
      }                                                                                                                // 79
    }                                                                                                                  // 80
    var internalInstance = ReactInstanceMap.get(publicInstance);                                                       // 81
    if (internalInstance) {                                                                                            // 82
      // During componentWillMount and render this will still be null but after                                        // 83
      // that will always render to something. At least for now. So we can use                                         // 84
      // this hack.                                                                                                    // 85
      return !!internalInstance._renderedComponent;                                                                    // 86
    } else {                                                                                                           // 87
      return false;                                                                                                    // 88
    }                                                                                                                  // 89
  },                                                                                                                   // 90
                                                                                                                       // 91
  /**                                                                                                                  // 92
   * Enqueue a callback that will be executed after all the pending updates                                            // 93
   * have processed.                                                                                                   // 94
   *                                                                                                                   // 95
   * @param {ReactClass} publicInstance The instance to use as `this` context.                                         // 96
   * @param {?function} callback Called after state is updated.                                                        // 97
   * @param {string} callerName Name of the calling function in the public API.                                        // 98
   * @internal                                                                                                         // 99
   */                                                                                                                  // 100
  enqueueCallback: function (publicInstance, callback, callerName) {                                                   // 101
    ReactUpdateQueue.validateCallback(callback, callerName);                                                           // 102
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);                                          // 103
                                                                                                                       // 104
    // Previously we would throw an error if we didn't have an internal                                                // 105
    // instance. Since we want to make it a no-op instead, we mirror the same                                          // 106
    // behavior we have in other enqueue* methods.                                                                     // 107
    // We also need to ignore callbacks in componentWillMount. See                                                     // 108
    // enqueueUpdates.                                                                                                 // 109
    if (!internalInstance) {                                                                                           // 110
      return null;                                                                                                     // 111
    }                                                                                                                  // 112
                                                                                                                       // 113
    if (internalInstance._pendingCallbacks) {                                                                          // 114
      internalInstance._pendingCallbacks.push(callback);                                                               // 115
    } else {                                                                                                           // 116
      internalInstance._pendingCallbacks = [callback];                                                                 // 117
    }                                                                                                                  // 118
    // TODO: The callback here is ignored when setState is called from                                                 // 119
    // componentWillMount. Either fix it or disallow doing so completely in                                            // 120
    // favor of getInitialState. Alternatively, we can disallow                                                        // 121
    // componentWillMount during server-side rendering.                                                                // 122
    enqueueUpdate(internalInstance);                                                                                   // 123
  },                                                                                                                   // 124
                                                                                                                       // 125
  enqueueCallbackInternal: function (internalInstance, callback) {                                                     // 126
    if (internalInstance._pendingCallbacks) {                                                                          // 127
      internalInstance._pendingCallbacks.push(callback);                                                               // 128
    } else {                                                                                                           // 129
      internalInstance._pendingCallbacks = [callback];                                                                 // 130
    }                                                                                                                  // 131
    enqueueUpdate(internalInstance);                                                                                   // 132
  },                                                                                                                   // 133
                                                                                                                       // 134
  /**                                                                                                                  // 135
   * Forces an update. This should only be invoked when it is known with                                               // 136
   * certainty that we are **not** in a DOM transaction.                                                               // 137
   *                                                                                                                   // 138
   * You may want to call this when you know that some deeper aspect of the                                            // 139
   * component's state has changed but `setState` was not called.                                                      // 140
   *                                                                                                                   // 141
   * This will not invoke `shouldComponentUpdate`, but it will invoke                                                  // 142
   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 143
   *                                                                                                                   // 144
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 145
   * @internal                                                                                                         // 146
   */                                                                                                                  // 147
  enqueueForceUpdate: function (publicInstance) {                                                                      // 148
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');                           // 149
                                                                                                                       // 150
    if (!internalInstance) {                                                                                           // 151
      return;                                                                                                          // 152
    }                                                                                                                  // 153
                                                                                                                       // 154
    internalInstance._pendingForceUpdate = true;                                                                       // 155
                                                                                                                       // 156
    enqueueUpdate(internalInstance);                                                                                   // 157
  },                                                                                                                   // 158
                                                                                                                       // 159
  /**                                                                                                                  // 160
   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 161
   * You should treat `this.state` as immutable.                                                                       // 162
   *                                                                                                                   // 163
   * There is no guarantee that `this.state` will be immediately updated, so                                           // 164
   * accessing `this.state` after calling this method may return the old value.                                        // 165
   *                                                                                                                   // 166
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 167
   * @param {object} completeState Next state.                                                                         // 168
   * @internal                                                                                                         // 169
   */                                                                                                                  // 170
  enqueueReplaceState: function (publicInstance, completeState) {                                                      // 171
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');                          // 172
                                                                                                                       // 173
    if (!internalInstance) {                                                                                           // 174
      return;                                                                                                          // 175
    }                                                                                                                  // 176
                                                                                                                       // 177
    internalInstance._pendingStateQueue = [completeState];                                                             // 178
    internalInstance._pendingReplaceState = true;                                                                      // 179
                                                                                                                       // 180
    enqueueUpdate(internalInstance);                                                                                   // 181
  },                                                                                                                   // 182
                                                                                                                       // 183
  /**                                                                                                                  // 184
   * Sets a subset of the state. This only exists because _pendingState is                                             // 185
   * internal. This provides a merging strategy that is not available to deep                                          // 186
   * properties which is confusing. TODO: Expose pendingState or don't use it                                          // 187
   * during the merge.                                                                                                 // 188
   *                                                                                                                   // 189
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 190
   * @param {object} partialState Next partial state to be merged with state.                                          // 191
   * @internal                                                                                                         // 192
   */                                                                                                                  // 193
  enqueueSetState: function (publicInstance, partialState) {                                                           // 194
    if (process.env.NODE_ENV !== 'production') {                                                                       // 195
      ReactInstrumentation.debugTool.onSetState();                                                                     // 196
      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }                                                                                                                  // 198
                                                                                                                       // 199
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');                              // 200
                                                                                                                       // 201
    if (!internalInstance) {                                                                                           // 202
      return;                                                                                                          // 203
    }                                                                                                                  // 204
                                                                                                                       // 205
    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);                     // 206
    queue.push(partialState);                                                                                          // 207
                                                                                                                       // 208
    enqueueUpdate(internalInstance);                                                                                   // 209
  },                                                                                                                   // 210
                                                                                                                       // 211
  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {                                      // 212
    internalInstance._pendingElement = nextElement;                                                                    // 213
    // TODO: introduce _pendingContext instead of setting it directly.                                                 // 214
    internalInstance._context = nextContext;                                                                           // 215
    enqueueUpdate(internalInstance);                                                                                   // 216
  },                                                                                                                   // 217
                                                                                                                       // 218
  validateCallback: function (callback, callerName) {                                                                  // 219
    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }                                                                                                                    // 221
                                                                                                                       // 222
};                                                                                                                     // 223
                                                                                                                       // 224
module.exports = ReactUpdateQueue;                                                                                     // 225
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"validateDOMNesting.js":["object-assign","fbjs/lib/emptyFunction","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/validateDOMNesting.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2015-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _assign = require('object-assign');                                                                                // 13
                                                                                                                       // 14
var emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 15
var warning = require('fbjs/lib/warning');                                                                             // 16
                                                                                                                       // 17
var validateDOMNesting = emptyFunction;                                                                                // 18
                                                                                                                       // 19
if (process.env.NODE_ENV !== 'production') {                                                                           // 20
  // This validation code was written based on the HTML5 parsing spec:                                                 // 21
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope                                        // 22
  //                                                                                                                   // 23
  // Note: this does not catch all invalid nesting, nor does it try to (as it's                                        // 24
  // not clear what practical benefit doing so provides); instead, we warn only                                        // 25
  // for cases where the parser will give a parse tree differing from what React                                       // 26
  // intended. For example, <b><div></div></b> is invalid but we don't warn                                            // 27
  // because it still parses correctly; we do warn for other cases like nested                                         // 28
  // <p> tags where the beginning of the second element implicitly closes the                                          // 29
  // first, causing a confusing mess.                                                                                  // 30
                                                                                                                       // 31
  // https://html.spec.whatwg.org/multipage/syntax.html#special                                                        // 32
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
                                                                                                                       // 34
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope                                        // 35
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',                // 36
                                                                                                                       // 37
  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point                                         // 38
  // TODO: Distinguish by namespace here -- for <title>, including it here                                             // 39
  // errs on the side of fewer warnings                                                                                // 40
  'foreignObject', 'desc', 'title'];                                                                                   // 41
                                                                                                                       // 42
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope                                 // 43
  var buttonScopeTags = inScopeTags.concat(['button']);                                                                // 44
                                                                                                                       // 45
  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags                                      // 46
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];                                      // 47
                                                                                                                       // 48
  var emptyAncestorInfo = {                                                                                            // 49
    current: null,                                                                                                     // 50
                                                                                                                       // 51
    formTag: null,                                                                                                     // 52
    aTagInScope: null,                                                                                                 // 53
    buttonTagInScope: null,                                                                                            // 54
    nobrTagInScope: null,                                                                                              // 55
    pTagInButtonScope: null,                                                                                           // 56
                                                                                                                       // 57
    listItemTagAutoclosing: null,                                                                                      // 58
    dlItemTagAutoclosing: null                                                                                         // 59
  };                                                                                                                   // 60
                                                                                                                       // 61
  var updatedAncestorInfo = function (oldInfo, tag, instance) {                                                        // 62
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);                                                      // 63
    var info = { tag: tag, instance: instance };                                                                       // 64
                                                                                                                       // 65
    if (inScopeTags.indexOf(tag) !== -1) {                                                                             // 66
      ancestorInfo.aTagInScope = null;                                                                                 // 67
      ancestorInfo.buttonTagInScope = null;                                                                            // 68
      ancestorInfo.nobrTagInScope = null;                                                                              // 69
    }                                                                                                                  // 70
    if (buttonScopeTags.indexOf(tag) !== -1) {                                                                         // 71
      ancestorInfo.pTagInButtonScope = null;                                                                           // 72
    }                                                                                                                  // 73
                                                                                                                       // 74
    // See rules for 'li', 'dd', 'dt' start tags in                                                                    // 75
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody                                          // 76
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {                        // 77
      ancestorInfo.listItemTagAutoclosing = null;                                                                      // 78
      ancestorInfo.dlItemTagAutoclosing = null;                                                                        // 79
    }                                                                                                                  // 80
                                                                                                                       // 81
    ancestorInfo.current = info;                                                                                       // 82
                                                                                                                       // 83
    if (tag === 'form') {                                                                                              // 84
      ancestorInfo.formTag = info;                                                                                     // 85
    }                                                                                                                  // 86
    if (tag === 'a') {                                                                                                 // 87
      ancestorInfo.aTagInScope = info;                                                                                 // 88
    }                                                                                                                  // 89
    if (tag === 'button') {                                                                                            // 90
      ancestorInfo.buttonTagInScope = info;                                                                            // 91
    }                                                                                                                  // 92
    if (tag === 'nobr') {                                                                                              // 93
      ancestorInfo.nobrTagInScope = info;                                                                              // 94
    }                                                                                                                  // 95
    if (tag === 'p') {                                                                                                 // 96
      ancestorInfo.pTagInButtonScope = info;                                                                           // 97
    }                                                                                                                  // 98
    if (tag === 'li') {                                                                                                // 99
      ancestorInfo.listItemTagAutoclosing = info;                                                                      // 100
    }                                                                                                                  // 101
    if (tag === 'dd' || tag === 'dt') {                                                                                // 102
      ancestorInfo.dlItemTagAutoclosing = info;                                                                        // 103
    }                                                                                                                  // 104
                                                                                                                       // 105
    return ancestorInfo;                                                                                               // 106
  };                                                                                                                   // 107
                                                                                                                       // 108
  /**                                                                                                                  // 109
   * Returns whether                                                                                                   // 110
   */                                                                                                                  // 111
  var isTagValidWithParent = function (tag, parentTag) {                                                               // 112
    // First, let's check if we're in an unusual parsing mode...                                                       // 113
    switch (parentTag) {                                                                                               // 114
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect                                      // 115
      case 'select':                                                                                                   // 116
        return tag === 'option' || tag === 'optgroup' || tag === '#text';                                              // 117
      case 'optgroup':                                                                                                 // 118
        return tag === 'option' || tag === '#text';                                                                    // 119
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>                                        // 120
      // but                                                                                                           // 121
      case 'option':                                                                                                   // 122
        return tag === '#text';                                                                                        // 123
                                                                                                                       // 124
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd                                          // 125
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption                                     // 126
      // No special behavior since these rules fall back to "in body" mode for                                         // 127
      // all except special table nodes which cause bad parsing behavior anyway.                                       // 128
                                                                                                                       // 129
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr                                          // 130
      case 'tr':                                                                                                       // 131
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';              // 132
                                                                                                                       // 133
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody                                       // 134
      case 'tbody':                                                                                                    // 135
      case 'thead':                                                                                                    // 136
      case 'tfoot':                                                                                                    // 137
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';                              // 138
                                                                                                                       // 139
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup                                    // 140
      case 'colgroup':                                                                                                 // 141
        return tag === 'col' || tag === 'template';                                                                    // 142
                                                                                                                       // 143
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable                                       // 144
      case 'table':                                                                                                    // 145
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
                                                                                                                       // 147
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead                                        // 148
      case 'head':                                                                                                     // 149
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
                                                                                                                       // 151
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element                                        // 152
      case 'html':                                                                                                     // 153
        return tag === 'head' || tag === 'body';                                                                       // 154
      case '#document':                                                                                                // 155
        return tag === 'html';                                                                                         // 156
    }                                                                                                                  // 157
                                                                                                                       // 158
    // Probably in the "in body" parsing mode, so we outlaw only tag combos                                            // 159
    // where the parsing rules cause implicit opens or closes to be added.                                             // 160
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody                                          // 161
    switch (tag) {                                                                                                     // 162
      case 'h1':                                                                                                       // 163
      case 'h2':                                                                                                       // 164
      case 'h3':                                                                                                       // 165
      case 'h4':                                                                                                       // 166
      case 'h5':                                                                                                       // 167
      case 'h6':                                                                                                       // 168
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
                                                                                                                       // 170
      case 'rp':                                                                                                       // 171
      case 'rt':                                                                                                       // 172
        return impliedEndTags.indexOf(parentTag) === -1;                                                               // 173
                                                                                                                       // 174
      case 'body':                                                                                                     // 175
      case 'caption':                                                                                                  // 176
      case 'col':                                                                                                      // 177
      case 'colgroup':                                                                                                 // 178
      case 'frame':                                                                                                    // 179
      case 'head':                                                                                                     // 180
      case 'html':                                                                                                     // 181
      case 'tbody':                                                                                                    // 182
      case 'td':                                                                                                       // 183
      case 'tfoot':                                                                                                    // 184
      case 'th':                                                                                                       // 185
      case 'thead':                                                                                                    // 186
      case 'tr':                                                                                                       // 187
        // These tags are only valid with a few parents that have special child                                        // 188
        // parsing rules -- if we're down here, then none of those matched and                                         // 189
        // so we allow it only if we don't know what the parent is, as all other                                       // 190
        // cases are invalid.                                                                                          // 191
        return parentTag == null;                                                                                      // 192
    }                                                                                                                  // 193
                                                                                                                       // 194
    return true;                                                                                                       // 195
  };                                                                                                                   // 196
                                                                                                                       // 197
  /**                                                                                                                  // 198
   * Returns whether                                                                                                   // 199
   */                                                                                                                  // 200
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {                                                       // 201
    switch (tag) {                                                                                                     // 202
      case 'address':                                                                                                  // 203
      case 'article':                                                                                                  // 204
      case 'aside':                                                                                                    // 205
      case 'blockquote':                                                                                               // 206
      case 'center':                                                                                                   // 207
      case 'details':                                                                                                  // 208
      case 'dialog':                                                                                                   // 209
      case 'dir':                                                                                                      // 210
      case 'div':                                                                                                      // 211
      case 'dl':                                                                                                       // 212
      case 'fieldset':                                                                                                 // 213
      case 'figcaption':                                                                                               // 214
      case 'figure':                                                                                                   // 215
      case 'footer':                                                                                                   // 216
      case 'header':                                                                                                   // 217
      case 'hgroup':                                                                                                   // 218
      case 'main':                                                                                                     // 219
      case 'menu':                                                                                                     // 220
      case 'nav':                                                                                                      // 221
      case 'ol':                                                                                                       // 222
      case 'p':                                                                                                        // 223
      case 'section':                                                                                                  // 224
      case 'summary':                                                                                                  // 225
      case 'ul':                                                                                                       // 226
                                                                                                                       // 227
      case 'pre':                                                                                                      // 228
      case 'listing':                                                                                                  // 229
                                                                                                                       // 230
      case 'table':                                                                                                    // 231
                                                                                                                       // 232
      case 'hr':                                                                                                       // 233
                                                                                                                       // 234
      case 'xmp':                                                                                                      // 235
                                                                                                                       // 236
      case 'h1':                                                                                                       // 237
      case 'h2':                                                                                                       // 238
      case 'h3':                                                                                                       // 239
      case 'h4':                                                                                                       // 240
      case 'h5':                                                                                                       // 241
      case 'h6':                                                                                                       // 242
        return ancestorInfo.pTagInButtonScope;                                                                         // 243
                                                                                                                       // 244
      case 'form':                                                                                                     // 245
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;                                                 // 246
                                                                                                                       // 247
      case 'li':                                                                                                       // 248
        return ancestorInfo.listItemTagAutoclosing;                                                                    // 249
                                                                                                                       // 250
      case 'dd':                                                                                                       // 251
      case 'dt':                                                                                                       // 252
        return ancestorInfo.dlItemTagAutoclosing;                                                                      // 253
                                                                                                                       // 254
      case 'button':                                                                                                   // 255
        return ancestorInfo.buttonTagInScope;                                                                          // 256
                                                                                                                       // 257
      case 'a':                                                                                                        // 258
        // Spec says something about storing a list of markers, but it sounds                                          // 259
        // equivalent to this check.                                                                                   // 260
        return ancestorInfo.aTagInScope;                                                                               // 261
                                                                                                                       // 262
      case 'nobr':                                                                                                     // 263
        return ancestorInfo.nobrTagInScope;                                                                            // 264
    }                                                                                                                  // 265
                                                                                                                       // 266
    return null;                                                                                                       // 267
  };                                                                                                                   // 268
                                                                                                                       // 269
  /**                                                                                                                  // 270
   * Given a ReactCompositeComponent instance, return a list of its recursive                                          // 271
   * owners, starting at the root and ending with the instance itself.                                                 // 272
   */                                                                                                                  // 273
  var findOwnerStack = function (instance) {                                                                           // 274
    if (!instance) {                                                                                                   // 275
      return [];                                                                                                       // 276
    }                                                                                                                  // 277
                                                                                                                       // 278
    var stack = [];                                                                                                    // 279
    do {                                                                                                               // 280
      stack.push(instance);                                                                                            // 281
    } while (instance = instance._currentElement._owner);                                                              // 282
    stack.reverse();                                                                                                   // 283
    return stack;                                                                                                      // 284
  };                                                                                                                   // 285
                                                                                                                       // 286
  var didWarn = {};                                                                                                    // 287
                                                                                                                       // 288
  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {                                   // 289
    ancestorInfo = ancestorInfo || emptyAncestorInfo;                                                                  // 290
    var parentInfo = ancestorInfo.current;                                                                             // 291
    var parentTag = parentInfo && parentInfo.tag;                                                                      // 292
                                                                                                                       // 293
    if (childText != null) {                                                                                           // 294
      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';                                                                                              // 296
    }                                                                                                                  // 297
                                                                                                                       // 298
    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;                                 // 299
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);                    // 300
    var problematic = invalidParent || invalidAncestor;                                                                // 301
                                                                                                                       // 302
    if (problematic) {                                                                                                 // 303
      var ancestorTag = problematic.tag;                                                                               // 304
      var ancestorInstance = problematic.instance;                                                                     // 305
                                                                                                                       // 306
      var childOwner = childInstance && childInstance._currentElement._owner;                                          // 307
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;                                 // 308
                                                                                                                       // 309
      var childOwners = findOwnerStack(childOwner);                                                                    // 310
      var ancestorOwners = findOwnerStack(ancestorOwner);                                                              // 311
                                                                                                                       // 312
      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);                                           // 313
      var i;                                                                                                           // 314
                                                                                                                       // 315
      var deepestCommon = -1;                                                                                          // 316
      for (i = 0; i < minStackLen; i++) {                                                                              // 317
        if (childOwners[i] === ancestorOwners[i]) {                                                                    // 318
          deepestCommon = i;                                                                                           // 319
        } else {                                                                                                       // 320
          break;                                                                                                       // 321
        }                                                                                                              // 322
      }                                                                                                                // 323
                                                                                                                       // 324
      var UNKNOWN = '(unknown)';                                                                                       // 325
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {                                 // 326
        return inst.getName() || UNKNOWN;                                                                              // 327
      });                                                                                                              // 328
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {                           // 329
        return inst.getName() || UNKNOWN;                                                                              // 330
      });                                                                                                              // 331
      var ownerInfo = [].concat(                                                                                       // 332
      // If the parent and child instances have a common owner ancestor, start                                         // 333
      // with that -- otherwise we just start with the parent's owners.                                                // 334
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,    // 335
      // If we're warning about an invalid (non-parent) ancestry, add '...'                                            // 336
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');                                          // 337
                                                                                                                       // 338
      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;                            // 339
      if (didWarn[warnKey]) {                                                                                          // 340
        return;                                                                                                        // 341
      }                                                                                                                // 342
      didWarn[warnKey] = true;                                                                                         // 343
                                                                                                                       // 344
      var tagDisplayName = childTag;                                                                                   // 345
      var whitespaceInfo = '';                                                                                         // 346
      if (childTag === '#text') {                                                                                      // 347
        if (/\S/.test(childText)) {                                                                                    // 348
          tagDisplayName = 'Text nodes';                                                                               // 349
        } else {                                                                                                       // 350
          tagDisplayName = 'Whitespace text nodes';                                                                    // 351
          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
        }                                                                                                              // 353
      } else {                                                                                                         // 354
        tagDisplayName = '<' + childTag + '>';                                                                         // 355
      }                                                                                                                // 356
                                                                                                                       // 357
      if (invalidParent) {                                                                                             // 358
        var info = '';                                                                                                 // 359
        if (ancestorTag === 'table' && childTag === 'tr') {                                                            // 360
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';                  // 361
        }                                                                                                              // 362
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {                                                                                                         // 364
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }                                                                                                                // 366
    }                                                                                                                  // 367
  };                                                                                                                   // 368
                                                                                                                       // 369
  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;                                                        // 370
                                                                                                                       // 371
  // For testing                                                                                                       // 372
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {                                              // 373
    ancestorInfo = ancestorInfo || emptyAncestorInfo;                                                                  // 374
    var parentInfo = ancestorInfo.current;                                                                             // 375
    var parentTag = parentInfo && parentInfo.tag;                                                                      // 376
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);                      // 377
  };                                                                                                                   // 378
}                                                                                                                      // 379
                                                                                                                       // 380
module.exports = validateDOMNesting;                                                                                   // 381
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMEmptyComponent.js":["object-assign","./DOMLazyTree","./ReactDOMComponentTree",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMEmptyComponent.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2014-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _assign = require('object-assign');                                                                                // 13
                                                                                                                       // 14
var DOMLazyTree = require('./DOMLazyTree');                                                                            // 15
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 16
                                                                                                                       // 17
var ReactDOMEmptyComponent = function (instantiate) {                                                                  // 18
  // ReactCompositeComponent uses this:                                                                                // 19
  this._currentElement = null;                                                                                         // 20
  // ReactDOMComponentTree uses these:                                                                                 // 21
  this._hostNode = null;                                                                                               // 22
  this._hostParent = null;                                                                                             // 23
  this._hostContainerInfo = null;                                                                                      // 24
  this._domID = 0;                                                                                                     // 25
};                                                                                                                     // 26
_assign(ReactDOMEmptyComponent.prototype, {                                                                            // 27
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {                                     // 28
    var domID = hostContainerInfo._idCounter++;                                                                        // 29
    this._domID = domID;                                                                                               // 30
    this._hostParent = hostParent;                                                                                     // 31
    this._hostContainerInfo = hostContainerInfo;                                                                       // 32
                                                                                                                       // 33
    var nodeValue = ' react-empty: ' + this._domID + ' ';                                                              // 34
    if (transaction.useCreateElement) {                                                                                // 35
      var ownerDocument = hostContainerInfo._ownerDocument;                                                            // 36
      var node = ownerDocument.createComment(nodeValue);                                                               // 37
      ReactDOMComponentTree.precacheNode(this, node);                                                                  // 38
      return DOMLazyTree(node);                                                                                        // 39
    } else {                                                                                                           // 40
      if (transaction.renderToStaticMarkup) {                                                                          // 41
        // Normally we'd insert a comment node, but since this is a situation                                          // 42
        // where React won't take over (static pages), we can simply return                                            // 43
        // nothing.                                                                                                    // 44
        return '';                                                                                                     // 45
      }                                                                                                                // 46
      return '<!--' + nodeValue + '-->';                                                                               // 47
    }                                                                                                                  // 48
  },                                                                                                                   // 49
  receiveComponent: function () {},                                                                                    // 50
  getHostNode: function () {                                                                                           // 51
    return ReactDOMComponentTree.getNodeFromInstance(this);                                                            // 52
  },                                                                                                                   // 53
  unmountComponent: function () {                                                                                      // 54
    ReactDOMComponentTree.uncacheNode(this);                                                                           // 55
  }                                                                                                                    // 56
});                                                                                                                    // 57
                                                                                                                       // 58
module.exports = ReactDOMEmptyComponent;                                                                               // 59
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMTreeTraversal.js":["./reactProdInvariant","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMTreeTraversal.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2015-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var invariant = require('fbjs/lib/invariant');                                                                         // 15
                                                                                                                       // 16
/**                                                                                                                    // 17
 * Return the lowest common ancestor of A and B, or null if they are in                                                // 18
 * different trees.                                                                                                    // 19
 */                                                                                                                    // 20
function getLowestCommonAncestor(instA, instB) {                                                                       // 21
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
                                                                                                                       // 24
  var depthA = 0;                                                                                                      // 25
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {                                                          // 26
    depthA++;                                                                                                          // 27
  }                                                                                                                    // 28
  var depthB = 0;                                                                                                      // 29
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {                                                          // 30
    depthB++;                                                                                                          // 31
  }                                                                                                                    // 32
                                                                                                                       // 33
  // If A is deeper, crawl up.                                                                                         // 34
  while (depthA - depthB > 0) {                                                                                        // 35
    instA = instA._hostParent;                                                                                         // 36
    depthA--;                                                                                                          // 37
  }                                                                                                                    // 38
                                                                                                                       // 39
  // If B is deeper, crawl up.                                                                                         // 40
  while (depthB - depthA > 0) {                                                                                        // 41
    instB = instB._hostParent;                                                                                         // 42
    depthB--;                                                                                                          // 43
  }                                                                                                                    // 44
                                                                                                                       // 45
  // Walk in lockstep until we find a match.                                                                           // 46
  var depth = depthA;                                                                                                  // 47
  while (depth--) {                                                                                                    // 48
    if (instA === instB) {                                                                                             // 49
      return instA;                                                                                                    // 50
    }                                                                                                                  // 51
    instA = instA._hostParent;                                                                                         // 52
    instB = instB._hostParent;                                                                                         // 53
  }                                                                                                                    // 54
  return null;                                                                                                         // 55
}                                                                                                                      // 56
                                                                                                                       // 57
/**                                                                                                                    // 58
 * Return if A is an ancestor of B.                                                                                    // 59
 */                                                                                                                    // 60
function isAncestor(instA, instB) {                                                                                    // 61
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
                                                                                                                       // 64
  while (instB) {                                                                                                      // 65
    if (instB === instA) {                                                                                             // 66
      return true;                                                                                                     // 67
    }                                                                                                                  // 68
    instB = instB._hostParent;                                                                                         // 69
  }                                                                                                                    // 70
  return false;                                                                                                        // 71
}                                                                                                                      // 72
                                                                                                                       // 73
/**                                                                                                                    // 74
 * Return the parent instance of the passed-in instance.                                                               // 75
 */                                                                                                                    // 76
function getParentInstance(inst) {                                                                                     // 77
  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;
                                                                                                                       // 79
  return inst._hostParent;                                                                                             // 80
}                                                                                                                      // 81
                                                                                                                       // 82
/**                                                                                                                    // 83
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.                                              // 84
 */                                                                                                                    // 85
function traverseTwoPhase(inst, fn, arg) {                                                                             // 86
  var path = [];                                                                                                       // 87
  while (inst) {                                                                                                       // 88
    path.push(inst);                                                                                                   // 89
    inst = inst._hostParent;                                                                                           // 90
  }                                                                                                                    // 91
  var i;                                                                                                               // 92
  for (i = path.length; i-- > 0;) {                                                                                    // 93
    fn(path[i], 'captured', arg);                                                                                      // 94
  }                                                                                                                    // 95
  for (i = 0; i < path.length; i++) {                                                                                  // 96
    fn(path[i], 'bubbled', arg);                                                                                       // 97
  }                                                                                                                    // 98
}                                                                                                                      // 99
                                                                                                                       // 100
/**                                                                                                                    // 101
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that                                            // 102
 * should would receive a `mouseEnter` or `mouseLeave` event.                                                          // 103
 *                                                                                                                     // 104
 * Does not invoke the callback on the nearest common ancestor because nothing                                         // 105
 * "entered" or "left" that element.                                                                                   // 106
 */                                                                                                                    // 107
function traverseEnterLeave(from, to, fn, argFrom, argTo) {                                                            // 108
  var common = from && to ? getLowestCommonAncestor(from, to) : null;                                                  // 109
  var pathFrom = [];                                                                                                   // 110
  while (from && from !== common) {                                                                                    // 111
    pathFrom.push(from);                                                                                               // 112
    from = from._hostParent;                                                                                           // 113
  }                                                                                                                    // 114
  var pathTo = [];                                                                                                     // 115
  while (to && to !== common) {                                                                                        // 116
    pathTo.push(to);                                                                                                   // 117
    to = to._hostParent;                                                                                               // 118
  }                                                                                                                    // 119
  var i;                                                                                                               // 120
  for (i = 0; i < pathFrom.length; i++) {                                                                              // 121
    fn(pathFrom[i], 'bubbled', argFrom);                                                                               // 122
  }                                                                                                                    // 123
  for (i = pathTo.length; i-- > 0;) {                                                                                  // 124
    fn(pathTo[i], 'captured', argTo);                                                                                  // 125
  }                                                                                                                    // 126
}                                                                                                                      // 127
                                                                                                                       // 128
module.exports = {                                                                                                     // 129
  isAncestor: isAncestor,                                                                                              // 130
  getLowestCommonAncestor: getLowestCommonAncestor,                                                                    // 131
  getParentInstance: getParentInstance,                                                                                // 132
  traverseTwoPhase: traverseTwoPhase,                                                                                  // 133
  traverseEnterLeave: traverseEnterLeave                                                                               // 134
};                                                                                                                     // 135
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMTextComponent.js":["./reactProdInvariant","object-assign","./DOMChildrenOperations","./DOMLazyTree","./ReactDOMComponentTree","./escapeTextContentForBrowser","fbjs/lib/invariant","./validateDOMNesting",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMTextComponent.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant'),                                                                  // 13
    _assign = require('object-assign');                                                                                // 14
                                                                                                                       // 15
var DOMChildrenOperations = require('./DOMChildrenOperations');                                                        // 16
var DOMLazyTree = require('./DOMLazyTree');                                                                            // 17
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 18
                                                                                                                       // 19
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 20
var invariant = require('fbjs/lib/invariant');                                                                         // 21
var validateDOMNesting = require('./validateDOMNesting');                                                              // 22
                                                                                                                       // 23
/**                                                                                                                    // 24
 * Text nodes violate a couple assumptions that React makes about components:                                          // 25
 *                                                                                                                     // 26
 *  - When mounting text into the DOM, adjacent text nodes are merged.                                                 // 27
 *  - Text nodes cannot be assigned a React root ID.                                                                   // 28
 *                                                                                                                     // 29
 * This component is used to wrap strings between comment nodes so that they                                           // 30
 * can undergo the same reconciliation that is applied to elements.                                                    // 31
 *                                                                                                                     // 32
 * TODO: Investigate representing React components in the DOM with text nodes.                                         // 33
 *                                                                                                                     // 34
 * @class ReactDOMTextComponent                                                                                        // 35
 * @extends ReactComponent                                                                                             // 36
 * @internal                                                                                                           // 37
 */                                                                                                                    // 38
var ReactDOMTextComponent = function (text) {                                                                          // 39
  // TODO: This is really a ReactText (ReactNode), not a ReactElement                                                  // 40
  this._currentElement = text;                                                                                         // 41
  this._stringText = '' + text;                                                                                        // 42
  // ReactDOMComponentTree uses these:                                                                                 // 43
  this._hostNode = null;                                                                                               // 44
  this._hostParent = null;                                                                                             // 45
                                                                                                                       // 46
  // Properties                                                                                                        // 47
  this._domID = 0;                                                                                                     // 48
  this._mountIndex = 0;                                                                                                // 49
  this._closingComment = null;                                                                                         // 50
  this._commentNodes = null;                                                                                           // 51
};                                                                                                                     // 52
                                                                                                                       // 53
_assign(ReactDOMTextComponent.prototype, {                                                                             // 54
                                                                                                                       // 55
  /**                                                                                                                  // 56
   * Creates the markup for this text node. This node is not intended to have                                          // 57
   * any features besides containing text content.                                                                     // 58
   *                                                                                                                   // 59
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 60
   * @return {string} Markup for this text node.                                                                       // 61
   * @internal                                                                                                         // 62
   */                                                                                                                  // 63
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {                                     // 64
    if (process.env.NODE_ENV !== 'production') {                                                                       // 65
      var parentInfo;                                                                                                  // 66
      if (hostParent != null) {                                                                                        // 67
        parentInfo = hostParent._ancestorInfo;                                                                         // 68
      } else if (hostContainerInfo != null) {                                                                          // 69
        parentInfo = hostContainerInfo._ancestorInfo;                                                                  // 70
      }                                                                                                                // 71
      if (parentInfo) {                                                                                                // 72
        // parentInfo should always be present except for the top-level                                                // 73
        // component when server rendering                                                                             // 74
        validateDOMNesting(null, this._stringText, this, parentInfo);                                                  // 75
      }                                                                                                                // 76
    }                                                                                                                  // 77
                                                                                                                       // 78
    var domID = hostContainerInfo._idCounter++;                                                                        // 79
    var openingValue = ' react-text: ' + domID + ' ';                                                                  // 80
    var closingValue = ' /react-text ';                                                                                // 81
    this._domID = domID;                                                                                               // 82
    this._hostParent = hostParent;                                                                                     // 83
    if (transaction.useCreateElement) {                                                                                // 84
      var ownerDocument = hostContainerInfo._ownerDocument;                                                            // 85
      var openingComment = ownerDocument.createComment(openingValue);                                                  // 86
      var closingComment = ownerDocument.createComment(closingValue);                                                  // 87
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());                                              // 88
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));                                                   // 89
      if (this._stringText) {                                                                                          // 90
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));                 // 91
      }                                                                                                                // 92
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));                                                   // 93
      ReactDOMComponentTree.precacheNode(this, openingComment);                                                        // 94
      this._closingComment = closingComment;                                                                           // 95
      return lazyTree;                                                                                                 // 96
    } else {                                                                                                           // 97
      var escapedText = escapeTextContentForBrowser(this._stringText);                                                 // 98
                                                                                                                       // 99
      if (transaction.renderToStaticMarkup) {                                                                          // 100
        // Normally we'd wrap this between comment nodes for the reasons stated                                        // 101
        // above, but since this is a situation where React won't take over                                            // 102
        // (static pages), we can simply return the text as it is.                                                     // 103
        return escapedText;                                                                                            // 104
      }                                                                                                                // 105
                                                                                                                       // 106
      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';                              // 107
    }                                                                                                                  // 108
  },                                                                                                                   // 109
                                                                                                                       // 110
  /**                                                                                                                  // 111
   * Updates this component by updating the text content.                                                              // 112
   *                                                                                                                   // 113
   * @param {ReactText} nextText The next text content                                                                 // 114
   * @param {ReactReconcileTransaction} transaction                                                                    // 115
   * @internal                                                                                                         // 116
   */                                                                                                                  // 117
  receiveComponent: function (nextText, transaction) {                                                                 // 118
    if (nextText !== this._currentElement) {                                                                           // 119
      this._currentElement = nextText;                                                                                 // 120
      var nextStringText = '' + nextText;                                                                              // 121
      if (nextStringText !== this._stringText) {                                                                       // 122
        // TODO: Save this as pending props and use performUpdateIfNecessary                                           // 123
        // and/or updateComponent to do the actual update for consistency with                                         // 124
        // other component types?                                                                                      // 125
        this._stringText = nextStringText;                                                                             // 126
        var commentNodes = this.getHostNode();                                                                         // 127
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);                  // 128
      }                                                                                                                // 129
    }                                                                                                                  // 130
  },                                                                                                                   // 131
                                                                                                                       // 132
  getHostNode: function () {                                                                                           // 133
    var hostNode = this._commentNodes;                                                                                 // 134
    if (hostNode) {                                                                                                    // 135
      return hostNode;                                                                                                 // 136
    }                                                                                                                  // 137
    if (!this._closingComment) {                                                                                       // 138
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);                                            // 139
      var node = openingComment.nextSibling;                                                                           // 140
      while (true) {                                                                                                   // 141
        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {                                               // 143
          this._closingComment = node;                                                                                 // 144
          break;                                                                                                       // 145
        }                                                                                                              // 146
        node = node.nextSibling;                                                                                       // 147
      }                                                                                                                // 148
    }                                                                                                                  // 149
    hostNode = [this._hostNode, this._closingComment];                                                                 // 150
    this._commentNodes = hostNode;                                                                                     // 151
    return hostNode;                                                                                                   // 152
  },                                                                                                                   // 153
                                                                                                                       // 154
  unmountComponent: function () {                                                                                      // 155
    this._closingComment = null;                                                                                       // 156
    this._commentNodes = null;                                                                                         // 157
    ReactDOMComponentTree.uncacheNode(this);                                                                           // 158
  }                                                                                                                    // 159
                                                                                                                       // 160
});                                                                                                                    // 161
                                                                                                                       // 162
module.exports = ReactDOMTextComponent;                                                                                // 163
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDefaultBatchingStrategy.js":["object-assign","./ReactUpdates","./Transaction","fbjs/lib/emptyFunction",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDefaultBatchingStrategy.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _assign = require('object-assign');                                                                                // 13
                                                                                                                       // 14
var ReactUpdates = require('./ReactUpdates');                                                                          // 15
var Transaction = require('./Transaction');                                                                            // 16
                                                                                                                       // 17
var emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 18
                                                                                                                       // 19
var RESET_BATCHED_UPDATES = {                                                                                          // 20
  initialize: emptyFunction,                                                                                           // 21
  close: function () {                                                                                                 // 22
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;                                                            // 23
  }                                                                                                                    // 24
};                                                                                                                     // 25
                                                                                                                       // 26
var FLUSH_BATCHED_UPDATES = {                                                                                          // 27
  initialize: emptyFunction,                                                                                           // 28
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)                                                           // 29
};                                                                                                                     // 30
                                                                                                                       // 31
var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];                                             // 32
                                                                                                                       // 33
function ReactDefaultBatchingStrategyTransaction() {                                                                   // 34
  this.reinitializeTransaction();                                                                                      // 35
}                                                                                                                      // 36
                                                                                                                       // 37
_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {                                              // 38
  getTransactionWrappers: function () {                                                                                // 39
    return TRANSACTION_WRAPPERS;                                                                                       // 40
  }                                                                                                                    // 41
});                                                                                                                    // 42
                                                                                                                       // 43
var transaction = new ReactDefaultBatchingStrategyTransaction();                                                       // 44
                                                                                                                       // 45
var ReactDefaultBatchingStrategy = {                                                                                   // 46
  isBatchingUpdates: false,                                                                                            // 47
                                                                                                                       // 48
  /**                                                                                                                  // 49
   * Call the provided function in a context within which calls to `setState`                                          // 50
   * and friends are batched such that components aren't updated unnecessarily.                                        // 51
   */                                                                                                                  // 52
  batchedUpdates: function (callback, a, b, c, d, e) {                                                                 // 53
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;                                       // 54
                                                                                                                       // 55
    ReactDefaultBatchingStrategy.isBatchingUpdates = true;                                                             // 56
                                                                                                                       // 57
    // The code is written this way to avoid extra allocations                                                         // 58
    if (alreadyBatchingUpdates) {                                                                                      // 59
      return callback(a, b, c, d, e);                                                                                  // 60
    } else {                                                                                                           // 61
      return transaction.perform(callback, null, a, b, c, d, e);                                                       // 62
    }                                                                                                                  // 63
  }                                                                                                                    // 64
};                                                                                                                     // 65
                                                                                                                       // 66
module.exports = ReactDefaultBatchingStrategy;                                                                         // 67
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactEventListener.js":["object-assign","fbjs/lib/EventListener","fbjs/lib/ExecutionEnvironment","./PooledClass","./ReactDOMComponentTree","./ReactUpdates","./getEventTarget","fbjs/lib/getUnboundedScrollPosition",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactEventListener.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _assign = require('object-assign');                                                                                // 13
                                                                                                                       // 14
var EventListener = require('fbjs/lib/EventListener');                                                                 // 15
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 16
var PooledClass = require('./PooledClass');                                                                            // 17
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 18
var ReactUpdates = require('./ReactUpdates');                                                                          // 19
                                                                                                                       // 20
var getEventTarget = require('./getEventTarget');                                                                      // 21
var getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');                                       // 22
                                                                                                                       // 23
/**                                                                                                                    // 24
 * Find the deepest React component completely containing the root of the                                              // 25
 * passed-in instance (for use when entire React trees are nested within each                                          // 26
 * other). If React trees are not nested, returns null.                                                                // 27
 */                                                                                                                    // 28
function findParent(inst) {                                                                                            // 29
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM                                              // 30
  // traversal, but caching is difficult to do correctly without using a                                               // 31
  // mutation observer to listen for all DOM changes.                                                                  // 32
  while (inst._hostParent) {                                                                                           // 33
    inst = inst._hostParent;                                                                                           // 34
  }                                                                                                                    // 35
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);                                                      // 36
  var container = rootNode.parentNode;                                                                                 // 37
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);                                                  // 38
}                                                                                                                      // 39
                                                                                                                       // 40
// Used to store ancestor hierarchy in top level callback                                                              // 41
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {                                                      // 42
  this.topLevelType = topLevelType;                                                                                    // 43
  this.nativeEvent = nativeEvent;                                                                                      // 44
  this.ancestors = [];                                                                                                 // 45
}                                                                                                                      // 46
_assign(TopLevelCallbackBookKeeping.prototype, {                                                                       // 47
  destructor: function () {                                                                                            // 48
    this.topLevelType = null;                                                                                          // 49
    this.nativeEvent = null;                                                                                           // 50
    this.ancestors.length = 0;                                                                                         // 51
  }                                                                                                                    // 52
});                                                                                                                    // 53
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);                                  // 54
                                                                                                                       // 55
function handleTopLevelImpl(bookKeeping) {                                                                             // 56
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);                                                     // 57
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);                                // 58
                                                                                                                       // 59
  // Loop through the hierarchy, in case there's any nested components.                                                // 60
  // It's important that we build the array of ancestors before calling any                                            // 61
  // event handlers, because event handlers can modify the DOM, leading to                                             // 62
  // inconsistencies with ReactMount's node cache. See #1105.                                                          // 63
  var ancestor = targetInst;                                                                                           // 64
  do {                                                                                                                 // 65
    bookKeeping.ancestors.push(ancestor);                                                                              // 66
    ancestor = ancestor && findParent(ancestor);                                                                       // 67
  } while (ancestor);                                                                                                  // 68
                                                                                                                       // 69
  for (var i = 0; i < bookKeeping.ancestors.length; i++) {                                                             // 70
    targetInst = bookKeeping.ancestors[i];                                                                             // 71
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }                                                                                                                    // 73
}                                                                                                                      // 74
                                                                                                                       // 75
function scrollValueMonitor(cb) {                                                                                      // 76
  var scrollPosition = getUnboundedScrollPosition(window);                                                             // 77
  cb(scrollPosition);                                                                                                  // 78
}                                                                                                                      // 79
                                                                                                                       // 80
var ReactEventListener = {                                                                                             // 81
  _enabled: true,                                                                                                      // 82
  _handleTopLevel: null,                                                                                               // 83
                                                                                                                       // 84
  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,                                                       // 85
                                                                                                                       // 86
  setHandleTopLevel: function (handleTopLevel) {                                                                       // 87
    ReactEventListener._handleTopLevel = handleTopLevel;                                                               // 88
  },                                                                                                                   // 89
                                                                                                                       // 90
  setEnabled: function (enabled) {                                                                                     // 91
    ReactEventListener._enabled = !!enabled;                                                                           // 92
  },                                                                                                                   // 93
                                                                                                                       // 94
  isEnabled: function () {                                                                                             // 95
    return ReactEventListener._enabled;                                                                                // 96
  },                                                                                                                   // 97
                                                                                                                       // 98
  /**                                                                                                                  // 99
   * Traps top-level events by using event bubbling.                                                                   // 100
   *                                                                                                                   // 101
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 102
   * @param {string} handlerBaseName Event name (e.g. "click").                                                        // 103
   * @param {object} element Element on which to attach listener.                                                      // 104
   * @return {?object} An object with a remove function which will forcefully                                          // 105
   *                  remove the listener.                                                                             // 106
   * @internal                                                                                                         // 107
   */                                                                                                                  // 108
  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {                                                // 109
    if (!element) {                                                                                                    // 110
      return null;                                                                                                     // 111
    }                                                                                                                  // 112
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));  // 113
  },                                                                                                                   // 114
                                                                                                                       // 115
  /**                                                                                                                  // 116
   * Traps a top-level event by using event capturing.                                                                 // 117
   *                                                                                                                   // 118
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 119
   * @param {string} handlerBaseName Event name (e.g. "click").                                                        // 120
   * @param {object} element Element on which to attach listener.                                                      // 121
   * @return {?object} An object with a remove function which will forcefully                                          // 122
   *                  remove the listener.                                                                             // 123
   * @internal                                                                                                         // 124
   */                                                                                                                  // 125
  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {                                               // 126
    if (!element) {                                                                                                    // 127
      return null;                                                                                                     // 128
    }                                                                                                                  // 129
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },                                                                                                                   // 131
                                                                                                                       // 132
  monitorScrollValue: function (refresh) {                                                                             // 133
    var callback = scrollValueMonitor.bind(null, refresh);                                                             // 134
    EventListener.listen(window, 'scroll', callback);                                                                  // 135
  },                                                                                                                   // 136
                                                                                                                       // 137
  dispatchEvent: function (topLevelType, nativeEvent) {                                                                // 138
    if (!ReactEventListener._enabled) {                                                                                // 139
      return;                                                                                                          // 140
    }                                                                                                                  // 141
                                                                                                                       // 142
    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);                                // 143
    try {                                                                                                              // 144
      // Event queue being processed in the same cycle allows                                                          // 145
      // `preventDefault`.                                                                                             // 146
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);                                                    // 147
    } finally {                                                                                                        // 148
      TopLevelCallbackBookKeeping.release(bookKeeping);                                                                // 149
    }                                                                                                                  // 150
  }                                                                                                                    // 151
};                                                                                                                     // 152
                                                                                                                       // 153
module.exports = ReactEventListener;                                                                                   // 154
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactInjection.js":["./DOMProperty","./EventPluginHub","./EventPluginUtils","./ReactComponentEnvironment","./ReactEmptyComponent","./ReactBrowserEventEmitter","./ReactHostComponent","./ReactUpdates",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactInjection.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var DOMProperty = require('./DOMProperty');                                                                            // 13
var EventPluginHub = require('./EventPluginHub');                                                                      // 14
var EventPluginUtils = require('./EventPluginUtils');                                                                  // 15
var ReactComponentEnvironment = require('./ReactComponentEnvironment');                                                // 16
var ReactEmptyComponent = require('./ReactEmptyComponent');                                                            // 17
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 18
var ReactHostComponent = require('./ReactHostComponent');                                                              // 19
var ReactUpdates = require('./ReactUpdates');                                                                          // 20
                                                                                                                       // 21
var ReactInjection = {                                                                                                 // 22
  Component: ReactComponentEnvironment.injection,                                                                      // 23
  DOMProperty: DOMProperty.injection,                                                                                  // 24
  EmptyComponent: ReactEmptyComponent.injection,                                                                       // 25
  EventPluginHub: EventPluginHub.injection,                                                                            // 26
  EventPluginUtils: EventPluginUtils.injection,                                                                        // 27
  EventEmitter: ReactBrowserEventEmitter.injection,                                                                    // 28
  HostComponent: ReactHostComponent.injection,                                                                         // 29
  Updates: ReactUpdates.injection                                                                                      // 30
};                                                                                                                     // 31
                                                                                                                       // 32
module.exports = ReactInjection;                                                                                       // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactReconcileTransaction.js":["object-assign","./CallbackQueue","./PooledClass","./ReactBrowserEventEmitter","./ReactInputSelection","./ReactInstrumentation","./Transaction","./ReactUpdateQueue",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactReconcileTransaction.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _assign = require('object-assign');                                                                                // 13
                                                                                                                       // 14
var CallbackQueue = require('./CallbackQueue');                                                                        // 15
var PooledClass = require('./PooledClass');                                                                            // 16
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 17
var ReactInputSelection = require('./ReactInputSelection');                                                            // 18
var ReactInstrumentation = require('./ReactInstrumentation');                                                          // 19
var Transaction = require('./Transaction');                                                                            // 20
var ReactUpdateQueue = require('./ReactUpdateQueue');                                                                  // 21
                                                                                                                       // 22
/**                                                                                                                    // 23
 * Ensures that, when possible, the selection range (currently selected text                                           // 24
 * input) is not disturbed by performing the transaction.                                                              // 25
 */                                                                                                                    // 26
var SELECTION_RESTORATION = {                                                                                          // 27
  /**                                                                                                                  // 28
   * @return {Selection} Selection information.                                                                        // 29
   */                                                                                                                  // 30
  initialize: ReactInputSelection.getSelectionInformation,                                                             // 31
  /**                                                                                                                  // 32
   * @param {Selection} sel Selection information returned from `initialize`.                                          // 33
   */                                                                                                                  // 34
  close: ReactInputSelection.restoreSelection                                                                          // 35
};                                                                                                                     // 36
                                                                                                                       // 37
/**                                                                                                                    // 38
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to                                        // 39
 * high level DOM manipulations (like temporarily removing a text input from the                                       // 40
 * DOM).                                                                                                               // 41
 */                                                                                                                    // 42
var EVENT_SUPPRESSION = {                                                                                              // 43
  /**                                                                                                                  // 44
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before                                         // 45
   * the reconciliation.                                                                                               // 46
   */                                                                                                                  // 47
  initialize: function () {                                                                                            // 48
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();                                                       // 49
    ReactBrowserEventEmitter.setEnabled(false);                                                                        // 50
    return currentlyEnabled;                                                                                           // 51
  },                                                                                                                   // 52
                                                                                                                       // 53
  /**                                                                                                                  // 54
   * @param {boolean} previouslyEnabled Enabled status of                                                              // 55
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`                                          // 56
   *   restores the previous value.                                                                                    // 57
   */                                                                                                                  // 58
  close: function (previouslyEnabled) {                                                                                // 59
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);                                                            // 60
  }                                                                                                                    // 61
};                                                                                                                     // 62
                                                                                                                       // 63
/**                                                                                                                    // 64
 * Provides a queue for collecting `componentDidMount` and                                                             // 65
 * `componentDidUpdate` callbacks during the transaction.                                                              // 66
 */                                                                                                                    // 67
var ON_DOM_READY_QUEUEING = {                                                                                          // 68
  /**                                                                                                                  // 69
   * Initializes the internal `onDOMReady` queue.                                                                      // 70
   */                                                                                                                  // 71
  initialize: function () {                                                                                            // 72
    this.reactMountReady.reset();                                                                                      // 73
  },                                                                                                                   // 74
                                                                                                                       // 75
  /**                                                                                                                  // 76
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.                                               // 77
   */                                                                                                                  // 78
  close: function () {                                                                                                 // 79
    this.reactMountReady.notifyAll();                                                                                  // 80
  }                                                                                                                    // 81
};                                                                                                                     // 82
                                                                                                                       // 83
/**                                                                                                                    // 84
 * Executed within the scope of the `Transaction` instance. Consider these as                                          // 85
 * being member methods, but with an implied ordering while being isolated from                                        // 86
 * each other.                                                                                                         // 87
 */                                                                                                                    // 88
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];                          // 89
                                                                                                                       // 90
if (process.env.NODE_ENV !== 'production') {                                                                           // 91
  TRANSACTION_WRAPPERS.push({                                                                                          // 92
    initialize: ReactInstrumentation.debugTool.onBeginFlush,                                                           // 93
    close: ReactInstrumentation.debugTool.onEndFlush                                                                   // 94
  });                                                                                                                  // 95
}                                                                                                                      // 96
                                                                                                                       // 97
/**                                                                                                                    // 98
 * Currently:                                                                                                          // 99
 * - The order that these are listed in the transaction is critical:                                                   // 100
 * - Suppresses events.                                                                                                // 101
 * - Restores selection range.                                                                                         // 102
 *                                                                                                                     // 103
 * Future:                                                                                                             // 104
 * - Restore document/overflow scroll positions that were unintentionally                                              // 105
 *   modified via DOM insertions above the top viewport boundary.                                                      // 106
 * - Implement/integrate with customized constraint based layout system and keep                                       // 107
 *   track of which dimensions must be remeasured.                                                                     // 108
 *                                                                                                                     // 109
 * @class ReactReconcileTransaction                                                                                    // 110
 */                                                                                                                    // 111
function ReactReconcileTransaction(useCreateElement) {                                                                 // 112
  this.reinitializeTransaction();                                                                                      // 113
  // Only server-side rendering really needs this option (see                                                          // 114
  // `ReactServerRendering`), but server-side uses                                                                     // 115
  // `ReactServerRenderingTransaction` instead. This option is here so that it's                                       // 116
  // accessible and defaults to false when `ReactDOMComponent` and                                                     // 117
  // `ReactDOMTextComponent` checks it in `mountComponent`.`                                                           // 118
  this.renderToStaticMarkup = false;                                                                                   // 119
  this.reactMountReady = CallbackQueue.getPooled(null);                                                                // 120
  this.useCreateElement = useCreateElement;                                                                            // 121
}                                                                                                                      // 122
                                                                                                                       // 123
var Mixin = {                                                                                                          // 124
  /**                                                                                                                  // 125
   * @see Transaction                                                                                                  // 126
   * @abstract                                                                                                         // 127
   * @final                                                                                                            // 128
   * @return {array<object>} List of operation wrap procedures.                                                        // 129
   *   TODO: convert to array<TransactionWrapper>                                                                      // 130
   */                                                                                                                  // 131
  getTransactionWrappers: function () {                                                                                // 132
    return TRANSACTION_WRAPPERS;                                                                                       // 133
  },                                                                                                                   // 134
                                                                                                                       // 135
  /**                                                                                                                  // 136
   * @return {object} The queue to collect `onDOMReady` callbacks with.                                                // 137
   */                                                                                                                  // 138
  getReactMountReady: function () {                                                                                    // 139
    return this.reactMountReady;                                                                                       // 140
  },                                                                                                                   // 141
                                                                                                                       // 142
  /**                                                                                                                  // 143
   * @return {object} The queue to collect React async events.                                                         // 144
   */                                                                                                                  // 145
  getUpdateQueue: function () {                                                                                        // 146
    return ReactUpdateQueue;                                                                                           // 147
  },                                                                                                                   // 148
                                                                                                                       // 149
  /**                                                                                                                  // 150
   * Save current transaction state -- if the return value from this method is                                         // 151
   * passed to `rollback`, the transaction will be reset to that state.                                                // 152
   */                                                                                                                  // 153
  checkpoint: function () {                                                                                            // 154
    // reactMountReady is the our only stateful wrapper                                                                // 155
    return this.reactMountReady.checkpoint();                                                                          // 156
  },                                                                                                                   // 157
                                                                                                                       // 158
  rollback: function (checkpoint) {                                                                                    // 159
    this.reactMountReady.rollback(checkpoint);                                                                         // 160
  },                                                                                                                   // 161
                                                                                                                       // 162
  /**                                                                                                                  // 163
   * `PooledClass` looks for this, and will invoke this before allowing this                                           // 164
   * instance to be reused.                                                                                            // 165
   */                                                                                                                  // 166
  destructor: function () {                                                                                            // 167
    CallbackQueue.release(this.reactMountReady);                                                                       // 168
    this.reactMountReady = null;                                                                                       // 169
  }                                                                                                                    // 170
};                                                                                                                     // 171
                                                                                                                       // 172
_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);                                                      // 173
                                                                                                                       // 174
PooledClass.addPoolingTo(ReactReconcileTransaction);                                                                   // 175
                                                                                                                       // 176
module.exports = ReactReconcileTransaction;                                                                            // 177
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactInputSelection.js":["./ReactDOMSelection","fbjs/lib/containsNode","fbjs/lib/focusNode","fbjs/lib/getActiveElement",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactInputSelection.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ReactDOMSelection = require('./ReactDOMSelection');                                                                // 13
                                                                                                                       // 14
var containsNode = require('fbjs/lib/containsNode');                                                                   // 15
var focusNode = require('fbjs/lib/focusNode');                                                                         // 16
var getActiveElement = require('fbjs/lib/getActiveElement');                                                           // 17
                                                                                                                       // 18
function isInDocument(node) {                                                                                          // 19
  return containsNode(document.documentElement, node);                                                                 // 20
}                                                                                                                      // 21
                                                                                                                       // 22
/**                                                                                                                    // 23
 * @ReactInputSelection: React input selection module. Based on Selection.js,                                          // 24
 * but modified to be suitable for react and has a couple of bug fixes (doesn't                                        // 25
 * assume buttons have range selections allowed).                                                                      // 26
 * Input selection module for React.                                                                                   // 27
 */                                                                                                                    // 28
var ReactInputSelection = {                                                                                            // 29
                                                                                                                       // 30
  hasSelectionCapabilities: function (elem) {                                                                          // 31
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();                                               // 32
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },                                                                                                                   // 34
                                                                                                                       // 35
  getSelectionInformation: function () {                                                                               // 36
    var focusedElem = getActiveElement();                                                                              // 37
    return {                                                                                                           // 38
      focusedElem: focusedElem,                                                                                        // 39
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };                                                                                                                 // 41
  },                                                                                                                   // 42
                                                                                                                       // 43
  /**                                                                                                                  // 44
   * @restoreSelection: If any selection information was potentially lost,                                             // 45
   * restore it. This is useful when performing operations that could remove dom                                       // 46
   * nodes and place them back in, resulting in focus being lost.                                                      // 47
   */                                                                                                                  // 48
  restoreSelection: function (priorSelectionInformation) {                                                             // 49
    var curFocusedElem = getActiveElement();                                                                           // 50
    var priorFocusedElem = priorSelectionInformation.focusedElem;                                                      // 51
    var priorSelectionRange = priorSelectionInformation.selectionRange;                                                // 52
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {                                       // 53
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {                                            // 54
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);                                       // 55
      }                                                                                                                // 56
      focusNode(priorFocusedElem);                                                                                     // 57
    }                                                                                                                  // 58
  },                                                                                                                   // 59
                                                                                                                       // 60
  /**                                                                                                                  // 61
   * @getSelection: Gets the selection bounds of a focused textarea, input or                                          // 62
   * contentEditable node.                                                                                             // 63
   * -@input: Look up selection bounds of this input                                                                   // 64
   * -@return {start: selectionStart, end: selectionEnd}                                                               // 65
   */                                                                                                                  // 66
  getSelection: function (input) {                                                                                     // 67
    var selection;                                                                                                     // 68
                                                                                                                       // 69
    if ('selectionStart' in input) {                                                                                   // 70
      // Modern browser with input or textarea.                                                                        // 71
      selection = {                                                                                                    // 72
        start: input.selectionStart,                                                                                   // 73
        end: input.selectionEnd                                                                                        // 74
      };                                                                                                               // 75
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {                     // 76
      // IE8 input.                                                                                                    // 77
      var range = document.selection.createRange();                                                                    // 78
      // There can only be one selection per document in IE, so it must                                                // 79
      // be in our element.                                                                                            // 80
      if (range.parentElement() === input) {                                                                           // 81
        selection = {                                                                                                  // 82
          start: -range.moveStart('character', -input.value.length),                                                   // 83
          end: -range.moveEnd('character', -input.value.length)                                                        // 84
        };                                                                                                             // 85
      }                                                                                                                // 86
    } else {                                                                                                           // 87
      // Content editable or old IE textarea.                                                                          // 88
      selection = ReactDOMSelection.getOffsets(input);                                                                 // 89
    }                                                                                                                  // 90
                                                                                                                       // 91
    return selection || { start: 0, end: 0 };                                                                          // 92
  },                                                                                                                   // 93
                                                                                                                       // 94
  /**                                                                                                                  // 95
   * @setSelection: Sets the selection bounds of a textarea or input and focuses                                       // 96
   * the input.                                                                                                        // 97
   * -@input     Set selection bounds of this input or textarea                                                        // 98
   * -@offsets   Object of same form that is returned from get*                                                        // 99
   */                                                                                                                  // 100
  setSelection: function (input, offsets) {                                                                            // 101
    var start = offsets.start;                                                                                         // 102
    var end = offsets.end;                                                                                             // 103
    if (end === undefined) {                                                                                           // 104
      end = start;                                                                                                     // 105
    }                                                                                                                  // 106
                                                                                                                       // 107
    if ('selectionStart' in input) {                                                                                   // 108
      input.selectionStart = start;                                                                                    // 109
      input.selectionEnd = Math.min(end, input.value.length);                                                          // 110
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {                     // 111
      var range = input.createTextRange();                                                                             // 112
      range.collapse(true);                                                                                            // 113
      range.moveStart('character', start);                                                                             // 114
      range.moveEnd('character', end - start);                                                                         // 115
      range.select();                                                                                                  // 116
    } else {                                                                                                           // 117
      ReactDOMSelection.setOffsets(input, offsets);                                                                    // 118
    }                                                                                                                  // 119
  }                                                                                                                    // 120
};                                                                                                                     // 121
                                                                                                                       // 122
module.exports = ReactInputSelection;                                                                                  // 123
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMSelection.js":["fbjs/lib/ExecutionEnvironment","./getNodeForCharacterOffset","./getTextContentAccessor",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMSelection.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 13
                                                                                                                       // 14
var getNodeForCharacterOffset = require('./getNodeForCharacterOffset');                                                // 15
var getTextContentAccessor = require('./getTextContentAccessor');                                                      // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * While `isCollapsed` is available on the Selection object and `collapsed`                                            // 19
 * is available on the Range object, IE11 sometimes gets them wrong.                                                   // 20
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.                                         // 21
 */                                                                                                                    // 22
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {                                               // 23
  return anchorNode === focusNode && anchorOffset === focusOffset;                                                     // 24
}                                                                                                                      // 25
                                                                                                                       // 26
/**                                                                                                                    // 27
 * Get the appropriate anchor and focus node/offset pairs for IE.                                                      // 28
 *                                                                                                                     // 29
 * The catch here is that IE's selection API doesn't provide information                                               // 30
 * about whether the selection is forward or backward, so we have to                                                   // 31
 * behave as though it's always forward.                                                                               // 32
 *                                                                                                                     // 33
 * IE text differs from modern selection in that it behaves as though                                                  // 34
 * block elements end with a new line. This means character offsets will                                               // 35
 * differ between the two APIs.                                                                                        // 36
 *                                                                                                                     // 37
 * @param {DOMElement} node                                                                                            // 38
 * @return {object}                                                                                                    // 39
 */                                                                                                                    // 40
function getIEOffsets(node) {                                                                                          // 41
  var selection = document.selection;                                                                                  // 42
  var selectedRange = selection.createRange();                                                                         // 43
  var selectedLength = selectedRange.text.length;                                                                      // 44
                                                                                                                       // 45
  // Duplicate selection so we can move range without breaking user selection.                                         // 46
  var fromStart = selectedRange.duplicate();                                                                           // 47
  fromStart.moveToElementText(node);                                                                                   // 48
  fromStart.setEndPoint('EndToStart', selectedRange);                                                                  // 49
                                                                                                                       // 50
  var startOffset = fromStart.text.length;                                                                             // 51
  var endOffset = startOffset + selectedLength;                                                                        // 52
                                                                                                                       // 53
  return {                                                                                                             // 54
    start: startOffset,                                                                                                // 55
    end: endOffset                                                                                                     // 56
  };                                                                                                                   // 57
}                                                                                                                      // 58
                                                                                                                       // 59
/**                                                                                                                    // 60
 * @param {DOMElement} node                                                                                            // 61
 * @return {?object}                                                                                                   // 62
 */                                                                                                                    // 63
function getModernOffsets(node) {                                                                                      // 64
  var selection = window.getSelection && window.getSelection();                                                        // 65
                                                                                                                       // 66
  if (!selection || selection.rangeCount === 0) {                                                                      // 67
    return null;                                                                                                       // 68
  }                                                                                                                    // 69
                                                                                                                       // 70
  var anchorNode = selection.anchorNode;                                                                               // 71
  var anchorOffset = selection.anchorOffset;                                                                           // 72
  var focusNode = selection.focusNode;                                                                                 // 73
  var focusOffset = selection.focusOffset;                                                                             // 74
                                                                                                                       // 75
  var currentRange = selection.getRangeAt(0);                                                                          // 76
                                                                                                                       // 77
  // In Firefox, range.startContainer and range.endContainer can be "anonymous                                         // 78
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous                                            // 79
  // divs do not seem to expose properties, triggering a "Permission denied                                            // 80
  // error" if any of its properties are accessed. The only seemingly possible                                         // 81
  // way to avoid erroring is to access a property that typically works for                                            // 82
  // non-anonymous divs and catch any error that may otherwise arise. See                                              // 83
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427                                                               // 84
  try {                                                                                                                // 85
    /* eslint-disable no-unused-expressions */                                                                         // 86
    currentRange.startContainer.nodeType;                                                                              // 87
    currentRange.endContainer.nodeType;                                                                                // 88
    /* eslint-enable no-unused-expressions */                                                                          // 89
  } catch (e) {                                                                                                        // 90
    return null;                                                                                                       // 91
  }                                                                                                                    // 92
                                                                                                                       // 93
  // If the node and offset values are the same, the selection is collapsed.                                           // 94
  // `Selection.isCollapsed` is available natively, but IE sometimes gets                                              // 95
  // this value wrong.                                                                                                 // 96
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
                                                                                                                       // 98
  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;                                         // 99
                                                                                                                       // 100
  var tempRange = currentRange.cloneRange();                                                                           // 101
  tempRange.selectNodeContents(node);                                                                                  // 102
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);                                             // 103
                                                                                                                       // 104
  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
                                                                                                                       // 106
  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;                                                  // 107
  var end = start + rangeLength;                                                                                       // 108
                                                                                                                       // 109
  // Detect whether the selection is backward.                                                                         // 110
  var detectionRange = document.createRange();                                                                         // 111
  detectionRange.setStart(anchorNode, anchorOffset);                                                                   // 112
  detectionRange.setEnd(focusNode, focusOffset);                                                                       // 113
  var isBackward = detectionRange.collapsed;                                                                           // 114
                                                                                                                       // 115
  return {                                                                                                             // 116
    start: isBackward ? end : start,                                                                                   // 117
    end: isBackward ? start : end                                                                                      // 118
  };                                                                                                                   // 119
}                                                                                                                      // 120
                                                                                                                       // 121
/**                                                                                                                    // 122
 * @param {DOMElement|DOMTextNode} node                                                                                // 123
 * @param {object} offsets                                                                                             // 124
 */                                                                                                                    // 125
function setIEOffsets(node, offsets) {                                                                                 // 126
  var range = document.selection.createRange().duplicate();                                                            // 127
  var start, end;                                                                                                      // 128
                                                                                                                       // 129
  if (offsets.end === undefined) {                                                                                     // 130
    start = offsets.start;                                                                                             // 131
    end = start;                                                                                                       // 132
  } else if (offsets.start > offsets.end) {                                                                            // 133
    start = offsets.end;                                                                                               // 134
    end = offsets.start;                                                                                               // 135
  } else {                                                                                                             // 136
    start = offsets.start;                                                                                             // 137
    end = offsets.end;                                                                                                 // 138
  }                                                                                                                    // 139
                                                                                                                       // 140
  range.moveToElementText(node);                                                                                       // 141
  range.moveStart('character', start);                                                                                 // 142
  range.setEndPoint('EndToStart', range);                                                                              // 143
  range.moveEnd('character', end - start);                                                                             // 144
  range.select();                                                                                                      // 145
}                                                                                                                      // 146
                                                                                                                       // 147
/**                                                                                                                    // 148
 * In modern non-IE browsers, we can support both forward and backward                                                 // 149
 * selections.                                                                                                         // 150
 *                                                                                                                     // 151
 * Note: IE10+ supports the Selection object, but it does not support                                                  // 152
 * the `extend` method, which means that even in modern IE, it's not possible                                          // 153
 * to programmatically create a backward selection. Thus, for all IE                                                   // 154
 * versions, we use the old IE API to create our selections.                                                           // 155
 *                                                                                                                     // 156
 * @param {DOMElement|DOMTextNode} node                                                                                // 157
 * @param {object} offsets                                                                                             // 158
 */                                                                                                                    // 159
function setModernOffsets(node, offsets) {                                                                             // 160
  if (!window.getSelection) {                                                                                          // 161
    return;                                                                                                            // 162
  }                                                                                                                    // 163
                                                                                                                       // 164
  var selection = window.getSelection();                                                                               // 165
  var length = node[getTextContentAccessor()].length;                                                                  // 166
  var start = Math.min(offsets.start, length);                                                                         // 167
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);                                         // 168
                                                                                                                       // 169
  // IE 11 uses modern selection, but doesn't support the extend method.                                               // 170
  // Flip backward selections, so we can set with a single range.                                                      // 171
  if (!selection.extend && start > end) {                                                                              // 172
    var temp = end;                                                                                                    // 173
    end = start;                                                                                                       // 174
    start = temp;                                                                                                      // 175
  }                                                                                                                    // 176
                                                                                                                       // 177
  var startMarker = getNodeForCharacterOffset(node, start);                                                            // 178
  var endMarker = getNodeForCharacterOffset(node, end);                                                                // 179
                                                                                                                       // 180
  if (startMarker && endMarker) {                                                                                      // 181
    var range = document.createRange();                                                                                // 182
    range.setStart(startMarker.node, startMarker.offset);                                                              // 183
    selection.removeAllRanges();                                                                                       // 184
                                                                                                                       // 185
    if (start > end) {                                                                                                 // 186
      selection.addRange(range);                                                                                       // 187
      selection.extend(endMarker.node, endMarker.offset);                                                              // 188
    } else {                                                                                                           // 189
      range.setEnd(endMarker.node, endMarker.offset);                                                                  // 190
      selection.addRange(range);                                                                                       // 191
    }                                                                                                                  // 192
  }                                                                                                                    // 193
}                                                                                                                      // 194
                                                                                                                       // 195
var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);           // 196
                                                                                                                       // 197
var ReactDOMSelection = {                                                                                              // 198
  /**                                                                                                                  // 199
   * @param {DOMElement} node                                                                                          // 200
   */                                                                                                                  // 201
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,                                                          // 202
                                                                                                                       // 203
  /**                                                                                                                  // 204
   * @param {DOMElement|DOMTextNode} node                                                                              // 205
   * @param {object} offsets                                                                                           // 206
   */                                                                                                                  // 207
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets                                                           // 208
};                                                                                                                     // 209
                                                                                                                       // 210
module.exports = ReactDOMSelection;                                                                                    // 211
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"getNodeForCharacterOffset.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/getNodeForCharacterOffset.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * Given any node return the first leaf node without children.                                                         // 14
 *                                                                                                                     // 15
 * @param {DOMElement|DOMTextNode} node                                                                                // 16
 * @return {DOMElement|DOMTextNode}                                                                                    // 17
 */                                                                                                                    // 18
                                                                                                                       // 19
function getLeafNode(node) {                                                                                           // 20
  while (node && node.firstChild) {                                                                                    // 21
    node = node.firstChild;                                                                                            // 22
  }                                                                                                                    // 23
  return node;                                                                                                         // 24
}                                                                                                                      // 25
                                                                                                                       // 26
/**                                                                                                                    // 27
 * Get the next sibling within a container. This will walk up the                                                      // 28
 * DOM if a node's siblings have been exhausted.                                                                       // 29
 *                                                                                                                     // 30
 * @param {DOMElement|DOMTextNode} node                                                                                // 31
 * @return {?DOMElement|DOMTextNode}                                                                                   // 32
 */                                                                                                                    // 33
function getSiblingNode(node) {                                                                                        // 34
  while (node) {                                                                                                       // 35
    if (node.nextSibling) {                                                                                            // 36
      return node.nextSibling;                                                                                         // 37
    }                                                                                                                  // 38
    node = node.parentNode;                                                                                            // 39
  }                                                                                                                    // 40
}                                                                                                                      // 41
                                                                                                                       // 42
/**                                                                                                                    // 43
 * Get object describing the nodes which contain characters at offset.                                                 // 44
 *                                                                                                                     // 45
 * @param {DOMElement|DOMTextNode} root                                                                                // 46
 * @param {number} offset                                                                                              // 47
 * @return {?object}                                                                                                   // 48
 */                                                                                                                    // 49
function getNodeForCharacterOffset(root, offset) {                                                                     // 50
  var node = getLeafNode(root);                                                                                        // 51
  var nodeStart = 0;                                                                                                   // 52
  var nodeEnd = 0;                                                                                                     // 53
                                                                                                                       // 54
  while (node) {                                                                                                       // 55
    if (node.nodeType === 3) {                                                                                         // 56
      nodeEnd = nodeStart + node.textContent.length;                                                                   // 57
                                                                                                                       // 58
      if (nodeStart <= offset && nodeEnd >= offset) {                                                                  // 59
        return {                                                                                                       // 60
          node: node,                                                                                                  // 61
          offset: offset - nodeStart                                                                                   // 62
        };                                                                                                             // 63
      }                                                                                                                // 64
                                                                                                                       // 65
      nodeStart = nodeEnd;                                                                                             // 66
    }                                                                                                                  // 67
                                                                                                                       // 68
    node = getLeafNode(getSiblingNode(node));                                                                          // 69
  }                                                                                                                    // 70
}                                                                                                                      // 71
                                                                                                                       // 72
module.exports = getNodeForCharacterOffset;                                                                            // 73
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"SVGDOMPropertyConfig.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SVGDOMPropertyConfig.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var NS = {                                                                                                             // 13
  xlink: 'http://www.w3.org/1999/xlink',                                                                               // 14
  xml: 'http://www.w3.org/XML/1998/namespace'                                                                          // 15
};                                                                                                                     // 16
                                                                                                                       // 17
// We use attributes for everything SVG so let's avoid some duplication and run                                        // 18
// code instead.                                                                                                       // 19
// The following are all specified in the HTML config already so we exclude here.                                      // 20
// - class (as className)                                                                                              // 21
// - color                                                                                                             // 22
// - height                                                                                                            // 23
// - id                                                                                                                // 24
// - lang                                                                                                              // 25
// - max                                                                                                               // 26
// - media                                                                                                             // 27
// - method                                                                                                            // 28
// - min                                                                                                               // 29
// - name                                                                                                              // 30
// - style                                                                                                             // 31
// - target                                                                                                            // 32
// - type                                                                                                              // 33
// - width                                                                                                             // 34
var ATTRS = {                                                                                                          // 35
  accentHeight: 'accent-height',                                                                                       // 36
  accumulate: 0,                                                                                                       // 37
  additive: 0,                                                                                                         // 38
  alignmentBaseline: 'alignment-baseline',                                                                             // 39
  allowReorder: 'allowReorder',                                                                                        // 40
  alphabetic: 0,                                                                                                       // 41
  amplitude: 0,                                                                                                        // 42
  arabicForm: 'arabic-form',                                                                                           // 43
  ascent: 0,                                                                                                           // 44
  attributeName: 'attributeName',                                                                                      // 45
  attributeType: 'attributeType',                                                                                      // 46
  autoReverse: 'autoReverse',                                                                                          // 47
  azimuth: 0,                                                                                                          // 48
  baseFrequency: 'baseFrequency',                                                                                      // 49
  baseProfile: 'baseProfile',                                                                                          // 50
  baselineShift: 'baseline-shift',                                                                                     // 51
  bbox: 0,                                                                                                             // 52
  begin: 0,                                                                                                            // 53
  bias: 0,                                                                                                             // 54
  by: 0,                                                                                                               // 55
  calcMode: 'calcMode',                                                                                                // 56
  capHeight: 'cap-height',                                                                                             // 57
  clip: 0,                                                                                                             // 58
  clipPath: 'clip-path',                                                                                               // 59
  clipRule: 'clip-rule',                                                                                               // 60
  clipPathUnits: 'clipPathUnits',                                                                                      // 61
  colorInterpolation: 'color-interpolation',                                                                           // 62
  colorInterpolationFilters: 'color-interpolation-filters',                                                            // 63
  colorProfile: 'color-profile',                                                                                       // 64
  colorRendering: 'color-rendering',                                                                                   // 65
  contentScriptType: 'contentScriptType',                                                                              // 66
  contentStyleType: 'contentStyleType',                                                                                // 67
  cursor: 0,                                                                                                           // 68
  cx: 0,                                                                                                               // 69
  cy: 0,                                                                                                               // 70
  d: 0,                                                                                                                // 71
  decelerate: 0,                                                                                                       // 72
  descent: 0,                                                                                                          // 73
  diffuseConstant: 'diffuseConstant',                                                                                  // 74
  direction: 0,                                                                                                        // 75
  display: 0,                                                                                                          // 76
  divisor: 0,                                                                                                          // 77
  dominantBaseline: 'dominant-baseline',                                                                               // 78
  dur: 0,                                                                                                              // 79
  dx: 0,                                                                                                               // 80
  dy: 0,                                                                                                               // 81
  edgeMode: 'edgeMode',                                                                                                // 82
  elevation: 0,                                                                                                        // 83
  enableBackground: 'enable-background',                                                                               // 84
  end: 0,                                                                                                              // 85
  exponent: 0,                                                                                                         // 86
  externalResourcesRequired: 'externalResourcesRequired',                                                              // 87
  fill: 0,                                                                                                             // 88
  fillOpacity: 'fill-opacity',                                                                                         // 89
  fillRule: 'fill-rule',                                                                                               // 90
  filter: 0,                                                                                                           // 91
  filterRes: 'filterRes',                                                                                              // 92
  filterUnits: 'filterUnits',                                                                                          // 93
  floodColor: 'flood-color',                                                                                           // 94
  floodOpacity: 'flood-opacity',                                                                                       // 95
  focusable: 0,                                                                                                        // 96
  fontFamily: 'font-family',                                                                                           // 97
  fontSize: 'font-size',                                                                                               // 98
  fontSizeAdjust: 'font-size-adjust',                                                                                  // 99
  fontStretch: 'font-stretch',                                                                                         // 100
  fontStyle: 'font-style',                                                                                             // 101
  fontVariant: 'font-variant',                                                                                         // 102
  fontWeight: 'font-weight',                                                                                           // 103
  format: 0,                                                                                                           // 104
  from: 0,                                                                                                             // 105
  fx: 0,                                                                                                               // 106
  fy: 0,                                                                                                               // 107
  g1: 0,                                                                                                               // 108
  g2: 0,                                                                                                               // 109
  glyphName: 'glyph-name',                                                                                             // 110
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',                                                          // 111
  glyphOrientationVertical: 'glyph-orientation-vertical',                                                              // 112
  glyphRef: 'glyphRef',                                                                                                // 113
  gradientTransform: 'gradientTransform',                                                                              // 114
  gradientUnits: 'gradientUnits',                                                                                      // 115
  hanging: 0,                                                                                                          // 116
  horizAdvX: 'horiz-adv-x',                                                                                            // 117
  horizOriginX: 'horiz-origin-x',                                                                                      // 118
  ideographic: 0,                                                                                                      // 119
  imageRendering: 'image-rendering',                                                                                   // 120
  'in': 0,                                                                                                             // 121
  in2: 0,                                                                                                              // 122
  intercept: 0,                                                                                                        // 123
  k: 0,                                                                                                                // 124
  k1: 0,                                                                                                               // 125
  k2: 0,                                                                                                               // 126
  k3: 0,                                                                                                               // 127
  k4: 0,                                                                                                               // 128
  kernelMatrix: 'kernelMatrix',                                                                                        // 129
  kernelUnitLength: 'kernelUnitLength',                                                                                // 130
  kerning: 0,                                                                                                          // 131
  keyPoints: 'keyPoints',                                                                                              // 132
  keySplines: 'keySplines',                                                                                            // 133
  keyTimes: 'keyTimes',                                                                                                // 134
  lengthAdjust: 'lengthAdjust',                                                                                        // 135
  letterSpacing: 'letter-spacing',                                                                                     // 136
  lightingColor: 'lighting-color',                                                                                     // 137
  limitingConeAngle: 'limitingConeAngle',                                                                              // 138
  local: 0,                                                                                                            // 139
  markerEnd: 'marker-end',                                                                                             // 140
  markerMid: 'marker-mid',                                                                                             // 141
  markerStart: 'marker-start',                                                                                         // 142
  markerHeight: 'markerHeight',                                                                                        // 143
  markerUnits: 'markerUnits',                                                                                          // 144
  markerWidth: 'markerWidth',                                                                                          // 145
  mask: 0,                                                                                                             // 146
  maskContentUnits: 'maskContentUnits',                                                                                // 147
  maskUnits: 'maskUnits',                                                                                              // 148
  mathematical: 0,                                                                                                     // 149
  mode: 0,                                                                                                             // 150
  numOctaves: 'numOctaves',                                                                                            // 151
  offset: 0,                                                                                                           // 152
  opacity: 0,                                                                                                          // 153
  operator: 0,                                                                                                         // 154
  order: 0,                                                                                                            // 155
  orient: 0,                                                                                                           // 156
  orientation: 0,                                                                                                      // 157
  origin: 0,                                                                                                           // 158
  overflow: 0,                                                                                                         // 159
  overlinePosition: 'overline-position',                                                                               // 160
  overlineThickness: 'overline-thickness',                                                                             // 161
  paintOrder: 'paint-order',                                                                                           // 162
  panose1: 'panose-1',                                                                                                 // 163
  pathLength: 'pathLength',                                                                                            // 164
  patternContentUnits: 'patternContentUnits',                                                                          // 165
  patternTransform: 'patternTransform',                                                                                // 166
  patternUnits: 'patternUnits',                                                                                        // 167
  pointerEvents: 'pointer-events',                                                                                     // 168
  points: 0,                                                                                                           // 169
  pointsAtX: 'pointsAtX',                                                                                              // 170
  pointsAtY: 'pointsAtY',                                                                                              // 171
  pointsAtZ: 'pointsAtZ',                                                                                              // 172
  preserveAlpha: 'preserveAlpha',                                                                                      // 173
  preserveAspectRatio: 'preserveAspectRatio',                                                                          // 174
  primitiveUnits: 'primitiveUnits',                                                                                    // 175
  r: 0,                                                                                                                // 176
  radius: 0,                                                                                                           // 177
  refX: 'refX',                                                                                                        // 178
  refY: 'refY',                                                                                                        // 179
  renderingIntent: 'rendering-intent',                                                                                 // 180
  repeatCount: 'repeatCount',                                                                                          // 181
  repeatDur: 'repeatDur',                                                                                              // 182
  requiredExtensions: 'requiredExtensions',                                                                            // 183
  requiredFeatures: 'requiredFeatures',                                                                                // 184
  restart: 0,                                                                                                          // 185
  result: 0,                                                                                                           // 186
  rotate: 0,                                                                                                           // 187
  rx: 0,                                                                                                               // 188
  ry: 0,                                                                                                               // 189
  scale: 0,                                                                                                            // 190
  seed: 0,                                                                                                             // 191
  shapeRendering: 'shape-rendering',                                                                                   // 192
  slope: 0,                                                                                                            // 193
  spacing: 0,                                                                                                          // 194
  specularConstant: 'specularConstant',                                                                                // 195
  specularExponent: 'specularExponent',                                                                                // 196
  speed: 0,                                                                                                            // 197
  spreadMethod: 'spreadMethod',                                                                                        // 198
  startOffset: 'startOffset',                                                                                          // 199
  stdDeviation: 'stdDeviation',                                                                                        // 200
  stemh: 0,                                                                                                            // 201
  stemv: 0,                                                                                                            // 202
  stitchTiles: 'stitchTiles',                                                                                          // 203
  stopColor: 'stop-color',                                                                                             // 204
  stopOpacity: 'stop-opacity',                                                                                         // 205
  strikethroughPosition: 'strikethrough-position',                                                                     // 206
  strikethroughThickness: 'strikethrough-thickness',                                                                   // 207
  string: 0,                                                                                                           // 208
  stroke: 0,                                                                                                           // 209
  strokeDasharray: 'stroke-dasharray',                                                                                 // 210
  strokeDashoffset: 'stroke-dashoffset',                                                                               // 211
  strokeLinecap: 'stroke-linecap',                                                                                     // 212
  strokeLinejoin: 'stroke-linejoin',                                                                                   // 213
  strokeMiterlimit: 'stroke-miterlimit',                                                                               // 214
  strokeOpacity: 'stroke-opacity',                                                                                     // 215
  strokeWidth: 'stroke-width',                                                                                         // 216
  surfaceScale: 'surfaceScale',                                                                                        // 217
  systemLanguage: 'systemLanguage',                                                                                    // 218
  tableValues: 'tableValues',                                                                                          // 219
  targetX: 'targetX',                                                                                                  // 220
  targetY: 'targetY',                                                                                                  // 221
  textAnchor: 'text-anchor',                                                                                           // 222
  textDecoration: 'text-decoration',                                                                                   // 223
  textRendering: 'text-rendering',                                                                                     // 224
  textLength: 'textLength',                                                                                            // 225
  to: 0,                                                                                                               // 226
  transform: 0,                                                                                                        // 227
  u1: 0,                                                                                                               // 228
  u2: 0,                                                                                                               // 229
  underlinePosition: 'underline-position',                                                                             // 230
  underlineThickness: 'underline-thickness',                                                                           // 231
  unicode: 0,                                                                                                          // 232
  unicodeBidi: 'unicode-bidi',                                                                                         // 233
  unicodeRange: 'unicode-range',                                                                                       // 234
  unitsPerEm: 'units-per-em',                                                                                          // 235
  vAlphabetic: 'v-alphabetic',                                                                                         // 236
  vHanging: 'v-hanging',                                                                                               // 237
  vIdeographic: 'v-ideographic',                                                                                       // 238
  vMathematical: 'v-mathematical',                                                                                     // 239
  values: 0,                                                                                                           // 240
  vectorEffect: 'vector-effect',                                                                                       // 241
  version: 0,                                                                                                          // 242
  vertAdvY: 'vert-adv-y',                                                                                              // 243
  vertOriginX: 'vert-origin-x',                                                                                        // 244
  vertOriginY: 'vert-origin-y',                                                                                        // 245
  viewBox: 'viewBox',                                                                                                  // 246
  viewTarget: 'viewTarget',                                                                                            // 247
  visibility: 0,                                                                                                       // 248
  widths: 0,                                                                                                           // 249
  wordSpacing: 'word-spacing',                                                                                         // 250
  writingMode: 'writing-mode',                                                                                         // 251
  x: 0,                                                                                                                // 252
  xHeight: 'x-height',                                                                                                 // 253
  x1: 0,                                                                                                               // 254
  x2: 0,                                                                                                               // 255
  xChannelSelector: 'xChannelSelector',                                                                                // 256
  xlinkActuate: 'xlink:actuate',                                                                                       // 257
  xlinkArcrole: 'xlink:arcrole',                                                                                       // 258
  xlinkHref: 'xlink:href',                                                                                             // 259
  xlinkRole: 'xlink:role',                                                                                             // 260
  xlinkShow: 'xlink:show',                                                                                             // 261
  xlinkTitle: 'xlink:title',                                                                                           // 262
  xlinkType: 'xlink:type',                                                                                             // 263
  xmlBase: 'xml:base',                                                                                                 // 264
  xmlns: 0,                                                                                                            // 265
  xmlnsXlink: 'xmlns:xlink',                                                                                           // 266
  xmlLang: 'xml:lang',                                                                                                 // 267
  xmlSpace: 'xml:space',                                                                                               // 268
  y: 0,                                                                                                                // 269
  y1: 0,                                                                                                               // 270
  y2: 0,                                                                                                               // 271
  yChannelSelector: 'yChannelSelector',                                                                                // 272
  z: 0,                                                                                                                // 273
  zoomAndPan: 'zoomAndPan'                                                                                             // 274
};                                                                                                                     // 275
                                                                                                                       // 276
var SVGDOMPropertyConfig = {                                                                                           // 277
  Properties: {},                                                                                                      // 278
  DOMAttributeNamespaces: {                                                                                            // 279
    xlinkActuate: NS.xlink,                                                                                            // 280
    xlinkArcrole: NS.xlink,                                                                                            // 281
    xlinkHref: NS.xlink,                                                                                               // 282
    xlinkRole: NS.xlink,                                                                                               // 283
    xlinkShow: NS.xlink,                                                                                               // 284
    xlinkTitle: NS.xlink,                                                                                              // 285
    xlinkType: NS.xlink,                                                                                               // 286
    xmlBase: NS.xml,                                                                                                   // 287
    xmlLang: NS.xml,                                                                                                   // 288
    xmlSpace: NS.xml                                                                                                   // 289
  },                                                                                                                   // 290
  DOMAttributeNames: {}                                                                                                // 291
};                                                                                                                     // 292
                                                                                                                       // 293
Object.keys(ATTRS).forEach(function (key) {                                                                            // 294
  SVGDOMPropertyConfig.Properties[key] = 0;                                                                            // 295
  if (ATTRS[key]) {                                                                                                    // 296
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];                                                          // 297
  }                                                                                                                    // 298
});                                                                                                                    // 299
                                                                                                                       // 300
module.exports = SVGDOMPropertyConfig;                                                                                 // 301
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"SelectEventPlugin.js":["./EventPropagators","fbjs/lib/ExecutionEnvironment","./ReactDOMComponentTree","./ReactInputSelection","./SyntheticEvent","fbjs/lib/getActiveElement","./isTextInputElement","fbjs/lib/shallowEqual",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SelectEventPlugin.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var EventPropagators = require('./EventPropagators');                                                                  // 13
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 15
var ReactInputSelection = require('./ReactInputSelection');                                                            // 16
var SyntheticEvent = require('./SyntheticEvent');                                                                      // 17
                                                                                                                       // 18
var getActiveElement = require('fbjs/lib/getActiveElement');                                                           // 19
var isTextInputElement = require('./isTextInputElement');                                                              // 20
var shallowEqual = require('fbjs/lib/shallowEqual');                                                                   // 21
                                                                                                                       // 22
var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
                                                                                                                       // 24
var eventTypes = {                                                                                                     // 25
  select: {                                                                                                            // 26
    phasedRegistrationNames: {                                                                                         // 27
      bubbled: 'onSelect',                                                                                             // 28
      captured: 'onSelectCapture'                                                                                      // 29
    },                                                                                                                 // 30
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }                                                                                                                    // 32
};                                                                                                                     // 33
                                                                                                                       // 34
var activeElement = null;                                                                                              // 35
var activeElementInst = null;                                                                                          // 36
var lastSelection = null;                                                                                              // 37
var mouseDown = false;                                                                                                 // 38
                                                                                                                       // 39
// Track whether a listener exists for this plugin. If none exist, we do                                               // 40
// not extract events. See #3639.                                                                                      // 41
var hasListener = false;                                                                                               // 42
                                                                                                                       // 43
/**                                                                                                                    // 44
 * Get an object which is a unique representation of the current selection.                                            // 45
 *                                                                                                                     // 46
 * The return value will not be consistent across nodes or browsers, but                                               // 47
 * two identical selections on the same node will return identical objects.                                            // 48
 *                                                                                                                     // 49
 * @param {DOMElement} node                                                                                            // 50
 * @return {object}                                                                                                    // 51
 */                                                                                                                    // 52
function getSelection(node) {                                                                                          // 53
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {                                // 54
    return {                                                                                                           // 55
      start: node.selectionStart,                                                                                      // 56
      end: node.selectionEnd                                                                                           // 57
    };                                                                                                                 // 58
  } else if (window.getSelection) {                                                                                    // 59
    var selection = window.getSelection();                                                                             // 60
    return {                                                                                                           // 61
      anchorNode: selection.anchorNode,                                                                                // 62
      anchorOffset: selection.anchorOffset,                                                                            // 63
      focusNode: selection.focusNode,                                                                                  // 64
      focusOffset: selection.focusOffset                                                                               // 65
    };                                                                                                                 // 66
  } else if (document.selection) {                                                                                     // 67
    var range = document.selection.createRange();                                                                      // 68
    return {                                                                                                           // 69
      parentElement: range.parentElement(),                                                                            // 70
      text: range.text,                                                                                                // 71
      top: range.boundingTop,                                                                                          // 72
      left: range.boundingLeft                                                                                         // 73
    };                                                                                                                 // 74
  }                                                                                                                    // 75
}                                                                                                                      // 76
                                                                                                                       // 77
/**                                                                                                                    // 78
 * Poll selection to see whether it's changed.                                                                         // 79
 *                                                                                                                     // 80
 * @param {object} nativeEvent                                                                                         // 81
 * @return {?SyntheticEvent}                                                                                           // 82
 */                                                                                                                    // 83
function constructSelectEvent(nativeEvent, nativeEventTarget) {                                                        // 84
  // Ensure we have the right element, and that the user is not dragging a                                             // 85
  // selection (this matches native `select` event behavior). In HTML5, select                                         // 86
  // fires only on input and textarea thus if there's no focused element we                                            // 87
  // won't dispatch.                                                                                                   // 88
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {                                    // 89
    return null;                                                                                                       // 90
  }                                                                                                                    // 91
                                                                                                                       // 92
  // Only fire when selection has actually changed.                                                                    // 93
  var currentSelection = getSelection(activeElement);                                                                  // 94
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {                                              // 95
    lastSelection = currentSelection;                                                                                  // 96
                                                                                                                       // 97
    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);
                                                                                                                       // 99
    syntheticEvent.type = 'select';                                                                                    // 100
    syntheticEvent.target = activeElement;                                                                             // 101
                                                                                                                       // 102
    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);                                                     // 103
                                                                                                                       // 104
    return syntheticEvent;                                                                                             // 105
  }                                                                                                                    // 106
                                                                                                                       // 107
  return null;                                                                                                         // 108
}                                                                                                                      // 109
                                                                                                                       // 110
/**                                                                                                                    // 111
 * This plugin creates an `onSelect` event that normalizes select events                                               // 112
 * across form elements.                                                                                               // 113
 *                                                                                                                     // 114
 * Supported elements are:                                                                                             // 115
 * - input (see `isTextInputElement`)                                                                                  // 116
 * - textarea                                                                                                          // 117
 * - contentEditable                                                                                                   // 118
 *                                                                                                                     // 119
 * This differs from native browser implementations in the following ways:                                             // 120
 * - Fires on contentEditable fields as well as inputs.                                                                // 121
 * - Fires for collapsed selection.                                                                                    // 122
 * - Fires after user input.                                                                                           // 123
 */                                                                                                                    // 124
var SelectEventPlugin = {                                                                                              // 125
                                                                                                                       // 126
  eventTypes: eventTypes,                                                                                              // 127
                                                                                                                       // 128
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 129
    if (!hasListener) {                                                                                                // 130
      return null;                                                                                                     // 131
    }                                                                                                                  // 132
                                                                                                                       // 133
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;                      // 134
                                                                                                                       // 135
    switch (topLevelType) {                                                                                            // 136
      // Track the input node that has focus.                                                                          // 137
      case 'topFocus':                                                                                                 // 138
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {                                 // 139
          activeElement = targetNode;                                                                                  // 140
          activeElementInst = targetInst;                                                                              // 141
          lastSelection = null;                                                                                        // 142
        }                                                                                                              // 143
        break;                                                                                                         // 144
      case 'topBlur':                                                                                                  // 145
        activeElement = null;                                                                                          // 146
        activeElementInst = null;                                                                                      // 147
        lastSelection = null;                                                                                          // 148
        break;                                                                                                         // 149
                                                                                                                       // 150
      // Don't fire the event while the user is dragging. This matches the                                             // 151
      // semantics of the native select event.                                                                         // 152
      case 'topMouseDown':                                                                                             // 153
        mouseDown = true;                                                                                              // 154
        break;                                                                                                         // 155
      case 'topContextMenu':                                                                                           // 156
      case 'topMouseUp':                                                                                               // 157
        mouseDown = false;                                                                                             // 158
        return constructSelectEvent(nativeEvent, nativeEventTarget);                                                   // 159
                                                                                                                       // 160
      // Chrome and IE fire non-standard event when selection is changed (and                                          // 161
      // sometimes when it hasn't). IE's event fires out of order with respect                                         // 162
      // to key and input events on deletion, so we discard it.                                                        // 163
      //                                                                                                               // 164
      // Firefox doesn't support selectionchange, so check selection status                                            // 165
      // after each key entry. The selection changes after keydown and before                                          // 166
      // keyup, but we check on keydown as well in the case of holding down a                                          // 167
      // key, when multiple keydown events are fired but only one keyup is.                                            // 168
      // This is also our approach for IE handling, for the reason above.                                              // 169
      case 'topSelectionChange':                                                                                       // 170
        if (skipSelectionChangeEvent) {                                                                                // 171
          break;                                                                                                       // 172
        }                                                                                                              // 173
      // falls through                                                                                                 // 174
      case 'topKeyDown':                                                                                               // 175
      case 'topKeyUp':                                                                                                 // 176
        return constructSelectEvent(nativeEvent, nativeEventTarget);                                                   // 177
    }                                                                                                                  // 178
                                                                                                                       // 179
    return null;                                                                                                       // 180
  },                                                                                                                   // 181
                                                                                                                       // 182
  didPutListener: function (inst, registrationName, listener) {                                                        // 183
    if (registrationName === 'onSelect') {                                                                             // 184
      hasListener = true;                                                                                              // 185
    }                                                                                                                  // 186
  }                                                                                                                    // 187
};                                                                                                                     // 188
                                                                                                                       // 189
module.exports = SelectEventPlugin;                                                                                    // 190
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"SimpleEventPlugin.js":["./reactProdInvariant","fbjs/lib/EventListener","./EventPropagators","./ReactDOMComponentTree","./SyntheticAnimationEvent","./SyntheticClipboardEvent","./SyntheticEvent","./SyntheticFocusEvent","./SyntheticKeyboardEvent","./SyntheticMouseEvent","./SyntheticDragEvent","./SyntheticTouchEvent","./SyntheticTransitionEvent","./SyntheticUIEvent","./SyntheticWheelEvent","fbjs/lib/emptyFunction","./getEventCharCode","fbjs/lib/invariant",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SimpleEventPlugin.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var _prodInvariant = require('./reactProdInvariant');                                                                  // 14
                                                                                                                       // 15
var EventListener = require('fbjs/lib/EventListener');                                                                 // 16
var EventPropagators = require('./EventPropagators');                                                                  // 17
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 18
var SyntheticAnimationEvent = require('./SyntheticAnimationEvent');                                                    // 19
var SyntheticClipboardEvent = require('./SyntheticClipboardEvent');                                                    // 20
var SyntheticEvent = require('./SyntheticEvent');                                                                      // 21
var SyntheticFocusEvent = require('./SyntheticFocusEvent');                                                            // 22
var SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');                                                      // 23
var SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 24
var SyntheticDragEvent = require('./SyntheticDragEvent');                                                              // 25
var SyntheticTouchEvent = require('./SyntheticTouchEvent');                                                            // 26
var SyntheticTransitionEvent = require('./SyntheticTransitionEvent');                                                  // 27
var SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 28
var SyntheticWheelEvent = require('./SyntheticWheelEvent');                                                            // 29
                                                                                                                       // 30
var emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 31
var getEventCharCode = require('./getEventCharCode');                                                                  // 32
var invariant = require('fbjs/lib/invariant');                                                                         // 33
                                                                                                                       // 34
/**                                                                                                                    // 35
 * Turns                                                                                                               // 36
 * ['abort', ...]                                                                                                      // 37
 * into                                                                                                                // 38
 * eventTypes = {                                                                                                      // 39
 *   'abort': {                                                                                                        // 40
 *     phasedRegistrationNames: {                                                                                      // 41
 *       bubbled: 'onAbort',                                                                                           // 42
 *       captured: 'onAbortCapture',                                                                                   // 43
 *     },                                                                                                              // 44
 *     dependencies: ['topAbort'],                                                                                     // 45
 *   },                                                                                                                // 46
 *   ...                                                                                                               // 47
 * };                                                                                                                  // 48
 * topLevelEventsToDispatchConfig = {                                                                                  // 49
 *   'topAbort': { sameConfig }                                                                                        // 50
 * };                                                                                                                  // 51
 */                                                                                                                    // 52
var eventTypes = {};                                                                                                   // 53
var topLevelEventsToDispatchConfig = {};                                                                               // 54
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);                                                      // 56
  var onEvent = 'on' + capitalizedEvent;                                                                               // 57
  var topEvent = 'top' + capitalizedEvent;                                                                             // 58
                                                                                                                       // 59
  var type = {                                                                                                         // 60
    phasedRegistrationNames: {                                                                                         // 61
      bubbled: onEvent,                                                                                                // 62
      captured: onEvent + 'Capture'                                                                                    // 63
    },                                                                                                                 // 64
    dependencies: [topEvent]                                                                                           // 65
  };                                                                                                                   // 66
  eventTypes[event] = type;                                                                                            // 67
  topLevelEventsToDispatchConfig[topEvent] = type;                                                                     // 68
});                                                                                                                    // 69
                                                                                                                       // 70
var onClickListeners = {};                                                                                             // 71
                                                                                                                       // 72
function getDictionaryKey(inst) {                                                                                      // 73
  // Prevents V8 performance issue:                                                                                    // 74
  // https://github.com/facebook/react/pull/7232                                                                       // 75
  return '.' + inst._rootNodeID;                                                                                       // 76
}                                                                                                                      // 77
                                                                                                                       // 78
function isInteractive(tag) {                                                                                          // 79
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';                                // 80
}                                                                                                                      // 81
                                                                                                                       // 82
var SimpleEventPlugin = {                                                                                              // 83
                                                                                                                       // 84
  eventTypes: eventTypes,                                                                                              // 85
                                                                                                                       // 86
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 87
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];                                                 // 88
    if (!dispatchConfig) {                                                                                             // 89
      return null;                                                                                                     // 90
    }                                                                                                                  // 91
    var EventConstructor;                                                                                              // 92
    switch (topLevelType) {                                                                                            // 93
      case 'topAbort':                                                                                                 // 94
      case 'topCanPlay':                                                                                               // 95
      case 'topCanPlayThrough':                                                                                        // 96
      case 'topDurationChange':                                                                                        // 97
      case 'topEmptied':                                                                                               // 98
      case 'topEncrypted':                                                                                             // 99
      case 'topEnded':                                                                                                 // 100
      case 'topError':                                                                                                 // 101
      case 'topInput':                                                                                                 // 102
      case 'topInvalid':                                                                                               // 103
      case 'topLoad':                                                                                                  // 104
      case 'topLoadedData':                                                                                            // 105
      case 'topLoadedMetadata':                                                                                        // 106
      case 'topLoadStart':                                                                                             // 107
      case 'topPause':                                                                                                 // 108
      case 'topPlay':                                                                                                  // 109
      case 'topPlaying':                                                                                               // 110
      case 'topProgress':                                                                                              // 111
      case 'topRateChange':                                                                                            // 112
      case 'topReset':                                                                                                 // 113
      case 'topSeeked':                                                                                                // 114
      case 'topSeeking':                                                                                               // 115
      case 'topStalled':                                                                                               // 116
      case 'topSubmit':                                                                                                // 117
      case 'topSuspend':                                                                                               // 118
      case 'topTimeUpdate':                                                                                            // 119
      case 'topVolumeChange':                                                                                          // 120
      case 'topWaiting':                                                                                               // 121
        // HTML Events                                                                                                 // 122
        // @see http://www.w3.org/TR/html5/index.html#events-0                                                         // 123
        EventConstructor = SyntheticEvent;                                                                             // 124
        break;                                                                                                         // 125
      case 'topKeyPress':                                                                                              // 126
        // Firefox creates a keypress event for function keys too. This removes                                        // 127
        // the unwanted keypress events. Enter is however both printable and                                           // 128
        // non-printable. One would expect Tab to be as well (but it isn't).                                           // 129
        if (getEventCharCode(nativeEvent) === 0) {                                                                     // 130
          return null;                                                                                                 // 131
        }                                                                                                              // 132
      /* falls through */                                                                                              // 133
      case 'topKeyDown':                                                                                               // 134
      case 'topKeyUp':                                                                                                 // 135
        EventConstructor = SyntheticKeyboardEvent;                                                                     // 136
        break;                                                                                                         // 137
      case 'topBlur':                                                                                                  // 138
      case 'topFocus':                                                                                                 // 139
        EventConstructor = SyntheticFocusEvent;                                                                        // 140
        break;                                                                                                         // 141
      case 'topClick':                                                                                                 // 142
        // Firefox creates a click event on right mouse clicks. This removes the                                       // 143
        // unwanted click events.                                                                                      // 144
        if (nativeEvent.button === 2) {                                                                                // 145
          return null;                                                                                                 // 146
        }                                                                                                              // 147
      /* falls through */                                                                                              // 148
      case 'topDoubleClick':                                                                                           // 149
      case 'topMouseDown':                                                                                             // 150
      case 'topMouseMove':                                                                                             // 151
      case 'topMouseUp':                                                                                               // 152
      // TODO: Disabled elements should not respond to mouse events                                                    // 153
      /* falls through */                                                                                              // 154
      case 'topMouseOut':                                                                                              // 155
      case 'topMouseOver':                                                                                             // 156
      case 'topContextMenu':                                                                                           // 157
        EventConstructor = SyntheticMouseEvent;                                                                        // 158
        break;                                                                                                         // 159
      case 'topDrag':                                                                                                  // 160
      case 'topDragEnd':                                                                                               // 161
      case 'topDragEnter':                                                                                             // 162
      case 'topDragExit':                                                                                              // 163
      case 'topDragLeave':                                                                                             // 164
      case 'topDragOver':                                                                                              // 165
      case 'topDragStart':                                                                                             // 166
      case 'topDrop':                                                                                                  // 167
        EventConstructor = SyntheticDragEvent;                                                                         // 168
        break;                                                                                                         // 169
      case 'topTouchCancel':                                                                                           // 170
      case 'topTouchEnd':                                                                                              // 171
      case 'topTouchMove':                                                                                             // 172
      case 'topTouchStart':                                                                                            // 173
        EventConstructor = SyntheticTouchEvent;                                                                        // 174
        break;                                                                                                         // 175
      case 'topAnimationEnd':                                                                                          // 176
      case 'topAnimationIteration':                                                                                    // 177
      case 'topAnimationStart':                                                                                        // 178
        EventConstructor = SyntheticAnimationEvent;                                                                    // 179
        break;                                                                                                         // 180
      case 'topTransitionEnd':                                                                                         // 181
        EventConstructor = SyntheticTransitionEvent;                                                                   // 182
        break;                                                                                                         // 183
      case 'topScroll':                                                                                                // 184
        EventConstructor = SyntheticUIEvent;                                                                           // 185
        break;                                                                                                         // 186
      case 'topWheel':                                                                                                 // 187
        EventConstructor = SyntheticWheelEvent;                                                                        // 188
        break;                                                                                                         // 189
      case 'topCopy':                                                                                                  // 190
      case 'topCut':                                                                                                   // 191
      case 'topPaste':                                                                                                 // 192
        EventConstructor = SyntheticClipboardEvent;                                                                    // 193
        break;                                                                                                         // 194
    }                                                                                                                  // 195
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);                // 197
    EventPropagators.accumulateTwoPhaseDispatches(event);                                                              // 198
    return event;                                                                                                      // 199
  },                                                                                                                   // 200
                                                                                                                       // 201
  didPutListener: function (inst, registrationName, listener) {                                                        // 202
    // Mobile Safari does not fire properly bubble click events on                                                     // 203
    // non-interactive elements, which means delegated click listeners do not                                          // 204
    // fire. The workaround for this bug involves attaching an empty click                                             // 205
    // listener on the target node.                                                                                    // 206
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html                                            // 207
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {                                                 // 208
      var key = getDictionaryKey(inst);                                                                                // 209
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);                                                      // 210
      if (!onClickListeners[key]) {                                                                                    // 211
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);                                    // 212
      }                                                                                                                // 213
    }                                                                                                                  // 214
  },                                                                                                                   // 215
                                                                                                                       // 216
  willDeleteListener: function (inst, registrationName) {                                                              // 217
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {                                                 // 218
      var key = getDictionaryKey(inst);                                                                                // 219
      onClickListeners[key].remove();                                                                                  // 220
      delete onClickListeners[key];                                                                                    // 221
    }                                                                                                                  // 222
  }                                                                                                                    // 223
                                                                                                                       // 224
};                                                                                                                     // 225
                                                                                                                       // 226
module.exports = SimpleEventPlugin;                                                                                    // 227
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"SyntheticAnimationEvent.js":["./SyntheticEvent",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SyntheticAnimationEvent.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var SyntheticEvent = require('./SyntheticEvent');                                                                      // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * @interface Event                                                                                                    // 16
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface                                                 // 17
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent                                                // 18
 */                                                                                                                    // 19
var AnimationEventInterface = {                                                                                        // 20
  animationName: null,                                                                                                 // 21
  elapsedTime: null,                                                                                                   // 22
  pseudoElement: null                                                                                                  // 23
};                                                                                                                     // 24
                                                                                                                       // 25
/**                                                                                                                    // 26
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 27
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 28
 * @param {object} nativeEvent Native browser event.                                                                   // 29
 * @extends {SyntheticEvent}                                                                                           // 30
 */                                                                                                                    // 31
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                     // 32
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 33
}                                                                                                                      // 34
                                                                                                                       // 35
SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);                                         // 36
                                                                                                                       // 37
module.exports = SyntheticAnimationEvent;                                                                              // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"SyntheticClipboardEvent.js":["./SyntheticEvent",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SyntheticClipboardEvent.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var SyntheticEvent = require('./SyntheticEvent');                                                                      // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * @interface Event                                                                                                    // 16
 * @see http://www.w3.org/TR/clipboard-apis/                                                                           // 17
 */                                                                                                                    // 18
var ClipboardEventInterface = {                                                                                        // 19
  clipboardData: function (event) {                                                                                    // 20
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;                                      // 21
  }                                                                                                                    // 22
};                                                                                                                     // 23
                                                                                                                       // 24
/**                                                                                                                    // 25
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 26
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 27
 * @param {object} nativeEvent Native browser event.                                                                   // 28
 * @extends {SyntheticUIEvent}                                                                                         // 29
 */                                                                                                                    // 30
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                     // 31
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 32
}                                                                                                                      // 33
                                                                                                                       // 34
SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);                                         // 35
                                                                                                                       // 36
module.exports = SyntheticClipboardEvent;                                                                              // 37
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"SyntheticFocusEvent.js":["./SyntheticUIEvent",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SyntheticFocusEvent.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * @interface FocusEvent                                                                                               // 16
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 17
 */                                                                                                                    // 18
var FocusEventInterface = {                                                                                            // 19
  relatedTarget: null                                                                                                  // 20
};                                                                                                                     // 21
                                                                                                                       // 22
/**                                                                                                                    // 23
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 24
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 25
 * @param {object} nativeEvent Native browser event.                                                                   // 26
 * @extends {SyntheticUIEvent}                                                                                         // 27
 */                                                                                                                    // 28
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 29
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                  // 30
}                                                                                                                      // 31
                                                                                                                       // 32
SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);                                               // 33
                                                                                                                       // 34
module.exports = SyntheticFocusEvent;                                                                                  // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"SyntheticKeyboardEvent.js":["./SyntheticUIEvent","./getEventCharCode","./getEventKey","./getEventModifierState",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SyntheticKeyboardEvent.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 13
                                                                                                                       // 14
var getEventCharCode = require('./getEventCharCode');                                                                  // 15
var getEventKey = require('./getEventKey');                                                                            // 16
var getEventModifierState = require('./getEventModifierState');                                                        // 17
                                                                                                                       // 18
/**                                                                                                                    // 19
 * @interface KeyboardEvent                                                                                            // 20
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 21
 */                                                                                                                    // 22
var KeyboardEventInterface = {                                                                                         // 23
  key: getEventKey,                                                                                                    // 24
  location: null,                                                                                                      // 25
  ctrlKey: null,                                                                                                       // 26
  shiftKey: null,                                                                                                      // 27
  altKey: null,                                                                                                        // 28
  metaKey: null,                                                                                                       // 29
  repeat: null,                                                                                                        // 30
  locale: null,                                                                                                        // 31
  getModifierState: getEventModifierState,                                                                             // 32
  // Legacy Interface                                                                                                  // 33
  charCode: function (event) {                                                                                         // 34
    // `charCode` is the result of a KeyPress event and represents the value of                                        // 35
    // the actual printable character.                                                                                 // 36
                                                                                                                       // 37
    // KeyPress is deprecated, but its replacement is not yet final and not                                            // 38
    // implemented in any major browser. Only KeyPress has charCode.                                                   // 39
    if (event.type === 'keypress') {                                                                                   // 40
      return getEventCharCode(event);                                                                                  // 41
    }                                                                                                                  // 42
    return 0;                                                                                                          // 43
  },                                                                                                                   // 44
  keyCode: function (event) {                                                                                          // 45
    // `keyCode` is the result of a KeyDown/Up event and represents the value of                                       // 46
    // physical keyboard key.                                                                                          // 47
                                                                                                                       // 48
    // The actual meaning of the value depends on the users' keyboard layout                                           // 49
    // which cannot be detected. Assuming that it is a US keyboard layout                                              // 50
    // provides a surprisingly accurate mapping for US and European users.                                             // 51
    // Due to this, it is left to the user to implement at this time.                                                  // 52
    if (event.type === 'keydown' || event.type === 'keyup') {                                                          // 53
      return event.keyCode;                                                                                            // 54
    }                                                                                                                  // 55
    return 0;                                                                                                          // 56
  },                                                                                                                   // 57
  which: function (event) {                                                                                            // 58
    // `which` is an alias for either `keyCode` or `charCode` depending on the                                         // 59
    // type of the event.                                                                                              // 60
    if (event.type === 'keypress') {                                                                                   // 61
      return getEventCharCode(event);                                                                                  // 62
    }                                                                                                                  // 63
    if (event.type === 'keydown' || event.type === 'keyup') {                                                          // 64
      return event.keyCode;                                                                                            // 65
    }                                                                                                                  // 66
    return 0;                                                                                                          // 67
  }                                                                                                                    // 68
};                                                                                                                     // 69
                                                                                                                       // 70
/**                                                                                                                    // 71
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 72
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 73
 * @param {object} nativeEvent Native browser event.                                                                   // 74
 * @extends {SyntheticUIEvent}                                                                                         // 75
 */                                                                                                                    // 76
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                      // 77
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                  // 78
}                                                                                                                      // 79
                                                                                                                       // 80
SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);                                         // 81
                                                                                                                       // 82
module.exports = SyntheticKeyboardEvent;                                                                               // 83
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"getEventCharCode.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/getEventCharCode.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * `charCode` represents the actual "character code" and is safe to use with                                           // 14
 * `String.fromCharCode`. As such, only keys that correspond to printable                                              // 15
 * characters produce a valid `charCode`, the only exception to this is Enter.                                         // 16
 * The Tab-key is considered non-printable and does not have a `charCode`,                                             // 17
 * presumably because it does not produce a tab-character in browsers.                                                 // 18
 *                                                                                                                     // 19
 * @param {object} nativeEvent Native browser event.                                                                   // 20
 * @return {number} Normalized `charCode` property.                                                                    // 21
 */                                                                                                                    // 22
                                                                                                                       // 23
function getEventCharCode(nativeEvent) {                                                                               // 24
  var charCode;                                                                                                        // 25
  var keyCode = nativeEvent.keyCode;                                                                                   // 26
                                                                                                                       // 27
  if ('charCode' in nativeEvent) {                                                                                     // 28
    charCode = nativeEvent.charCode;                                                                                   // 29
                                                                                                                       // 30
    // FF does not set `charCode` for the Enter-key, check against `keyCode`.                                          // 31
    if (charCode === 0 && keyCode === 13) {                                                                            // 32
      charCode = 13;                                                                                                   // 33
    }                                                                                                                  // 34
  } else {                                                                                                             // 35
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.                                         // 36
    charCode = keyCode;                                                                                                // 37
  }                                                                                                                    // 38
                                                                                                                       // 39
  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.                                       // 40
  // Must not discard the (non-)printable Enter-key.                                                                   // 41
  if (charCode >= 32 || charCode === 13) {                                                                             // 42
    return charCode;                                                                                                   // 43
  }                                                                                                                    // 44
                                                                                                                       // 45
  return 0;                                                                                                            // 46
}                                                                                                                      // 47
                                                                                                                       // 48
module.exports = getEventCharCode;                                                                                     // 49
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getEventKey.js":["./getEventCharCode",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/getEventKey.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var getEventCharCode = require('./getEventCharCode');                                                                  // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * Normalization of deprecated HTML5 `key` values                                                                      // 16
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names                                       // 17
 */                                                                                                                    // 18
var normalizeKey = {                                                                                                   // 19
  'Esc': 'Escape',                                                                                                     // 20
  'Spacebar': ' ',                                                                                                     // 21
  'Left': 'ArrowLeft',                                                                                                 // 22
  'Up': 'ArrowUp',                                                                                                     // 23
  'Right': 'ArrowRight',                                                                                               // 24
  'Down': 'ArrowDown',                                                                                                 // 25
  'Del': 'Delete',                                                                                                     // 26
  'Win': 'OS',                                                                                                         // 27
  'Menu': 'ContextMenu',                                                                                               // 28
  'Apps': 'ContextMenu',                                                                                               // 29
  'Scroll': 'ScrollLock',                                                                                              // 30
  'MozPrintableKey': 'Unidentified'                                                                                    // 31
};                                                                                                                     // 32
                                                                                                                       // 33
/**                                                                                                                    // 34
 * Translation from legacy `keyCode` to HTML5 `key`                                                                    // 35
 * Only special keys supported, all others depend on keyboard layout or browser                                        // 36
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names                                       // 37
 */                                                                                                                    // 38
var translateToKey = {                                                                                                 // 39
  8: 'Backspace',                                                                                                      // 40
  9: 'Tab',                                                                                                            // 41
  12: 'Clear',                                                                                                         // 42
  13: 'Enter',                                                                                                         // 43
  16: 'Shift',                                                                                                         // 44
  17: 'Control',                                                                                                       // 45
  18: 'Alt',                                                                                                           // 46
  19: 'Pause',                                                                                                         // 47
  20: 'CapsLock',                                                                                                      // 48
  27: 'Escape',                                                                                                        // 49
  32: ' ',                                                                                                             // 50
  33: 'PageUp',                                                                                                        // 51
  34: 'PageDown',                                                                                                      // 52
  35: 'End',                                                                                                           // 53
  36: 'Home',                                                                                                          // 54
  37: 'ArrowLeft',                                                                                                     // 55
  38: 'ArrowUp',                                                                                                       // 56
  39: 'ArrowRight',                                                                                                    // 57
  40: 'ArrowDown',                                                                                                     // 58
  45: 'Insert',                                                                                                        // 59
  46: 'Delete',                                                                                                        // 60
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',                                                    // 61
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',                                                 // 62
  144: 'NumLock',                                                                                                      // 63
  145: 'ScrollLock',                                                                                                   // 64
  224: 'Meta'                                                                                                          // 65
};                                                                                                                     // 66
                                                                                                                       // 67
/**                                                                                                                    // 68
 * @param {object} nativeEvent Native browser event.                                                                   // 69
 * @return {string} Normalized `key` property.                                                                         // 70
 */                                                                                                                    // 71
function getEventKey(nativeEvent) {                                                                                    // 72
  if (nativeEvent.key) {                                                                                               // 73
    // Normalize inconsistent values reported by browsers due to                                                       // 74
    // implementations of a working draft specification.                                                               // 75
                                                                                                                       // 76
    // FireFox implements `key` but returns `MozPrintableKey` for all                                                  // 77
    // printable characters (normalized to `Unidentified`), ignore it.                                                 // 78
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;                                                        // 79
    if (key !== 'Unidentified') {                                                                                      // 80
      return key;                                                                                                      // 81
    }                                                                                                                  // 82
  }                                                                                                                    // 83
                                                                                                                       // 84
  // Browser does not implement `key`, polyfill as much of it as we can.                                               // 85
  if (nativeEvent.type === 'keypress') {                                                                               // 86
    var charCode = getEventCharCode(nativeEvent);                                                                      // 87
                                                                                                                       // 88
    // The enter-key is technically both printable and non-printable and can                                           // 89
    // thus be captured by `keypress`, no other non-printable key should.                                              // 90
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);                                                  // 91
  }                                                                                                                    // 92
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {                                                // 93
    // While user keyboard layout determines the actual meaning of each                                                // 94
    // `keyCode` value, almost all function keys have a universal value.                                               // 95
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';                                                      // 96
  }                                                                                                                    // 97
  return '';                                                                                                           // 98
}                                                                                                                      // 99
                                                                                                                       // 100
module.exports = getEventKey;                                                                                          // 101
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"SyntheticDragEvent.js":["./SyntheticMouseEvent",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SyntheticDragEvent.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * @interface DragEvent                                                                                                // 16
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 17
 */                                                                                                                    // 18
var DragEventInterface = {                                                                                             // 19
  dataTransfer: null                                                                                                   // 20
};                                                                                                                     // 21
                                                                                                                       // 22
/**                                                                                                                    // 23
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 24
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 25
 * @param {object} nativeEvent Native browser event.                                                                   // 26
 * @extends {SyntheticUIEvent}                                                                                         // 27
 */                                                                                                                    // 28
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                          // 29
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);               // 30
}                                                                                                                      // 31
                                                                                                                       // 32
SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);                                              // 33
                                                                                                                       // 34
module.exports = SyntheticDragEvent;                                                                                   // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"SyntheticTouchEvent.js":["./SyntheticUIEvent","./getEventModifierState",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SyntheticTouchEvent.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 13
                                                                                                                       // 14
var getEventModifierState = require('./getEventModifierState');                                                        // 15
                                                                                                                       // 16
/**                                                                                                                    // 17
 * @interface TouchEvent                                                                                               // 18
 * @see http://www.w3.org/TR/touch-events/                                                                             // 19
 */                                                                                                                    // 20
var TouchEventInterface = {                                                                                            // 21
  touches: null,                                                                                                       // 22
  targetTouches: null,                                                                                                 // 23
  changedTouches: null,                                                                                                // 24
  altKey: null,                                                                                                        // 25
  metaKey: null,                                                                                                       // 26
  ctrlKey: null,                                                                                                       // 27
  shiftKey: null,                                                                                                      // 28
  getModifierState: getEventModifierState                                                                              // 29
};                                                                                                                     // 30
                                                                                                                       // 31
/**                                                                                                                    // 32
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 33
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 34
 * @param {object} nativeEvent Native browser event.                                                                   // 35
 * @extends {SyntheticUIEvent}                                                                                         // 36
 */                                                                                                                    // 37
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 38
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                  // 39
}                                                                                                                      // 40
                                                                                                                       // 41
SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);                                               // 42
                                                                                                                       // 43
module.exports = SyntheticTouchEvent;                                                                                  // 44
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"SyntheticTransitionEvent.js":["./SyntheticEvent",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SyntheticTransitionEvent.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var SyntheticEvent = require('./SyntheticEvent');                                                                      // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * @interface Event                                                                                                    // 16
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-                                     // 17
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent                                               // 18
 */                                                                                                                    // 19
var TransitionEventInterface = {                                                                                       // 20
  propertyName: null,                                                                                                  // 21
  elapsedTime: null,                                                                                                   // 22
  pseudoElement: null                                                                                                  // 23
};                                                                                                                     // 24
                                                                                                                       // 25
/**                                                                                                                    // 26
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 27
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 28
 * @param {object} nativeEvent Native browser event.                                                                   // 29
 * @extends {SyntheticEvent}                                                                                           // 30
 */                                                                                                                    // 31
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                    // 32
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 33
}                                                                                                                      // 34
                                                                                                                       // 35
SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);                                       // 36
                                                                                                                       // 37
module.exports = SyntheticTransitionEvent;                                                                             // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"SyntheticWheelEvent.js":["./SyntheticMouseEvent",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/SyntheticWheelEvent.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * @interface WheelEvent                                                                                               // 16
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 17
 */                                                                                                                    // 18
var WheelEventInterface = {                                                                                            // 19
  deltaX: function (event) {                                                                                           // 20
    return 'deltaX' in event ? event.deltaX :                                                                          // 21
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).                                         // 22
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;                                                                   // 23
  },                                                                                                                   // 24
  deltaY: function (event) {                                                                                           // 25
    return 'deltaY' in event ? event.deltaY :                                                                          // 26
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).                                          // 27
    'wheelDeltaY' in event ? -event.wheelDeltaY :                                                                      // 28
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).                                             // 29
    'wheelDelta' in event ? -event.wheelDelta : 0;                                                                     // 30
  },                                                                                                                   // 31
  deltaZ: null,                                                                                                        // 32
                                                                                                                       // 33
  // Browsers without "deltaMode" is reporting in raw wheel delta where one                                            // 34
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.                                              // 35
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or                                              // 36
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.                                                // 37
  deltaMode: null                                                                                                      // 38
};                                                                                                                     // 39
                                                                                                                       // 40
/**                                                                                                                    // 41
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 42
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 43
 * @param {object} nativeEvent Native browser event.                                                                   // 44
 * @extends {SyntheticMouseEvent}                                                                                      // 45
 */                                                                                                                    // 46
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 47
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);               // 48
}                                                                                                                      // 49
                                                                                                                       // 50
SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);                                            // 51
                                                                                                                       // 52
module.exports = SyntheticWheelEvent;                                                                                  // 53
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactMount.js":["./reactProdInvariant","./DOMLazyTree","./DOMProperty","react/lib/React","./ReactBrowserEventEmitter","react/lib/ReactCurrentOwner","./ReactDOMComponentTree","./ReactDOMContainerInfo","./ReactDOMFeatureFlags","./ReactFeatureFlags","./ReactInstanceMap","./ReactInstrumentation","./ReactMarkupChecksum","./ReactReconciler","./ReactUpdateQueue","./ReactUpdates","fbjs/lib/emptyObject","./instantiateReactComponent","fbjs/lib/invariant","./setInnerHTML","./shouldUpdateReactComponent","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactMount.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var DOMLazyTree = require('./DOMLazyTree');                                                                            // 15
var DOMProperty = require('./DOMProperty');                                                                            // 16
var React = require('react/lib/React');                                                                                // 17
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 18
var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');                                                        // 19
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 20
var ReactDOMContainerInfo = require('./ReactDOMContainerInfo');                                                        // 21
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');                                                          // 22
var ReactFeatureFlags = require('./ReactFeatureFlags');                                                                // 23
var ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 24
var ReactInstrumentation = require('./ReactInstrumentation');                                                          // 25
var ReactMarkupChecksum = require('./ReactMarkupChecksum');                                                            // 26
var ReactReconciler = require('./ReactReconciler');                                                                    // 27
var ReactUpdateQueue = require('./ReactUpdateQueue');                                                                  // 28
var ReactUpdates = require('./ReactUpdates');                                                                          // 29
                                                                                                                       // 30
var emptyObject = require('fbjs/lib/emptyObject');                                                                     // 31
var instantiateReactComponent = require('./instantiateReactComponent');                                                // 32
var invariant = require('fbjs/lib/invariant');                                                                         // 33
var setInnerHTML = require('./setInnerHTML');                                                                          // 34
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');                                              // 35
var warning = require('fbjs/lib/warning');                                                                             // 36
                                                                                                                       // 37
var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;                                                                         // 38
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;                                                                  // 39
                                                                                                                       // 40
var ELEMENT_NODE_TYPE = 1;                                                                                             // 41
var DOC_NODE_TYPE = 9;                                                                                                 // 42
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;                                                                                  // 43
                                                                                                                       // 44
var instancesByReactRootID = {};                                                                                       // 45
                                                                                                                       // 46
/**                                                                                                                    // 47
 * Finds the index of the first character                                                                              // 48
 * that's not common between the two given strings.                                                                    // 49
 *                                                                                                                     // 50
 * @return {number} the index of the character where the strings diverge                                               // 51
 */                                                                                                                    // 52
function firstDifferenceIndex(string1, string2) {                                                                      // 53
  var minLen = Math.min(string1.length, string2.length);                                                               // 54
  for (var i = 0; i < minLen; i++) {                                                                                   // 55
    if (string1.charAt(i) !== string2.charAt(i)) {                                                                     // 56
      return i;                                                                                                        // 57
    }                                                                                                                  // 58
  }                                                                                                                    // 59
  return string1.length === string2.length ? -1 : minLen;                                                              // 60
}                                                                                                                      // 61
                                                                                                                       // 62
/**                                                                                                                    // 63
 * @param {DOMElement|DOMDocument} container DOM element that may contain                                              // 64
 * a React component                                                                                                   // 65
 * @return {?*} DOM element that may have the reactRoot ID, or null.                                                   // 66
 */                                                                                                                    // 67
function getReactRootElementInContainer(container) {                                                                   // 68
  if (!container) {                                                                                                    // 69
    return null;                                                                                                       // 70
  }                                                                                                                    // 71
                                                                                                                       // 72
  if (container.nodeType === DOC_NODE_TYPE) {                                                                          // 73
    return container.documentElement;                                                                                  // 74
  } else {                                                                                                             // 75
    return container.firstChild;                                                                                       // 76
  }                                                                                                                    // 77
}                                                                                                                      // 78
                                                                                                                       // 79
function internalGetID(node) {                                                                                         // 80
  // If node is something like a window, document, or text node, none of                                               // 81
  // which support attributes or a .getAttribute method, gracefully return                                             // 82
  // the empty string, as if the attribute were missing.                                                               // 83
  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';                                                      // 84
}                                                                                                                      // 85
                                                                                                                       // 86
/**                                                                                                                    // 87
 * Mounts this component and inserts it into the DOM.                                                                  // 88
 *                                                                                                                     // 89
 * @param {ReactComponent} componentInstance The instance to mount.                                                    // 90
 * @param {DOMElement} container DOM element to mount into.                                                            // 91
 * @param {ReactReconcileTransaction} transaction                                                                      // 92
 * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                    // 93
 */                                                                                                                    // 94
function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {                 // 95
  var markerName;                                                                                                      // 96
  if (ReactFeatureFlags.logTopLevelRenders) {                                                                          // 97
    var wrappedElement = wrapperInstance._currentElement.props.child;                                                  // 98
    var type = wrappedElement.type;                                                                                    // 99
    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);                  // 100
    console.time(markerName);                                                                                          // 101
  }                                                                                                                    // 102
                                                                                                                       // 103
  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
  );                                                                                                                   // 105
                                                                                                                       // 106
  if (markerName) {                                                                                                    // 107
    console.timeEnd(markerName);                                                                                       // 108
  }                                                                                                                    // 109
                                                                                                                       // 110
  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;                                               // 111
  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);                  // 112
}                                                                                                                      // 113
                                                                                                                       // 114
/**                                                                                                                    // 115
 * Batched mount.                                                                                                      // 116
 *                                                                                                                     // 117
 * @param {ReactComponent} componentInstance The instance to mount.                                                    // 118
 * @param {DOMElement} container DOM element to mount into.                                                            // 119
 * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                    // 120
 */                                                                                                                    // 121
function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {                     // 122
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(                                                  // 123
  /* useCreateElement */                                                                                               // 124
  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);                                                        // 125
  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);                                                         // 127
}                                                                                                                      // 128
                                                                                                                       // 129
/**                                                                                                                    // 130
 * Unmounts a component and removes it from the DOM.                                                                   // 131
 *                                                                                                                     // 132
 * @param {ReactComponent} instance React component instance.                                                          // 133
 * @param {DOMElement} container DOM element to unmount from.                                                          // 134
 * @final                                                                                                              // 135
 * @internal                                                                                                           // 136
 * @see {ReactMount.unmountComponentAtNode}                                                                            // 137
 */                                                                                                                    // 138
function unmountComponentFromNode(instance, container, safely) {                                                       // 139
  if (process.env.NODE_ENV !== 'production') {                                                                         // 140
    ReactInstrumentation.debugTool.onBeginFlush();                                                                     // 141
  }                                                                                                                    // 142
  ReactReconciler.unmountComponent(instance, safely);                                                                  // 143
  if (process.env.NODE_ENV !== 'production') {                                                                         // 144
    ReactInstrumentation.debugTool.onEndFlush();                                                                       // 145
  }                                                                                                                    // 146
                                                                                                                       // 147
  if (container.nodeType === DOC_NODE_TYPE) {                                                                          // 148
    container = container.documentElement;                                                                             // 149
  }                                                                                                                    // 150
                                                                                                                       // 151
  // http://jsperf.com/emptying-a-node                                                                                 // 152
  while (container.lastChild) {                                                                                        // 153
    container.removeChild(container.lastChild);                                                                        // 154
  }                                                                                                                    // 155
}                                                                                                                      // 156
                                                                                                                       // 157
/**                                                                                                                    // 158
 * True if the supplied DOM node has a direct React-rendered child that is                                             // 159
 * not a React root element. Useful for warning in `render`,                                                           // 160
 * `unmountComponentAtNode`, etc.                                                                                      // 161
 *                                                                                                                     // 162
 * @param {?DOMElement} node The candidate DOM node.                                                                   // 163
 * @return {boolean} True if the DOM element contains a direct child that was                                          // 164
 * rendered by React but is not a root element.                                                                        // 165
 * @internal                                                                                                           // 166
 */                                                                                                                    // 167
function hasNonRootReactChild(container) {                                                                             // 168
  var rootEl = getReactRootElementInContainer(container);                                                              // 169
  if (rootEl) {                                                                                                        // 170
    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);                                                      // 171
    return !!(inst && inst._hostParent);                                                                               // 172
  }                                                                                                                    // 173
}                                                                                                                      // 174
                                                                                                                       // 175
/**                                                                                                                    // 176
 * True if the supplied DOM node is a React DOM element and                                                            // 177
 * it has been rendered by another copy of React.                                                                      // 178
 *                                                                                                                     // 179
 * @param {?DOMElement} node The candidate DOM node.                                                                   // 180
 * @return {boolean} True if the DOM has been rendered by another copy of React                                        // 181
 * @internal                                                                                                           // 182
 */                                                                                                                    // 183
function nodeIsRenderedByOtherInstance(container) {                                                                    // 184
  var rootEl = getReactRootElementInContainer(container);                                                              // 185
  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));                      // 186
}                                                                                                                      // 187
                                                                                                                       // 188
/**                                                                                                                    // 189
 * True if the supplied DOM node is a valid node element.                                                              // 190
 *                                                                                                                     // 191
 * @param {?DOMElement} node The candidate DOM node.                                                                   // 192
 * @return {boolean} True if the DOM is a valid DOM node.                                                              // 193
 * @internal                                                                                                           // 194
 */                                                                                                                    // 195
function isValidContainer(node) {                                                                                      // 196
  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
}                                                                                                                      // 198
                                                                                                                       // 199
/**                                                                                                                    // 200
 * True if the supplied DOM node is a valid React node element.                                                        // 201
 *                                                                                                                     // 202
 * @param {?DOMElement} node The candidate DOM node.                                                                   // 203
 * @return {boolean} True if the DOM is a valid React DOM node.                                                        // 204
 * @internal                                                                                                           // 205
 */                                                                                                                    // 206
function isReactNode(node) {                                                                                           // 207
  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));                // 208
}                                                                                                                      // 209
                                                                                                                       // 210
function getHostRootInstanceInContainer(container) {                                                                   // 211
  var rootEl = getReactRootElementInContainer(container);                                                              // 212
  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);                                  // 213
  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;                                  // 214
}                                                                                                                      // 215
                                                                                                                       // 216
function getTopLevelWrapperInContainer(container) {                                                                    // 217
  var root = getHostRootInstanceInContainer(container);                                                                // 218
  return root ? root._hostContainerInfo._topLevelWrapper : null;                                                       // 219
}                                                                                                                      // 220
                                                                                                                       // 221
/**                                                                                                                    // 222
 * Temporary (?) hack so that we can store all top-level pending updates on                                            // 223
 * composites instead of having to worry about different types of components                                           // 224
 * here.                                                                                                               // 225
 */                                                                                                                    // 226
var topLevelRootCounter = 1;                                                                                           // 227
var TopLevelWrapper = function () {                                                                                    // 228
  this.rootID = topLevelRootCounter++;                                                                                 // 229
};                                                                                                                     // 230
TopLevelWrapper.prototype.isReactComponent = {};                                                                       // 231
if (process.env.NODE_ENV !== 'production') {                                                                           // 232
  TopLevelWrapper.displayName = 'TopLevelWrapper';                                                                     // 233
}                                                                                                                      // 234
TopLevelWrapper.prototype.render = function () {                                                                       // 235
  return this.props.child;                                                                                             // 236
};                                                                                                                     // 237
TopLevelWrapper.isReactTopLevelWrapper = true;                                                                         // 238
                                                                                                                       // 239
/**                                                                                                                    // 240
 * Mounting is the process of initializing a React component by creating its                                           // 241
 * representative DOM elements and inserting them into a supplied `container`.                                         // 242
 * Any prior content inside `container` is destroyed in the process.                                                   // 243
 *                                                                                                                     // 244
 *   ReactMount.render(                                                                                                // 245
 *     component,                                                                                                      // 246
 *     document.getElementById('container')                                                                            // 247
 *   );                                                                                                                // 248
 *                                                                                                                     // 249
 *   <div id="container">                   <-- Supplied `container`.                                                  // 250
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React                                            // 251
 *       // ...                                 component.                                                             // 252
 *     </div>                                                                                                          // 253
 *   </div>                                                                                                            // 254
 *                                                                                                                     // 255
 * Inside of `container`, the first element rendered is the "reactRoot".                                               // 256
 */                                                                                                                    // 257
var ReactMount = {                                                                                                     // 258
                                                                                                                       // 259
  TopLevelWrapper: TopLevelWrapper,                                                                                    // 260
                                                                                                                       // 261
  /**                                                                                                                  // 262
   * Used by devtools. The keys are not important.                                                                     // 263
   */                                                                                                                  // 264
  _instancesByReactRootID: instancesByReactRootID,                                                                     // 265
                                                                                                                       // 266
  /**                                                                                                                  // 267
   * This is a hook provided to support rendering React components while                                               // 268
   * ensuring that the apparent scroll position of its `container` does not                                            // 269
   * change.                                                                                                           // 270
   *                                                                                                                   // 271
   * @param {DOMElement} container The `container` being rendered into.                                                // 272
   * @param {function} renderCallback This must be called once to do the render.                                       // 273
   */                                                                                                                  // 274
  scrollMonitor: function (container, renderCallback) {                                                                // 275
    renderCallback();                                                                                                  // 276
  },                                                                                                                   // 277
                                                                                                                       // 278
  /**                                                                                                                  // 279
   * Take a component that's already mounted into the DOM and replace its props                                        // 280
   * @param {ReactComponent} prevComponent component instance already in the DOM                                       // 281
   * @param {ReactElement} nextElement component instance to render                                                    // 282
   * @param {DOMElement} container container to render into                                                            // 283
   * @param {?function} callback function triggered on completion                                                      // 284
   */                                                                                                                  // 285
  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {                      // 286
    ReactMount.scrollMonitor(container, function () {                                                                  // 287
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);                                // 288
      if (callback) {                                                                                                  // 289
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);                                             // 290
      }                                                                                                                // 291
    });                                                                                                                // 292
                                                                                                                       // 293
    return prevComponent;                                                                                              // 294
  },                                                                                                                   // 295
                                                                                                                       // 296
  /**                                                                                                                  // 297
   * Render a new component into the DOM. Hooked by hooks!                                                             // 298
   *                                                                                                                   // 299
   * @param {ReactElement} nextElement element to render                                                               // 300
   * @param {DOMElement} container container to render into                                                            // 301
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion                                         // 302
   * @return {ReactComponent} nextComponent                                                                            // 303
   */                                                                                                                  // 304
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {                             // 305
    // Various parts of our code (such as ReactCompositeComponent's                                                    // 306
    // _renderValidatedComponent) assume that calls to render aren't nested;                                           // 307
    // verify that that's the case.                                                                                    // 308
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
                                                                                                                       // 310
    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;
                                                                                                                       // 312
    ReactBrowserEventEmitter.ensureScrollValueMonitoring();                                                            // 313
    var componentInstance = instantiateReactComponent(nextElement, false);                                             // 314
                                                                                                                       // 315
    // The initial render is synchronous but any updates that happen during                                            // 316
    // rendering, in componentWillMount or componentDidMount, will be batched                                          // 317
    // according to the current batching strategy.                                                                     // 318
                                                                                                                       // 319
    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);
                                                                                                                       // 321
    var wrapperID = componentInstance._instance.rootID;                                                                // 322
    instancesByReactRootID[wrapperID] = componentInstance;                                                             // 323
                                                                                                                       // 324
    return componentInstance;                                                                                          // 325
  },                                                                                                                   // 326
                                                                                                                       // 327
  /**                                                                                                                  // 328
   * Renders a React component into the DOM in the supplied `container`.                                               // 329
   *                                                                                                                   // 330
   * If the React component was previously rendered into `container`, this will                                        // 331
   * perform an update on it and only mutate the DOM as necessary to reflect the                                       // 332
   * latest React component.                                                                                           // 333
   *                                                                                                                   // 334
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.                                // 335
   * @param {ReactElement} nextElement Component element to render.                                                    // 336
   * @param {DOMElement} container DOM element to render into.                                                         // 337
   * @param {?function} callback function triggered on completion                                                      // 338
   * @return {ReactComponent} Component instance rendered in `container`.                                              // 339
   */                                                                                                                  // 340
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {                           // 341
    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);                  // 343
  },                                                                                                                   // 344
                                                                                                                       // 345
  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {                          // 346
    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');                                                    // 347
    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
    // Check if it quacks like an element                                                                              // 349
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;
                                                                                                                       // 351
    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
                                                                                                                       // 353
    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });                             // 354
                                                                                                                       // 355
    var nextContext;                                                                                                   // 356
    if (parentComponent) {                                                                                             // 357
      var parentInst = ReactInstanceMap.get(parentComponent);                                                          // 358
      nextContext = parentInst._processChildContext(parentInst._context);                                              // 359
    } else {                                                                                                           // 360
      nextContext = emptyObject;                                                                                       // 361
    }                                                                                                                  // 362
                                                                                                                       // 363
    var prevComponent = getTopLevelWrapperInContainer(container);                                                      // 364
                                                                                                                       // 365
    if (prevComponent) {                                                                                               // 366
      var prevWrappedElement = prevComponent._currentElement;                                                          // 367
      var prevElement = prevWrappedElement.props.child;                                                                // 368
      if (shouldUpdateReactComponent(prevElement, nextElement)) {                                                      // 369
        var publicInst = prevComponent._renderedComponent.getPublicInstance();                                         // 370
        var updatedCallback = callback && function () {                                                                // 371
          callback.call(publicInst);                                                                                   // 372
        };                                                                                                             // 373
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);   // 374
        return publicInst;                                                                                             // 375
      } else {                                                                                                         // 376
        ReactMount.unmountComponentAtNode(container);                                                                  // 377
      }                                                                                                                // 378
    }                                                                                                                  // 379
                                                                                                                       // 380
    var reactRootElement = getReactRootElementInContainer(container);                                                  // 381
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);                               // 382
    var containerHasNonRootReactChild = hasNonRootReactChild(container);                                               // 383
                                                                                                                       // 384
    if (process.env.NODE_ENV !== 'production') {                                                                       // 385
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
                                                                                                                       // 387
      if (!containerHasReactMarkup || reactRootElement.nextSibling) {                                                  // 388
        var rootElementSibling = reactRootElement;                                                                     // 389
        while (rootElementSibling) {                                                                                   // 390
          if (internalGetID(rootElementSibling)) {                                                                     // 391
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
            break;                                                                                                     // 393
          }                                                                                                            // 394
          rootElementSibling = rootElementSibling.nextSibling;                                                         // 395
        }                                                                                                              // 396
      }                                                                                                                // 397
    }                                                                                                                  // 398
                                                                                                                       // 399
    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;               // 400
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
    if (callback) {                                                                                                    // 402
      callback.call(component);                                                                                        // 403
    }                                                                                                                  // 404
    return component;                                                                                                  // 405
  },                                                                                                                   // 406
                                                                                                                       // 407
  /**                                                                                                                  // 408
   * Renders a React component into the DOM in the supplied `container`.                                               // 409
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render                                      // 410
   *                                                                                                                   // 411
   * If the React component was previously rendered into `container`, this will                                        // 412
   * perform an update on it and only mutate the DOM as necessary to reflect the                                       // 413
   * latest React component.                                                                                           // 414
   *                                                                                                                   // 415
   * @param {ReactElement} nextElement Component element to render.                                                    // 416
   * @param {DOMElement} container DOM element to render into.                                                         // 417
   * @param {?function} callback function triggered on completion                                                      // 418
   * @return {ReactComponent} Component instance rendered in `container`.                                              // 419
   */                                                                                                                  // 420
  render: function (nextElement, container, callback) {                                                                // 421
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);                             // 422
  },                                                                                                                   // 423
                                                                                                                       // 424
  /**                                                                                                                  // 425
   * Unmounts and destroys the React component rendered in the `container`.                                            // 426
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode                      // 427
   *                                                                                                                   // 428
   * @param {DOMElement} container DOM element containing a React component.                                           // 429
   * @return {boolean} True if a component was found in and unmounted from                                             // 430
   *                   `container`                                                                                     // 431
   */                                                                                                                  // 432
  unmountComponentAtNode: function (container) {                                                                       // 433
    // Various parts of our code (such as ReactCompositeComponent's                                                    // 434
    // _renderValidatedComponent) assume that calls to render aren't nested;                                           // 435
    // verify that that's the case. (Strictly speaking, unmounting won't cause a                                       // 436
    // render but we still don't expect to be in a render call here.)                                                  // 437
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
                                                                                                                       // 439
    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;
                                                                                                                       // 441
    if (process.env.NODE_ENV !== 'production') {                                                                       // 442
      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
    }                                                                                                                  // 444
                                                                                                                       // 445
    var prevComponent = getTopLevelWrapperInContainer(container);                                                      // 446
    if (!prevComponent) {                                                                                              // 447
      // Check if the node being unmounted was rendered by React, but isn't a                                          // 448
      // root node.                                                                                                    // 449
      var containerHasNonRootReactChild = hasNonRootReactChild(container);                                             // 450
                                                                                                                       // 451
      // Check if the container itself is a React root node.                                                           // 452
      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);                   // 453
                                                                                                                       // 454
      if (process.env.NODE_ENV !== 'production') {                                                                     // 455
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }                                                                                                                // 457
                                                                                                                       // 458
      return false;                                                                                                    // 459
    }                                                                                                                  // 460
    delete instancesByReactRootID[prevComponent._instance.rootID];                                                     // 461
    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);                            // 462
    return true;                                                                                                       // 463
  },                                                                                                                   // 464
                                                                                                                       // 465
  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {                        // 466
    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;
                                                                                                                       // 468
    if (shouldReuseMarkup) {                                                                                           // 469
      var rootElement = getReactRootElementInContainer(container);                                                     // 470
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {                                                   // 471
        ReactDOMComponentTree.precacheNode(instance, rootElement);                                                     // 472
        return;                                                                                                        // 473
      } else {                                                                                                         // 474
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);                               // 475
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);                                           // 476
                                                                                                                       // 477
        var rootMarkup = rootElement.outerHTML;                                                                        // 478
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);                                    // 479
                                                                                                                       // 480
        var normalizedMarkup = markup;                                                                                 // 481
        if (process.env.NODE_ENV !== 'production') {                                                                   // 482
          // because rootMarkup is retrieved from the DOM, various normalizations                                      // 483
          // will have occurred which will not be present in `markup`. Here,                                           // 484
          // insert markup into a <div> or <iframe> depending on the container                                         // 485
          // type to perform the same normalizations before comparing.                                                 // 486
          var normalizer;                                                                                              // 487
          if (container.nodeType === ELEMENT_NODE_TYPE) {                                                              // 488
            normalizer = document.createElement('div');                                                                // 489
            normalizer.innerHTML = markup;                                                                             // 490
            normalizedMarkup = normalizer.innerHTML;                                                                   // 491
          } else {                                                                                                     // 492
            normalizer = document.createElement('iframe');                                                             // 493
            document.body.appendChild(normalizer);                                                                     // 494
            normalizer.contentDocument.write(markup);                                                                  // 495
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;                                   // 496
            document.body.removeChild(normalizer);                                                                     // 497
          }                                                                                                            // 498
        }                                                                                                              // 499
                                                                                                                       // 500
        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);                                            // 501
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
                                                                                                                       // 503
        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;
                                                                                                                       // 505
        if (process.env.NODE_ENV !== 'production') {                                                                   // 506
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
        }                                                                                                              // 508
      }                                                                                                                // 509
    }                                                                                                                  // 510
                                                                                                                       // 511
    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;
                                                                                                                       // 513
    if (transaction.useCreateElement) {                                                                                // 514
      while (container.lastChild) {                                                                                    // 515
        container.removeChild(container.lastChild);                                                                    // 516
      }                                                                                                                // 517
      DOMLazyTree.insertTreeBefore(container, markup, null);                                                           // 518
    } else {                                                                                                           // 519
      setInnerHTML(container, markup);                                                                                 // 520
      ReactDOMComponentTree.precacheNode(instance, container.firstChild);                                              // 521
    }                                                                                                                  // 522
                                                                                                                       // 523
    if (process.env.NODE_ENV !== 'production') {                                                                       // 524
      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);                                  // 525
      if (hostNode._debugID !== 0) {                                                                                   // 526
        ReactInstrumentation.debugTool.onHostOperation({                                                               // 527
          instanceID: hostNode._debugID,                                                                               // 528
          type: 'mount',                                                                                               // 529
          payload: markup.toString()                                                                                   // 530
        });                                                                                                            // 531
      }                                                                                                                // 532
    }                                                                                                                  // 533
  }                                                                                                                    // 534
};                                                                                                                     // 535
                                                                                                                       // 536
module.exports = ReactMount;                                                                                           // 537
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMContainerInfo.js":["./validateDOMNesting",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMContainerInfo.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var validateDOMNesting = require('./validateDOMNesting');                                                              // 13
                                                                                                                       // 14
var DOC_NODE_TYPE = 9;                                                                                                 // 15
                                                                                                                       // 16
function ReactDOMContainerInfo(topLevelWrapper, node) {                                                                // 17
  var info = {                                                                                                         // 18
    _topLevelWrapper: topLevelWrapper,                                                                                 // 19
    _idCounter: 1,                                                                                                     // 20
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,                         // 21
    _node: node,                                                                                                       // 22
    _tag: node ? node.nodeName.toLowerCase() : null,                                                                   // 23
    _namespaceURI: node ? node.namespaceURI : null                                                                     // 24
  };                                                                                                                   // 25
  if (process.env.NODE_ENV !== 'production') {                                                                         // 26
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;                  // 27
  }                                                                                                                    // 28
  return info;                                                                                                         // 29
}                                                                                                                      // 30
                                                                                                                       // 31
module.exports = ReactDOMContainerInfo;                                                                                // 32
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMFeatureFlags.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMFeatureFlags.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ReactDOMFeatureFlags = {                                                                                           // 13
  useCreateElement: true,                                                                                              // 14
  useFiber: false                                                                                                      // 15
};                                                                                                                     // 16
                                                                                                                       // 17
module.exports = ReactDOMFeatureFlags;                                                                                 // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ReactMarkupChecksum.js":["./adler32",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactMarkupChecksum.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var adler32 = require('./adler32');                                                                                    // 13
                                                                                                                       // 14
var TAG_END = /\/?>/;                                                                                                  // 15
var COMMENT_START = /^<\!\-\-/;                                                                                        // 16
                                                                                                                       // 17
var ReactMarkupChecksum = {                                                                                            // 18
  CHECKSUM_ATTR_NAME: 'data-react-checksum',                                                                           // 19
                                                                                                                       // 20
  /**                                                                                                                  // 21
   * @param {string} markup Markup string                                                                              // 22
   * @return {string} Markup string with checksum attribute attached                                                   // 23
   */                                                                                                                  // 24
  addChecksumToMarkup: function (markup) {                                                                             // 25
    var checksum = adler32(markup);                                                                                    // 26
                                                                                                                       // 27
    // Add checksum (handle both parent tags, comments and self-closing tags)                                          // 28
    if (COMMENT_START.test(markup)) {                                                                                  // 29
      return markup;                                                                                                   // 30
    } else {                                                                                                           // 31
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');          // 32
    }                                                                                                                  // 33
  },                                                                                                                   // 34
                                                                                                                       // 35
  /**                                                                                                                  // 36
   * @param {string} markup to use                                                                                     // 37
   * @param {DOMElement} element root React element                                                                    // 38
   * @returns {boolean} whether or not the markup is the same                                                          // 39
   */                                                                                                                  // 40
  canReuseMarkup: function (markup, element) {                                                                         // 41
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);                               // 42
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);                                             // 43
    var markupChecksum = adler32(markup);                                                                              // 44
    return markupChecksum === existingChecksum;                                                                        // 45
  }                                                                                                                    // 46
};                                                                                                                     // 47
                                                                                                                       // 48
module.exports = ReactMarkupChecksum;                                                                                  // 49
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"adler32.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/adler32.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
'use strict';                                                                                                          // 12
                                                                                                                       // 13
var MOD = 65521;                                                                                                       // 14
                                                                                                                       // 15
// adler32 is not cryptographically strong, and is only used to sanity check that                                      // 16
// markup generated on the server matches the markup generated on the client.                                          // 17
// This implementation (a modified version of the SheetJS version) has been optimized                                  // 18
// for our use case, at the expense of conforming to the adler32 specification                                         // 19
// for non-ascii inputs.                                                                                               // 20
function adler32(data) {                                                                                               // 21
  var a = 1;                                                                                                           // 22
  var b = 0;                                                                                                           // 23
  var i = 0;                                                                                                           // 24
  var l = data.length;                                                                                                 // 25
  var m = l & ~0x3;                                                                                                    // 26
  while (i < m) {                                                                                                      // 27
    var n = Math.min(i + 4096, m);                                                                                     // 28
    for (; i < n; i += 4) {                                                                                            // 29
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }                                                                                                                  // 31
    a %= MOD;                                                                                                          // 32
    b %= MOD;                                                                                                          // 33
  }                                                                                                                    // 34
  for (; i < l; i++) {                                                                                                 // 35
    b += a += data.charCodeAt(i);                                                                                      // 36
  }                                                                                                                    // 37
  a %= MOD;                                                                                                            // 38
  b %= MOD;                                                                                                            // 39
  return a | b << 16;                                                                                                  // 40
}                                                                                                                      // 41
                                                                                                                       // 42
module.exports = adler32;                                                                                              // 43
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ReactVersion.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactVersion.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
module.exports = '15.4.2';                                                                                             // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"findDOMNode.js":["./reactProdInvariant","react/lib/ReactCurrentOwner","./ReactDOMComponentTree","./ReactInstanceMap","./getHostComponentFromComposite","fbjs/lib/invariant","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/findDOMNode.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var _prodInvariant = require('./reactProdInvariant');                                                                  // 13
                                                                                                                       // 14
var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');                                                        // 15
var ReactDOMComponentTree = require('./ReactDOMComponentTree');                                                        // 16
var ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 17
                                                                                                                       // 18
var getHostComponentFromComposite = require('./getHostComponentFromComposite');                                        // 19
var invariant = require('fbjs/lib/invariant');                                                                         // 20
var warning = require('fbjs/lib/warning');                                                                             // 21
                                                                                                                       // 22
/**                                                                                                                    // 23
 * Returns the DOM node rendered by this element.                                                                      // 24
 *                                                                                                                     // 25
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode                                   // 26
 *                                                                                                                     // 27
 * @param {ReactComponent|DOMElement} componentOrElement                                                               // 28
 * @return {?DOMElement} The root node of this element.                                                                // 29
 */                                                                                                                    // 30
function findDOMNode(componentOrElement) {                                                                             // 31
  if (process.env.NODE_ENV !== 'production') {                                                                         // 32
    var owner = ReactCurrentOwner.current;                                                                             // 33
    if (owner !== null) {                                                                                              // 34
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
      owner._warnedAboutRefsInRender = true;                                                                           // 36
    }                                                                                                                  // 37
  }                                                                                                                    // 38
  if (componentOrElement == null) {                                                                                    // 39
    return null;                                                                                                       // 40
  }                                                                                                                    // 41
  if (componentOrElement.nodeType === 1) {                                                                             // 42
    return componentOrElement;                                                                                         // 43
  }                                                                                                                    // 44
                                                                                                                       // 45
  var inst = ReactInstanceMap.get(componentOrElement);                                                                 // 46
  if (inst) {                                                                                                          // 47
    inst = getHostComponentFromComposite(inst);                                                                        // 48
    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;                                              // 49
  }                                                                                                                    // 50
                                                                                                                       // 51
  if (typeof componentOrElement.render === 'function') {                                                               // 52
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
  } else {                                                                                                             // 54
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
  }                                                                                                                    // 56
}                                                                                                                      // 57
                                                                                                                       // 58
module.exports = findDOMNode;                                                                                          // 59
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"getHostComponentFromComposite.js":["./ReactNodeTypes",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/getHostComponentFromComposite.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ReactNodeTypes = require('./ReactNodeTypes');                                                                      // 13
                                                                                                                       // 14
function getHostComponentFromComposite(inst) {                                                                         // 15
  var type;                                                                                                            // 16
                                                                                                                       // 17
  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {                                               // 18
    inst = inst._renderedComponent;                                                                                    // 19
  }                                                                                                                    // 20
                                                                                                                       // 21
  if (type === ReactNodeTypes.HOST) {                                                                                  // 22
    return inst._renderedComponent;                                                                                    // 23
  } else if (type === ReactNodeTypes.EMPTY) {                                                                          // 24
    return null;                                                                                                       // 25
  }                                                                                                                    // 26
}                                                                                                                      // 27
                                                                                                                       // 28
module.exports = getHostComponentFromComposite;                                                                        // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"renderSubtreeIntoContainer.js":["./ReactMount",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/renderSubtreeIntoContainer.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ReactMount = require('./ReactMount');                                                                              // 13
                                                                                                                       // 14
module.exports = ReactMount.renderSubtreeIntoContainer;                                                                // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMUnknownPropertyHook.js":["./DOMProperty","./EventPluginRegistry","react/lib/ReactComponentTreeHook","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMUnknownPropertyHook.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var DOMProperty = require('./DOMProperty');                                                                            // 13
var EventPluginRegistry = require('./EventPluginRegistry');                                                            // 14
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                              // 15
                                                                                                                       // 16
var warning = require('fbjs/lib/warning');                                                                             // 17
                                                                                                                       // 18
if (process.env.NODE_ENV !== 'production') {                                                                           // 19
  var reactProps = {                                                                                                   // 20
    children: true,                                                                                                    // 21
    dangerouslySetInnerHTML: true,                                                                                     // 22
    key: true,                                                                                                         // 23
    ref: true,                                                                                                         // 24
                                                                                                                       // 25
    autoFocus: true,                                                                                                   // 26
    defaultValue: true,                                                                                                // 27
    valueLink: true,                                                                                                   // 28
    defaultChecked: true,                                                                                              // 29
    checkedLink: true,                                                                                                 // 30
    innerHTML: true,                                                                                                   // 31
    suppressContentEditableWarning: true,                                                                              // 32
    onFocusIn: true,                                                                                                   // 33
    onFocusOut: true                                                                                                   // 34
  };                                                                                                                   // 35
  var warnedProperties = {};                                                                                           // 36
                                                                                                                       // 37
  var validateProperty = function (tagName, name, debugID) {                                                           // 38
    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {                          // 39
      return true;                                                                                                     // 40
    }                                                                                                                  // 41
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return true;                                                                                                     // 43
    }                                                                                                                  // 44
    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {                                            // 45
      return true;                                                                                                     // 46
    }                                                                                                                  // 47
    warnedProperties[name] = true;                                                                                     // 48
    var lowerCasedName = name.toLowerCase();                                                                           // 49
                                                                                                                       // 50
    // data-* attributes should be lowercase; suggest the lowercase version                                            // 51
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
                                                                                                                       // 53
    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;
                                                                                                                       // 55
    if (standardName != null) {                                                                                        // 56
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;                                                                                                     // 58
    } else if (registrationName != null) {                                                                             // 59
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;                                                                                                     // 61
    } else {                                                                                                           // 62
      // We were unable to guess which prop the user intended.                                                         // 63
      // It is likely that the user was just blindly spreading/forwarding props                                        // 64
      // Components should be careful to only render valid props/attributes.                                           // 65
      // Warning will be invoked in warnUnknownProperties to allow grouping.                                           // 66
      return false;                                                                                                    // 67
    }                                                                                                                  // 68
  };                                                                                                                   // 69
}                                                                                                                      // 70
                                                                                                                       // 71
var warnUnknownProperties = function (debugID, element) {                                                              // 72
  var unknownProps = [];                                                                                               // 73
  for (var key in element.props) {                                                                                     // 74
    var isValid = validateProperty(element.type, key, debugID);                                                        // 75
    if (!isValid) {                                                                                                    // 76
      unknownProps.push(key);                                                                                          // 77
    }                                                                                                                  // 78
  }                                                                                                                    // 79
                                                                                                                       // 80
  var unknownPropString = unknownProps.map(function (prop) {                                                           // 81
    return '`' + prop + '`';                                                                                           // 82
  }).join(', ');                                                                                                       // 83
                                                                                                                       // 84
  if (unknownProps.length === 1) {                                                                                     // 85
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (unknownProps.length > 1) {                                                                                // 87
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }                                                                                                                    // 89
};                                                                                                                     // 90
                                                                                                                       // 91
function handleElement(debugID, element) {                                                                             // 92
  if (element == null || typeof element.type !== 'string') {                                                           // 93
    return;                                                                                                            // 94
  }                                                                                                                    // 95
  if (element.type.indexOf('-') >= 0 || element.props.is) {                                                            // 96
    return;                                                                                                            // 97
  }                                                                                                                    // 98
  warnUnknownProperties(debugID, element);                                                                             // 99
}                                                                                                                      // 100
                                                                                                                       // 101
var ReactDOMUnknownPropertyHook = {                                                                                    // 102
  onBeforeMountComponent: function (debugID, element) {                                                                // 103
    handleElement(debugID, element);                                                                                   // 104
  },                                                                                                                   // 105
  onBeforeUpdateComponent: function (debugID, element) {                                                               // 106
    handleElement(debugID, element);                                                                                   // 107
  }                                                                                                                    // 108
};                                                                                                                     // 109
                                                                                                                       // 110
module.exports = ReactDOMUnknownPropertyHook;                                                                          // 111
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMNullInputValuePropHook.js":["react/lib/ReactComponentTreeHook","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMNullInputValuePropHook.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                              // 13
                                                                                                                       // 14
var warning = require('fbjs/lib/warning');                                                                             // 15
                                                                                                                       // 16
var didWarnValueNull = false;                                                                                          // 17
                                                                                                                       // 18
function handleElement(debugID, element) {                                                                             // 19
  if (element == null) {                                                                                               // 20
    return;                                                                                                            // 21
  }                                                                                                                    // 22
  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {                          // 23
    return;                                                                                                            // 24
  }                                                                                                                    // 25
  if (element.props != null && element.props.value === null && !didWarnValueNull) {                                    // 26
    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
                                                                                                                       // 28
    didWarnValueNull = true;                                                                                           // 29
  }                                                                                                                    // 30
}                                                                                                                      // 31
                                                                                                                       // 32
var ReactDOMNullInputValuePropHook = {                                                                                 // 33
  onBeforeMountComponent: function (debugID, element) {                                                                // 34
    handleElement(debugID, element);                                                                                   // 35
  },                                                                                                                   // 36
  onBeforeUpdateComponent: function (debugID, element) {                                                               // 37
    handleElement(debugID, element);                                                                                   // 38
  }                                                                                                                    // 39
};                                                                                                                     // 40
                                                                                                                       // 41
module.exports = ReactDOMNullInputValuePropHook;                                                                       // 42
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"ReactDOMInvalidARIAHook.js":["./DOMProperty","react/lib/ReactComponentTreeHook","fbjs/lib/warning",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/lib/ReactDOMInvalidARIAHook.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-present, Facebook, Inc.                                                                              // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
'use strict';                                                                                                          // 11
                                                                                                                       // 12
var DOMProperty = require('./DOMProperty');                                                                            // 13
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');                                              // 14
                                                                                                                       // 15
var warning = require('fbjs/lib/warning');                                                                             // 16
                                                                                                                       // 17
var warnedProperties = {};                                                                                             // 18
var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');                                         // 19
                                                                                                                       // 20
function validateProperty(tagName, name, debugID) {                                                                    // 21
  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {                                               // 22
    return true;                                                                                                       // 23
  }                                                                                                                    // 24
                                                                                                                       // 25
  if (rARIA.test(name)) {                                                                                              // 26
    var lowerCasedName = name.toLowerCase();                                                                           // 27
    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
                                                                                                                       // 29
    // If this is an aria-* attribute, but is not listed in the known DOM                                              // 30
    // DOM properties, then it is an invalid aria-* attribute.                                                         // 31
    if (standardName == null) {                                                                                        // 32
      warnedProperties[name] = true;                                                                                   // 33
      return false;                                                                                                    // 34
    }                                                                                                                  // 35
    // aria-* attributes should be lowercase; suggest the lowercase version.                                           // 36
    if (name !== standardName) {                                                                                       // 37
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      warnedProperties[name] = true;                                                                                   // 39
      return true;                                                                                                     // 40
    }                                                                                                                  // 41
  }                                                                                                                    // 42
                                                                                                                       // 43
  return true;                                                                                                         // 44
}                                                                                                                      // 45
                                                                                                                       // 46
function warnInvalidARIAProps(debugID, element) {                                                                      // 47
  var invalidProps = [];                                                                                               // 48
                                                                                                                       // 49
  for (var key in element.props) {                                                                                     // 50
    var isValid = validateProperty(element.type, key, debugID);                                                        // 51
    if (!isValid) {                                                                                                    // 52
      invalidProps.push(key);                                                                                          // 53
    }                                                                                                                  // 54
  }                                                                                                                    // 55
                                                                                                                       // 56
  var unknownPropString = invalidProps.map(function (prop) {                                                           // 57
    return '`' + prop + '`';                                                                                           // 58
  }).join(', ');                                                                                                       // 59
                                                                                                                       // 60
  if (invalidProps.length === 1) {                                                                                     // 61
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (invalidProps.length > 1) {                                                                                // 63
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }                                                                                                                    // 65
}                                                                                                                      // 66
                                                                                                                       // 67
function handleElement(debugID, element) {                                                                             // 68
  if (element == null || typeof element.type !== 'string') {                                                           // 69
    return;                                                                                                            // 70
  }                                                                                                                    // 71
  if (element.type.indexOf('-') >= 0 || element.props.is) {                                                            // 72
    return;                                                                                                            // 73
  }                                                                                                                    // 74
                                                                                                                       // 75
  warnInvalidARIAProps(debugID, element);                                                                              // 76
}                                                                                                                      // 77
                                                                                                                       // 78
var ReactDOMInvalidARIAHook = {                                                                                        // 79
  onBeforeMountComponent: function (debugID, element) {                                                                // 80
    if (process.env.NODE_ENV !== 'production') {                                                                       // 81
      handleElement(debugID, element);                                                                                 // 82
    }                                                                                                                  // 83
  },                                                                                                                   // 84
  onBeforeUpdateComponent: function (debugID, element) {                                                               // 85
    if (process.env.NODE_ENV !== 'production') {                                                                       // 86
      handleElement(debugID, element);                                                                                 // 87
    }                                                                                                                  // 88
  }                                                                                                                    // 89
};                                                                                                                     // 90
                                                                                                                       // 91
module.exports = ReactDOMInvalidARIAHook;                                                                              // 92
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"babel-runtime":{"helpers":{"extends.js":["../core-js/object/assign",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/extends.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _assign = require("../core-js/object/assign");                                                                     // 5
                                                                                                                       // 6
var _assign2 = _interopRequireDefault(_assign);                                                                        // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = _assign2.default || function (target) {                                                              // 11
  for (var i = 1; i < arguments.length; i++) {                                                                         // 12
    var source = arguments[i];                                                                                         // 13
                                                                                                                       // 14
    for (var key in source) {                                                                                          // 15
      if (Object.prototype.hasOwnProperty.call(source, key)) {                                                         // 16
        target[key] = source[key];                                                                                     // 17
      }                                                                                                                // 18
    }                                                                                                                  // 19
  }                                                                                                                    // 20
                                                                                                                       // 21
  return target;                                                                                                       // 22
};                                                                                                                     // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"classCallCheck.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/classCallCheck.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
exports.default = function (instance, Constructor) {                                                                   // 5
  if (!(instance instanceof Constructor)) {                                                                            // 6
    throw new TypeError("Cannot call a class as a function");                                                          // 7
  }                                                                                                                    // 8
};                                                                                                                     // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"possibleConstructorReturn.js":["../helpers/typeof",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/possibleConstructorReturn.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _typeof2 = require("../helpers/typeof");                                                                           // 5
                                                                                                                       // 6
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = function (self, call) {                                                                              // 11
  if (!self) {                                                                                                         // 12
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                             // 13
  }                                                                                                                    // 14
                                                                                                                       // 15
  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};                                                                                                                     // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"typeof.js":["../core-js/symbol/iterator","../core-js/symbol",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/typeof.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _iterator = require("../core-js/symbol/iterator");                                                                 // 5
                                                                                                                       // 6
var _iterator2 = _interopRequireDefault(_iterator);                                                                    // 7
                                                                                                                       // 8
var _symbol = require("../core-js/symbol");                                                                            // 9
                                                                                                                       // 10
var _symbol2 = _interopRequireDefault(_symbol);                                                                        // 11
                                                                                                                       // 12
var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
                                                                                                                       // 14
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 15
                                                                                                                       // 16
exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);                                                      // 18
} : function (obj) {                                                                                                   // 19
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};                                                                                                                     // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"inherits.js":["../core-js/object/set-prototype-of","../core-js/object/create","../helpers/typeof",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/inherits.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _setPrototypeOf = require("../core-js/object/set-prototype-of");                                                   // 5
                                                                                                                       // 6
var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);                                                        // 7
                                                                                                                       // 8
var _create = require("../core-js/object/create");                                                                     // 9
                                                                                                                       // 10
var _create2 = _interopRequireDefault(_create);                                                                        // 11
                                                                                                                       // 12
var _typeof2 = require("../helpers/typeof");                                                                           // 13
                                                                                                                       // 14
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       // 15
                                                                                                                       // 16
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 17
                                                                                                                       // 18
exports.default = function (subClass, superClass) {                                                                    // 19
  if (typeof superClass !== "function" && superClass !== null) {                                                       // 20
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }                                                                                                                    // 22
                                                                                                                       // 23
  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {                                     // 24
    constructor: {                                                                                                     // 25
      value: subClass,                                                                                                 // 26
      enumerable: false,                                                                                               // 27
      writable: true,                                                                                                  // 28
      configurable: true                                                                                               // 29
    }                                                                                                                  // 30
  });                                                                                                                  // 31
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};                                                                                                                     // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"core-js":{"object":{"assign.js":["core-js/library/fn/object/assign",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/object/assign.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };                         // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"set-prototype-of.js":["core-js/library/fn/object/set-prototype-of",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/object/set-prototype-of.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };               // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"create.js":["core-js/library/fn/object/create",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/object/create.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };                         // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"symbol":{"iterator.js":["core-js/library/fn/symbol/iterator",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/symbol/iterator.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };                       // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"symbol.js":["core-js/library/fn/symbol",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/symbol.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };                                // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"regenerator":{"index.js":["regenerator-runtime",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/regenerator/index.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("regenerator-runtime");                                                                       // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"core-js":{"library":{"fn":{"object":{"assign.js":["../../modules/es6.object.assign","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/object/assign.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.object.assign');                                                                            // 1
module.exports = require('../../modules/_core').Object.assign;                                                         // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"set-prototype-of.js":["../../modules/es6.object.set-prototype-of","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/object/set-prototype-of.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.object.set-prototype-of');                                                                  // 1
module.exports = require('../../modules/_core').Object.setPrototypeOf;                                                 // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"create.js":["../../modules/es6.object.create","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/object/create.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.object.create');                                                                            // 1
var $Object = require('../../modules/_core').Object;                                                                   // 2
module.exports = function create(P, D){                                                                                // 3
  return $Object.create(P, D);                                                                                         // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"symbol":{"iterator.js":["../../modules/es6.string.iterator","../../modules/web.dom.iterable","../../modules/_wks-ext",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/symbol/iterator.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.string.iterator');                                                                          // 1
require('../../modules/web.dom.iterable');                                                                             // 2
module.exports = require('../../modules/_wks-ext').f('iterator');                                                      // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"index.js":["../../modules/es6.symbol","../../modules/es6.object.to-string","../../modules/es7.symbol.async-iterator","../../modules/es7.symbol.observable","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/symbol/index.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.symbol');                                                                                   // 1
require('../../modules/es6.object.to-string');                                                                         // 2
require('../../modules/es7.symbol.async-iterator');                                                                    // 3
require('../../modules/es7.symbol.observable');                                                                        // 4
module.exports = require('../../modules/_core').Symbol;                                                                // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"modules":{"es6.object.assign.js":["./_export","./_object-assign",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.object.assign.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.3.1 Object.assign(target, source)                                                                              // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_export.js":["./_global","./_core","./_ctx","./_hide",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_export.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global    = require('./_global')                                                                                   // 1
  , core      = require('./_core')                                                                                     // 2
  , ctx       = require('./_ctx')                                                                                      // 3
  , hide      = require('./_hide')                                                                                     // 4
  , PROTOTYPE = 'prototype';                                                                                           // 5
                                                                                                                       // 6
var $export = function(type, name, source){                                                                            // 7
  var IS_FORCED = type & $export.F                                                                                     // 8
    , IS_GLOBAL = type & $export.G                                                                                     // 9
    , IS_STATIC = type & $export.S                                                                                     // 10
    , IS_PROTO  = type & $export.P                                                                                     // 11
    , IS_BIND   = type & $export.B                                                                                     // 12
    , IS_WRAP   = type & $export.W                                                                                     // 13
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})                                                   // 14
    , expProto  = exports[PROTOTYPE]                                                                                   // 15
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]                      // 16
    , key, own, out;                                                                                                   // 17
  if(IS_GLOBAL)source = name;                                                                                          // 18
  for(key in source){                                                                                                  // 19
    // contains in native                                                                                              // 20
    own = !IS_FORCED && target && target[key] !== undefined;                                                           // 21
    if(own && key in exports)continue;                                                                                 // 22
    // export native or passed                                                                                         // 23
    out = own ? target[key] : source[key];                                                                             // 24
    // prevent global pollution for namespaces                                                                         // 25
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]                                         // 26
    // bind timers to global for call from export context                                                              // 27
    : IS_BIND && own ? ctx(out, global)                                                                                // 28
    // wrap global constructors for prevent change them in library                                                     // 29
    : IS_WRAP && target[key] == out ? (function(C){                                                                    // 30
      var F = function(a, b, c){                                                                                       // 31
        if(this instanceof C){                                                                                         // 32
          switch(arguments.length){                                                                                    // 33
            case 0: return new C;                                                                                      // 34
            case 1: return new C(a);                                                                                   // 35
            case 2: return new C(a, b);                                                                                // 36
          } return new C(a, b, c);                                                                                     // 37
        } return C.apply(this, arguments);                                                                             // 38
      };                                                                                                               // 39
      F[PROTOTYPE] = C[PROTOTYPE];                                                                                     // 40
      return F;                                                                                                        // 41
    // make static versions for prototype methods                                                                      // 42
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;                                    // 43
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%                                                       // 44
    if(IS_PROTO){                                                                                                      // 45
      (exports.virtual || (exports.virtual = {}))[key] = out;                                                          // 46
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%                                                   // 47
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);                                      // 48
    }                                                                                                                  // 49
  }                                                                                                                    // 50
};                                                                                                                     // 51
// type bitmap                                                                                                         // 52
$export.F = 1;   // forced                                                                                             // 53
$export.G = 2;   // global                                                                                             // 54
$export.S = 4;   // static                                                                                             // 55
$export.P = 8;   // proto                                                                                              // 56
$export.B = 16;  // bind                                                                                               // 57
$export.W = 32;  // wrap                                                                                               // 58
$export.U = 64;  // safe                                                                                               // 59
$export.R = 128; // real proto method for `library`                                                                    // 60
module.exports = $export;                                                                                              // 61
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_global.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_global.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                                                // 1
var global = module.exports = typeof window != 'undefined' && window.Math == Math                                      // 2
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();                       // 3
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef                                                // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_core.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_core.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var core = module.exports = {version: '2.4.0'};                                                                        // 1
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef                                                  // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_ctx.js":["./_a-function",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_ctx.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// optional / simple context binding                                                                                   // 1
var aFunction = require('./_a-function');                                                                              // 2
module.exports = function(fn, that, length){                                                                           // 3
  aFunction(fn);                                                                                                       // 4
  if(that === undefined)return fn;                                                                                     // 5
  switch(length){                                                                                                      // 6
    case 1: return function(a){                                                                                        // 7
      return fn.call(that, a);                                                                                         // 8
    };                                                                                                                 // 9
    case 2: return function(a, b){                                                                                     // 10
      return fn.call(that, a, b);                                                                                      // 11
    };                                                                                                                 // 12
    case 3: return function(a, b, c){                                                                                  // 13
      return fn.call(that, a, b, c);                                                                                   // 14
    };                                                                                                                 // 15
  }                                                                                                                    // 16
  return function(/* ...args */){                                                                                      // 17
    return fn.apply(that, arguments);                                                                                  // 18
  };                                                                                                                   // 19
};                                                                                                                     // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_a-function.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_a-function.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(it){                                                                                         // 1
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');                                              // 2
  return it;                                                                                                           // 3
};                                                                                                                     // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_hide.js":["./_object-dp","./_property-desc","./_descriptors",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_hide.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dP         = require('./_object-dp')                                                                               // 1
  , createDesc = require('./_property-desc');                                                                          // 2
module.exports = require('./_descriptors') ? function(object, key, value){                                             // 3
  return dP.f(object, key, createDesc(1, value));                                                                      // 4
} : function(object, key, value){                                                                                      // 5
  object[key] = value;                                                                                                 // 6
  return object;                                                                                                       // 7
};                                                                                                                     // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-dp.js":["./_an-object","./_ie8-dom-define","./_to-primitive","./_descriptors",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-dp.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var anObject       = require('./_an-object')                                                                           // 1
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')                                                                      // 2
  , toPrimitive    = require('./_to-primitive')                                                                        // 3
  , dP             = Object.defineProperty;                                                                            // 4
                                                                                                                       // 5
exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){             // 6
  anObject(O);                                                                                                         // 7
  P = toPrimitive(P, true);                                                                                            // 8
  anObject(Attributes);                                                                                                // 9
  if(IE8_DOM_DEFINE)try {                                                                                              // 10
    return dP(O, P, Attributes);                                                                                       // 11
  } catch(e){ /* empty */ }                                                                                            // 12
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');                           // 13
  if('value' in Attributes)O[P] = Attributes.value;                                                                    // 14
  return O;                                                                                                            // 15
};                                                                                                                     // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_an-object.js":["./_is-object",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_an-object.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object');                                                                                // 1
module.exports = function(it){                                                                                         // 2
  if(!isObject(it))throw TypeError(it + ' is not an object!');                                                         // 3
  return it;                                                                                                           // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_is-object.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_is-object.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(it){                                                                                         // 1
  return typeof it === 'object' ? it !== null : typeof it === 'function';                                              // 2
};                                                                                                                     // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_ie8-dom-define.js":["./_descriptors","./_fails","./_dom-create",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_ie8-dom-define.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = !require('./_descriptors') && !require('./_fails')(function(){                                        // 1
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;           // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_descriptors.js":["./_fails",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_descriptors.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Thank's IE8 for his funny defineProperty                                                                            // 1
module.exports = !require('./_fails')(function(){                                                                      // 2
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;                                        // 3
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_fails.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_fails.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(exec){                                                                                       // 1
  try {                                                                                                                // 2
    return !!exec();                                                                                                   // 3
  } catch(e){                                                                                                          // 4
    return true;                                                                                                       // 5
  }                                                                                                                    // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_dom-create.js":["./_is-object","./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_dom-create.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object')                                                                                 // 1
  , document = require('./_global').document                                                                           // 2
  // in old IE typeof document.createElement is 'object'                                                               // 3
  , is = isObject(document) && isObject(document.createElement);                                                       // 4
module.exports = function(it){                                                                                         // 5
  return is ? document.createElement(it) : {};                                                                         // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-primitive.js":["./_is-object",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-primitive.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.1 ToPrimitive(input [, PreferredType])                                                                          // 1
var isObject = require('./_is-object');                                                                                // 2
// instead of the ES6 spec version, we didn't implement @@toPrimitive case                                             // 3
// and the second argument - flag - preferred type is a string                                                         // 4
module.exports = function(it, S){                                                                                      // 5
  if(!isObject(it))return it;                                                                                          // 6
  var fn, val;                                                                                                         // 7
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                          // 8
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;                                // 9
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                         // 10
  throw TypeError("Can't convert object to primitive value");                                                          // 11
};                                                                                                                     // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_property-desc.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_property-desc.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(bitmap, value){                                                                              // 1
  return {                                                                                                             // 2
    enumerable  : !(bitmap & 1),                                                                                       // 3
    configurable: !(bitmap & 2),                                                                                       // 4
    writable    : !(bitmap & 4),                                                                                       // 5
    value       : value                                                                                                // 6
  };                                                                                                                   // 7
};                                                                                                                     // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-assign.js":["./_object-keys","./_object-gops","./_object-pie","./_to-object","./_iobject","./_fails",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-assign.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// 19.1.2.1 Object.assign(target, source, ...)                                                                         // 2
var getKeys  = require('./_object-keys')                                                                               // 3
  , gOPS     = require('./_object-gops')                                                                               // 4
  , pIE      = require('./_object-pie')                                                                                // 5
  , toObject = require('./_to-object')                                                                                 // 6
  , IObject  = require('./_iobject')                                                                                   // 7
  , $assign  = Object.assign;                                                                                          // 8
                                                                                                                       // 9
// should work with symbols and should have deterministic property order (V8 bug)                                      // 10
module.exports = !$assign || require('./_fails')(function(){                                                           // 11
  var A = {}                                                                                                           // 12
    , B = {}                                                                                                           // 13
    , S = Symbol()                                                                                                     // 14
    , K = 'abcdefghijklmnopqrst';                                                                                      // 15
  A[S] = 7;                                                                                                            // 16
  K.split('').forEach(function(k){ B[k] = k; });                                                                       // 17
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;                                          // 18
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars                                            // 19
  var T     = toObject(target)                                                                                         // 20
    , aLen  = arguments.length                                                                                         // 21
    , index = 1                                                                                                        // 22
    , getSymbols = gOPS.f                                                                                              // 23
    , isEnum     = pIE.f;                                                                                              // 24
  while(aLen > index){                                                                                                 // 25
    var S      = IObject(arguments[index++])                                                                           // 26
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)                                            // 27
      , length = keys.length                                                                                           // 28
      , j      = 0                                                                                                     // 29
      , key;                                                                                                           // 30
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];                                               // 31
  } return T;                                                                                                          // 32
} : $assign;                                                                                                           // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-keys.js":["./_object-keys-internal","./_enum-bug-keys",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-keys.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.14 / 15.2.3.14 Object.keys(O)                                                                                // 1
var $keys       = require('./_object-keys-internal')                                                                   // 2
  , enumBugKeys = require('./_enum-bug-keys');                                                                         // 3
                                                                                                                       // 4
module.exports = Object.keys || function keys(O){                                                                      // 5
  return $keys(O, enumBugKeys);                                                                                        // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-keys-internal.js":["./_has","./_to-iobject","./_array-includes","./_shared-key",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-keys-internal.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var has          = require('./_has')                                                                                   // 1
  , toIObject    = require('./_to-iobject')                                                                            // 2
  , arrayIndexOf = require('./_array-includes')(false)                                                                 // 3
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');                                                               // 4
                                                                                                                       // 5
module.exports = function(object, names){                                                                              // 6
  var O      = toIObject(object)                                                                                       // 7
    , i      = 0                                                                                                       // 8
    , result = []                                                                                                      // 9
    , key;                                                                                                             // 10
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);                                                     // 11
  // Don't enum bug & hidden keys                                                                                      // 12
  while(names.length > i)if(has(O, key = names[i++])){                                                                 // 13
    ~arrayIndexOf(result, key) || result.push(key);                                                                    // 14
  }                                                                                                                    // 15
  return result;                                                                                                       // 16
};                                                                                                                     // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_has.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_has.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var hasOwnProperty = {}.hasOwnProperty;                                                                                // 1
module.exports = function(it, key){                                                                                    // 2
  return hasOwnProperty.call(it, key);                                                                                 // 3
};                                                                                                                     // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-iobject.js":["./_iobject","./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-iobject.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// to indexed object, toObject with fallback for non-array-like ES3 strings                                            // 1
var IObject = require('./_iobject')                                                                                    // 2
  , defined = require('./_defined');                                                                                   // 3
module.exports = function(it){                                                                                         // 4
  return IObject(defined(it));                                                                                         // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_iobject.js":["./_cof",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iobject.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// fallback for non-array-like ES3 and non-enumerable old V8 strings                                                   // 1
var cof = require('./_cof');                                                                                           // 2
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){                                          // 3
  return cof(it) == 'String' ? it.split('') : Object(it);                                                              // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_cof.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_cof.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toString = {}.toString;                                                                                            // 1
                                                                                                                       // 2
module.exports = function(it){                                                                                         // 3
  return toString.call(it).slice(8, -1);                                                                               // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_defined.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_defined.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.1 RequireObjectCoercible(argument)                                                                              // 1
module.exports = function(it){                                                                                         // 2
  if(it == undefined)throw TypeError("Can't call method on  " + it);                                                   // 3
  return it;                                                                                                           // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_array-includes.js":["./_to-iobject","./_to-length","./_to-index",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_array-includes.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// false -> Array#indexOf                                                                                              // 1
// true  -> Array#includes                                                                                             // 2
var toIObject = require('./_to-iobject')                                                                               // 3
  , toLength  = require('./_to-length')                                                                                // 4
  , toIndex   = require('./_to-index');                                                                                // 5
module.exports = function(IS_INCLUDES){                                                                                // 6
  return function($this, el, fromIndex){                                                                               // 7
    var O      = toIObject($this)                                                                                      // 8
      , length = toLength(O.length)                                                                                    // 9
      , index  = toIndex(fromIndex, length)                                                                            // 10
      , value;                                                                                                         // 11
    // Array#includes uses SameValueZero equality algorithm                                                            // 12
    if(IS_INCLUDES && el != el)while(length > index){                                                                  // 13
      value = O[index++];                                                                                              // 14
      if(value != value)return true;                                                                                   // 15
    // Array#toIndex ignores holes, Array#includes - not                                                               // 16
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){                                                 // 17
      if(O[index] === el)return IS_INCLUDES || index || 0;                                                             // 18
    } return !IS_INCLUDES && -1;                                                                                       // 19
  };                                                                                                                   // 20
};                                                                                                                     // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-length.js":["./_to-integer",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-length.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.15 ToLength                                                                                                     // 1
var toInteger = require('./_to-integer')                                                                               // 2
  , min       = Math.min;                                                                                              // 3
module.exports = function(it){                                                                                         // 4
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991                      // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-integer.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-integer.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.4 ToInteger                                                                                                     // 1
var ceil  = Math.ceil                                                                                                  // 2
  , floor = Math.floor;                                                                                                // 3
module.exports = function(it){                                                                                         // 4
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);                                                            // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-index.js":["./_to-integer",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-index.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toInteger = require('./_to-integer')                                                                               // 1
  , max       = Math.max                                                                                               // 2
  , min       = Math.min;                                                                                              // 3
module.exports = function(index, length){                                                                              // 4
  index = toInteger(index);                                                                                            // 5
  return index < 0 ? max(index + length, 0) : min(index, length);                                                      // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_shared-key.js":["./_shared","./_uid",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_shared-key.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var shared = require('./_shared')('keys')                                                                              // 1
  , uid    = require('./_uid');                                                                                        // 2
module.exports = function(key){                                                                                        // 3
  return shared[key] || (shared[key] = uid(key));                                                                      // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_shared.js":["./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_shared.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global = require('./_global')                                                                                      // 1
  , SHARED = '__core-js_shared__'                                                                                      // 2
  , store  = global[SHARED] || (global[SHARED] = {});                                                                  // 3
module.exports = function(key){                                                                                        // 4
  return store[key] || (store[key] = {});                                                                              // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_uid.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_uid.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var id = 0                                                                                                             // 1
  , px = Math.random();                                                                                                // 2
module.exports = function(key){                                                                                        // 3
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));                               // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_enum-bug-keys.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_enum-bug-keys.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// IE 8- don't enum bug keys                                                                                           // 1
module.exports = (                                                                                                     // 2
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'                      // 3
).split(',');                                                                                                          // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-gops.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gops.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = Object.getOwnPropertySymbols;                                                                              // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-pie.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-pie.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = {}.propertyIsEnumerable;                                                                                   // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-object.js":["./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-object.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.13 ToObject(argument)                                                                                           // 1
var defined = require('./_defined');                                                                                   // 2
module.exports = function(it){                                                                                         // 3
  return Object(defined(it));                                                                                          // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.iterator.js":["./_string-at","./_iter-define",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.string.iterator.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $at  = require('./_string-at')(true);                                                                              // 2
                                                                                                                       // 3
// 21.1.3.27 String.prototype[@@iterator]()                                                                            // 4
require('./_iter-define')(String, 'String', function(iterated){                                                        // 5
  this._t = String(iterated); // target                                                                                // 6
  this._i = 0;                // next index                                                                            // 7
// 21.1.5.2.1 %StringIteratorPrototype%.next()                                                                         // 8
}, function(){                                                                                                         // 9
  var O     = this._t                                                                                                  // 10
    , index = this._i                                                                                                  // 11
    , point;                                                                                                           // 12
  if(index >= O.length)return {value: undefined, done: true};                                                          // 13
  point = $at(O, index);                                                                                               // 14
  this._i += point.length;                                                                                             // 15
  return {value: point, done: false};                                                                                  // 16
});                                                                                                                    // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_string-at.js":["./_to-integer","./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_string-at.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toInteger = require('./_to-integer')                                                                               // 1
  , defined   = require('./_defined');                                                                                 // 2
// true  -> String#at                                                                                                  // 3
// false -> String#codePointAt                                                                                         // 4
module.exports = function(TO_STRING){                                                                                  // 5
  return function(that, pos){                                                                                          // 6
    var s = String(defined(that))                                                                                      // 7
      , i = toInteger(pos)                                                                                             // 8
      , l = s.length                                                                                                   // 9
      , a, b;                                                                                                          // 10
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;                                                              // 11
    a = s.charCodeAt(i);                                                                                               // 12
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff                 // 13
      ? TO_STRING ? s.charAt(i) : a                                                                                    // 14
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;                                   // 15
  };                                                                                                                   // 16
};                                                                                                                     // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_iter-define.js":["./_library","./_export","./_redefine","./_hide","./_has","./_iterators","./_iter-create","./_set-to-string-tag","./_object-gpo","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iter-define.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var LIBRARY        = require('./_library')                                                                             // 2
  , $export        = require('./_export')                                                                              // 3
  , redefine       = require('./_redefine')                                                                            // 4
  , hide           = require('./_hide')                                                                                // 5
  , has            = require('./_has')                                                                                 // 6
  , Iterators      = require('./_iterators')                                                                           // 7
  , $iterCreate    = require('./_iter-create')                                                                         // 8
  , setToStringTag = require('./_set-to-string-tag')                                                                   // 9
  , getPrototypeOf = require('./_object-gpo')                                                                          // 10
  , ITERATOR       = require('./_wks')('iterator')                                                                     // 11
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`                        // 12
  , FF_ITERATOR    = '@@iterator'                                                                                      // 13
  , KEYS           = 'keys'                                                                                            // 14
  , VALUES         = 'values';                                                                                         // 15
                                                                                                                       // 16
var returnThis = function(){ return this; };                                                                           // 17
                                                                                                                       // 18
module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){                                     // 19
  $iterCreate(Constructor, NAME, next);                                                                                // 20
  var getMethod = function(kind){                                                                                      // 21
    if(!BUGGY && kind in proto)return proto[kind];                                                                     // 22
    switch(kind){                                                                                                      // 23
      case KEYS: return function keys(){ return new Constructor(this, kind); };                                        // 24
      case VALUES: return function values(){ return new Constructor(this, kind); };                                    // 25
    } return function entries(){ return new Constructor(this, kind); };                                                // 26
  };                                                                                                                   // 27
  var TAG        = NAME + ' Iterator'                                                                                  // 28
    , DEF_VALUES = DEFAULT == VALUES                                                                                   // 29
    , VALUES_BUG = false                                                                                               // 30
    , proto      = Base.prototype                                                                                      // 31
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]                                  // 32
    , $default   = $native || getMethod(DEFAULT)                                                                       // 33
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined                                 // 34
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native                                                // 35
    , methods, key, IteratorPrototype;                                                                                 // 36
  // Fix native                                                                                                        // 37
  if($anyNative){                                                                                                      // 38
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));                                                     // 39
    if(IteratorPrototype !== Object.prototype){                                                                        // 40
      // Set @@toStringTag to native iterators                                                                         // 41
      setToStringTag(IteratorPrototype, TAG, true);                                                                    // 42
      // fix for some old engines                                                                                      // 43
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);                  // 44
    }                                                                                                                  // 45
  }                                                                                                                    // 46
  // fix Array#{values, @@iterator}.name in V8 / FF                                                                    // 47
  if(DEF_VALUES && $native && $native.name !== VALUES){                                                                // 48
    VALUES_BUG = true;                                                                                                 // 49
    $default = function values(){ return $native.call(this); };                                                        // 50
  }                                                                                                                    // 51
  // Define iterator                                                                                                   // 52
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){                                               // 53
    hide(proto, ITERATOR, $default);                                                                                   // 54
  }                                                                                                                    // 55
  // Plug for library                                                                                                  // 56
  Iterators[NAME] = $default;                                                                                          // 57
  Iterators[TAG]  = returnThis;                                                                                        // 58
  if(DEFAULT){                                                                                                         // 59
    methods = {                                                                                                        // 60
      values:  DEF_VALUES ? $default : getMethod(VALUES),                                                              // 61
      keys:    IS_SET     ? $default : getMethod(KEYS),                                                                // 62
      entries: $entries                                                                                                // 63
    };                                                                                                                 // 64
    if(FORCED)for(key in methods){                                                                                     // 65
      if(!(key in proto))redefine(proto, key, methods[key]);                                                           // 66
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);                                      // 67
  }                                                                                                                    // 68
  return methods;                                                                                                      // 69
};                                                                                                                     // 70
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_library.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_library.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = true;                                                                                                 // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_redefine.js":["./_hide",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_redefine.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require('./_hide');                                                                                   // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_iterators.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iterators.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = {};                                                                                                   // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-create.js":["./_object-create","./_property-desc","./_set-to-string-tag","./_hide","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iter-create.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var create         = require('./_object-create')                                                                       // 2
  , descriptor     = require('./_property-desc')                                                                       // 3
  , setToStringTag = require('./_set-to-string-tag')                                                                   // 4
  , IteratorPrototype = {};                                                                                            // 5
                                                                                                                       // 6
// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                                        // 7
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });                      // 8
                                                                                                                       // 9
module.exports = function(Constructor, NAME, next){                                                                    // 10
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});                                      // 11
  setToStringTag(Constructor, NAME + ' Iterator');                                                                     // 12
};                                                                                                                     // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-create.js":["./_an-object","./_object-dps","./_enum-bug-keys","./_shared-key","./_dom-create","./_html",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-create.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 1
var anObject    = require('./_an-object')                                                                              // 2
  , dPs         = require('./_object-dps')                                                                             // 3
  , enumBugKeys = require('./_enum-bug-keys')                                                                          // 4
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')                                                                 // 5
  , Empty       = function(){ /* empty */ }                                                                            // 6
  , PROTOTYPE   = 'prototype';                                                                                         // 7
                                                                                                                       // 8
// Create object with fake `null` prototype: use iframe Object with cleared prototype                                  // 9
var createDict = function(){                                                                                           // 10
  // Thrash, waste and sodomy: IE GC bug                                                                               // 11
  var iframe = require('./_dom-create')('iframe')                                                                      // 12
    , i      = enumBugKeys.length                                                                                      // 13
    , lt     = '<'                                                                                                     // 14
    , gt     = '>'                                                                                                     // 15
    , iframeDocument;                                                                                                  // 16
  iframe.style.display = 'none';                                                                                       // 17
  require('./_html').appendChild(iframe);                                                                              // 18
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url                                                     // 19
  // createDict = iframe.contentWindow.Object;                                                                         // 20
  // html.removeChild(iframe);                                                                                         // 21
  iframeDocument = iframe.contentWindow.document;                                                                      // 22
  iframeDocument.open();                                                                                               // 23
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);                                // 24
  iframeDocument.close();                                                                                              // 25
  createDict = iframeDocument.F;                                                                                       // 26
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];                                                              // 27
  return createDict();                                                                                                 // 28
};                                                                                                                     // 29
                                                                                                                       // 30
module.exports = Object.create || function create(O, Properties){                                                      // 31
  var result;                                                                                                          // 32
  if(O !== null){                                                                                                      // 33
    Empty[PROTOTYPE] = anObject(O);                                                                                    // 34
    result = new Empty;                                                                                                // 35
    Empty[PROTOTYPE] = null;                                                                                           // 36
    // add "__proto__" for Object.getPrototypeOf polyfill                                                              // 37
    result[IE_PROTO] = O;                                                                                              // 38
  } else result = createDict();                                                                                        // 39
  return Properties === undefined ? result : dPs(result, Properties);                                                  // 40
};                                                                                                                     // 41
                                                                                                                       // 42
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-dps.js":["./_object-dp","./_an-object","./_object-keys","./_descriptors",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-dps.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dP       = require('./_object-dp')                                                                                 // 1
  , anObject = require('./_an-object')                                                                                 // 2
  , getKeys  = require('./_object-keys');                                                                              // 3
                                                                                                                       // 4
module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){       // 5
  anObject(O);                                                                                                         // 6
  var keys   = getKeys(Properties)                                                                                     // 7
    , length = keys.length                                                                                             // 8
    , i = 0                                                                                                            // 9
    , P;                                                                                                               // 10
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);                                                              // 11
  return O;                                                                                                            // 12
};                                                                                                                     // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_html.js":["./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_html.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require('./_global').document && document.documentElement;                                            // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_set-to-string-tag.js":["./_object-dp","./_has","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_set-to-string-tag.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var def = require('./_object-dp').f                                                                                    // 1
  , has = require('./_has')                                                                                            // 2
  , TAG = require('./_wks')('toStringTag');                                                                            // 3
                                                                                                                       // 4
module.exports = function(it, tag, stat){                                                                              // 5
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});                    // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_wks.js":["./_shared","./_uid","./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_wks.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var store      = require('./_shared')('wks')                                                                           // 1
  , uid        = require('./_uid')                                                                                     // 2
  , Symbol     = require('./_global').Symbol                                                                           // 3
  , USE_SYMBOL = typeof Symbol == 'function';                                                                          // 4
                                                                                                                       // 5
var $exports = module.exports = function(name){                                                                        // 6
  return store[name] || (store[name] =                                                                                 // 7
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));                                      // 8
};                                                                                                                     // 9
                                                                                                                       // 10
$exports.store = store;                                                                                                // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gpo.js":["./_has","./_to-object","./_shared-key",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gpo.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)                                                                        // 1
var has         = require('./_has')                                                                                    // 2
  , toObject    = require('./_to-object')                                                                              // 3
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')                                                                 // 4
  , ObjectProto = Object.prototype;                                                                                    // 5
                                                                                                                       // 6
module.exports = Object.getPrototypeOf || function(O){                                                                 // 7
  O = toObject(O);                                                                                                     // 8
  if(has(O, IE_PROTO))return O[IE_PROTO];                                                                              // 9
  if(typeof O.constructor == 'function' && O instanceof O.constructor){                                                // 10
    return O.constructor.prototype;                                                                                    // 11
  } return O instanceof Object ? ObjectProto : null;                                                                   // 12
};                                                                                                                     // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"web.dom.iterable.js":["./es6.array.iterator","./_global","./_hide","./_iterators","./_wks",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/web.dom.iterable.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./es6.array.iterator');                                                                                       // 1
var global        = require('./_global')                                                                               // 2
  , hide          = require('./_hide')                                                                                 // 3
  , Iterators     = require('./_iterators')                                                                            // 4
  , TO_STRING_TAG = require('./_wks')('toStringTag');                                                                  // 5
                                                                                                                       // 6
for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){  // 7
  var NAME       = collections[i]                                                                                      // 8
    , Collection = global[NAME]                                                                                        // 9
    , proto      = Collection && Collection.prototype;                                                                 // 10
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);                                                  // 11
  Iterators[NAME] = Iterators.Array;                                                                                   // 12
}                                                                                                                      // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.iterator.js":["./_add-to-unscopables","./_iter-step","./_iterators","./_to-iobject","./_iter-define",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.array.iterator.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var addToUnscopables = require('./_add-to-unscopables')                                                                // 2
  , step             = require('./_iter-step')                                                                         // 3
  , Iterators        = require('./_iterators')                                                                         // 4
  , toIObject        = require('./_to-iobject');                                                                       // 5
                                                                                                                       // 6
// 22.1.3.4 Array.prototype.entries()                                                                                  // 7
// 22.1.3.13 Array.prototype.keys()                                                                                    // 8
// 22.1.3.29 Array.prototype.values()                                                                                  // 9
// 22.1.3.30 Array.prototype[@@iterator]()                                                                             // 10
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){                                   // 11
  this._t = toIObject(iterated); // target                                                                             // 12
  this._i = 0;                   // next index                                                                         // 13
  this._k = kind;                // kind                                                                               // 14
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                                          // 15
}, function(){                                                                                                         // 16
  var O     = this._t                                                                                                  // 17
    , kind  = this._k                                                                                                  // 18
    , index = this._i++;                                                                                               // 19
  if(!O || index >= O.length){                                                                                         // 20
    this._t = undefined;                                                                                               // 21
    return step(1);                                                                                                    // 22
  }                                                                                                                    // 23
  if(kind == 'keys'  )return step(0, index);                                                                           // 24
  if(kind == 'values')return step(0, O[index]);                                                                        // 25
  return step(0, [index, O[index]]);                                                                                   // 26
}, 'values');                                                                                                          // 27
                                                                                                                       // 28
// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                                                 // 29
Iterators.Arguments = Iterators.Array;                                                                                 // 30
                                                                                                                       // 31
addToUnscopables('keys');                                                                                              // 32
addToUnscopables('values');                                                                                            // 33
addToUnscopables('entries');                                                                                           // 34
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_add-to-unscopables.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_add-to-unscopables.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(){ /* empty */ };                                                                            // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-step.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iter-step.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(done, value){                                                                                // 1
  return {value: value, done: !!done};                                                                                 // 2
};                                                                                                                     // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_wks-ext.js":["./_wks",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_wks-ext.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = require('./_wks');                                                                                         // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.symbol.js":["./_global","./_has","./_descriptors","./_export","./_redefine","./_meta","./_fails","./_shared","./_set-to-string-tag","./_uid","./_wks","./_wks-ext","./_wks-define","./_keyof","./_enum-keys","./_is-array","./_an-object","./_to-iobject","./_to-primitive","./_property-desc","./_object-create","./_object-gopn-ext","./_object-gopd","./_object-dp","./_object-keys","./_object-gopn","./_object-pie","./_object-gops","./_library","./_hide",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.symbol.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// ECMAScript 6 symbols shim                                                                                           // 2
var global         = require('./_global')                                                                              // 3
  , has            = require('./_has')                                                                                 // 4
  , DESCRIPTORS    = require('./_descriptors')                                                                         // 5
  , $export        = require('./_export')                                                                              // 6
  , redefine       = require('./_redefine')                                                                            // 7
  , META           = require('./_meta').KEY                                                                            // 8
  , $fails         = require('./_fails')                                                                               // 9
  , shared         = require('./_shared')                                                                              // 10
  , setToStringTag = require('./_set-to-string-tag')                                                                   // 11
  , uid            = require('./_uid')                                                                                 // 12
  , wks            = require('./_wks')                                                                                 // 13
  , wksExt         = require('./_wks-ext')                                                                             // 14
  , wksDefine      = require('./_wks-define')                                                                          // 15
  , keyOf          = require('./_keyof')                                                                               // 16
  , enumKeys       = require('./_enum-keys')                                                                           // 17
  , isArray        = require('./_is-array')                                                                            // 18
  , anObject       = require('./_an-object')                                                                           // 19
  , toIObject      = require('./_to-iobject')                                                                          // 20
  , toPrimitive    = require('./_to-primitive')                                                                        // 21
  , createDesc     = require('./_property-desc')                                                                       // 22
  , _create        = require('./_object-create')                                                                       // 23
  , gOPNExt        = require('./_object-gopn-ext')                                                                     // 24
  , $GOPD          = require('./_object-gopd')                                                                         // 25
  , $DP            = require('./_object-dp')                                                                           // 26
  , $keys          = require('./_object-keys')                                                                         // 27
  , gOPD           = $GOPD.f                                                                                           // 28
  , dP             = $DP.f                                                                                             // 29
  , gOPN           = gOPNExt.f                                                                                         // 30
  , $Symbol        = global.Symbol                                                                                     // 31
  , $JSON          = global.JSON                                                                                       // 32
  , _stringify     = $JSON && $JSON.stringify                                                                          // 33
  , PROTOTYPE      = 'prototype'                                                                                       // 34
  , HIDDEN         = wks('_hidden')                                                                                    // 35
  , TO_PRIMITIVE   = wks('toPrimitive')                                                                                // 36
  , isEnum         = {}.propertyIsEnumerable                                                                           // 37
  , SymbolRegistry = shared('symbol-registry')                                                                         // 38
  , AllSymbols     = shared('symbols')                                                                                 // 39
  , OPSymbols      = shared('op-symbols')                                                                              // 40
  , ObjectProto    = Object[PROTOTYPE]                                                                                 // 41
  , USE_NATIVE     = typeof $Symbol == 'function'                                                                      // 42
  , QObject        = global.QObject;                                                                                   // 43
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173                                      // 44
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;                                         // 45
                                                                                                                       // 46
// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687                                         // 47
var setSymbolDesc = DESCRIPTORS && $fails(function(){                                                                  // 48
  return _create(dP({}, 'a', {                                                                                         // 49
    get: function(){ return dP(this, 'a', {value: 7}).a; }                                                             // 50
  })).a != 7;                                                                                                          // 51
}) ? function(it, key, D){                                                                                             // 52
  var protoDesc = gOPD(ObjectProto, key);                                                                              // 53
  if(protoDesc)delete ObjectProto[key];                                                                                // 54
  dP(it, key, D);                                                                                                      // 55
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);                                                  // 56
} : dP;                                                                                                                // 57
                                                                                                                       // 58
var wrap = function(tag){                                                                                              // 59
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);                                                             // 60
  sym._k = tag;                                                                                                        // 61
  return sym;                                                                                                          // 62
};                                                                                                                     // 63
                                                                                                                       // 64
var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){                                       // 65
  return typeof it == 'symbol';                                                                                        // 66
} : function(it){                                                                                                      // 67
  return it instanceof $Symbol;                                                                                        // 68
};                                                                                                                     // 69
                                                                                                                       // 70
var $defineProperty = function defineProperty(it, key, D){                                                             // 71
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);                                                            // 72
  anObject(it);                                                                                                        // 73
  key = toPrimitive(key, true);                                                                                        // 74
  anObject(D);                                                                                                         // 75
  if(has(AllSymbols, key)){                                                                                            // 76
    if(!D.enumerable){                                                                                                 // 77
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));                                                           // 78
      it[HIDDEN][key] = true;                                                                                          // 79
    } else {                                                                                                           // 80
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;                                                   // 81
      D = _create(D, {enumerable: createDesc(0, false)});                                                              // 82
    } return setSymbolDesc(it, key, D);                                                                                // 83
  } return dP(it, key, D);                                                                                             // 84
};                                                                                                                     // 85
var $defineProperties = function defineProperties(it, P){                                                              // 86
  anObject(it);                                                                                                        // 87
  var keys = enumKeys(P = toIObject(P))                                                                                // 88
    , i    = 0                                                                                                         // 89
    , l = keys.length                                                                                                  // 90
    , key;                                                                                                             // 91
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);                                                            // 92
  return it;                                                                                                           // 93
};                                                                                                                     // 94
var $create = function create(it, P){                                                                                  // 95
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);                                            // 96
};                                                                                                                     // 97
var $propertyIsEnumerable = function propertyIsEnumerable(key){                                                        // 98
  var E = isEnum.call(this, key = toPrimitive(key, true));                                                             // 99
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;                                // 100
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;           // 101
};                                                                                                                     // 102
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){                                            // 103
  it  = toIObject(it);                                                                                                 // 104
  key = toPrimitive(key, true);                                                                                        // 105
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;                                        // 106
  var D = gOPD(it, key);                                                                                               // 107
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;                           // 108
  return D;                                                                                                            // 109
};                                                                                                                     // 110
var $getOwnPropertyNames = function getOwnPropertyNames(it){                                                           // 111
  var names  = gOPN(toIObject(it))                                                                                     // 112
    , result = []                                                                                                      // 113
    , i      = 0                                                                                                       // 114
    , key;                                                                                                             // 115
  while(names.length > i){                                                                                             // 116
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);                            // 117
  } return result;                                                                                                     // 118
};                                                                                                                     // 119
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){                                                       // 120
  var IS_OP  = it === ObjectProto                                                                                      // 121
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))                                                                 // 122
    , result = []                                                                                                      // 123
    , i      = 0                                                                                                       // 124
    , key;                                                                                                             // 125
  while(names.length > i){                                                                                             // 126
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);       // 127
  } return result;                                                                                                     // 128
};                                                                                                                     // 129
                                                                                                                       // 130
// 19.4.1.1 Symbol([description])                                                                                      // 131
if(!USE_NATIVE){                                                                                                       // 132
  $Symbol = function Symbol(){                                                                                         // 133
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');                                        // 134
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);                                                    // 135
    var $set = function(value){                                                                                        // 136
      if(this === ObjectProto)$set.call(OPSymbols, value);                                                             // 137
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;                                        // 138
      setSymbolDesc(this, tag, createDesc(1, value));                                                                  // 139
    };                                                                                                                 // 140
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});                         // 141
    return wrap(tag);                                                                                                  // 142
  };                                                                                                                   // 143
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){                                                        // 144
    return this._k;                                                                                                    // 145
  });                                                                                                                  // 146
                                                                                                                       // 147
  $GOPD.f = $getOwnPropertyDescriptor;                                                                                 // 148
  $DP.f   = $defineProperty;                                                                                           // 149
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;                                                      // 150
  require('./_object-pie').f  = $propertyIsEnumerable;                                                                 // 151
  require('./_object-gops').f = $getOwnPropertySymbols;                                                                // 152
                                                                                                                       // 153
  if(DESCRIPTORS && !require('./_library')){                                                                           // 154
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);                                        // 155
  }                                                                                                                    // 156
                                                                                                                       // 157
  wksExt.f = function(name){                                                                                           // 158
    return wrap(wks(name));                                                                                            // 159
  }                                                                                                                    // 160
}                                                                                                                      // 161
                                                                                                                       // 162
$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});                                           // 163
                                                                                                                       // 164
for(var symbols = (                                                                                                    // 165
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'     // 167
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);                                                           // 168
                                                                                                                       // 169
for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);                               // 170
                                                                                                                       // 171
$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {                                                               // 172
  // 19.4.2.1 Symbol.for(key)                                                                                          // 173
  'for': function(key){                                                                                                // 174
    return has(SymbolRegistry, key += '')                                                                              // 175
      ? SymbolRegistry[key]                                                                                            // 176
      : SymbolRegistry[key] = $Symbol(key);                                                                            // 177
  },                                                                                                                   // 178
  // 19.4.2.5 Symbol.keyFor(sym)                                                                                       // 179
  keyFor: function keyFor(key){                                                                                        // 180
    if(isSymbol(key))return keyOf(SymbolRegistry, key);                                                                // 181
    throw TypeError(key + ' is not a symbol!');                                                                        // 182
  },                                                                                                                   // 183
  useSetter: function(){ setter = true; },                                                                             // 184
  useSimple: function(){ setter = false; }                                                                             // 185
});                                                                                                                    // 186
                                                                                                                       // 187
$export($export.S + $export.F * !USE_NATIVE, 'Object', {                                                               // 188
  // 19.1.2.2 Object.create(O [, Properties])                                                                          // 189
  create: $create,                                                                                                     // 190
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)                                                                  // 191
  defineProperty: $defineProperty,                                                                                     // 192
  // 19.1.2.3 Object.defineProperties(O, Properties)                                                                   // 193
  defineProperties: $defineProperties,                                                                                 // 194
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                    // 195
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,                                                                 // 196
  // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                            // 197
  getOwnPropertyNames: $getOwnPropertyNames,                                                                           // 198
  // 19.1.2.8 Object.getOwnPropertySymbols(O)                                                                          // 199
  getOwnPropertySymbols: $getOwnPropertySymbols                                                                        // 200
});                                                                                                                    // 201
                                                                                                                       // 202
// 24.3.2 JSON.stringify(value [, replacer [, space]])                                                                 // 203
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){                                            // 204
  var S = $Symbol();                                                                                                   // 205
  // MS Edge converts symbol values to JSON as {}                                                                      // 206
  // WebKit converts symbol values to JSON as null                                                                     // 207
  // V8 throws on boxed symbols                                                                                        // 208
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';                   // 209
})), 'JSON', {                                                                                                         // 210
  stringify: function stringify(it){                                                                                   // 211
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined                                     // 212
    var args = [it]                                                                                                    // 213
      , i    = 1                                                                                                       // 214
      , replacer, $replacer;                                                                                           // 215
    while(arguments.length > i)args.push(arguments[i++]);                                                              // 216
    replacer = args[1];                                                                                                // 217
    if(typeof replacer == 'function')$replacer = replacer;                                                             // 218
    if($replacer || !isArray(replacer))replacer = function(key, value){                                                // 219
      if($replacer)value = $replacer.call(this, key, value);                                                           // 220
      if(!isSymbol(value))return value;                                                                                // 221
    };                                                                                                                 // 222
    args[1] = replacer;                                                                                                // 223
    return _stringify.apply($JSON, args);                                                                              // 224
  }                                                                                                                    // 225
});                                                                                                                    // 226
                                                                                                                       // 227
// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)                                                                      // 228
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);  // 229
// 19.4.3.5 Symbol.prototype[@@toStringTag]                                                                            // 230
setToStringTag($Symbol, 'Symbol');                                                                                     // 231
// 20.2.1.9 Math[@@toStringTag]                                                                                        // 232
setToStringTag(Math, 'Math', true);                                                                                    // 233
// 24.3.3 JSON[@@toStringTag]                                                                                          // 234
setToStringTag(global.JSON, 'JSON', true);                                                                             // 235
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_meta.js":["./_uid","./_is-object","./_has","./_object-dp","./_fails",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_meta.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var META     = require('./_uid')('meta')                                                                               // 1
  , isObject = require('./_is-object')                                                                                 // 2
  , has      = require('./_has')                                                                                       // 3
  , setDesc  = require('./_object-dp').f                                                                               // 4
  , id       = 0;                                                                                                      // 5
var isExtensible = Object.isExtensible || function(){                                                                  // 6
  return true;                                                                                                         // 7
};                                                                                                                     // 8
var FREEZE = !require('./_fails')(function(){                                                                          // 9
  return isExtensible(Object.preventExtensions({}));                                                                   // 10
});                                                                                                                    // 11
var setMeta = function(it){                                                                                            // 12
  setDesc(it, META, {value: {                                                                                          // 13
    i: 'O' + ++id, // object ID                                                                                        // 14
    w: {}          // weak collections IDs                                                                             // 15
  }});                                                                                                                 // 16
};                                                                                                                     // 17
var fastKey = function(it, create){                                                                                    // 18
  // return primitive with prefix                                                                                      // 19
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;                       // 20
  if(!has(it, META)){                                                                                                  // 21
    // can't set metadata to uncaught frozen object                                                                    // 22
    if(!isExtensible(it))return 'F';                                                                                   // 23
    // not necessary to add metadata                                                                                   // 24
    if(!create)return 'E';                                                                                             // 25
    // add missing metadata                                                                                            // 26
    setMeta(it);                                                                                                       // 27
  // return object ID                                                                                                  // 28
  } return it[META].i;                                                                                                 // 29
};                                                                                                                     // 30
var getWeak = function(it, create){                                                                                    // 31
  if(!has(it, META)){                                                                                                  // 32
    // can't set metadata to uncaught frozen object                                                                    // 33
    if(!isExtensible(it))return true;                                                                                  // 34
    // not necessary to add metadata                                                                                   // 35
    if(!create)return false;                                                                                           // 36
    // add missing metadata                                                                                            // 37
    setMeta(it);                                                                                                       // 38
  // return hash weak collections IDs                                                                                  // 39
  } return it[META].w;                                                                                                 // 40
};                                                                                                                     // 41
// add metadata on freeze-family methods calling                                                                       // 42
var onFreeze = function(it){                                                                                           // 43
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);                                            // 44
  return it;                                                                                                           // 45
};                                                                                                                     // 46
var meta = module.exports = {                                                                                          // 47
  KEY:      META,                                                                                                      // 48
  NEED:     false,                                                                                                     // 49
  fastKey:  fastKey,                                                                                                   // 50
  getWeak:  getWeak,                                                                                                   // 51
  onFreeze: onFreeze                                                                                                   // 52
};                                                                                                                     // 53
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_wks-define.js":["./_global","./_core","./_library","./_wks-ext","./_object-dp",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_wks-define.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global         = require('./_global')                                                                              // 1
  , core           = require('./_core')                                                                                // 2
  , LIBRARY        = require('./_library')                                                                             // 3
  , wksExt         = require('./_wks-ext')                                                                             // 4
  , defineProperty = require('./_object-dp').f;                                                                        // 5
module.exports = function(name){                                                                                       // 6
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});                                     // 7
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});               // 8
};                                                                                                                     // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_keyof.js":["./_object-keys","./_to-iobject",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_keyof.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var getKeys   = require('./_object-keys')                                                                              // 1
  , toIObject = require('./_to-iobject');                                                                              // 2
module.exports = function(object, el){                                                                                 // 3
  var O      = toIObject(object)                                                                                       // 4
    , keys   = getKeys(O)                                                                                              // 5
    , length = keys.length                                                                                             // 6
    , index  = 0                                                                                                       // 7
    , key;                                                                                                             // 8
  while(length > index)if(O[key = keys[index++]] === el)return key;                                                    // 9
};                                                                                                                     // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_enum-keys.js":["./_object-keys","./_object-gops","./_object-pie",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_enum-keys.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// all enumerable object keys, includes symbols                                                                        // 1
var getKeys = require('./_object-keys')                                                                                // 2
  , gOPS    = require('./_object-gops')                                                                                // 3
  , pIE     = require('./_object-pie');                                                                                // 4
module.exports = function(it){                                                                                         // 5
  var result     = getKeys(it)                                                                                         // 6
    , getSymbols = gOPS.f;                                                                                             // 7
  if(getSymbols){                                                                                                      // 8
    var symbols = getSymbols(it)                                                                                       // 9
      , isEnum  = pIE.f                                                                                                // 10
      , i       = 0                                                                                                    // 11
      , key;                                                                                                           // 12
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);                                  // 13
  } return result;                                                                                                     // 14
};                                                                                                                     // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_is-array.js":["./_cof",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_is-array.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.2 IsArray(argument)                                                                                             // 1
var cof = require('./_cof');                                                                                           // 2
module.exports = Array.isArray || function isArray(arg){                                                               // 3
  return cof(arg) == 'Array';                                                                                          // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gopn-ext.js":["./_to-iobject","./_object-gopn",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gopn-ext.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window                                           // 1
var toIObject = require('./_to-iobject')                                                                               // 2
  , gOPN      = require('./_object-gopn').f                                                                            // 3
  , toString  = {}.toString;                                                                                           // 4
                                                                                                                       // 5
var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames                                    // 6
  ? Object.getOwnPropertyNames(window) : [];                                                                           // 7
                                                                                                                       // 8
var getWindowNames = function(it){                                                                                     // 9
  try {                                                                                                                // 10
    return gOPN(it);                                                                                                   // 11
  } catch(e){                                                                                                          // 12
    return windowNames.slice();                                                                                        // 13
  }                                                                                                                    // 14
};                                                                                                                     // 15
                                                                                                                       // 16
module.exports.f = function getOwnPropertyNames(it){                                                                   // 17
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));             // 18
};                                                                                                                     // 19
                                                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gopn.js":["./_object-keys-internal","./_enum-bug-keys",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gopn.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)                                                                   // 1
var $keys      = require('./_object-keys-internal')                                                                    // 2
  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');                                            // 3
                                                                                                                       // 4
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){                                             // 5
  return $keys(O, hiddenKeys);                                                                                         // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gopd.js":["./_object-pie","./_property-desc","./_to-iobject","./_to-primitive","./_has","./_ie8-dom-define","./_descriptors",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gopd.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var pIE            = require('./_object-pie')                                                                          // 1
  , createDesc     = require('./_property-desc')                                                                       // 2
  , toIObject      = require('./_to-iobject')                                                                          // 3
  , toPrimitive    = require('./_to-primitive')                                                                        // 4
  , has            = require('./_has')                                                                                 // 5
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')                                                                      // 6
  , gOPD           = Object.getOwnPropertyDescriptor;                                                                  // 7
                                                                                                                       // 8
exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){                                // 9
  O = toIObject(O);                                                                                                    // 10
  P = toPrimitive(P, true);                                                                                            // 11
  if(IE8_DOM_DEFINE)try {                                                                                              // 12
    return gOPD(O, P);                                                                                                 // 13
  } catch(e){ /* empty */ }                                                                                            // 14
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);                                                             // 15
};                                                                                                                     // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.to-string.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.object.to-string.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es7.symbol.async-iterator.js":["./_wks-define",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es7.symbol.async-iterator.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./_wks-define')('asyncIterator');                                                                             // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es7.symbol.observable.js":["./_wks-define",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es7.symbol.observable.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./_wks-define')('observable');                                                                                // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.set-prototype-of.js":["./_export","./_set-proto",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.object.set-prototype-of.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.3.19 Object.setPrototypeOf(O, proto)                                                                           // 1
var $export = require('./_export');                                                                                    // 2
$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});                                           // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_set-proto.js":["./_is-object","./_an-object","./_ctx","./_object-gopd",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_set-proto.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Works with __proto__ only. Old v8 can't work with null proto objects.                                               // 1
/* eslint-disable no-proto */                                                                                          // 2
var isObject = require('./_is-object')                                                                                 // 3
  , anObject = require('./_an-object');                                                                                // 4
var check = function(O, proto){                                                                                        // 5
  anObject(O);                                                                                                         // 6
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");                          // 7
};                                                                                                                     // 8
module.exports = {                                                                                                     // 9
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line                                            // 10
    function(test, buggy, set){                                                                                        // 11
      try {                                                                                                            // 12
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);     // 13
        set(test, []);                                                                                                 // 14
        buggy = !(test instanceof Array);                                                                              // 15
      } catch(e){ buggy = true; }                                                                                      // 16
      return function setPrototypeOf(O, proto){                                                                        // 17
        check(O, proto);                                                                                               // 18
        if(buggy)O.__proto__ = proto;                                                                                  // 19
        else set(O, proto);                                                                                            // 20
        return O;                                                                                                      // 21
      };                                                                                                               // 22
    }({}, false) : undefined),                                                                                         // 23
  check: check                                                                                                         // 24
};                                                                                                                     // 25
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.create.js":["./_export","./_object-create",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.object.create.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export')                                                                                     // 1
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 2
$export($export.S, 'Object', {create: require('./_object-create')});                                                   // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}}},"numeral":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/numeral/package.json                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "numeral";                                                                                              // 1
exports.version = "2.0.6";                                                                                             // 2
exports.main = "./numeral.js";                                                                                         // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"numeral.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/numeral/numeral.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*! @preserve                                                                                                          // 1
 * numeral.js                                                                                                          // 2
 * version : 2.0.6                                                                                                     // 3
 * author : Adam Draper                                                                                                // 4
 * license : MIT                                                                                                       // 5
 * http://adamwdraper.github.com/Numeral-js/                                                                           // 6
 */                                                                                                                    // 7
                                                                                                                       // 8
(function (global, factory) {                                                                                          // 9
    if (typeof define === 'function' && define.amd) {                                                                  // 10
        define(factory);                                                                                               // 11
    } else if (typeof module === 'object' && module.exports) {                                                         // 12
        module.exports = factory();                                                                                    // 13
    } else {                                                                                                           // 14
        global.numeral = factory();                                                                                    // 15
    }                                                                                                                  // 16
}(this, function () {                                                                                                  // 17
    /************************************                                                                              // 18
        Variables                                                                                                      // 19
    ************************************/                                                                              // 20
                                                                                                                       // 21
    var numeral,                                                                                                       // 22
        _,                                                                                                             // 23
        VERSION = '2.0.6',                                                                                             // 24
        formats = {},                                                                                                  // 25
        locales = {},                                                                                                  // 26
        defaults = {                                                                                                   // 27
            currentLocale: 'en',                                                                                       // 28
            zeroFormat: null,                                                                                          // 29
            nullFormat: null,                                                                                          // 30
            defaultFormat: '0,0',                                                                                      // 31
            scalePercentBy100: true                                                                                    // 32
        },                                                                                                             // 33
        options = {                                                                                                    // 34
            currentLocale: defaults.currentLocale,                                                                     // 35
            zeroFormat: defaults.zeroFormat,                                                                           // 36
            nullFormat: defaults.nullFormat,                                                                           // 37
            defaultFormat: defaults.defaultFormat,                                                                     // 38
            scalePercentBy100: defaults.scalePercentBy100                                                              // 39
        };                                                                                                             // 40
                                                                                                                       // 41
                                                                                                                       // 42
    /************************************                                                                              // 43
        Constructors                                                                                                   // 44
    ************************************/                                                                              // 45
                                                                                                                       // 46
    // Numeral prototype object                                                                                        // 47
    function Numeral(input, number) {                                                                                  // 48
        this._input = input;                                                                                           // 49
                                                                                                                       // 50
        this._value = number;                                                                                          // 51
    }                                                                                                                  // 52
                                                                                                                       // 53
    numeral = function(input) {                                                                                        // 54
        var value,                                                                                                     // 55
            kind,                                                                                                      // 56
            unformatFunction,                                                                                          // 57
            regexp;                                                                                                    // 58
                                                                                                                       // 59
        if (numeral.isNumeral(input)) {                                                                                // 60
            value = input.value();                                                                                     // 61
        } else if (input === 0 || typeof input === 'undefined') {                                                      // 62
            value = 0;                                                                                                 // 63
        } else if (input === null || _.isNaN(input)) {                                                                 // 64
            value = null;                                                                                              // 65
        } else if (typeof input === 'string') {                                                                        // 66
            if (options.zeroFormat && input === options.zeroFormat) {                                                  // 67
                value = 0;                                                                                             // 68
            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {  // 69
                value = null;                                                                                          // 70
            } else {                                                                                                   // 71
                for (kind in formats) {                                                                                // 72
                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;
                                                                                                                       // 74
                    if (regexp && input.match(regexp)) {                                                               // 75
                        unformatFunction = formats[kind].unformat;                                                     // 76
                                                                                                                       // 77
                        break;                                                                                         // 78
                    }                                                                                                  // 79
                }                                                                                                      // 80
                                                                                                                       // 81
                unformatFunction = unformatFunction || numeral._.stringToNumber;                                       // 82
                                                                                                                       // 83
                value = unformatFunction(input);                                                                       // 84
            }                                                                                                          // 85
        } else {                                                                                                       // 86
            value = Number(input)|| null;                                                                              // 87
        }                                                                                                              // 88
                                                                                                                       // 89
        return new Numeral(input, value);                                                                              // 90
    };                                                                                                                 // 91
                                                                                                                       // 92
    // version number                                                                                                  // 93
    numeral.version = VERSION;                                                                                         // 94
                                                                                                                       // 95
    // compare numeral object                                                                                          // 96
    numeral.isNumeral = function(obj) {                                                                                // 97
        return obj instanceof Numeral;                                                                                 // 98
    };                                                                                                                 // 99
                                                                                                                       // 100
    // helper functions                                                                                                // 101
    numeral._ = _ = {                                                                                                  // 102
        // formats numbers separators, decimals places, signs, abbreviations                                           // 103
        numberToFormat: function(value, format, roundingFunction) {                                                    // 104
            var locale = locales[numeral.options.currentLocale],                                                       // 105
                negP = false,                                                                                          // 106
                optDec = false,                                                                                        // 107
                leadingCount = 0,                                                                                      // 108
                abbr = '',                                                                                             // 109
                trillion = 1000000000000,                                                                              // 110
                billion = 1000000000,                                                                                  // 111
                million = 1000000,                                                                                     // 112
                thousand = 1000,                                                                                       // 113
                decimal = '',                                                                                          // 114
                neg = false,                                                                                           // 115
                abbrForce, // force abbreviation                                                                       // 116
                abs,                                                                                                   // 117
                min,                                                                                                   // 118
                max,                                                                                                   // 119
                power,                                                                                                 // 120
                int,                                                                                                   // 121
                precision,                                                                                             // 122
                signed,                                                                                                // 123
                thousands,                                                                                             // 124
                output;                                                                                                // 125
                                                                                                                       // 126
            // make sure we never format a null value                                                                  // 127
            value = value || 0;                                                                                        // 128
                                                                                                                       // 129
            abs = Math.abs(value);                                                                                     // 130
                                                                                                                       // 131
            // see if we should use parentheses for negative number or if we should prefix with a sign                 // 132
            // if both are present we default to parentheses                                                           // 133
            if (numeral._.includes(format, '(')) {                                                                     // 134
                negP = true;                                                                                           // 135
                format = format.replace(/[\(|\)]/g, '');                                                               // 136
            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {                           // 137
                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;
                format = format.replace(/[\+|\-]/g, '');                                                               // 139
            }                                                                                                          // 140
                                                                                                                       // 141
            // see if abbreviation is wanted                                                                           // 142
            if (numeral._.includes(format, 'a')) {                                                                     // 143
                abbrForce = format.match(/a(k|m|b|t)?/);                                                               // 144
                                                                                                                       // 145
                abbrForce = abbrForce ? abbrForce[1] : false;                                                          // 146
                                                                                                                       // 147
                // check for space before abbreviation                                                                 // 148
                if (numeral._.includes(format, ' a')) {                                                                // 149
                    abbr = ' ';                                                                                        // 150
                }                                                                                                      // 151
                                                                                                                       // 152
                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');                                            // 153
                                                                                                                       // 154
                if (abs >= trillion && !abbrForce || abbrForce === 't') {                                              // 155
                    // trillion                                                                                        // 156
                    abbr += locale.abbreviations.trillion;                                                             // 157
                    value = value / trillion;                                                                          // 158
                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {                      // 159
                    // billion                                                                                         // 160
                    abbr += locale.abbreviations.billion;                                                              // 161
                    value = value / billion;                                                                           // 162
                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {                       // 163
                    // million                                                                                         // 164
                    abbr += locale.abbreviations.million;                                                              // 165
                    value = value / million;                                                                           // 166
                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {                      // 167
                    // thousand                                                                                        // 168
                    abbr += locale.abbreviations.thousand;                                                             // 169
                    value = value / thousand;                                                                          // 170
                }                                                                                                      // 171
            }                                                                                                          // 172
                                                                                                                       // 173
            // check for optional decimals                                                                             // 174
            if (numeral._.includes(format, '[.]')) {                                                                   // 175
                optDec = true;                                                                                         // 176
                format = format.replace('[.]', '.');                                                                   // 177
            }                                                                                                          // 178
                                                                                                                       // 179
            // break number and format                                                                                 // 180
            int = value.toString().split('.')[0];                                                                      // 181
            precision = format.split('.')[1];                                                                          // 182
            thousands = format.indexOf(',');                                                                           // 183
            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;                              // 184
                                                                                                                       // 185
            if (precision) {                                                                                           // 186
                if (numeral._.includes(precision, '[')) {                                                              // 187
                    precision = precision.replace(']', '');                                                            // 188
                    precision = precision.split('[');                                                                  // 189
                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
                } else {                                                                                               // 191
                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);                            // 192
                }                                                                                                      // 193
                                                                                                                       // 194
                int = decimal.split('.')[0];                                                                           // 195
                                                                                                                       // 196
                if (numeral._.includes(decimal, '.')) {                                                                // 197
                    decimal = locale.delimiters.decimal + decimal.split('.')[1];                                       // 198
                } else {                                                                                               // 199
                    decimal = '';                                                                                      // 200
                }                                                                                                      // 201
                                                                                                                       // 202
                if (optDec && Number(decimal.slice(1)) === 0) {                                                        // 203
                    decimal = '';                                                                                      // 204
                }                                                                                                      // 205
            } else {                                                                                                   // 206
                int = numeral._.toFixed(value, 0, roundingFunction);                                                   // 207
            }                                                                                                          // 208
                                                                                                                       // 209
            // check abbreviation again after rounding                                                                 // 210
            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {                 // 211
                int = String(Number(int) / 1000);                                                                      // 212
                                                                                                                       // 213
                switch (abbr) {                                                                                        // 214
                    case locale.abbreviations.thousand:                                                                // 215
                        abbr = locale.abbreviations.million;                                                           // 216
                        break;                                                                                         // 217
                    case locale.abbreviations.million:                                                                 // 218
                        abbr = locale.abbreviations.billion;                                                           // 219
                        break;                                                                                         // 220
                    case locale.abbreviations.billion:                                                                 // 221
                        abbr = locale.abbreviations.trillion;                                                          // 222
                        break;                                                                                         // 223
                }                                                                                                      // 224
            }                                                                                                          // 225
                                                                                                                       // 226
                                                                                                                       // 227
            // format number                                                                                           // 228
            if (numeral._.includes(int, '-')) {                                                                        // 229
                int = int.slice(1);                                                                                    // 230
                neg = true;                                                                                            // 231
            }                                                                                                          // 232
                                                                                                                       // 233
            if (int.length < leadingCount) {                                                                           // 234
                for (var i = leadingCount - int.length; i > 0; i--) {                                                  // 235
                    int = '0' + int;                                                                                   // 236
                }                                                                                                      // 237
            }                                                                                                          // 238
                                                                                                                       // 239
            if (thousands > -1) {                                                                                      // 240
                int = int.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + locale.delimiters.thousands);           // 241
            }                                                                                                          // 242
                                                                                                                       // 243
            if (format.indexOf('.') === 0) {                                                                           // 244
                int = '';                                                                                              // 245
            }                                                                                                          // 246
                                                                                                                       // 247
            output = int + decimal + (abbr ? abbr : '');                                                               // 248
                                                                                                                       // 249
            if (negP) {                                                                                                // 250
                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');                                 // 251
            } else {                                                                                                   // 252
                if (signed >= 0) {                                                                                     // 253
                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');                   // 254
                } else if (neg) {                                                                                      // 255
                    output = '-' + output;                                                                             // 256
                }                                                                                                      // 257
            }                                                                                                          // 258
                                                                                                                       // 259
            return output;                                                                                             // 260
        },                                                                                                             // 261
        // unformats numbers separators, decimals places, signs, abbreviations                                         // 262
        stringToNumber: function(string) {                                                                             // 263
            var locale = locales[options.currentLocale],                                                               // 264
                stringOriginal = string,                                                                               // 265
                abbreviations = {                                                                                      // 266
                    thousand: 3,                                                                                       // 267
                    million: 6,                                                                                        // 268
                    billion: 9,                                                                                        // 269
                    trillion: 12                                                                                       // 270
                },                                                                                                     // 271
                abbreviation,                                                                                          // 272
                value,                                                                                                 // 273
                i,                                                                                                     // 274
                regexp;                                                                                                // 275
                                                                                                                       // 276
            if (options.zeroFormat && string === options.zeroFormat) {                                                 // 277
                value = 0;                                                                                             // 278
            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {
                value = null;                                                                                          // 280
            } else {                                                                                                   // 281
                value = 1;                                                                                             // 282
                                                                                                                       // 283
                if (locale.delimiters.decimal !== '.') {                                                               // 284
                    string = string.replace(/\./g, '').replace(locale.delimiters.decimal, '.');                        // 285
                }                                                                                                      // 286
                                                                                                                       // 287
                for (abbreviation in abbreviations) {                                                                  // 288
                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\)|(\\' + locale.currency.symbol + ')?(?:\\))?)?$');
                                                                                                                       // 290
                    if (stringOriginal.match(regexp)) {                                                                // 291
                        value *= Math.pow(10, abbreviations[abbreviation]);                                            // 292
                        break;                                                                                         // 293
                    }                                                                                                  // 294
                }                                                                                                      // 295
                                                                                                                       // 296
                // check for negative number                                                                           // 297
                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;
                                                                                                                       // 299
                // remove non numbers                                                                                  // 300
                string = string.replace(/[^0-9\.]+/g, '');                                                             // 301
                                                                                                                       // 302
                value *= Number(string);                                                                               // 303
            }                                                                                                          // 304
                                                                                                                       // 305
            return value;                                                                                              // 306
        },                                                                                                             // 307
        isNaN: function(value) {                                                                                       // 308
            return typeof value === 'number' && isNaN(value);                                                          // 309
        },                                                                                                             // 310
        includes: function(string, search) {                                                                           // 311
            return string.indexOf(search) !== -1;                                                                      // 312
        },                                                                                                             // 313
        insert: function(string, subString, start) {                                                                   // 314
            return string.slice(0, start) + subString + string.slice(start);                                           // 315
        },                                                                                                             // 316
        reduce: function(array, callback /*, initialValue*/) {                                                         // 317
            if (this === null) {                                                                                       // 318
                throw new TypeError('Array.prototype.reduce called on null or undefined');                             // 319
            }                                                                                                          // 320
                                                                                                                       // 321
            if (typeof callback !== 'function') {                                                                      // 322
                throw new TypeError(callback + ' is not a function');                                                  // 323
            }                                                                                                          // 324
                                                                                                                       // 325
            var t = Object(array),                                                                                     // 326
                len = t.length >>> 0,                                                                                  // 327
                k = 0,                                                                                                 // 328
                value;                                                                                                 // 329
                                                                                                                       // 330
            if (arguments.length === 3) {                                                                              // 331
                value = arguments[2];                                                                                  // 332
            } else {                                                                                                   // 333
                while (k < len && !(k in t)) {                                                                         // 334
                    k++;                                                                                               // 335
                }                                                                                                      // 336
                                                                                                                       // 337
                if (k >= len) {                                                                                        // 338
                    throw new TypeError('Reduce of empty array with no initial value');                                // 339
                }                                                                                                      // 340
                                                                                                                       // 341
                value = t[k++];                                                                                        // 342
            }                                                                                                          // 343
            for (; k < len; k++) {                                                                                     // 344
                if (k in t) {                                                                                          // 345
                    value = callback(value, t[k], k, t);                                                               // 346
                }                                                                                                      // 347
            }                                                                                                          // 348
            return value;                                                                                              // 349
        },                                                                                                             // 350
        /**                                                                                                            // 351
         * Computes the multiplier necessary to make x >= 1,                                                           // 352
         * effectively eliminating miscalculations caused by                                                           // 353
         * finite precision.                                                                                           // 354
         */                                                                                                            // 355
        multiplier: function (x) {                                                                                     // 356
            var parts = x.toString().split('.');                                                                       // 357
                                                                                                                       // 358
            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);                                               // 359
        },                                                                                                             // 360
        /**                                                                                                            // 361
         * Given a variable number of arguments, returns the maximum                                                   // 362
         * multiplier that must be used to normalize an operation involving                                            // 363
         * all of them.                                                                                                // 364
         */                                                                                                            // 365
        correctionFactor: function () {                                                                                // 366
            var args = Array.prototype.slice.call(arguments);                                                          // 367
                                                                                                                       // 368
            return args.reduce(function(accum, next) {                                                                 // 369
                var mn = _.multiplier(next);                                                                           // 370
                return accum > mn ? accum : mn;                                                                        // 371
            }, 1);                                                                                                     // 372
        },                                                                                                             // 373
        /**                                                                                                            // 374
         * Implementation of toFixed() that treats floats more like decimals                                           // 375
         *                                                                                                             // 376
         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present                               // 377
         * problems for accounting- and finance-related software.                                                      // 378
         */                                                                                                            // 379
        toFixed: function(value, maxDecimals, roundingFunction, optionals) {                                           // 380
            var splitValue = value.toString().split('.'),                                                              // 381
                minDecimals = maxDecimals - (optionals || 0),                                                          // 382
                boundedPrecision,                                                                                      // 383
                optionalsRegExp,                                                                                       // 384
                power,                                                                                                 // 385
                output;                                                                                                // 386
                                                                                                                       // 387
            // Use the smallest precision value possible to avoid errors from floating point representation            // 388
            if (splitValue.length === 2) {                                                                             // 389
              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);                   // 390
            } else {                                                                                                   // 391
              boundedPrecision = minDecimals;                                                                          // 392
            }                                                                                                          // 393
                                                                                                                       // 394
            power = Math.pow(10, boundedPrecision);                                                                    // 395
                                                                                                                       // 396
            // Multiply up by precision, round accurately, then divide and use native toFixed():                       // 397
            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);            // 398
                                                                                                                       // 399
            if (optionals > maxDecimals - boundedPrecision) {                                                          // 400
                optionalsRegExp = new RegExp('\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');      // 401
                output = output.replace(optionalsRegExp, '');                                                          // 402
            }                                                                                                          // 403
                                                                                                                       // 404
            return output;                                                                                             // 405
        }                                                                                                              // 406
    };                                                                                                                 // 407
                                                                                                                       // 408
    // avaliable options                                                                                               // 409
    numeral.options = options;                                                                                         // 410
                                                                                                                       // 411
    // avaliable formats                                                                                               // 412
    numeral.formats = formats;                                                                                         // 413
                                                                                                                       // 414
    // avaliable formats                                                                                               // 415
    numeral.locales = locales;                                                                                         // 416
                                                                                                                       // 417
    // This function sets the current locale.  If                                                                      // 418
    // no arguments are passed in, it will simply return the current global                                            // 419
    // locale key.                                                                                                     // 420
    numeral.locale = function(key) {                                                                                   // 421
        if (key) {                                                                                                     // 422
            options.currentLocale = key.toLowerCase();                                                                 // 423
        }                                                                                                              // 424
                                                                                                                       // 425
        return options.currentLocale;                                                                                  // 426
    };                                                                                                                 // 427
                                                                                                                       // 428
    // This function provides access to the loaded locale data.  If                                                    // 429
    // no arguments are passed in, it will simply return the current                                                   // 430
    // global locale object.                                                                                           // 431
    numeral.localeData = function(key) {                                                                               // 432
        if (!key) {                                                                                                    // 433
            return locales[options.currentLocale];                                                                     // 434
        }                                                                                                              // 435
                                                                                                                       // 436
        key = key.toLowerCase();                                                                                       // 437
                                                                                                                       // 438
        if (!locales[key]) {                                                                                           // 439
            throw new Error('Unknown locale : ' + key);                                                                // 440
        }                                                                                                              // 441
                                                                                                                       // 442
        return locales[key];                                                                                           // 443
    };                                                                                                                 // 444
                                                                                                                       // 445
    numeral.reset = function() {                                                                                       // 446
        for (var property in defaults) {                                                                               // 447
            options[property] = defaults[property];                                                                    // 448
        }                                                                                                              // 449
    };                                                                                                                 // 450
                                                                                                                       // 451
    numeral.zeroFormat = function(format) {                                                                            // 452
        options.zeroFormat = typeof(format) === 'string' ? format : null;                                              // 453
    };                                                                                                                 // 454
                                                                                                                       // 455
    numeral.nullFormat = function (format) {                                                                           // 456
        options.nullFormat = typeof(format) === 'string' ? format : null;                                              // 457
    };                                                                                                                 // 458
                                                                                                                       // 459
    numeral.defaultFormat = function(format) {                                                                         // 460
        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';                                          // 461
    };                                                                                                                 // 462
                                                                                                                       // 463
    numeral.register = function(type, name, format) {                                                                  // 464
        name = name.toLowerCase();                                                                                     // 465
                                                                                                                       // 466
        if (this[type + 's'][name]) {                                                                                  // 467
            throw new TypeError(name + ' ' + type + ' already registered.');                                           // 468
        }                                                                                                              // 469
                                                                                                                       // 470
        this[type + 's'][name] = format;                                                                               // 471
                                                                                                                       // 472
        return format;                                                                                                 // 473
    };                                                                                                                 // 474
                                                                                                                       // 475
                                                                                                                       // 476
    numeral.validate = function(val, culture) {                                                                        // 477
        var _decimalSep,                                                                                               // 478
            _thousandSep,                                                                                              // 479
            _currSymbol,                                                                                               // 480
            _valArray,                                                                                                 // 481
            _abbrObj,                                                                                                  // 482
            _thousandRegEx,                                                                                            // 483
            localeData,                                                                                                // 484
            temp;                                                                                                      // 485
                                                                                                                       // 486
        //coerce val to string                                                                                         // 487
        if (typeof val !== 'string') {                                                                                 // 488
            val += '';                                                                                                 // 489
                                                                                                                       // 490
            if (console.warn) {                                                                                        // 491
                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);                       // 492
            }                                                                                                          // 493
        }                                                                                                              // 494
                                                                                                                       // 495
        //trim whitespaces from either sides                                                                           // 496
        val = val.trim();                                                                                              // 497
                                                                                                                       // 498
        //if val is just digits return true                                                                            // 499
        if (!!val.match(/^\d+$/)) {                                                                                    // 500
            return true;                                                                                               // 501
        }                                                                                                              // 502
                                                                                                                       // 503
        //if val is empty return false                                                                                 // 504
        if (val === '') {                                                                                              // 505
            return false;                                                                                              // 506
        }                                                                                                              // 507
                                                                                                                       // 508
        //get the decimal and thousands separator from numeral.localeData                                              // 509
        try {                                                                                                          // 510
            //check if the culture is understood by numeral. if not, default it to current locale                      // 511
            localeData = numeral.localeData(culture);                                                                  // 512
        } catch (e) {                                                                                                  // 513
            localeData = numeral.localeData(numeral.locale());                                                         // 514
        }                                                                                                              // 515
                                                                                                                       // 516
        //setup the delimiters and currency symbol based on culture/locale                                             // 517
        _currSymbol = localeData.currency.symbol;                                                                      // 518
        _abbrObj = localeData.abbreviations;                                                                           // 519
        _decimalSep = localeData.delimiters.decimal;                                                                   // 520
        if (localeData.delimiters.thousands === '.') {                                                                 // 521
            _thousandSep = '\\.';                                                                                      // 522
        } else {                                                                                                       // 523
            _thousandSep = localeData.delimiters.thousands;                                                            // 524
        }                                                                                                              // 525
                                                                                                                       // 526
        // validating currency symbol                                                                                  // 527
        temp = val.match(/^[^\d]+/);                                                                                   // 528
        if (temp !== null) {                                                                                           // 529
            val = val.substr(1);                                                                                       // 530
            if (temp[0] !== _currSymbol) {                                                                             // 531
                return false;                                                                                          // 532
            }                                                                                                          // 533
        }                                                                                                              // 534
                                                                                                                       // 535
        //validating abbreviation symbol                                                                               // 536
        temp = val.match(/[^\d]+$/);                                                                                   // 537
        if (temp !== null) {                                                                                           // 538
            val = val.slice(0, -1);                                                                                    // 539
            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {
                return false;                                                                                          // 541
            }                                                                                                          // 542
        }                                                                                                              // 543
                                                                                                                       // 544
        _thousandRegEx = new RegExp(_thousandSep + '{2}');                                                             // 545
                                                                                                                       // 546
        if (!val.match(/[^\d.,]/g)) {                                                                                  // 547
            _valArray = val.split(_decimalSep);                                                                        // 548
            if (_valArray.length > 2) {                                                                                // 549
                return false;                                                                                          // 550
            } else {                                                                                                   // 551
                if (_valArray.length < 2) {                                                                            // 552
                    return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx));               // 553
                } else {                                                                                               // 554
                    if (_valArray[0].length === 1) {                                                                   // 555
                        return ( !! _valArray[0].match(/^\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
                    } else {                                                                                           // 557
                        return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
                    }                                                                                                  // 559
                }                                                                                                      // 560
            }                                                                                                          // 561
        }                                                                                                              // 562
                                                                                                                       // 563
        return false;                                                                                                  // 564
    };                                                                                                                 // 565
                                                                                                                       // 566
                                                                                                                       // 567
    /************************************                                                                              // 568
        Numeral Prototype                                                                                              // 569
    ************************************/                                                                              // 570
                                                                                                                       // 571
    numeral.fn = Numeral.prototype = {                                                                                 // 572
        clone: function() {                                                                                            // 573
            return numeral(this);                                                                                      // 574
        },                                                                                                             // 575
        format: function(inputString, roundingFunction) {                                                              // 576
            var value = this._value,                                                                                   // 577
                format = inputString || options.defaultFormat,                                                         // 578
                kind,                                                                                                  // 579
                output,                                                                                                // 580
                formatFunction;                                                                                        // 581
                                                                                                                       // 582
            // make sure we have a roundingFunction                                                                    // 583
            roundingFunction = roundingFunction || Math.round;                                                         // 584
                                                                                                                       // 585
            // format based on value                                                                                   // 586
            if (value === 0 && options.zeroFormat !== null) {                                                          // 587
                output = options.zeroFormat;                                                                           // 588
            } else if (value === null && options.nullFormat !== null) {                                                // 589
                output = options.nullFormat;                                                                           // 590
            } else {                                                                                                   // 591
                for (kind in formats) {                                                                                // 592
                    if (format.match(formats[kind].regexps.format)) {                                                  // 593
                        formatFunction = formats[kind].format;                                                         // 594
                                                                                                                       // 595
                        break;                                                                                         // 596
                    }                                                                                                  // 597
                }                                                                                                      // 598
                                                                                                                       // 599
                formatFunction = formatFunction || numeral._.numberToFormat;                                           // 600
                                                                                                                       // 601
                output = formatFunction(value, format, roundingFunction);                                              // 602
            }                                                                                                          // 603
                                                                                                                       // 604
            return output;                                                                                             // 605
        },                                                                                                             // 606
        value: function() {                                                                                            // 607
            return this._value;                                                                                        // 608
        },                                                                                                             // 609
        input: function() {                                                                                            // 610
            return this._input;                                                                                        // 611
        },                                                                                                             // 612
        set: function(value) {                                                                                         // 613
            this._value = Number(value);                                                                               // 614
                                                                                                                       // 615
            return this;                                                                                               // 616
        },                                                                                                             // 617
        add: function(value) {                                                                                         // 618
            var corrFactor = _.correctionFactor.call(null, this._value, value);                                        // 619
                                                                                                                       // 620
            function cback(accum, curr, currI, O) {                                                                    // 621
                return accum + Math.round(corrFactor * curr);                                                          // 622
            }                                                                                                          // 623
                                                                                                                       // 624
            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;                                       // 625
                                                                                                                       // 626
            return this;                                                                                               // 627
        },                                                                                                             // 628
        subtract: function(value) {                                                                                    // 629
            var corrFactor = _.correctionFactor.call(null, this._value, value);                                        // 630
                                                                                                                       // 631
            function cback(accum, curr, currI, O) {                                                                    // 632
                return accum - Math.round(corrFactor * curr);                                                          // 633
            }                                                                                                          // 634
                                                                                                                       // 635
            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;                 // 636
                                                                                                                       // 637
            return this;                                                                                               // 638
        },                                                                                                             // 639
        multiply: function(value) {                                                                                    // 640
            function cback(accum, curr, currI, O) {                                                                    // 641
                var corrFactor = _.correctionFactor(accum, curr);                                                      // 642
                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);
            }                                                                                                          // 644
                                                                                                                       // 645
            this._value = _.reduce([this._value, value], cback, 1);                                                    // 646
                                                                                                                       // 647
            return this;                                                                                               // 648
        },                                                                                                             // 649
        divide: function(value) {                                                                                      // 650
            function cback(accum, curr, currI, O) {                                                                    // 651
                var corrFactor = _.correctionFactor(accum, curr);                                                      // 652
                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);                                 // 653
            }                                                                                                          // 654
                                                                                                                       // 655
            this._value = _.reduce([this._value, value], cback);                                                       // 656
                                                                                                                       // 657
            return this;                                                                                               // 658
        },                                                                                                             // 659
        difference: function(value) {                                                                                  // 660
            return Math.abs(numeral(this._value).subtract(value).value());                                             // 661
        }                                                                                                              // 662
    };                                                                                                                 // 663
                                                                                                                       // 664
    /************************************                                                                              // 665
        Default Locale && Format                                                                                       // 666
    ************************************/                                                                              // 667
                                                                                                                       // 668
    numeral.register('locale', 'en', {                                                                                 // 669
        delimiters: {                                                                                                  // 670
            thousands: ',',                                                                                            // 671
            decimal: '.'                                                                                               // 672
        },                                                                                                             // 673
        abbreviations: {                                                                                               // 674
            thousand: 'k',                                                                                             // 675
            million: 'm',                                                                                              // 676
            billion: 'b',                                                                                              // 677
            trillion: 't'                                                                                              // 678
        },                                                                                                             // 679
        ordinal: function(number) {                                                                                    // 680
            var b = number % 10;                                                                                       // 681
            return (~~(number % 100 / 10) === 1) ? 'th' :                                                              // 682
                (b === 1) ? 'st' :                                                                                     // 683
                (b === 2) ? 'nd' :                                                                                     // 684
                (b === 3) ? 'rd' : 'th';                                                                               // 685
        },                                                                                                             // 686
        currency: {                                                                                                    // 687
            symbol: '$'                                                                                                // 688
        }                                                                                                              // 689
    });                                                                                                                // 690
                                                                                                                       // 691
                                                                                                                       // 692
                                                                                                                       // 693
(function() {                                                                                                          // 694
        numeral.register('format', 'bps', {                                                                            // 695
            regexps: {                                                                                                 // 696
                format: /(BPS)/,                                                                                       // 697
                unformat: /(BPS)/                                                                                      // 698
            },                                                                                                         // 699
            format: function(value, format, roundingFunction) {                                                        // 700
                var space = numeral._.includes(format, ' BPS') ? ' ' : '',                                             // 701
                    output;                                                                                            // 702
                                                                                                                       // 703
                value = value * 10000;                                                                                 // 704
                                                                                                                       // 705
                // check for space before BPS                                                                          // 706
                format = format.replace(/\s?BPS/, '');                                                                 // 707
                                                                                                                       // 708
                output = numeral._.numberToFormat(value, format, roundingFunction);                                    // 709
                                                                                                                       // 710
                if (numeral._.includes(output, ')')) {                                                                 // 711
                    output = output.split('');                                                                         // 712
                                                                                                                       // 713
                    output.splice(-1, 0, space + 'BPS');                                                               // 714
                                                                                                                       // 715
                    output = output.join('');                                                                          // 716
                } else {                                                                                               // 717
                    output = output + space + 'BPS';                                                                   // 718
                }                                                                                                      // 719
                                                                                                                       // 720
                return output;                                                                                         // 721
            },                                                                                                         // 722
            unformat: function(string) {                                                                               // 723
                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);                                       // 724
            }                                                                                                          // 725
        });                                                                                                            // 726
})();                                                                                                                  // 727
                                                                                                                       // 728
                                                                                                                       // 729
(function() {                                                                                                          // 730
        var decimal = {                                                                                                // 731
            base: 1000,                                                                                                // 732
            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']                                            // 733
        },                                                                                                             // 734
        binary = {                                                                                                     // 735
            base: 1024,                                                                                                // 736
            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']                                    // 737
        };                                                                                                             // 738
                                                                                                                       // 739
    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {                                // 740
            return decimal.suffixes.indexOf(item) < 0;                                                                 // 741
        }));                                                                                                           // 742
        var unformatRegex = allSuffixes.join('|');                                                                     // 743
        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)                                  // 744
        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';                                             // 745
                                                                                                                       // 746
    numeral.register('format', 'bytes', {                                                                              // 747
        regexps: {                                                                                                     // 748
            format: /([0\s]i?b)/,                                                                                      // 749
            unformat: new RegExp(unformatRegex)                                                                        // 750
        },                                                                                                             // 751
        format: function(value, format, roundingFunction) {                                                            // 752
            var output,                                                                                                // 753
                bytes = numeral._.includes(format, 'ib') ? binary : decimal,                                           // 754
                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',             // 755
                power,                                                                                                 // 756
                min,                                                                                                   // 757
                max;                                                                                                   // 758
                                                                                                                       // 759
            // check for space before                                                                                  // 760
            format = format.replace(/\s?i?b/, '');                                                                     // 761
                                                                                                                       // 762
            for (power = 0; power <= bytes.suffixes.length; power++) {                                                 // 763
                min = Math.pow(bytes.base, power);                                                                     // 764
                max = Math.pow(bytes.base, power + 1);                                                                 // 765
                                                                                                                       // 766
                if (value === null || value === 0 || value >= min && value < max) {                                    // 767
                    suffix += bytes.suffixes[power];                                                                   // 768
                                                                                                                       // 769
                    if (min > 0) {                                                                                     // 770
                        value = value / min;                                                                           // 771
                    }                                                                                                  // 772
                                                                                                                       // 773
                    break;                                                                                             // 774
                }                                                                                                      // 775
            }                                                                                                          // 776
                                                                                                                       // 777
            output = numeral._.numberToFormat(value, format, roundingFunction);                                        // 778
                                                                                                                       // 779
            return output + suffix;                                                                                    // 780
        },                                                                                                             // 781
        unformat: function(string) {                                                                                   // 782
            var value = numeral._.stringToNumber(string),                                                              // 783
                power,                                                                                                 // 784
                bytesMultiplier;                                                                                       // 785
                                                                                                                       // 786
            if (value) {                                                                                               // 787
                for (power = decimal.suffixes.length - 1; power >= 0; power--) {                                       // 788
                    if (numeral._.includes(string, decimal.suffixes[power])) {                                         // 789
                        bytesMultiplier = Math.pow(decimal.base, power);                                               // 790
                                                                                                                       // 791
                        break;                                                                                         // 792
                    }                                                                                                  // 793
                                                                                                                       // 794
                    if (numeral._.includes(string, binary.suffixes[power])) {                                          // 795
                        bytesMultiplier = Math.pow(binary.base, power);                                                // 796
                                                                                                                       // 797
                        break;                                                                                         // 798
                    }                                                                                                  // 799
                }                                                                                                      // 800
                                                                                                                       // 801
                value *= (bytesMultiplier || 1);                                                                       // 802
            }                                                                                                          // 803
                                                                                                                       // 804
            return value;                                                                                              // 805
        }                                                                                                              // 806
    });                                                                                                                // 807
})();                                                                                                                  // 808
                                                                                                                       // 809
                                                                                                                       // 810
(function() {                                                                                                          // 811
        numeral.register('format', 'currency', {                                                                       // 812
        regexps: {                                                                                                     // 813
            format: /(\$)/                                                                                             // 814
        },                                                                                                             // 815
        format: function(value, format, roundingFunction) {                                                            // 816
            var locale = numeral.locales[numeral.options.currentLocale],                                               // 817
                symbols = {                                                                                            // 818
                    before: format.match(/^([\+|\-|\(|\s|\$]*)/)[0],                                                   // 819
                    after: format.match(/([\+|\-|\)|\s|\$]*)$/)[0]                                                     // 820
                },                                                                                                     // 821
                output,                                                                                                // 822
                symbol,                                                                                                // 823
                i;                                                                                                     // 824
                                                                                                                       // 825
            // strip format of spaces and $                                                                            // 826
            format = format.replace(/\s?\$\s?/, '');                                                                   // 827
                                                                                                                       // 828
            // format the number                                                                                       // 829
            output = numeral._.numberToFormat(value, format, roundingFunction);                                        // 830
                                                                                                                       // 831
            // update the before and after based on value                                                              // 832
            if (value >= 0) {                                                                                          // 833
                symbols.before = symbols.before.replace(/[\-\(]/, '');                                                 // 834
                symbols.after = symbols.after.replace(/[\-\)]/, '');                                                   // 835
            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {
                symbols.before = '-' + symbols.before;                                                                 // 837
            }                                                                                                          // 838
                                                                                                                       // 839
            // loop through each before symbol                                                                         // 840
            for (i = 0; i < symbols.before.length; i++) {                                                              // 841
                symbol = symbols.before[i];                                                                            // 842
                                                                                                                       // 843
                switch (symbol) {                                                                                      // 844
                    case '$':                                                                                          // 845
                        output = numeral._.insert(output, locale.currency.symbol, i);                                  // 846
                        break;                                                                                         // 847
                    case ' ':                                                                                          // 848
                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);                 // 849
                        break;                                                                                         // 850
                }                                                                                                      // 851
            }                                                                                                          // 852
                                                                                                                       // 853
            // loop through each after symbol                                                                          // 854
            for (i = symbols.after.length - 1; i >= 0; i--) {                                                          // 855
                symbol = symbols.after[i];                                                                             // 856
                                                                                                                       // 857
                switch (symbol) {                                                                                      // 858
                    case '$':                                                                                          // 859
                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));
                        break;                                                                                         // 861
                    case ' ':                                                                                          // 862
                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));
                        break;                                                                                         // 864
                }                                                                                                      // 865
            }                                                                                                          // 866
                                                                                                                       // 867
                                                                                                                       // 868
            return output;                                                                                             // 869
        }                                                                                                              // 870
    });                                                                                                                // 871
})();                                                                                                                  // 872
                                                                                                                       // 873
                                                                                                                       // 874
(function() {                                                                                                          // 875
        numeral.register('format', 'exponential', {                                                                    // 876
        regexps: {                                                                                                     // 877
            format: /(e\+|e-)/,                                                                                        // 878
            unformat: /(e\+|e-)/                                                                                       // 879
        },                                                                                                             // 880
        format: function(value, format, roundingFunction) {                                                            // 881
            var output,                                                                                                // 882
                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',   // 883
                parts = exponential.split('e');                                                                        // 884
                                                                                                                       // 885
            format = format.replace(/e[\+|\-]{1}0/, '');                                                               // 886
                                                                                                                       // 887
            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);                             // 888
                                                                                                                       // 889
            return output + 'e' + parts[1];                                                                            // 890
        },                                                                                                             // 891
        unformat: function(string) {                                                                                   // 892
            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),                    // 893
                value = Number(parts[0]),                                                                              // 894
                power = Number(parts[1]);                                                                              // 895
                                                                                                                       // 896
            power = numeral._.includes(string, 'e-') ? power *= -1 : power;                                            // 897
                                                                                                                       // 898
            function cback(accum, curr, currI, O) {                                                                    // 899
                var corrFactor = numeral._.correctionFactor(accum, curr),                                              // 900
                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);                      // 901
                return num;                                                                                            // 902
            }                                                                                                          // 903
                                                                                                                       // 904
            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);                                           // 905
        }                                                                                                              // 906
    });                                                                                                                // 907
})();                                                                                                                  // 908
                                                                                                                       // 909
                                                                                                                       // 910
(function() {                                                                                                          // 911
        numeral.register('format', 'ordinal', {                                                                        // 912
        regexps: {                                                                                                     // 913
            format: /(o)/                                                                                              // 914
        },                                                                                                             // 915
        format: function(value, format, roundingFunction) {                                                            // 916
            var locale = numeral.locales[numeral.options.currentLocale],                                               // 917
                output,                                                                                                // 918
                ordinal = numeral._.includes(format, ' o') ? ' ' : '';                                                 // 919
                                                                                                                       // 920
            // check for space before                                                                                  // 921
            format = format.replace(/\s?o/, '');                                                                       // 922
                                                                                                                       // 923
            ordinal += locale.ordinal(value);                                                                          // 924
                                                                                                                       // 925
            output = numeral._.numberToFormat(value, format, roundingFunction);                                        // 926
                                                                                                                       // 927
            return output + ordinal;                                                                                   // 928
        }                                                                                                              // 929
    });                                                                                                                // 930
})();                                                                                                                  // 931
                                                                                                                       // 932
                                                                                                                       // 933
(function() {                                                                                                          // 934
        numeral.register('format', 'percentage', {                                                                     // 935
        regexps: {                                                                                                     // 936
            format: /(%)/,                                                                                             // 937
            unformat: /(%)/                                                                                            // 938
        },                                                                                                             // 939
        format: function(value, format, roundingFunction) {                                                            // 940
            var space = numeral._.includes(format, ' %') ? ' ' : '',                                                   // 941
                output;                                                                                                // 942
                                                                                                                       // 943
            if (numeral.options.scalePercentBy100) {                                                                   // 944
                value = value * 100;                                                                                   // 945
            }                                                                                                          // 946
                                                                                                                       // 947
            // check for space before %                                                                                // 948
            format = format.replace(/\s?\%/, '');                                                                      // 949
                                                                                                                       // 950
            output = numeral._.numberToFormat(value, format, roundingFunction);                                        // 951
                                                                                                                       // 952
            if (numeral._.includes(output, ')')) {                                                                     // 953
                output = output.split('');                                                                             // 954
                                                                                                                       // 955
                output.splice(-1, 0, space + '%');                                                                     // 956
                                                                                                                       // 957
                output = output.join('');                                                                              // 958
            } else {                                                                                                   // 959
                output = output + space + '%';                                                                         // 960
            }                                                                                                          // 961
                                                                                                                       // 962
            return output;                                                                                             // 963
        },                                                                                                             // 964
        unformat: function(string) {                                                                                   // 965
            var number = numeral._.stringToNumber(string);                                                             // 966
            if (numeral.options.scalePercentBy100) {                                                                   // 967
                return number * 0.01;                                                                                  // 968
            }                                                                                                          // 969
            return number;                                                                                             // 970
        }                                                                                                              // 971
    });                                                                                                                // 972
})();                                                                                                                  // 973
                                                                                                                       // 974
                                                                                                                       // 975
(function() {                                                                                                          // 976
        numeral.register('format', 'time', {                                                                           // 977
        regexps: {                                                                                                     // 978
            format: /(:)/,                                                                                             // 979
            unformat: /(:)/                                                                                            // 980
        },                                                                                                             // 981
        format: function(value, format, roundingFunction) {                                                            // 982
            var hours = Math.floor(value / 60 / 60),                                                                   // 983
                minutes = Math.floor((value - (hours * 60 * 60)) / 60),                                                // 984
                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));                                      // 985
                                                                                                                       // 986
            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);
        },                                                                                                             // 988
        unformat: function(string) {                                                                                   // 989
            var timeArray = string.split(':'),                                                                         // 990
                seconds = 0;                                                                                           // 991
                                                                                                                       // 992
            // turn hours and minutes into seconds and add them all up                                                 // 993
            if (timeArray.length === 3) {                                                                              // 994
                // hours                                                                                               // 995
                seconds = seconds + (Number(timeArray[0]) * 60 * 60);                                                  // 996
                // minutes                                                                                             // 997
                seconds = seconds + (Number(timeArray[1]) * 60);                                                       // 998
                // seconds                                                                                             // 999
                seconds = seconds + Number(timeArray[2]);                                                              // 1000
            } else if (timeArray.length === 2) {                                                                       // 1001
                // minutes                                                                                             // 1002
                seconds = seconds + (Number(timeArray[0]) * 60);                                                       // 1003
                // seconds                                                                                             // 1004
                seconds = seconds + Number(timeArray[1]);                                                              // 1005
            }                                                                                                          // 1006
            return Number(seconds);                                                                                    // 1007
        }                                                                                                              // 1008
    });                                                                                                                // 1009
})();                                                                                                                  // 1010
                                                                                                                       // 1011
return numeral;                                                                                                        // 1012
}));                                                                                                                   // 1013
                                                                                                                       // 1014
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"react-flip-move":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-flip-move/package.json                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "react-flip-move";                                                                                      // 1
exports.version = "2.9.1";                                                                                             // 2
exports.main = "lib/index.js";                                                                                         // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"index.js":["./FlipMove",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-flip-move/lib/index.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * React Flip Move                                                                                                     // 4
 * (c) 2016-present Joshua Comeau                                                                                      // 5
 */                                                                                                                    // 6
module.exports = require('./FlipMove');                                                                                // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"FlipMove.js":["react","./polyfills","./prop-converter","./dom-manipulation","./helpers",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-flip-move/lib/FlipMove.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
Object.defineProperty(exports, "__esModule", {                                                                         // 3
  value: true                                                                                                          // 4
});                                                                                                                    // 5
                                                                                                                       // 6
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
                                                                                                                       // 8
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 10
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
                                                                                                                       // 12
var _react = require('react');                                                                                         // 13
                                                                                                                       // 14
var _react2 = _interopRequireDefault(_react);                                                                          // 15
                                                                                                                       // 16
require('./polyfills');                                                                                                // 17
                                                                                                                       // 18
var _propConverter = require('./prop-converter');                                                                      // 19
                                                                                                                       // 20
var _propConverter2 = _interopRequireDefault(_propConverter);                                                          // 21
                                                                                                                       // 22
var _domManipulation = require('./dom-manipulation');                                                                  // 23
                                                                                                                       // 24
var _helpers = require('./helpers');                                                                                   // 25
                                                                                                                       // 26
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 27
                                                                                                                       // 28
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 30
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
                                                                                                                       // 32
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * React Flip Move
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * (c) 2016-present Joshua Comeau
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * For information on how this code is laid out, check out CODE_TOUR.md
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
                                                                                                                       // 39
/* eslint-disable react/prop-types */                                                                                  // 40
                                                                                                                       // 41
var transitionEnd = (0, _domManipulation.whichTransitionEvent)();                                                      // 42
var noBrowserSupport = !transitionEnd;                                                                                 // 43
                                                                                                                       // 44
var FlipMove = function (_Component) {                                                                                 // 45
  _inherits(FlipMove, _Component);                                                                                     // 46
                                                                                                                       // 47
  function FlipMove(props) {                                                                                           // 48
    _classCallCheck(this, FlipMove);                                                                                   // 49
                                                                                                                       // 50
    // FlipMove needs to know quite a bit about its children in order to do                                            // 51
    // its job. We store these as a property on the instance. We're not using                                          // 52
    // state, because we don't want changes to trigger re-renders, we just                                             // 53
    // need a place to keep the data for reference, when changes happen.                                               // 54
    var _this = _possibleConstructorReturn(this, (FlipMove.__proto__ || Object.getPrototypeOf(FlipMove)).call(this, props));
                                                                                                                       // 56
    _this.childrenData = {                                                                                             // 57
      /* Populated via callback refs on render. eg                                                                     // 58
      userSpecifiedKey1: {                                                                                             // 59
        domNode: <domNode>,                                                                                            // 60
        boundingBox: { top, left, right, bottom, width, height },                                                      // 61
      },                                                                                                               // 62
      userSpecifiedKey2: { ... },                                                                                      // 63
      ...                                                                                                              // 64
      */                                                                                                               // 65
    };                                                                                                                 // 66
                                                                                                                       // 67
    // Similarly, track the dom node and box of our parent element.                                                    // 68
    _this.parentData = {                                                                                               // 69
      domNode: null,                                                                                                   // 70
      boundingBox: null                                                                                                // 71
    };                                                                                                                 // 72
                                                                                                                       // 73
    // If `maintainContainerHeight` prop is set to true, we'll create a                                                // 74
    // placeholder element which occupies space so that the parent height                                              // 75
    // doesn't change when items are removed from the document flow (which                                             // 76
    // happens during leave animations)                                                                                // 77
    _this.heightPlaceholderData = {                                                                                    // 78
      domNode: null                                                                                                    // 79
    };                                                                                                                 // 80
                                                                                                                       // 81
    // Copy props.children into state.                                                                                 // 82
    // To understand why this is important (and not an anti-pattern), consider                                         // 83
    // how "leave" animations work. An item has "left" when the component                                              // 84
    // receives a new set of props that do NOT contain the item.                                                       // 85
    // If we just render the props as-is, the item would instantly disappear.                                          // 86
    // We want to keep the item rendered for a little while, until its animation                                       // 87
    // can complete. Because we cannot mutate props, we make `state` the source                                        // 88
    // of truth.                                                                                                       // 89
    _this.state = {                                                                                                    // 90
      children: props.children.map(function (child) {                                                                  // 91
        return _extends({}, child, {                                                                                   // 92
          appearing: true                                                                                              // 93
        });                                                                                                            // 94
      })                                                                                                               // 95
    };                                                                                                                 // 96
                                                                                                                       // 97
    // Keep track of remaining animations so we know when to fire the                                                  // 98
    // all-finished callback, and clean up after ourselves.                                                            // 99
    // NOTE: we can't simply use childrenToAnimate.length to track remaining                                           // 100
    // animations, because we need to maintain the list of animating children,                                         // 101
    // to pass to the `onFinishAll` handler.                                                                           // 102
    _this.remainingAnimations = 0;                                                                                     // 103
    _this.childrenToAnimate = [];                                                                                      // 104
                                                                                                                       // 105
    _this.doesChildNeedToBeAnimated = _this.doesChildNeedToBeAnimated.bind(_this);                                     // 106
    _this.runAnimation = _this.runAnimation.bind(_this);                                                               // 107
    return _this;                                                                                                      // 108
  }                                                                                                                    // 109
                                                                                                                       // 110
  _createClass(FlipMove, [{                                                                                            // 111
    key: 'componentDidMount',                                                                                          // 112
    value: function componentDidMount() {                                                                              // 113
      // Run our `appearAnimation` if it was requested, right after the                                                // 114
      // component mounts.                                                                                             // 115
      var shouldTriggerFLIP = this.props.appearAnimation && !this.isAnimationDisabled(this.props);                     // 116
                                                                                                                       // 117
      if (shouldTriggerFLIP) {                                                                                         // 118
        this.prepForAnimation();                                                                                       // 119
        this.runAnimation();                                                                                           // 120
      }                                                                                                                // 121
    }                                                                                                                  // 122
  }, {                                                                                                                 // 123
    key: 'componentWillReceiveProps',                                                                                  // 124
    value: function componentWillReceiveProps(nextProps) {                                                             // 125
      // When the component is handed new props, we need to figure out the                                             // 126
      // "resting" position of all currently-rendered DOM nodes.                                                       // 127
      // We store that data in this.parent and this.children,                                                          // 128
      // so it can be used later to work out the animation.                                                            // 129
      this.updateBoundingBoxCaches();                                                                                  // 130
                                                                                                                       // 131
      // Next, we need to update our state, so that it contains our new set of                                         // 132
      // children. If animation is disabled or unsupported, this is easy;                                              // 133
      // we just copy our props into state.                                                                            // 134
      // Assuming that we can animate, though, we have to do some work.                                                // 135
      // Essentially, we want to keep just-deleted nodes in the DOM for a bit                                          // 136
      // longer, so that we can animate them away.                                                                     // 137
      var newChildren = this.isAnimationDisabled(nextProps) ? nextProps.children : this.calculateNextSetOfChildren(nextProps.children);
                                                                                                                       // 139
      this.setState({ children: newChildren });                                                                        // 140
    }                                                                                                                  // 141
  }, {                                                                                                                 // 142
    key: 'componentDidUpdate',                                                                                         // 143
    value: function componentDidUpdate(previousProps) {                                                                // 144
      // If the children have been re-arranged, moved, or added/removed,                                               // 145
      // trigger the main FLIP animation.                                                                              // 146
      //                                                                                                               // 147
      // IMPORTANT: We need to make sure that the children have actually changed.                                      // 148
      // At the end of the transition, we clean up nodes that need to be removed.                                      // 149
      // We DON'T want this cleanup to trigger another update.                                                         // 150
                                                                                                                       // 151
      var oldChildrenKeys = this.props.children.map(function (d) {                                                     // 152
        return d.key;                                                                                                  // 153
      });                                                                                                              // 154
      var nextChildrenKeys = previousProps.children.map(function (d) {                                                 // 155
        return d.key;                                                                                                  // 156
      });                                                                                                              // 157
                                                                                                                       // 158
      var shouldTriggerFLIP = !(0, _helpers.arraysEqual)(oldChildrenKeys, nextChildrenKeys) && !this.isAnimationDisabled(this.props);
                                                                                                                       // 160
      if (shouldTriggerFLIP) {                                                                                         // 161
        this.prepForAnimation();                                                                                       // 162
        this.runAnimation();                                                                                           // 163
      }                                                                                                                // 164
    }                                                                                                                  // 165
  }, {                                                                                                                 // 166
    key: 'calculateNextSetOfChildren',                                                                                 // 167
    value: function calculateNextSetOfChildren(nextChildren) {                                                         // 168
      var _this2 = this;                                                                                               // 169
                                                                                                                       // 170
      // We want to:                                                                                                   // 171
      //   - Mark all new children as `entering`                                                                       // 172
      //   - Pull in previous children that aren't in nextChildren, and mark them                                      // 173
      //     as `leaving`                                                                                              // 174
      //   - Preserve the nextChildren list order, with leaving children in their                                      // 175
      //     appropriate places.                                                                                       // 176
      //                                                                                                               // 177
                                                                                                                       // 178
      // Start by marking new children as 'entering'                                                                   // 179
      var updatedChildren = nextChildren.map(function (nextChild) {                                                    // 180
        var child = _this2.findChildByKey(nextChild.key);                                                              // 181
                                                                                                                       // 182
        // If the current child did exist, but it was in the midst of leaving,                                         // 183
        // we want to treat it as though it's entering                                                                 // 184
        var isEntering = !child || child.leaving;                                                                      // 185
                                                                                                                       // 186
        return _extends({}, nextChild, { entering: isEntering });                                                      // 187
      });                                                                                                              // 188
                                                                                                                       // 189
      // This is tricky. We want to keep the nextChildren's ordering, but with                                         // 190
      // any just-removed items maintaining their original position.                                                   // 191
      // eg.                                                                                                           // 192
      //   this.state.children  = [ 1, 2, 3, 4 ]                                                                       // 193
      //   nextChildren         = [ 3, 1 ]                                                                             // 194
      //                                                                                                               // 195
      // In this example, we've removed the '2' & '4'                                                                  // 196
      // We want to end up with:  [ 2, 3, 1, 4 ]                                                                       // 197
      //                                                                                                               // 198
      // To accomplish that, we'll iterate through this.state.children. whenever                                       // 199
      // we find a match, we'll append our `leaving` flag to it, and insert it                                         // 200
      // into the nextChildren in its ORIGINAL position. Note that, as we keep                                         // 201
      // inserting old items into the new list, the "original" position will                                           // 202
      // keep incrementing.                                                                                            // 203
      var numOfChildrenLeaving = 0;                                                                                    // 204
      this.state.children.forEach(function (child, index) {                                                            // 205
        var isLeaving = !nextChildren.find(function (_ref) {                                                           // 206
          var key = _ref.key;                                                                                          // 207
          return key === child.key;                                                                                    // 208
        });                                                                                                            // 209
                                                                                                                       // 210
        // If the child isn't leaving (or, if there is no leave animation),                                            // 211
        // we don't need to add it into the state children.                                                            // 212
        if (!isLeaving || !_this2.props.leaveAnimation) return;                                                        // 213
                                                                                                                       // 214
        var nextChild = _extends({}, child, { leaving: true });                                                        // 215
        var nextChildIndex = index + numOfChildrenLeaving;                                                             // 216
                                                                                                                       // 217
        updatedChildren.splice(nextChildIndex, 0, nextChild);                                                          // 218
        numOfChildrenLeaving += 1;                                                                                     // 219
      });                                                                                                              // 220
                                                                                                                       // 221
      return updatedChildren;                                                                                          // 222
    }                                                                                                                  // 223
  }, {                                                                                                                 // 224
    key: 'prepForAnimation',                                                                                           // 225
    value: function prepForAnimation() {                                                                               // 226
      var _this3 = this;                                                                                               // 227
                                                                                                                       // 228
      // Our animation prep consists of:                                                                               // 229
      // - remove children that are leaving from the DOM flow, so that the new                                         // 230
      //   layout can be accurately calculated,                                                                        // 231
      // - update the placeholder container height, if needed, to ensure that                                          // 232
      //   the parent's height doesn't collapse.                                                                       // 233
                                                                                                                       // 234
      var _props = this.props,                                                                                         // 235
          leaveAnimation = _props.leaveAnimation,                                                                      // 236
          maintainContainerHeight = _props.maintainContainerHeight,                                                    // 237
          getPosition = _props.getPosition;                                                                            // 238
                                                                                                                       // 239
      // we need to make all leaving nodes "invisible" to the layout calculations                                      // 240
      // that will take place in the next step (this.runAnimation).                                                    // 241
                                                                                                                       // 242
      if (leaveAnimation) {                                                                                            // 243
        var leavingChildren = this.state.children.filter(function (child) {                                            // 244
          return !!child.leaving;                                                                                      // 245
        });                                                                                                            // 246
                                                                                                                       // 247
        leavingChildren.forEach(function (leavingChild) {                                                              // 248
          var childData = _this3.childrenData[leavingChild.key];                                                       // 249
                                                                                                                       // 250
          // We need to take the items out of the "flow" of the document, so that                                      // 251
          // its siblings can move to take its place.                                                                  // 252
          if (childData.boundingBox) {                                                                                 // 253
            (0, _domManipulation.removeNodeFromDOMFlow)(childData, _this3.props.verticalAlignment);                    // 254
          }                                                                                                            // 255
        });                                                                                                            // 256
                                                                                                                       // 257
        if (maintainContainerHeight) {                                                                                 // 258
          (0, _domManipulation.updateHeightPlaceholder)({                                                              // 259
            domNode: this.heightPlaceholderData.domNode,                                                               // 260
            parentData: this.parentData,                                                                               // 261
            getPosition: getPosition                                                                                   // 262
          });                                                                                                          // 263
        }                                                                                                              // 264
      }                                                                                                                // 265
                                                                                                                       // 266
      // For all children not in the middle of entering or leaving,                                                    // 267
      // we need to reset the transition, so that the NEW shuffle starts from                                          // 268
      // the right place.                                                                                              // 269
      this.state.children.forEach(function (child) {                                                                   // 270
        var domNode = _this3.childrenData[child.key].domNode;                                                          // 271
                                                                                                                       // 272
        // Ignore children that don't render DOM nodes (eg. by returning null)                                         // 273
                                                                                                                       // 274
        if (!domNode) {                                                                                                // 275
          return;                                                                                                      // 276
        }                                                                                                              // 277
                                                                                                                       // 278
        if (!child.entering && !child.leaving) {                                                                       // 279
          (0, _domManipulation.applyStylesToDOMNode)({                                                                 // 280
            domNode: domNode,                                                                                          // 281
            styles: {                                                                                                  // 282
              transition: ''                                                                                           // 283
            }                                                                                                          // 284
          });                                                                                                          // 285
        }                                                                                                              // 286
      });                                                                                                              // 287
    }                                                                                                                  // 288
  }, {                                                                                                                 // 289
    key: 'runAnimation',                                                                                               // 290
    value: function runAnimation() {                                                                                   // 291
      var _this4 = this;                                                                                               // 292
                                                                                                                       // 293
      var dynamicChildren = this.state.children.filter(this.doesChildNeedToBeAnimated);                                // 294
                                                                                                                       // 295
      dynamicChildren.forEach(function (child, n) {                                                                    // 296
        _this4.remainingAnimations += 1;                                                                               // 297
        _this4.childrenToAnimate.push(child.key);                                                                      // 298
        _this4.animateChild(child, n);                                                                                 // 299
      });                                                                                                              // 300
                                                                                                                       // 301
      if (this.props.onStartAll) {                                                                                     // 302
        var _formatChildrenForHoo = this.formatChildrenForHooks(),                                                     // 303
            _formatChildrenForHoo2 = _slicedToArray(_formatChildrenForHoo, 2),                                         // 304
            elements = _formatChildrenForHoo2[0],                                                                      // 305
            domNodes = _formatChildrenForHoo2[1];                                                                      // 306
                                                                                                                       // 307
        this.props.onStartAll(elements, domNodes);                                                                     // 308
      }                                                                                                                // 309
    }                                                                                                                  // 310
  }, {                                                                                                                 // 311
    key: 'animateChild',                                                                                               // 312
    value: function animateChild(child, index) {                                                                       // 313
      var _this5 = this;                                                                                               // 314
                                                                                                                       // 315
      var domNode = this.childrenData[child.key].domNode;                                                              // 316
                                                                                                                       // 317
      // Apply the relevant style for this DOM node                                                                    // 318
      // This is the offset from its actual DOM position.                                                              // 319
      // eg. if an item has been re-rendered 20px lower, we want to apply a                                            // 320
      // style of 'transform: translate(-20px)', so that it appears to be where                                        // 321
      // it started.                                                                                                   // 322
      // In FLIP terminology, this is the 'Invert' stage.                                                              // 323
                                                                                                                       // 324
      (0, _domManipulation.applyStylesToDOMNode)({                                                                     // 325
        domNode: domNode,                                                                                              // 326
        styles: this.computeInitialStyles(child)                                                                       // 327
      });                                                                                                              // 328
                                                                                                                       // 329
      // Start by invoking the onStart callback for this child.                                                        // 330
      if (this.props.onStart) this.props.onStart(child, domNode);                                                      // 331
                                                                                                                       // 332
      // Next, animate the item from it's artificially-offset position to its                                          // 333
      // new, natural position.                                                                                        // 334
      requestAnimationFrame(function () {                                                                              // 335
        requestAnimationFrame(function () {                                                                            // 336
          // NOTE, RE: the double-requestAnimationFrame:                                                               // 337
          // Sadly, this is the most browser-compatible way to do this I've found.                                     // 338
          // Essentially we need to set the initial styles outside of any request                                      // 339
          // callbacks to avoid batching them. Then, a frame needs to pass with                                        // 340
          // the styles above rendered. Then, on the second frame, we can apply                                        // 341
          // our final styles to perform the animation.                                                                // 342
                                                                                                                       // 343
          // Our first order of business is to "undo" the styles applied in the                                        // 344
          // previous frames, while also adding a `transition` property.                                               // 345
          // This way, the item will smoothly transition from its old position                                         // 346
          // to its new position.                                                                                      // 347
          var styles = {                                                                                               // 348
            transition: (0, _domManipulation.createTransitionString)(index, _this5.props),                             // 349
            transform: '',                                                                                             // 350
            opacity: ''                                                                                                // 351
          };                                                                                                           // 352
                                                                                                                       // 353
          if (child.appearing && _this5.props.appearAnimation) {                                                       // 354
            styles = _extends({}, styles, _this5.props.appearAnimation.to);                                            // 355
          } else if (child.entering && _this5.props.enterAnimation) {                                                  // 356
            styles = _extends({}, styles, _this5.props.enterAnimation.to);                                             // 357
          } else if (child.leaving && _this5.props.leaveAnimation) {                                                   // 358
            styles = _extends({}, styles, _this5.props.leaveAnimation.to);                                             // 359
          }                                                                                                            // 360
                                                                                                                       // 361
          // In FLIP terminology, this is the 'Play' stage.                                                            // 362
          (0, _domManipulation.applyStylesToDOMNode)({ domNode: domNode, styles: styles });                            // 363
        });                                                                                                            // 364
      });                                                                                                              // 365
                                                                                                                       // 366
      this.bindTransitionEndHandler(child);                                                                            // 367
    }                                                                                                                  // 368
  }, {                                                                                                                 // 369
    key: 'bindTransitionEndHandler',                                                                                   // 370
    value: function bindTransitionEndHandler(child) {                                                                  // 371
      var _this6 = this;                                                                                               // 372
                                                                                                                       // 373
      var domNode = this.childrenData[child.key].domNode;                                                              // 374
                                                                                                                       // 375
      // The onFinish callback needs to be bound to the transitionEnd event.                                           // 376
      // We also need to unbind it when the transition completes, so this ugly                                         // 377
      // inline function is required (we need it here so it closes over                                                // 378
      // dependent variables `child` and `domNode`)                                                                    // 379
                                                                                                                       // 380
      var transitionEndHandler = function transitionEndHandler(ev) {                                                   // 381
        // It's possible that this handler is fired not on our primary transition,                                     // 382
        // but on a nested transition (eg. a hover effect). Ignore these cases.                                        // 383
        if (ev.target !== domNode) return;                                                                             // 384
                                                                                                                       // 385
        // Remove the 'transition' inline style we added. This is cleanup.                                             // 386
        domNode.style.transition = '';                                                                                 // 387
                                                                                                                       // 388
        // Trigger any applicable onFinish/onFinishAll hooks                                                           // 389
        _this6.triggerFinishHooks(child, domNode);                                                                     // 390
                                                                                                                       // 391
        domNode.removeEventListener(transitionEnd, transitionEndHandler);                                              // 392
                                                                                                                       // 393
        if (child.leaving) {                                                                                           // 394
          delete _this6.childrenData[child.key];                                                                       // 395
        }                                                                                                              // 396
      };                                                                                                               // 397
                                                                                                                       // 398
      domNode.addEventListener(transitionEnd, transitionEndHandler);                                                   // 399
    }                                                                                                                  // 400
  }, {                                                                                                                 // 401
    key: 'triggerFinishHooks',                                                                                         // 402
    value: function triggerFinishHooks(child, domNode) {                                                               // 403
      var _this7 = this;                                                                                               // 404
                                                                                                                       // 405
      if (this.props.onFinish) this.props.onFinish(child, domNode);                                                    // 406
                                                                                                                       // 407
      // Reduce the number of children we need to animate by 1,                                                        // 408
      // so that we can tell when all children have finished.                                                          // 409
      this.remainingAnimations -= 1;                                                                                   // 410
                                                                                                                       // 411
      if (this.remainingAnimations === 0) {                                                                            // 412
        // Remove any items from the DOM that have left, and reset `entering`.                                         // 413
        var nextChildren = this.state.children.filter(function (_ref2) {                                               // 414
          var leaving = _ref2.leaving;                                                                                 // 415
          return !leaving;                                                                                             // 416
        }).map(function (item) {                                                                                       // 417
          return _extends({}, item, {                                                                                  // 418
            appearing: false,                                                                                          // 419
            entering: false                                                                                            // 420
          });                                                                                                          // 421
        });                                                                                                            // 422
                                                                                                                       // 423
        this.setState({ children: nextChildren }, function () {                                                        // 424
          if (typeof _this7.props.onFinishAll === 'function') {                                                        // 425
            var _formatChildrenForHoo3 = _this7.formatChildrenForHooks(),                                              // 426
                _formatChildrenForHoo4 = _slicedToArray(_formatChildrenForHoo3, 2),                                    // 427
                elements = _formatChildrenForHoo4[0],                                                                  // 428
                domNodes = _formatChildrenForHoo4[1];                                                                  // 429
                                                                                                                       // 430
            _this7.props.onFinishAll(elements, domNodes);                                                              // 431
          }                                                                                                            // 432
                                                                                                                       // 433
          // Reset our variables for the next iteration                                                                // 434
          _this7.childrenToAnimate = [];                                                                               // 435
        });                                                                                                            // 436
                                                                                                                       // 437
        // If the placeholder was holding the container open while elements were                                       // 438
        // leaving, we we can now set its height to zero.                                                              // 439
        if (this.heightPlaceholderData.domNode !== null) {                                                             // 440
          this.heightPlaceholderData.domNode.style.height = 0;                                                         // 441
        }                                                                                                              // 442
      }                                                                                                                // 443
    }                                                                                                                  // 444
  }, {                                                                                                                 // 445
    key: 'formatChildrenForHooks',                                                                                     // 446
    value: function formatChildrenForHooks() {                                                                         // 447
      var _this8 = this;                                                                                               // 448
                                                                                                                       // 449
      var elements = [];                                                                                               // 450
      var domNodes = [];                                                                                               // 451
                                                                                                                       // 452
      this.childrenToAnimate.forEach(function (childKey) {                                                             // 453
        // If this was an exit animation, the child may no longer exist.                                               // 454
        // If so, skip it.                                                                                             // 455
        var element = _this8.findChildByKey(childKey);                                                                 // 456
                                                                                                                       // 457
        if (!element) {                                                                                                // 458
          return;                                                                                                      // 459
        }                                                                                                              // 460
                                                                                                                       // 461
        elements.push(element);                                                                                        // 462
        domNodes.push(_this8.childrenData[childKey].domNode);                                                          // 463
      });                                                                                                              // 464
                                                                                                                       // 465
      return [elements, domNodes];                                                                                     // 466
    }                                                                                                                  // 467
  }, {                                                                                                                 // 468
    key: 'updateBoundingBoxCaches',                                                                                    // 469
    value: function updateBoundingBoxCaches() {                                                                        // 470
      var _this9 = this;                                                                                               // 471
                                                                                                                       // 472
      // This is the ONLY place that parentData and childrenData's                                                     // 473
      // bounding boxes are updated. They will be calculated at other times                                            // 474
      // to be compared to this value, but it's important that the cache is                                            // 475
      // updated once per update.                                                                                      // 476
      this.parentData.boundingBox = this.props.getPosition(this.parentData.domNode);                                   // 477
                                                                                                                       // 478
      this.state.children.forEach(function (child) {                                                                   // 479
        // It is possible that a child does not have a `key` property;                                                 // 480
        // Ignore these children, they don't need to be moved.                                                         // 481
        if (!child.key) {                                                                                              // 482
          return;                                                                                                      // 483
        }                                                                                                              // 484
                                                                                                                       // 485
        var childData = _this9.childrenData[child.key];                                                                // 486
                                                                                                                       // 487
        // In very rare circumstances, for reasons unknown, the ref is never                                           // 488
        // populated for certain children. In this case, avoid doing this update.                                      // 489
        // see: https://github.com/joshwcomeau/react-flip-move/pull/91                                                 // 490
        if (!childData) {                                                                                              // 491
          return;                                                                                                      // 492
        }                                                                                                              // 493
                                                                                                                       // 494
        // If the child element returns null, we need to avoid trying to                                               // 495
        // account for it                                                                                              // 496
        if (!childData.domNode) {                                                                                      // 497
          return;                                                                                                      // 498
        }                                                                                                              // 499
                                                                                                                       // 500
        childData.boundingBox = (0, _domManipulation.getRelativeBoundingBox)({                                         // 501
          childData: childData,                                                                                        // 502
          parentData: _this9.parentData,                                                                               // 503
          getPosition: _this9.props.getPosition                                                                        // 504
        });                                                                                                            // 505
      });                                                                                                              // 506
    }                                                                                                                  // 507
  }, {                                                                                                                 // 508
    key: 'computeInitialStyles',                                                                                       // 509
    value: function computeInitialStyles(child) {                                                                      // 510
      var noAnimationRequestedForThisEvent = child.appearing && !this.props.appearAnimation || child.entering && !this.props.enterAnimation || child.leaving && !this.props.leaveAnimation;
                                                                                                                       // 512
      if (noAnimationRequestedForThisEvent) {                                                                          // 513
        return {};                                                                                                     // 514
      }                                                                                                                // 515
                                                                                                                       // 516
      if (child.appearing) {                                                                                           // 517
        return this.props.appearAnimation.from;                                                                        // 518
      } else if (child.entering) {                                                                                     // 519
        // If this child was in the middle of leaving, it still has its                                                // 520
        // absolute positioning styles applied. We need to undo those.                                                 // 521
        return _extends({                                                                                              // 522
          position: '',                                                                                                // 523
          top: '',                                                                                                     // 524
          left: '',                                                                                                    // 525
          right: '',                                                                                                   // 526
          bottom: ''                                                                                                   // 527
        }, this.props.enterAnimation.from);                                                                            // 528
      } else if (child.leaving) {                                                                                      // 529
        return this.props.leaveAnimation.from;                                                                         // 530
      }                                                                                                                // 531
                                                                                                                       // 532
      var _getPositionDelta = (0, _domManipulation.getPositionDelta)({                                                 // 533
        childData: this.childrenData[child.key],                                                                       // 534
        parentData: this.parentData,                                                                                   // 535
        getPosition: this.props.getPosition                                                                            // 536
      }),                                                                                                              // 537
          _getPositionDelta2 = _slicedToArray(_getPositionDelta, 2),                                                   // 538
          dX = _getPositionDelta2[0],                                                                                  // 539
          dY = _getPositionDelta2[1];                                                                                  // 540
                                                                                                                       // 541
      return {                                                                                                         // 542
        transform: 'translate(' + dX + 'px, ' + dY + 'px)'                                                             // 543
      };                                                                                                               // 544
    }                                                                                                                  // 545
  }, {                                                                                                                 // 546
    key: 'isAnimationDisabled',                                                                                        // 547
    value: function isAnimationDisabled(props) {                                                                       // 548
      // If the component is explicitly passed a `disableAllAnimations` flag,                                          // 549
      // we can skip this whole process. Similarly, if all of the numbers have                                         // 550
      // been set to 0, there is no point in trying to animate; doing so would                                         // 551
      // only cause a flicker (and the intent is probably to disable animations)                                       // 552
      // We can also skip this rigamarole if there's no browser support for it.                                        // 553
      return noBrowserSupport || props.disableAllAnimations || props.duration === 0 && props.delay === 0 && props.staggerDurationBy === 0 && props.staggerDelayBy === 0;
    }                                                                                                                  // 555
  }, {                                                                                                                 // 556
    key: 'doesChildNeedToBeAnimated',                                                                                  // 557
    value: function doesChildNeedToBeAnimated(child) {                                                                 // 558
      // If the child doesn't have a key, it's an immovable child (one that we                                         // 559
      // do not want to do FLIP stuff to.)                                                                             // 560
      if (!child.key) {                                                                                                // 561
        return false;                                                                                                  // 562
      }                                                                                                                // 563
                                                                                                                       // 564
      var childData = this.childrenData[child.key];                                                                    // 565
                                                                                                                       // 566
      if (!childData.domNode) {                                                                                        // 567
        return false;                                                                                                  // 568
      }                                                                                                                // 569
                                                                                                                       // 570
      var _props2 = this.props,                                                                                        // 571
          appearAnimation = _props2.appearAnimation,                                                                   // 572
          enterAnimation = _props2.enterAnimation,                                                                     // 573
          leaveAnimation = _props2.leaveAnimation,                                                                     // 574
          getPosition = _props2.getPosition;                                                                           // 575
                                                                                                                       // 576
                                                                                                                       // 577
      var isAppearingWithAnimation = child.appearing && appearAnimation;                                               // 578
      var isEnteringWithAnimation = child.entering && enterAnimation;                                                  // 579
      var isLeavingWithAnimation = child.leaving && leaveAnimation;                                                    // 580
                                                                                                                       // 581
      if (isAppearingWithAnimation || isEnteringWithAnimation || isLeavingWithAnimation) {                             // 582
        return true;                                                                                                   // 583
      }                                                                                                                // 584
                                                                                                                       // 585
      // If it isn't entering/leaving, we want to animate it if it's                                                   // 586
      // on-screen position has changed.                                                                               // 587
                                                                                                                       // 588
      var _getPositionDelta3 = (0, _domManipulation.getPositionDelta)({                                                // 589
        childData: childData,                                                                                          // 590
        parentData: this.parentData,                                                                                   // 591
        getPosition: getPosition                                                                                       // 592
      }),                                                                                                              // 593
          _getPositionDelta4 = _slicedToArray(_getPositionDelta3, 2),                                                  // 594
          dX = _getPositionDelta4[0],                                                                                  // 595
          dY = _getPositionDelta4[1];                                                                                  // 596
                                                                                                                       // 597
      return dX !== 0 || dY !== 0;                                                                                     // 598
    }                                                                                                                  // 599
  }, {                                                                                                                 // 600
    key: 'findChildByKey',                                                                                             // 601
    value: function findChildByKey(key) {                                                                              // 602
      return this.state.children.find(function (child) {                                                               // 603
        return child.key === key;                                                                                      // 604
      });                                                                                                              // 605
    }                                                                                                                  // 606
  }, {                                                                                                                 // 607
    key: 'createHeightPlaceholder',                                                                                    // 608
    value: function createHeightPlaceholder() {                                                                        // 609
      var _this10 = this;                                                                                              // 610
                                                                                                                       // 611
      var typeName = this.props.typeName;                                                                              // 612
                                                                                                                       // 613
      // If requested, create an invisible element at the end of the list.                                             // 614
      // Its height will be modified to prevent the container from collapsing                                          // 615
      // prematurely.                                                                                                  // 616
                                                                                                                       // 617
      var isContainerAList = typeName === 'ul' || typeName === 'ol';                                                   // 618
      var placeholderType = isContainerAList ? 'li' : 'div';                                                           // 619
                                                                                                                       // 620
      return _react2.default.createElement(placeholderType, {                                                          // 621
        key: 'height-placeholder',                                                                                     // 622
        ref: function ref(domNode) {                                                                                   // 623
          _this10.heightPlaceholderData.domNode = domNode;                                                             // 624
        },                                                                                                             // 625
        style: { visibility: 'hidden', height: 0 }                                                                     // 626
      });                                                                                                              // 627
    }                                                                                                                  // 628
  }, {                                                                                                                 // 629
    key: 'childrenWithRefs',                                                                                           // 630
    value: function childrenWithRefs() {                                                                               // 631
      var _this11 = this;                                                                                              // 632
                                                                                                                       // 633
      // We need to clone the provided children, capturing a reference to the                                          // 634
      // underlying DOM node. Flip Move needs to use the React escape hatches to                                       // 635
      // be able to do its calculations.                                                                               // 636
      return this.state.children.map(function (child) {                                                                // 637
        return _react2.default.cloneElement(child, {                                                                   // 638
          ref: function ref(element) {                                                                                 // 639
            // Stateless Functional Components are not supported by FlipMove,                                          // 640
            // because they don't have instances.                                                                      // 641
            if (!element) {                                                                                            // 642
              return;                                                                                                  // 643
            }                                                                                                          // 644
                                                                                                                       // 645
            var domNode = (0, _domManipulation.getNativeNode)(element);                                                // 646
                                                                                                                       // 647
            // If this is the first render, we need to create the data entry                                           // 648
            if (!_this11.childrenData[child.key]) {                                                                    // 649
              _this11.childrenData[child.key] = {};                                                                    // 650
            }                                                                                                          // 651
                                                                                                                       // 652
            _this11.childrenData[child.key].domNode = domNode;                                                         // 653
          }                                                                                                            // 654
        });                                                                                                            // 655
      });                                                                                                              // 656
    }                                                                                                                  // 657
  }, {                                                                                                                 // 658
    key: 'render',                                                                                                     // 659
    value: function render() {                                                                                         // 660
      var _this12 = this;                                                                                              // 661
                                                                                                                       // 662
      var _props3 = this.props,                                                                                        // 663
          typeName = _props3.typeName,                                                                                 // 664
          delegated = _props3.delegated,                                                                               // 665
          leaveAnimation = _props3.leaveAnimation,                                                                     // 666
          maintainContainerHeight = _props3.maintainContainerHeight;                                                   // 667
                                                                                                                       // 668
                                                                                                                       // 669
      var props = _extends({}, delegated, {                                                                            // 670
        ref: function ref(node) {                                                                                      // 671
          _this12.parentData.domNode = node;                                                                           // 672
        }                                                                                                              // 673
      });                                                                                                              // 674
                                                                                                                       // 675
      var children = this.childrenWithRefs();                                                                          // 676
      if (leaveAnimation && maintainContainerHeight) {                                                                 // 677
        children.push(this.createHeightPlaceholder());                                                                 // 678
      }                                                                                                                // 679
                                                                                                                       // 680
      return _react2.default.createElement(typeName, props, children);                                                 // 681
    }                                                                                                                  // 682
  }]);                                                                                                                 // 683
                                                                                                                       // 684
  return FlipMove;                                                                                                     // 685
}(_react.Component);                                                                                                   // 686
                                                                                                                       // 687
exports.default = (0, _propConverter2.default)(FlipMove);                                                              // 688
module.exports = exports['default'];                                                                                   // 689
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"polyfills.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-flip-move/lib/polyfills.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * React Flip Move - Polyfills                                                                                         // 4
 * (c) 2016-present Joshua Comeau                                                                                      // 5
 */                                                                                                                    // 6
                                                                                                                       // 7
/* eslint-disable */                                                                                                   // 8
                                                                                                                       // 9
if (!Array.prototype.find) {                                                                                           // 10
  Array.prototype.find = function (predicate) {                                                                        // 11
    if (this === null) {                                                                                               // 12
      throw new TypeError('Array.prototype.find called on null or undefined');                                         // 13
    }                                                                                                                  // 14
    if (typeof predicate !== 'function') {                                                                             // 15
      throw new TypeError('predicate must be a function');                                                             // 16
    }                                                                                                                  // 17
    var list = Object(this);                                                                                           // 18
    var length = list.length >>> 0;                                                                                    // 19
    var thisArg = arguments[1];                                                                                        // 20
    var value = undefined;                                                                                             // 21
                                                                                                                       // 22
    for (var i = 0; i < length; i++) {                                                                                 // 23
      value = list[i];                                                                                                 // 24
      if (predicate.call(thisArg, value, i, list)) {                                                                   // 25
        return value;                                                                                                  // 26
      }                                                                                                                // 27
    }                                                                                                                  // 28
    return undefined;                                                                                                  // 29
  };                                                                                                                   // 30
}                                                                                                                      // 31
                                                                                                                       // 32
if (!Array.prototype.every) {                                                                                          // 33
  Array.prototype.every = function (callbackfn, thisArg) {                                                             // 34
    'use strict';                                                                                                      // 35
                                                                                                                       // 36
    var T, k;                                                                                                          // 37
                                                                                                                       // 38
    if (this == null) {                                                                                                // 39
      throw new TypeError('this is null or not defined');                                                              // 40
    }                                                                                                                  // 41
                                                                                                                       // 42
    var O = Object(this);                                                                                              // 43
    var len = O.length >>> 0;                                                                                          // 44
                                                                                                                       // 45
    if (typeof callbackfn !== 'function') {                                                                            // 46
      throw new TypeError();                                                                                           // 47
    }                                                                                                                  // 48
                                                                                                                       // 49
    if (arguments.length > 1) {                                                                                        // 50
      T = thisArg;                                                                                                     // 51
    }                                                                                                                  // 52
                                                                                                                       // 53
    k = 0;                                                                                                             // 54
                                                                                                                       // 55
    while (k < len) {                                                                                                  // 56
                                                                                                                       // 57
      var kValue;                                                                                                      // 58
                                                                                                                       // 59
      if (k in O) {                                                                                                    // 60
        kValue = O[k];                                                                                                 // 61
                                                                                                                       // 62
        var testResult = callbackfn.call(T, kValue, k, O);                                                             // 63
                                                                                                                       // 64
        if (!testResult) {                                                                                             // 65
          return false;                                                                                                // 66
        }                                                                                                              // 67
      }                                                                                                                // 68
      k++;                                                                                                             // 69
    }                                                                                                                  // 70
    return true;                                                                                                       // 71
  };                                                                                                                   // 72
}                                                                                                                      // 73
                                                                                                                       // 74
if (!Array.isArray) {                                                                                                  // 75
  Array.isArray = function (arg) {                                                                                     // 76
    return Object.prototype.toString.call(arg) === '[object Array]';                                                   // 77
  };                                                                                                                   // 78
}                                                                                                                      // 79
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"prop-converter.js":["react","./error-messages","./enter-leave-presets","./helpers",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-flip-move/lib/prop-converter.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
Object.defineProperty(exports, "__esModule", {                                                                         // 3
  value: true                                                                                                          // 4
});                                                                                                                    // 5
                                                                                                                       // 6
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
                                                                                                                       // 8
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 10
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
                                                                                                                       // 12
var _react = require('react');                                                                                         // 13
                                                                                                                       // 14
var _react2 = _interopRequireDefault(_react);                                                                          // 15
                                                                                                                       // 16
var _errorMessages = require('./error-messages');                                                                      // 17
                                                                                                                       // 18
var _enterLeavePresets = require('./enter-leave-presets');                                                             // 19
                                                                                                                       // 20
var _helpers = require('./helpers');                                                                                   // 21
                                                                                                                       // 22
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 23
                                                                                                                       // 24
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 26
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
                                                                                                                       // 28
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * React Flip Move | propConverter
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * (c) 2016-present Joshua Comeau
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Abstracted away a bunch of the messy business with props.
propTypes and defaultProps
ype conversion (We accept 'string' and 'number' values for duration,
delay, and other fields, but we actually need them to be ints.)
hildren conversion (we need the children to be an array. May not always
be, if a single child is passed in.)
esolving animation presets into their base CSS styles
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
                                                                                                                       // 41
function propConverter(ComposedComponent) {                                                                            // 42
  var FlipMovePropConverter = function (_Component) {                                                                  // 43
    _inherits(FlipMovePropConverter, _Component);                                                                      // 44
                                                                                                                       // 45
    function FlipMovePropConverter() {                                                                                 // 46
      _classCallCheck(this, FlipMovePropConverter);                                                                    // 47
                                                                                                                       // 48
      return _possibleConstructorReturn(this, (FlipMovePropConverter.__proto__ || Object.getPrototypeOf(FlipMovePropConverter)).apply(this, arguments));
    }                                                                                                                  // 50
                                                                                                                       // 51
    _createClass(FlipMovePropConverter, [{                                                                             // 52
      key: 'convertProps',                                                                                             // 53
      value: function convertProps(props) {                                                                            // 54
        var propTypes = FlipMovePropConverter.propTypes,                                                               // 55
            defaultProps = FlipMovePropConverter.defaultProps;                                                         // 56
                                                                                                                       // 57
        // Create a non-immutable working copy                                                                         // 58
                                                                                                                       // 59
        var workingProps = _extends({}, props);                                                                        // 60
                                                                                                                       // 61
        // Convert `children` to an array. This is to standardize when a single                                        // 62
        // child is passed, as well as if the child is falsy.                                                          // 63
        workingProps.children = _react2.default.Children.toArray(props.children);                                      // 64
                                                                                                                       // 65
        // FlipMove does not support stateless functional components.                                                  // 66
        // Check to see if any supplied components won't work.                                                         // 67
        // If the child doesn't have a key, it means we aren't animating it.                                           // 68
        // It's allowed to be an SFC, since we ignore it.                                                              // 69
        var noStateless = workingProps.children.every(function (child) {                                               // 70
          return !(0, _helpers.isElementAnSFC)(child) || typeof child.key === 'undefined';                             // 71
        });                                                                                                            // 72
                                                                                                                       // 73
        if (!noStateless) {                                                                                            // 74
          console.warn((0, _errorMessages.statelessFunctionalComponentSupplied)());                                    // 75
        }                                                                                                              // 76
                                                                                                                       // 77
        // Do string-to-int conversion for all timing-related props                                                    // 78
        var timingPropNames = ['duration', 'delay', 'staggerDurationBy', 'staggerDelayBy'];                            // 79
                                                                                                                       // 80
        timingPropNames.forEach(function (prop) {                                                                      // 81
          var rawValue = workingProps[prop];                                                                           // 82
          var value = typeof rawValue === 'string' ? parseInt(rawValue, 10) : rawValue;                                // 83
                                                                                                                       // 84
          if (isNaN(value)) {                                                                                          // 85
            var defaultValue = defaultProps[prop];                                                                     // 86
            var errorMessage = (0, _errorMessages.invalidTypeForTimingProp)({                                          // 87
              prop: prop,                                                                                              // 88
              value: value,                                                                                            // 89
              defaultValue: defaultValue                                                                               // 90
            });                                                                                                        // 91
            console.error(errorMessage);                                                                               // 92
                                                                                                                       // 93
            value = defaultValue;                                                                                      // 94
          }                                                                                                            // 95
                                                                                                                       // 96
          workingProps[prop] = value;                                                                                  // 97
        });                                                                                                            // 98
                                                                                                                       // 99
        // Our enter/leave animations can be specified as boolean (default or                                          // 100
        // disabled), string (preset name), or object (actual animation values).                                       // 101
        // Let's standardize this so that they're always objects                                                       // 102
        workingProps.appearAnimation = this.convertAnimationProp(workingProps.appearAnimation, _enterLeavePresets.appearPresets);
        workingProps.enterAnimation = this.convertAnimationProp(workingProps.enterAnimation, _enterLeavePresets.enterPresets);
        workingProps.leaveAnimation = this.convertAnimationProp(workingProps.leaveAnimation, _enterLeavePresets.leavePresets);
                                                                                                                       // 106
        // Accept `disableAnimations`, but add a deprecation warning                                                   // 107
        if (typeof props.disableAnimations !== 'undefined') {                                                          // 108
          console.warn((0, _errorMessages.deprecatedDisableAnimations)());                                             // 109
          workingProps.disableAnimations = undefined;                                                                  // 110
          workingProps.disableAllAnimations = props.disableAnimations;                                                 // 111
        }                                                                                                              // 112
                                                                                                                       // 113
        // Gather any additional props;                                                                                // 114
        // they will be delegated to the ReactElement created.                                                         // 115
        var primaryPropKeys = Object.keys(propTypes);                                                                  // 116
        var delegatedProps = (0, _helpers.omit)(this.props, primaryPropKeys);                                          // 117
                                                                                                                       // 118
        // The FlipMove container element needs to have a non-static position.                                         // 119
        // We use `relative` by default, but it can be overridden by the user.                                         // 120
        // Now that we're delegating props, we need to merge this in.                                                  // 121
        delegatedProps.style = _extends({                                                                              // 122
          position: 'relative'                                                                                         // 123
        }, delegatedProps.style);                                                                                      // 124
                                                                                                                       // 125
        workingProps = (0, _helpers.omit)(workingProps, Object.keys(delegatedProps));                                  // 126
        workingProps.delegated = delegatedProps;                                                                       // 127
                                                                                                                       // 128
        return workingProps;                                                                                           // 129
      }                                                                                                                // 130
                                                                                                                       // 131
      // eslint-disable-next-line class-methods-use-this                                                               // 132
                                                                                                                       // 133
    }, {                                                                                                               // 134
      key: 'convertAnimationProp',                                                                                     // 135
      value: function convertAnimationProp(animation, presets) {                                                       // 136
        var newAnimation = undefined;                                                                                  // 137
                                                                                                                       // 138
        switch (typeof animation === 'undefined' ? 'undefined' : _typeof(animation)) {                                 // 139
          case 'boolean':                                                                                              // 140
            {                                                                                                          // 141
              // If it's true, we want to use the default preset.                                                      // 142
              // If it's false, we want to use the 'none' preset.                                                      // 143
              newAnimation = presets[animation ? _enterLeavePresets.defaultPreset : _enterLeavePresets.disablePreset];
              break;                                                                                                   // 145
            }                                                                                                          // 146
                                                                                                                       // 147
          case 'string':                                                                                               // 148
            {                                                                                                          // 149
              var presetKeys = Object.keys(presets);                                                                   // 150
                                                                                                                       // 151
              if (presetKeys.indexOf(animation) === -1) {                                                              // 152
                console.error((0, _errorMessages.invalidEnterLeavePreset)({                                            // 153
                  value: animation,                                                                                    // 154
                  acceptableValues: presetKeys.join(', '),                                                             // 155
                  defaultValue: _enterLeavePresets.defaultPreset                                                       // 156
                }));                                                                                                   // 157
                newAnimation = presets[_enterLeavePresets.defaultPreset];                                              // 158
              } else {                                                                                                 // 159
                newAnimation = presets[animation];                                                                     // 160
              }                                                                                                        // 161
              break;                                                                                                   // 162
            }                                                                                                          // 163
                                                                                                                       // 164
          default:                                                                                                     // 165
            {                                                                                                          // 166
              newAnimation = animation;                                                                                // 167
              break;                                                                                                   // 168
            }                                                                                                          // 169
        }                                                                                                              // 170
                                                                                                                       // 171
        return newAnimation;                                                                                           // 172
      }                                                                                                                // 173
    }, {                                                                                                               // 174
      key: 'render',                                                                                                   // 175
      value: function render() {                                                                                       // 176
        return _react2.default.createElement(ComposedComponent, this.convertProps(this.props));                        // 177
      }                                                                                                                // 178
    }]);                                                                                                               // 179
                                                                                                                       // 180
    return FlipMovePropConverter;                                                                                      // 181
  }(_react.Component);                                                                                                 // 182
                                                                                                                       // 183
  var animationPropTypes = _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.bool, _react.PropTypes.shape({
    from: _react.PropTypes.object,                                                                                     // 185
    to: _react.PropTypes.object                                                                                        // 186
  })]);                                                                                                                // 187
                                                                                                                       // 188
  FlipMovePropConverter.propTypes = {                                                                                  // 189
    children: _react.PropTypes.node,                                                                                   // 190
    easing: _react.PropTypes.string,                                                                                   // 191
    duration: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),                          // 192
    delay: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),                             // 193
    staggerDurationBy: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),                 // 194
    staggerDelayBy: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),                    // 195
    onStart: _react.PropTypes.func,                                                                                    // 196
    onFinish: _react.PropTypes.func,                                                                                   // 197
    onStartAll: _react.PropTypes.func,                                                                                 // 198
    onFinishAll: _react.PropTypes.func,                                                                                // 199
    typeName: _react.PropTypes.string,                                                                                 // 200
    appearAnimation: animationPropTypes,                                                                               // 201
    enterAnimation: animationPropTypes,                                                                                // 202
    leaveAnimation: animationPropTypes,                                                                                // 203
    disableAllAnimations: _react.PropTypes.bool,                                                                       // 204
    getPosition: _react.PropTypes.func,                                                                                // 205
    maintainContainerHeight: _react.PropTypes.bool.isRequired,                                                         // 206
    verticalAlignment: _react.PropTypes.oneOf(['top', 'bottom']).isRequired                                            // 207
  };                                                                                                                   // 208
                                                                                                                       // 209
  FlipMovePropConverter.defaultProps = {                                                                               // 210
    easing: 'ease-in-out',                                                                                             // 211
    duration: 350,                                                                                                     // 212
    delay: 0,                                                                                                          // 213
    staggerDurationBy: 0,                                                                                              // 214
    staggerDelayBy: 0,                                                                                                 // 215
    typeName: 'div',                                                                                                   // 216
    enterAnimation: _enterLeavePresets.defaultPreset,                                                                  // 217
    leaveAnimation: _enterLeavePresets.defaultPreset,                                                                  // 218
    disableAllAnimations: false,                                                                                       // 219
    getPosition: function getPosition(node) {                                                                          // 220
      return node.getBoundingClientRect();                                                                             // 221
    },                                                                                                                 // 222
    maintainContainerHeight: false,                                                                                    // 223
    verticalAlignment: 'top'                                                                                           // 224
  };                                                                                                                   // 225
                                                                                                                       // 226
  return FlipMovePropConverter;                                                                                        // 227
}                                                                                                                      // 228
                                                                                                                       // 229
exports.default = propConverter;                                                                                       // 230
module.exports = exports['default'];                                                                                   // 231
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"error-messages.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-flip-move/lib/error-messages.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
Object.defineProperty(exports, "__esModule", {                                                                         // 3
  value: true                                                                                                          // 4
});                                                                                                                    // 5
var statelessFunctionalComponentSupplied = exports.statelessFunctionalComponentSupplied = function statelessFunctionalComponentSupplied() {
  return "\n>> Error, via react-flip-move <<\n\nYou provided a stateless functional component as a child to <FlipMove>. Unfortunately, SFCs aren't supported, because Flip Move needs access to the backing instances via refs, and SFCs don't have a public instance that holds that info.\n\nPlease wrap your components in a native element (eg. <div>), or a non-functional component.\n";
};                                                                                                                     // 8
                                                                                                                       // 9
var invalidTypeForTimingProp = exports.invalidTypeForTimingProp = function invalidTypeForTimingProp(_ref) {            // 10
  var prop = _ref.prop,                                                                                                // 11
      value = _ref.value,                                                                                              // 12
      defaultValue = _ref.defaultValue;                                                                                // 13
  return "\n>> Error, via react-flip-move <<\n\nThe prop you provided for '" + prop + "' is invalid. It needs to be a positive integer, or a string that can be resolved to a number. The value you provided is '" + value + "'.\n\nAs a result,  the default value for this parameter will be used, which is '" + defaultValue + "'.\n";
};                                                                                                                     // 15
                                                                                                                       // 16
var deprecatedDisableAnimations = exports.deprecatedDisableAnimations = function deprecatedDisableAnimations() {       // 17
  return "\n>> Warning, via react-flip-move <<\n\nThe 'disableAnimations' prop you provided is deprecated. Please switch to use 'disableAllAnimations'.\n\nThis will become a silent error in future versions of react-flip-move.\n";
};                                                                                                                     // 19
                                                                                                                       // 20
var invalidEnterLeavePreset = exports.invalidEnterLeavePreset = function invalidEnterLeavePreset(_ref2) {              // 21
  var value = _ref2.value,                                                                                             // 22
      acceptableValues = _ref2.acceptableValues,                                                                       // 23
      defaultValue = _ref2.defaultValue;                                                                               // 24
  return "\n>> Error, via react-flip-move <<\n\nThe enter/leave preset you provided is invalid. We don't currently have a '" + value + " preset.'\n\nAcceptable values are " + acceptableValues + ". The default value of '" + defaultValue + "' will be used.\n";
};                                                                                                                     // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"enter-leave-presets.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-flip-move/lib/enter-leave-presets.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
Object.defineProperty(exports, "__esModule", {                                                                         // 3
  value: true                                                                                                          // 4
});                                                                                                                    // 5
/**                                                                                                                    // 6
 * React Flip Move | enterLeavePresets                                                                                 // 7
 * (c) 2016-present Joshua Comeau                                                                                      // 8
 *                                                                                                                     // 9
 * This contains the master list of presets available for enter/leave animations,                                      // 10
 * along with the mapping between preset and styles.                                                                   // 11
 */                                                                                                                    // 12
                                                                                                                       // 13
var enterPresets = exports.enterPresets = {                                                                            // 14
  elevator: {                                                                                                          // 15
    from: { transform: 'scale(0)', opacity: 0 },                                                                       // 16
    to: { transform: '', opacity: '' }                                                                                 // 17
  },                                                                                                                   // 18
  fade: {                                                                                                              // 19
    from: { opacity: 0 },                                                                                              // 20
    to: { opacity: '' }                                                                                                // 21
  },                                                                                                                   // 22
  accordionVertical: {                                                                                                 // 23
    from: { transform: 'scaleY(0)', transformOrigin: 'center top' },                                                   // 24
    to: { transform: '', transformOrigin: 'center top' }                                                               // 25
  },                                                                                                                   // 26
  accordionHorizontal: {                                                                                               // 27
    from: { transform: 'scaleX(0)', transformOrigin: 'left center' },                                                  // 28
    to: { transform: '', transformOrigin: 'left center' }                                                              // 29
  },                                                                                                                   // 30
  none: false                                                                                                          // 31
};                                                                                                                     // 32
                                                                                                                       // 33
var leavePresets = exports.leavePresets = {                                                                            // 34
  elevator: {                                                                                                          // 35
    from: { transform: 'scale(1)', opacity: 1 },                                                                       // 36
    to: { transform: 'scale(0)', opacity: 0 }                                                                          // 37
  },                                                                                                                   // 38
  fade: {                                                                                                              // 39
    from: { opacity: 1 },                                                                                              // 40
    to: { opacity: 0 }                                                                                                 // 41
  },                                                                                                                   // 42
  accordionVertical: {                                                                                                 // 43
    from: { transform: 'scaleY(1)', transformOrigin: 'center top' },                                                   // 44
    to: { transform: 'scaleY(0)', transformOrigin: 'center top' }                                                      // 45
  },                                                                                                                   // 46
  accordionHorizontal: {                                                                                               // 47
    from: { transform: 'scaleX(1)', transformOrigin: 'left center' },                                                  // 48
    to: { transform: 'scaleX(0)', transformOrigin: 'left center' }                                                     // 49
  },                                                                                                                   // 50
  none: false                                                                                                          // 51
};                                                                                                                     // 52
                                                                                                                       // 53
// For now, appearPresets will be identical to enterPresets.                                                           // 54
// Assigning a custom export in case we ever want to add appear-specific ones.                                         // 55
var appearPresets = exports.appearPresets = enterPresets;                                                              // 56
                                                                                                                       // 57
// Embarrassingly enough, v2.0 launched with typo'ed preset names.                                                     // 58
// To avoid penning a new major version over something so inconsequential,                                             // 59
// we're supporting both spellings. In a future version, these alternatives                                            // 60
// may be deprecated.                                                                                                  // 61
enterPresets.accordianVertical = enterPresets.accordionVertical;                                                       // 62
enterPresets.accordianHorizontal = enterPresets.accordionHorizontal;                                                   // 63
leavePresets.accordianVertical = leavePresets.accordionVertical;                                                       // 64
leavePresets.accordianHorizontal = leavePresets.accordionHorizontal;                                                   // 65
                                                                                                                       // 66
var defaultPreset = exports.defaultPreset = 'elevator';                                                                // 67
var disablePreset = exports.disablePreset = 'none';                                                                    // 68
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"helpers.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-flip-move/lib/helpers.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
Object.defineProperty(exports, "__esModule", {                                                                         // 3
  value: true                                                                                                          // 4
});                                                                                                                    // 5
exports.omit = omit;                                                                                                   // 6
exports.arraysEqual = arraysEqual;                                                                                     // 7
var isElementAnSFC = exports.isElementAnSFC = function isElementAnSFC(element) {                                       // 8
  var isNativeDOMElement = typeof element.type === 'string';                                                           // 9
                                                                                                                       // 10
  if (isNativeDOMElement) {                                                                                            // 11
    return false;                                                                                                      // 12
  }                                                                                                                    // 13
                                                                                                                       // 14
  return !element.type.prototype.isReactComponent;                                                                     // 15
};                                                                                                                     // 16
                                                                                                                       // 17
function omit(obj) {                                                                                                   // 18
  var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];                                  // 19
                                                                                                                       // 20
  var result = {};                                                                                                     // 21
  Object.keys(obj).forEach(function (key) {                                                                            // 22
    if (attrs.indexOf(key) === -1) {                                                                                   // 23
      result[key] = obj[key];                                                                                          // 24
    }                                                                                                                  // 25
  });                                                                                                                  // 26
  return result;                                                                                                       // 27
}                                                                                                                      // 28
                                                                                                                       // 29
function arraysEqual(a, b) {                                                                                           // 30
  var sameObject = a === b;                                                                                            // 31
  if (sameObject) {                                                                                                    // 32
    return true;                                                                                                       // 33
  }                                                                                                                    // 34
                                                                                                                       // 35
  var notBothArrays = !Array.isArray(a) || !Array.isArray(b);                                                          // 36
  var differentLengths = a.length !== b.length;                                                                        // 37
                                                                                                                       // 38
  if (notBothArrays || differentLengths) {                                                                             // 39
    return false;                                                                                                      // 40
  }                                                                                                                    // 41
                                                                                                                       // 42
  return a.every(function (element, index) {                                                                           // 43
    return element === b[index];                                                                                       // 44
  });                                                                                                                  // 45
}                                                                                                                      // 46
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"dom-manipulation.js":["react-dom",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-flip-move/lib/dom-manipulation.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
Object.defineProperty(exports, "__esModule", {                                                                         // 3
  value: true                                                                                                          // 4
});                                                                                                                    // 5
exports.createTransitionString = exports.getNativeNode = exports.updateHeightPlaceholder = exports.removeNodeFromDOMFlow = exports.getPositionDelta = exports.getRelativeBoundingBox = undefined;
                                                                                                                       // 7
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * React Flip Move
                                                                                                                                                                                                                                                                   * (c) 2016-present Joshua Comeau
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * These methods read from and write to the DOM.
                                                                                                                                                                                                                                                                   * They almost always have side effects, and will hopefully become the
                                                                                                                                                                                                                                                                   * only spot in the codebase with impure functions.
                                                                                                                                                                                                                                                                   */
                                                                                                                       // 16
                                                                                                                       // 17
exports.applyStylesToDOMNode = applyStylesToDOMNode;                                                                   // 18
exports.whichTransitionEvent = whichTransitionEvent;                                                                   // 19
                                                                                                                       // 20
var _reactDom = require('react-dom');                                                                                  // 21
                                                                                                                       // 22
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
                                                                                                                       // 24
function applyStylesToDOMNode(_ref) {                                                                                  // 25
  var domNode = _ref.domNode,                                                                                          // 26
      styles = _ref.styles;                                                                                            // 27
                                                                                                                       // 28
  // Can't just do an object merge because domNode.styles is no regular object.                                        // 29
  // Need to do it this way for the engine to fire its `set` listeners.                                                // 30
  Object.keys(styles).forEach(function (key) {                                                                         // 31
    // eslint-disable-next-line no-param-reassign                                                                      // 32
    domNode.style[key] = styles[key];                                                                                  // 33
  });                                                                                                                  // 34
}                                                                                                                      // 35
                                                                                                                       // 36
// Modified from Modernizr                                                                                             // 37
function whichTransitionEvent() {                                                                                      // 38
  var transitions = {                                                                                                  // 39
    transition: 'transitionend',                                                                                       // 40
    OTransition: 'oTransitionEnd',                                                                                     // 41
    MozTransition: 'transitionend',                                                                                    // 42
    WebkitTransition: 'webkitTransitionEnd'                                                                            // 43
  };                                                                                                                   // 44
                                                                                                                       // 45
  // If we're running in a browserless environment (eg. SSR), it doesn't apply.                                        // 46
  // Return a placeholder string, for consistent type return.                                                          // 47
  if (typeof document === 'undefined') return '';                                                                      // 48
                                                                                                                       // 49
  var el = document.createElement('fakeelement');                                                                      // 50
                                                                                                                       // 51
  var match = Object.keys(transitions).find(function (t) {                                                             // 52
    return el.style[t] !== undefined;                                                                                  // 53
  });                                                                                                                  // 54
                                                                                                                       // 55
  // If no `transition` is found, we must be running in a browser so ancient,                                          // 56
  // React itself won't run. Return an empty string, for consistent type return                                        // 57
  return match ? transitions[match] : '';                                                                              // 58
}                                                                                                                      // 59
                                                                                                                       // 60
var getRelativeBoundingBox = exports.getRelativeBoundingBox = function getRelativeBoundingBox(_ref2) {                 // 61
  var childData = _ref2.childData,                                                                                     // 62
      parentData = _ref2.parentData,                                                                                   // 63
      getPosition = _ref2.getPosition;                                                                                 // 64
  var childDomNode = childData.domNode;                                                                                // 65
  var parentDomNode = parentData.domNode;                                                                              // 66
                                                                                                                       // 67
                                                                                                                       // 68
  var parentBox = getPosition(parentDomNode);                                                                          // 69
                                                                                                                       // 70
  var _getPosition = getPosition(childDomNode),                                                                        // 71
      top = _getPosition.top,                                                                                          // 72
      left = _getPosition.left,                                                                                        // 73
      right = _getPosition.right,                                                                                      // 74
      bottom = _getPosition.bottom,                                                                                    // 75
      width = _getPosition.width,                                                                                      // 76
      height = _getPosition.height;                                                                                    // 77
                                                                                                                       // 78
  return {                                                                                                             // 79
    top: top - parentBox.top,                                                                                          // 80
    left: left - parentBox.left,                                                                                       // 81
    right: parentBox.right - right,                                                                                    // 82
    bottom: parentBox.bottom - bottom,                                                                                 // 83
    width: width,                                                                                                      // 84
    height: height                                                                                                     // 85
  };                                                                                                                   // 86
};                                                                                                                     // 87
                                                                                                                       // 88
/** getPositionDelta                                                                                                   // 89
 * This method returns the delta between two bounding boxes, to figure out                                             // 90
 * how mant pixels on each axis the element has moved.                                                                 // 91
 *                                                                                                                     // 92
 * @param {Object} childData - needs shape { domNode, boundingBox }                                                    // 93
 * @param {Object} parentData - needs shape { domNode, boundingBox }                                                   // 94
 * @param {Function} getPosition - the function called to get bounding boxes                                           // 95
 * for a DOM node. Defaults to `getBoundingClientRect`.                                                                // 96
 *                                                                                                                     // 97
 * @returns [{Number: left}, {Number: top}]                                                                            // 98
 */                                                                                                                    // 99
var getPositionDelta = exports.getPositionDelta = function getPositionDelta(_ref3) {                                   // 100
  var childData = _ref3.childData,                                                                                     // 101
      parentData = _ref3.parentData,                                                                                   // 102
      getPosition = _ref3.getPosition;                                                                                 // 103
                                                                                                                       // 104
  // TEMP: A mystery bug is sometimes causing unnecessary boundingBoxes to                                             // 105
  // remain. Until this bug can be solved, this band-aid fix does the job:                                             // 106
  var defaultBox = { top: 0, left: 0, right: 0, bottom: 0 };                                                           // 107
                                                                                                                       // 108
  // Our old box is its last calculated position, derived on mount or at the                                           // 109
  // start of the previous animation.                                                                                  // 110
  var oldRelativeBox = childData.boundingBox || defaultBox;                                                            // 111
                                                                                                                       // 112
  // Our new box is the new final resting place: Where we expect it to wind up                                         // 113
  // after the animation. First we get the box in absolute terms (AKA relative                                         // 114
  // to the viewport), and then we calculate its relative box (relative to the                                         // 115
  // parent container)                                                                                                 // 116
  var newAbsoluteBox = getPosition(childData.domNode);                                                                 // 117
  var newRelativeBox = {                                                                                               // 118
    top: newAbsoluteBox.top - parentData.boundingBox.top,                                                              // 119
    left: newAbsoluteBox.left - parentData.boundingBox.left                                                            // 120
  };                                                                                                                   // 121
                                                                                                                       // 122
  return [oldRelativeBox.left - newRelativeBox.left, oldRelativeBox.top - newRelativeBox.top];                         // 123
};                                                                                                                     // 124
                                                                                                                       // 125
/** removeNodeFromDOMFlow                                                                                              // 126
 * This method does something very sneaky: it removes a DOM node from the                                              // 127
 * document flow, but without actually changing its on-screen position.                                                // 128
 *                                                                                                                     // 129
 * It works by calculating where the node is, and then applying styles                                                 // 130
 * so that it winds up being positioned absolutely, but in exactly the                                                 // 131
 * same place.                                                                                                         // 132
 *                                                                                                                     // 133
 * This is a vital part of the FLIP technique.                                                                         // 134
 *                                                                                                                     // 135
 * @param {Object} domNode - the node we'll be working with                                                            // 136
 * @param {Object} boundingBox - the node's starting position.                                                         // 137
 *                                                                                                                     // 138
 * @returns null                                                                                                       // 139
 */                                                                                                                    // 140
var removeNodeFromDOMFlow = exports.removeNodeFromDOMFlow = function removeNodeFromDOMFlow(childData, verticalAlignment) {
  var domNode = childData.domNode,                                                                                     // 142
      boundingBox = childData.boundingBox;                                                                             // 143
                                                                                                                       // 144
  // For this to work, we have to offset any given `margin`.                                                           // 145
                                                                                                                       // 146
  var computed = window.getComputedStyle(domNode);                                                                     // 147
                                                                                                                       // 148
  // We need to clean up margins, by converting and removing suffix:                                                   // 149
  // eg. '21px' -> 21                                                                                                  // 150
  var marginAttrs = ['margin-top', 'margin-left', 'margin-right'];                                                     // 151
  var margins = marginAttrs.reduce(function (acc, margin) {                                                            // 152
    var propertyVal = computed.getPropertyValue(margin);                                                               // 153
                                                                                                                       // 154
    return _extends({}, acc, _defineProperty({}, margin, Number(propertyVal.replace('px', ''))));                      // 155
  }, {});                                                                                                              // 156
                                                                                                                       // 157
  // If we're bottom-aligned, we need to add the height of the child to its                                            // 158
  // top offset. This is because, when the container is bottom-aligned, its                                            // 159
  // height shrinks from the top, not the bottom. We're removing this node                                             // 160
  // from the flow, so the top is going to drop by its height.                                                         // 161
  var topOffset = verticalAlignment === 'bottom' ? boundingBox.top - boundingBox.height : boundingBox.top;             // 162
                                                                                                                       // 163
  var styles = {                                                                                                       // 164
    position: 'absolute',                                                                                              // 165
    top: topOffset - margins['margin-top'] + 'px',                                                                     // 166
    left: boundingBox.left - margins['margin-left'] + 'px',                                                            // 167
    right: boundingBox.right - margins['margin-right'] + 'px'                                                          // 168
  };                                                                                                                   // 169
                                                                                                                       // 170
  applyStylesToDOMNode({ domNode: domNode, styles: styles });                                                          // 171
};                                                                                                                     // 172
                                                                                                                       // 173
/** updateHeightPlaceholder                                                                                            // 174
 * An optional property to FlipMove is a `maintainContainerHeight` boolean.                                            // 175
 * This property creates a node that fills space, so that the parent                                                   // 176
 * container doesn't collapse when its children are removed from the                                                   // 177
 * document flow.                                                                                                      // 178
 *                                                                                                                     // 179
 * @param {Object} domNode - the node we'll be working with                                                            // 180
 * @param {Object} parentData - needs shape { domNode, boundingBox }                                                   // 181
 * @param {Function} getPosition - the function called to get bounding boxes                                           // 182
 * for a DOM node. Defaults to `getBoundingClientRect`.                                                                // 183
 *                                                                                                                     // 184
 * @returns null                                                                                                       // 185
 */                                                                                                                    // 186
var updateHeightPlaceholder = exports.updateHeightPlaceholder = function updateHeightPlaceholder(_ref4) {              // 187
  var domNode = _ref4.domNode,                                                                                         // 188
      parentData = _ref4.parentData,                                                                                   // 189
      getPosition = _ref4.getPosition;                                                                                 // 190
                                                                                                                       // 191
  // We need to find the height of the container *without* the placeholder.                                            // 192
  // Since it's possible that the placeholder might already be present,                                                // 193
  // we first set its height to 0.                                                                                     // 194
  // This allows the container to collapse down to the size of just its                                                // 195
  // content (plus container padding or borders if any).                                                               // 196
  applyStylesToDOMNode({ domNode: domNode, styles: { height: 0 } });                                                   // 197
                                                                                                                       // 198
  // Find the distance by which the container would be collapsed by elements                                           // 199
  // leaving. We compare the freshly-available parent height with the original,                                        // 200
  // cached container height.                                                                                          // 201
  var originalParentHeight = parentData.boundingBox.height;                                                            // 202
  var collapsedParentHeight = getPosition(parentData.domNode).height;                                                  // 203
  var reductionInHeight = originalParentHeight - collapsedParentHeight;                                                // 204
                                                                                                                       // 205
  // If the container has become shorter, update the padding element's                                                 // 206
  // height to take up the difference. Otherwise set its height to zero,                                               // 207
  // so that it has no effect.                                                                                         // 208
  var styles = {                                                                                                       // 209
    height: reductionInHeight > 0 ? reductionInHeight + 'px' : 0                                                       // 210
  };                                                                                                                   // 211
                                                                                                                       // 212
  applyStylesToDOMNode({ domNode: domNode, styles: styles });                                                          // 213
};                                                                                                                     // 214
                                                                                                                       // 215
var getNativeNode = exports.getNativeNode = function getNativeNode(element) {                                          // 216
  // When running in a windowless environment, abort!                                                                  // 217
  if (typeof HTMLElement === 'undefined') {                                                                            // 218
    return null;                                                                                                       // 219
  }                                                                                                                    // 220
                                                                                                                       // 221
  // `element` may already be a native node.                                                                           // 222
  if (element instanceof HTMLElement) {                                                                                // 223
    return element;                                                                                                    // 224
  }                                                                                                                    // 225
                                                                                                                       // 226
  // While ReactDOM's `findDOMNode` is discouraged, it's the only                                                      // 227
  // publicly-exposed way to find the underlying DOM node for                                                          // 228
  // composite components.                                                                                             // 229
  return (0, _reactDom.findDOMNode)(element);                                                                          // 230
};                                                                                                                     // 231
                                                                                                                       // 232
var createTransitionString = exports.createTransitionString = function createTransitionString(index, props) {          // 233
  var delay = props.delay,                                                                                             // 234
      duration = props.duration;                                                                                       // 235
  var staggerDurationBy = props.staggerDurationBy,                                                                     // 236
      staggerDelayBy = props.staggerDelayBy,                                                                           // 237
      easing = props.easing;                                                                                           // 238
                                                                                                                       // 239
                                                                                                                       // 240
  delay += index * staggerDelayBy;                                                                                     // 241
  duration += index * staggerDurationBy;                                                                               // 242
                                                                                                                       // 243
  var cssProperties = ['transform', 'opacity'];                                                                        // 244
                                                                                                                       // 245
  return cssProperties.map(function (prop) {                                                                           // 246
    return prop + ' ' + duration + 'ms ' + easing + ' ' + delay + 'ms';                                                // 247
  }).join(', ');                                                                                                       // 248
};                                                                                                                     // 249
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"meteor-node-stubs":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/package.json                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "meteor-node-stubs";                                                                                    // 1
exports.version = "0.2.6";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":["./map.json",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/index.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var map = require("./map.json");                                                                                       // 1
var meteorAliases = {};                                                                                                // 2
                                                                                                                       // 3
Object.keys(map).forEach(function (id) {                                                                               // 4
  if (typeof map[id] === "string") {                                                                                   // 5
    var aliasParts = module.id.split("/");                                                                             // 6
    aliasParts.pop();                                                                                                  // 7
    aliasParts.push("node_modules", map[id]);                                                                          // 8
    exports[id] = meteorAliases[id + ".js"] =                                                                          // 9
      aliasParts.join("/");                                                                                            // 10
  } else {                                                                                                             // 11
    exports[id] = map[id];                                                                                             // 12
    meteorAliases[id + ".js"] = function(){};                                                                          // 13
  }                                                                                                                    // 14
});                                                                                                                    // 15
                                                                                                                       // 16
if (typeof meteorInstall === "function") {                                                                             // 17
  meteorInstall({                                                                                                      // 18
    // Install the aliases into a node_modules directory one level up from                                             // 19
    // the root directory, so that they do not clutter the namespace                                                   // 20
    // available to apps and packages.                                                                                 // 21
    "..": {                                                                                                            // 22
      node_modules: meteorAliases                                                                                      // 23
    }                                                                                                                  // 24
  });                                                                                                                  // 25
}                                                                                                                      // 26
                                                                                                                       // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"map.json":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/map.json                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = {                                                                                                     // 1
  "assert": "assert/",                                                                                                 // 2
  "buffer": "buffer/",                                                                                                 // 3
  "child_process": null,                                                                                               // 4
  "cluster": null,                                                                                                     // 5
  "console": "console-browserify",                                                                                     // 6
  "constants": "constants-browserify",                                                                                 // 7
  "crypto": "crypto-browserify",                                                                                       // 8
  "dgram": null,                                                                                                       // 9
  "dns": null,                                                                                                         // 10
  "domain": "domain-browser",                                                                                          // 11
  "events": "events/",                                                                                                 // 12
  "fs": null,                                                                                                          // 13
  "http": "http-browserify",                                                                                           // 14
  "https": "https-browserify",                                                                                         // 15
  "module": null,                                                                                                      // 16
  "net": null,                                                                                                         // 17
  "os": "os-browserify/browser.js",                                                                                    // 18
  "path": "path-browserify",                                                                                           // 19
  "process": "process/browser.js",                                                                                     // 20
  "punycode": "punycode/",                                                                                             // 21
  "querystring": "querystring-es3/",                                                                                   // 22
  "readline": null,                                                                                                    // 23
  "repl": null,                                                                                                        // 24
  "stream": "stream-browserify",                                                                                       // 25
  "_stream_duplex": "readable-stream/duplex.js",                                                                       // 26
  "_stream_passthrough": "readable-stream/passthrough.js",                                                             // 27
  "_stream_readable": "readable-stream/readable.js",                                                                   // 28
  "_stream_transform": "readable-stream/transform.js",                                                                 // 29
  "_stream_writable": "readable-stream/writable.js",                                                                   // 30
  "string_decoder": "string_decoder/",                                                                                 // 31
  "sys": "util/util.js",                                                                                               // 32
  "timers": "timers-browserify",                                                                                       // 33
  "tls": null,                                                                                                         // 34
  "tty": "tty-browserify",                                                                                             // 35
  "url": "url/",                                                                                                       // 36
  "util": "util/util.js",                                                                                              // 37
  "vm": "vm-browserify",                                                                                               // 38
  "zlib": "browserify-zlib"                                                                                            // 39
};                                                                                                                     // 40
                                                                                                                       // 41
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deps":{"buffer.js":["buffer/",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/deps/buffer.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("buffer/");                                                                                                    // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"process.js":["process/browser.js",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/deps/process.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("process/browser.js");                                                                                         // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"domain.js":["domain-browser",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/deps/domain.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("domain-browser");                                                                                             // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"node_modules":{"buffer":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/buffer/package.json                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "buffer";                                                                                               // 1
exports.version = "4.9.1";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":["base64-js","ieee754","isarray",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/buffer/index.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * The buffer module from node.js, for the browser.                                                                    // 2
 *                                                                                                                     // 3
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>                                               // 4
 * @license  MIT                                                                                                       // 5
 */                                                                                                                    // 6
/* eslint-disable no-proto */                                                                                          // 7
                                                                                                                       // 8
'use strict'                                                                                                           // 9
                                                                                                                       // 10
var base64 = require('base64-js')                                                                                      // 11
var ieee754 = require('ieee754')                                                                                       // 12
var isArray = require('isarray')                                                                                       // 13
                                                                                                                       // 14
exports.Buffer = Buffer                                                                                                // 15
exports.SlowBuffer = SlowBuffer                                                                                        // 16
exports.INSPECT_MAX_BYTES = 50                                                                                         // 17
                                                                                                                       // 18
/**                                                                                                                    // 19
 * If `Buffer.TYPED_ARRAY_SUPPORT`:                                                                                    // 20
 *   === true    Use Uint8Array implementation (fastest)                                                               // 21
 *   === false   Use Object implementation (most compatible, even IE6)                                                 // 22
 *                                                                                                                     // 23
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,                                  // 24
 * Opera 11.6+, iOS 4.2+.                                                                                              // 25
 *                                                                                                                     // 26
 * Due to various browser bugs, sometimes the Object implementation will be used even                                  // 27
 * when the browser supports typed arrays.                                                                             // 28
 *                                                                                                                     // 29
 * Note:                                                                                                               // 30
 *                                                                                                                     // 31
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,                                 // 32
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.                                                       // 33
 *                                                                                                                     // 34
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.                                            // 35
 *                                                                                                                     // 36
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of                              // 37
 *     incorrect length in some situations.                                                                            // 38
                                                                                                                       // 39
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they                              // 40
 * get the Object implementation, which is slower but behaves correctly.                                               // 41
 */                                                                                                                    // 42
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined                                                  // 43
  ? global.TYPED_ARRAY_SUPPORT                                                                                         // 44
  : typedArraySupport()                                                                                                // 45
                                                                                                                       // 46
/*                                                                                                                     // 47
 * Export kMaxLength after typed array support is determined.                                                          // 48
 */                                                                                                                    // 49
exports.kMaxLength = kMaxLength()                                                                                      // 50
                                                                                                                       // 51
function typedArraySupport () {                                                                                        // 52
  try {                                                                                                                // 53
    var arr = new Uint8Array(1)                                                                                        // 54
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}                                  // 55
    return arr.foo() === 42 && // typed array instances can be augmented                                               // 56
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`                                           // 57
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`                                              // 58
  } catch (e) {                                                                                                        // 59
    return false                                                                                                       // 60
  }                                                                                                                    // 61
}                                                                                                                      // 62
                                                                                                                       // 63
function kMaxLength () {                                                                                               // 64
  return Buffer.TYPED_ARRAY_SUPPORT                                                                                    // 65
    ? 0x7fffffff                                                                                                       // 66
    : 0x3fffffff                                                                                                       // 67
}                                                                                                                      // 68
                                                                                                                       // 69
function createBuffer (that, length) {                                                                                 // 70
  if (kMaxLength() < length) {                                                                                         // 71
    throw new RangeError('Invalid typed array length')                                                                 // 72
  }                                                                                                                    // 73
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 74
    // Return an augmented `Uint8Array` instance, for best performance                                                 // 75
    that = new Uint8Array(length)                                                                                      // 76
    that.__proto__ = Buffer.prototype                                                                                  // 77
  } else {                                                                                                             // 78
    // Fallback: Return an object instance of the Buffer class                                                         // 79
    if (that === null) {                                                                                               // 80
      that = new Buffer(length)                                                                                        // 81
    }                                                                                                                  // 82
    that.length = length                                                                                               // 83
  }                                                                                                                    // 84
                                                                                                                       // 85
  return that                                                                                                          // 86
}                                                                                                                      // 87
                                                                                                                       // 88
/**                                                                                                                    // 89
 * The Buffer constructor returns instances of `Uint8Array` that have their                                            // 90
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of                                     // 91
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods                                     // 92
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it                                       // 93
 * returns a single octet.                                                                                             // 94
 *                                                                                                                     // 95
 * The `Uint8Array` prototype remains unmodified.                                                                      // 96
 */                                                                                                                    // 97
                                                                                                                       // 98
function Buffer (arg, encodingOrOffset, length) {                                                                      // 99
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {                                                      // 100
    return new Buffer(arg, encodingOrOffset, length)                                                                   // 101
  }                                                                                                                    // 102
                                                                                                                       // 103
  // Common case.                                                                                                      // 104
  if (typeof arg === 'number') {                                                                                       // 105
    if (typeof encodingOrOffset === 'string') {                                                                        // 106
      throw new Error(                                                                                                 // 107
        'If encoding is specified then the first argument must be a string'                                            // 108
      )                                                                                                                // 109
    }                                                                                                                  // 110
    return allocUnsafe(this, arg)                                                                                      // 111
  }                                                                                                                    // 112
  return from(this, arg, encodingOrOffset, length)                                                                     // 113
}                                                                                                                      // 114
                                                                                                                       // 115
Buffer.poolSize = 8192 // not used by this implementation                                                              // 116
                                                                                                                       // 117
// TODO: Legacy, not needed anymore. Remove in next major version.                                                     // 118
Buffer._augment = function (arr) {                                                                                     // 119
  arr.__proto__ = Buffer.prototype                                                                                     // 120
  return arr                                                                                                           // 121
}                                                                                                                      // 122
                                                                                                                       // 123
function from (that, value, encodingOrOffset, length) {                                                                // 124
  if (typeof value === 'number') {                                                                                     // 125
    throw new TypeError('"value" argument must not be a number')                                                       // 126
  }                                                                                                                    // 127
                                                                                                                       // 128
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {                                            // 129
    return fromArrayBuffer(that, value, encodingOrOffset, length)                                                      // 130
  }                                                                                                                    // 131
                                                                                                                       // 132
  if (typeof value === 'string') {                                                                                     // 133
    return fromString(that, value, encodingOrOffset)                                                                   // 134
  }                                                                                                                    // 135
                                                                                                                       // 136
  return fromObject(that, value)                                                                                       // 137
}                                                                                                                      // 138
                                                                                                                       // 139
/**                                                                                                                    // 140
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError                                             // 141
 * if value is a number.                                                                                               // 142
 * Buffer.from(str[, encoding])                                                                                        // 143
 * Buffer.from(array)                                                                                                  // 144
 * Buffer.from(buffer)                                                                                                 // 145
 * Buffer.from(arrayBuffer[, byteOffset[, length]])                                                                    // 146
 **/                                                                                                                   // 147
Buffer.from = function (value, encodingOrOffset, length) {                                                             // 148
  return from(null, value, encodingOrOffset, length)                                                                   // 149
}                                                                                                                      // 150
                                                                                                                       // 151
if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                      // 152
  Buffer.prototype.__proto__ = Uint8Array.prototype                                                                    // 153
  Buffer.__proto__ = Uint8Array                                                                                        // 154
  if (typeof Symbol !== 'undefined' && Symbol.species &&                                                               // 155
      Buffer[Symbol.species] === Buffer) {                                                                             // 156
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97                                         // 157
    Object.defineProperty(Buffer, Symbol.species, {                                                                    // 158
      value: null,                                                                                                     // 159
      configurable: true                                                                                               // 160
    })                                                                                                                 // 161
  }                                                                                                                    // 162
}                                                                                                                      // 163
                                                                                                                       // 164
function assertSize (size) {                                                                                           // 165
  if (typeof size !== 'number') {                                                                                      // 166
    throw new TypeError('"size" argument must be a number')                                                            // 167
  } else if (size < 0) {                                                                                               // 168
    throw new RangeError('"size" argument must not be negative')                                                       // 169
  }                                                                                                                    // 170
}                                                                                                                      // 171
                                                                                                                       // 172
function alloc (that, size, fill, encoding) {                                                                          // 173
  assertSize(size)                                                                                                     // 174
  if (size <= 0) {                                                                                                     // 175
    return createBuffer(that, size)                                                                                    // 176
  }                                                                                                                    // 177
  if (fill !== undefined) {                                                                                            // 178
    // Only pay attention to encoding if it's a string. This                                                           // 179
    // prevents accidentally sending in a number that would                                                            // 180
    // be interpretted as a start offset.                                                                              // 181
    return typeof encoding === 'string'                                                                                // 182
      ? createBuffer(that, size).fill(fill, encoding)                                                                  // 183
      : createBuffer(that, size).fill(fill)                                                                            // 184
  }                                                                                                                    // 185
  return createBuffer(that, size)                                                                                      // 186
}                                                                                                                      // 187
                                                                                                                       // 188
/**                                                                                                                    // 189
 * Creates a new filled Buffer instance.                                                                               // 190
 * alloc(size[, fill[, encoding]])                                                                                     // 191
 **/                                                                                                                   // 192
Buffer.alloc = function (size, fill, encoding) {                                                                       // 193
  return alloc(null, size, fill, encoding)                                                                             // 194
}                                                                                                                      // 195
                                                                                                                       // 196
function allocUnsafe (that, size) {                                                                                    // 197
  assertSize(size)                                                                                                     // 198
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)                                                          // 199
  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 200
    for (var i = 0; i < size; ++i) {                                                                                   // 201
      that[i] = 0                                                                                                      // 202
    }                                                                                                                  // 203
  }                                                                                                                    // 204
  return that                                                                                                          // 205
}                                                                                                                      // 206
                                                                                                                       // 207
/**                                                                                                                    // 208
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.                                    // 209
 * */                                                                                                                  // 210
Buffer.allocUnsafe = function (size) {                                                                                 // 211
  return allocUnsafe(null, size)                                                                                       // 212
}                                                                                                                      // 213
/**                                                                                                                    // 214
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.                                // 215
 */                                                                                                                    // 216
Buffer.allocUnsafeSlow = function (size) {                                                                             // 217
  return allocUnsafe(null, size)                                                                                       // 218
}                                                                                                                      // 219
                                                                                                                       // 220
function fromString (that, string, encoding) {                                                                         // 221
  if (typeof encoding !== 'string' || encoding === '') {                                                               // 222
    encoding = 'utf8'                                                                                                  // 223
  }                                                                                                                    // 224
                                                                                                                       // 225
  if (!Buffer.isEncoding(encoding)) {                                                                                  // 226
    throw new TypeError('"encoding" must be a valid string encoding')                                                  // 227
  }                                                                                                                    // 228
                                                                                                                       // 229
  var length = byteLength(string, encoding) | 0                                                                        // 230
  that = createBuffer(that, length)                                                                                    // 231
                                                                                                                       // 232
  var actual = that.write(string, encoding)                                                                            // 233
                                                                                                                       // 234
  if (actual !== length) {                                                                                             // 235
    // Writing a hex string, for example, that contains invalid characters will                                        // 236
    // cause everything after the first invalid character to be ignored. (e.g.                                         // 237
    // 'abxxcd' will be treated as 'ab')                                                                               // 238
    that = that.slice(0, actual)                                                                                       // 239
  }                                                                                                                    // 240
                                                                                                                       // 241
  return that                                                                                                          // 242
}                                                                                                                      // 243
                                                                                                                       // 244
function fromArrayLike (that, array) {                                                                                 // 245
  var length = array.length < 0 ? 0 : checked(array.length) | 0                                                        // 246
  that = createBuffer(that, length)                                                                                    // 247
  for (var i = 0; i < length; i += 1) {                                                                                // 248
    that[i] = array[i] & 255                                                                                           // 249
  }                                                                                                                    // 250
  return that                                                                                                          // 251
}                                                                                                                      // 252
                                                                                                                       // 253
function fromArrayBuffer (that, array, byteOffset, length) {                                                           // 254
  array.byteLength // this throws if `array` is not a valid ArrayBuffer                                                // 255
                                                                                                                       // 256
  if (byteOffset < 0 || array.byteLength < byteOffset) {                                                               // 257
    throw new RangeError('\'offset\' is out of bounds')                                                                // 258
  }                                                                                                                    // 259
                                                                                                                       // 260
  if (array.byteLength < byteOffset + (length || 0)) {                                                                 // 261
    throw new RangeError('\'length\' is out of bounds')                                                                // 262
  }                                                                                                                    // 263
                                                                                                                       // 264
  if (byteOffset === undefined && length === undefined) {                                                              // 265
    array = new Uint8Array(array)                                                                                      // 266
  } else if (length === undefined) {                                                                                   // 267
    array = new Uint8Array(array, byteOffset)                                                                          // 268
  } else {                                                                                                             // 269
    array = new Uint8Array(array, byteOffset, length)                                                                  // 270
  }                                                                                                                    // 271
                                                                                                                       // 272
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 273
    // Return an augmented `Uint8Array` instance, for best performance                                                 // 274
    that = array                                                                                                       // 275
    that.__proto__ = Buffer.prototype                                                                                  // 276
  } else {                                                                                                             // 277
    // Fallback: Return an object instance of the Buffer class                                                         // 278
    that = fromArrayLike(that, array)                                                                                  // 279
  }                                                                                                                    // 280
  return that                                                                                                          // 281
}                                                                                                                      // 282
                                                                                                                       // 283
function fromObject (that, obj) {                                                                                      // 284
  if (Buffer.isBuffer(obj)) {                                                                                          // 285
    var len = checked(obj.length) | 0                                                                                  // 286
    that = createBuffer(that, len)                                                                                     // 287
                                                                                                                       // 288
    if (that.length === 0) {                                                                                           // 289
      return that                                                                                                      // 290
    }                                                                                                                  // 291
                                                                                                                       // 292
    obj.copy(that, 0, 0, len)                                                                                          // 293
    return that                                                                                                        // 294
  }                                                                                                                    // 295
                                                                                                                       // 296
  if (obj) {                                                                                                           // 297
    if ((typeof ArrayBuffer !== 'undefined' &&                                                                         // 298
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {                                                       // 299
      if (typeof obj.length !== 'number' || isnan(obj.length)) {                                                       // 300
        return createBuffer(that, 0)                                                                                   // 301
      }                                                                                                                // 302
      return fromArrayLike(that, obj)                                                                                  // 303
    }                                                                                                                  // 304
                                                                                                                       // 305
    if (obj.type === 'Buffer' && isArray(obj.data)) {                                                                  // 306
      return fromArrayLike(that, obj.data)                                                                             // 307
    }                                                                                                                  // 308
  }                                                                                                                    // 309
                                                                                                                       // 310
  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')            // 311
}                                                                                                                      // 312
                                                                                                                       // 313
function checked (length) {                                                                                            // 314
  // Note: cannot use `length < kMaxLength()` here because that fails when                                             // 315
  // length is NaN (which is otherwise coerced to zero.)                                                               // 316
  if (length >= kMaxLength()) {                                                                                        // 317
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +                                           // 318
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')                                            // 319
  }                                                                                                                    // 320
  return length | 0                                                                                                    // 321
}                                                                                                                      // 322
                                                                                                                       // 323
function SlowBuffer (length) {                                                                                         // 324
  if (+length != length) { // eslint-disable-line eqeqeq                                                               // 325
    length = 0                                                                                                         // 326
  }                                                                                                                    // 327
  return Buffer.alloc(+length)                                                                                         // 328
}                                                                                                                      // 329
                                                                                                                       // 330
Buffer.isBuffer = function isBuffer (b) {                                                                              // 331
  return !!(b != null && b._isBuffer)                                                                                  // 332
}                                                                                                                      // 333
                                                                                                                       // 334
Buffer.compare = function compare (a, b) {                                                                             // 335
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {                                                                    // 336
    throw new TypeError('Arguments must be Buffers')                                                                   // 337
  }                                                                                                                    // 338
                                                                                                                       // 339
  if (a === b) return 0                                                                                                // 340
                                                                                                                       // 341
  var x = a.length                                                                                                     // 342
  var y = b.length                                                                                                     // 343
                                                                                                                       // 344
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {                                                                // 345
    if (a[i] !== b[i]) {                                                                                               // 346
      x = a[i]                                                                                                         // 347
      y = b[i]                                                                                                         // 348
      break                                                                                                            // 349
    }                                                                                                                  // 350
  }                                                                                                                    // 351
                                                                                                                       // 352
  if (x < y) return -1                                                                                                 // 353
  if (y < x) return 1                                                                                                  // 354
  return 0                                                                                                             // 355
}                                                                                                                      // 356
                                                                                                                       // 357
Buffer.isEncoding = function isEncoding (encoding) {                                                                   // 358
  switch (String(encoding).toLowerCase()) {                                                                            // 359
    case 'hex':                                                                                                        // 360
    case 'utf8':                                                                                                       // 361
    case 'utf-8':                                                                                                      // 362
    case 'ascii':                                                                                                      // 363
    case 'latin1':                                                                                                     // 364
    case 'binary':                                                                                                     // 365
    case 'base64':                                                                                                     // 366
    case 'ucs2':                                                                                                       // 367
    case 'ucs-2':                                                                                                      // 368
    case 'utf16le':                                                                                                    // 369
    case 'utf-16le':                                                                                                   // 370
      return true                                                                                                      // 371
    default:                                                                                                           // 372
      return false                                                                                                     // 373
  }                                                                                                                    // 374
}                                                                                                                      // 375
                                                                                                                       // 376
Buffer.concat = function concat (list, length) {                                                                       // 377
  if (!isArray(list)) {                                                                                                // 378
    throw new TypeError('"list" argument must be an Array of Buffers')                                                 // 379
  }                                                                                                                    // 380
                                                                                                                       // 381
  if (list.length === 0) {                                                                                             // 382
    return Buffer.alloc(0)                                                                                             // 383
  }                                                                                                                    // 384
                                                                                                                       // 385
  var i                                                                                                                // 386
  if (length === undefined) {                                                                                          // 387
    length = 0                                                                                                         // 388
    for (i = 0; i < list.length; ++i) {                                                                                // 389
      length += list[i].length                                                                                         // 390
    }                                                                                                                  // 391
  }                                                                                                                    // 392
                                                                                                                       // 393
  var buffer = Buffer.allocUnsafe(length)                                                                              // 394
  var pos = 0                                                                                                          // 395
  for (i = 0; i < list.length; ++i) {                                                                                  // 396
    var buf = list[i]                                                                                                  // 397
    if (!Buffer.isBuffer(buf)) {                                                                                       // 398
      throw new TypeError('"list" argument must be an Array of Buffers')                                               // 399
    }                                                                                                                  // 400
    buf.copy(buffer, pos)                                                                                              // 401
    pos += buf.length                                                                                                  // 402
  }                                                                                                                    // 403
  return buffer                                                                                                        // 404
}                                                                                                                      // 405
                                                                                                                       // 406
function byteLength (string, encoding) {                                                                               // 407
  if (Buffer.isBuffer(string)) {                                                                                       // 408
    return string.length                                                                                               // 409
  }                                                                                                                    // 410
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&                                // 411
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {                                                 // 412
    return string.byteLength                                                                                           // 413
  }                                                                                                                    // 414
  if (typeof string !== 'string') {                                                                                    // 415
    string = '' + string                                                                                               // 416
  }                                                                                                                    // 417
                                                                                                                       // 418
  var len = string.length                                                                                              // 419
  if (len === 0) return 0                                                                                              // 420
                                                                                                                       // 421
  // Use a for loop to avoid recursion                                                                                 // 422
  var loweredCase = false                                                                                              // 423
  for (;;) {                                                                                                           // 424
    switch (encoding) {                                                                                                // 425
      case 'ascii':                                                                                                    // 426
      case 'latin1':                                                                                                   // 427
      case 'binary':                                                                                                   // 428
        return len                                                                                                     // 429
      case 'utf8':                                                                                                     // 430
      case 'utf-8':                                                                                                    // 431
      case undefined:                                                                                                  // 432
        return utf8ToBytes(string).length                                                                              // 433
      case 'ucs2':                                                                                                     // 434
      case 'ucs-2':                                                                                                    // 435
      case 'utf16le':                                                                                                  // 436
      case 'utf-16le':                                                                                                 // 437
        return len * 2                                                                                                 // 438
      case 'hex':                                                                                                      // 439
        return len >>> 1                                                                                               // 440
      case 'base64':                                                                                                   // 441
        return base64ToBytes(string).length                                                                            // 442
      default:                                                                                                         // 443
        if (loweredCase) return utf8ToBytes(string).length // assume utf8                                              // 444
        encoding = ('' + encoding).toLowerCase()                                                                       // 445
        loweredCase = true                                                                                             // 446
    }                                                                                                                  // 447
  }                                                                                                                    // 448
}                                                                                                                      // 449
Buffer.byteLength = byteLength                                                                                         // 450
                                                                                                                       // 451
function slowToString (encoding, start, end) {                                                                         // 452
  var loweredCase = false                                                                                              // 453
                                                                                                                       // 454
  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only                                         // 455
  // property of a typed array.                                                                                        // 456
                                                                                                                       // 457
  // This behaves neither like String nor Uint8Array in that we set start/end                                          // 458
  // to their upper/lower bounds if the value passed is out of range.                                                  // 459
  // undefined is handled specially as per ECMA-262 6th Edition,                                                       // 460
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.                                                   // 461
  if (start === undefined || start < 0) {                                                                              // 462
    start = 0                                                                                                          // 463
  }                                                                                                                    // 464
  // Return early if start > this.length. Done here to prevent potential uint32                                        // 465
  // coercion fail below.                                                                                              // 466
  if (start > this.length) {                                                                                           // 467
    return ''                                                                                                          // 468
  }                                                                                                                    // 469
                                                                                                                       // 470
  if (end === undefined || end > this.length) {                                                                        // 471
    end = this.length                                                                                                  // 472
  }                                                                                                                    // 473
                                                                                                                       // 474
  if (end <= 0) {                                                                                                      // 475
    return ''                                                                                                          // 476
  }                                                                                                                    // 477
                                                                                                                       // 478
  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.                                           // 479
  end >>>= 0                                                                                                           // 480
  start >>>= 0                                                                                                         // 481
                                                                                                                       // 482
  if (end <= start) {                                                                                                  // 483
    return ''                                                                                                          // 484
  }                                                                                                                    // 485
                                                                                                                       // 486
  if (!encoding) encoding = 'utf8'                                                                                     // 487
                                                                                                                       // 488
  while (true) {                                                                                                       // 489
    switch (encoding) {                                                                                                // 490
      case 'hex':                                                                                                      // 491
        return hexSlice(this, start, end)                                                                              // 492
                                                                                                                       // 493
      case 'utf8':                                                                                                     // 494
      case 'utf-8':                                                                                                    // 495
        return utf8Slice(this, start, end)                                                                             // 496
                                                                                                                       // 497
      case 'ascii':                                                                                                    // 498
        return asciiSlice(this, start, end)                                                                            // 499
                                                                                                                       // 500
      case 'latin1':                                                                                                   // 501
      case 'binary':                                                                                                   // 502
        return latin1Slice(this, start, end)                                                                           // 503
                                                                                                                       // 504
      case 'base64':                                                                                                   // 505
        return base64Slice(this, start, end)                                                                           // 506
                                                                                                                       // 507
      case 'ucs2':                                                                                                     // 508
      case 'ucs-2':                                                                                                    // 509
      case 'utf16le':                                                                                                  // 510
      case 'utf-16le':                                                                                                 // 511
        return utf16leSlice(this, start, end)                                                                          // 512
                                                                                                                       // 513
      default:                                                                                                         // 514
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 515
        encoding = (encoding + '').toLowerCase()                                                                       // 516
        loweredCase = true                                                                                             // 517
    }                                                                                                                  // 518
  }                                                                                                                    // 519
}                                                                                                                      // 520
                                                                                                                       // 521
// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect                                 // 522
// Buffer instances.                                                                                                   // 523
Buffer.prototype._isBuffer = true                                                                                      // 524
                                                                                                                       // 525
function swap (b, n, m) {                                                                                              // 526
  var i = b[n]                                                                                                         // 527
  b[n] = b[m]                                                                                                          // 528
  b[m] = i                                                                                                             // 529
}                                                                                                                      // 530
                                                                                                                       // 531
Buffer.prototype.swap16 = function swap16 () {                                                                         // 532
  var len = this.length                                                                                                // 533
  if (len % 2 !== 0) {                                                                                                 // 534
    throw new RangeError('Buffer size must be a multiple of 16-bits')                                                  // 535
  }                                                                                                                    // 536
  for (var i = 0; i < len; i += 2) {                                                                                   // 537
    swap(this, i, i + 1)                                                                                               // 538
  }                                                                                                                    // 539
  return this                                                                                                          // 540
}                                                                                                                      // 541
                                                                                                                       // 542
Buffer.prototype.swap32 = function swap32 () {                                                                         // 543
  var len = this.length                                                                                                // 544
  if (len % 4 !== 0) {                                                                                                 // 545
    throw new RangeError('Buffer size must be a multiple of 32-bits')                                                  // 546
  }                                                                                                                    // 547
  for (var i = 0; i < len; i += 4) {                                                                                   // 548
    swap(this, i, i + 3)                                                                                               // 549
    swap(this, i + 1, i + 2)                                                                                           // 550
  }                                                                                                                    // 551
  return this                                                                                                          // 552
}                                                                                                                      // 553
                                                                                                                       // 554
Buffer.prototype.swap64 = function swap64 () {                                                                         // 555
  var len = this.length                                                                                                // 556
  if (len % 8 !== 0) {                                                                                                 // 557
    throw new RangeError('Buffer size must be a multiple of 64-bits')                                                  // 558
  }                                                                                                                    // 559
  for (var i = 0; i < len; i += 8) {                                                                                   // 560
    swap(this, i, i + 7)                                                                                               // 561
    swap(this, i + 1, i + 6)                                                                                           // 562
    swap(this, i + 2, i + 5)                                                                                           // 563
    swap(this, i + 3, i + 4)                                                                                           // 564
  }                                                                                                                    // 565
  return this                                                                                                          // 566
}                                                                                                                      // 567
                                                                                                                       // 568
Buffer.prototype.toString = function toString () {                                                                     // 569
  var length = this.length | 0                                                                                         // 570
  if (length === 0) return ''                                                                                          // 571
  if (arguments.length === 0) return utf8Slice(this, 0, length)                                                        // 572
  return slowToString.apply(this, arguments)                                                                           // 573
}                                                                                                                      // 574
                                                                                                                       // 575
Buffer.prototype.equals = function equals (b) {                                                                        // 576
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                            // 577
  if (this === b) return true                                                                                          // 578
  return Buffer.compare(this, b) === 0                                                                                 // 579
}                                                                                                                      // 580
                                                                                                                       // 581
Buffer.prototype.inspect = function inspect () {                                                                       // 582
  var str = ''                                                                                                         // 583
  var max = exports.INSPECT_MAX_BYTES                                                                                  // 584
  if (this.length > 0) {                                                                                               // 585
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')                                                        // 586
    if (this.length > max) str += ' ... '                                                                              // 587
  }                                                                                                                    // 588
  return '<Buffer ' + str + '>'                                                                                        // 589
}                                                                                                                      // 590
                                                                                                                       // 591
Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {                                 // 592
  if (!Buffer.isBuffer(target)) {                                                                                      // 593
    throw new TypeError('Argument must be a Buffer')                                                                   // 594
  }                                                                                                                    // 595
                                                                                                                       // 596
  if (start === undefined) {                                                                                           // 597
    start = 0                                                                                                          // 598
  }                                                                                                                    // 599
  if (end === undefined) {                                                                                             // 600
    end = target ? target.length : 0                                                                                   // 601
  }                                                                                                                    // 602
  if (thisStart === undefined) {                                                                                       // 603
    thisStart = 0                                                                                                      // 604
  }                                                                                                                    // 605
  if (thisEnd === undefined) {                                                                                         // 606
    thisEnd = this.length                                                                                              // 607
  }                                                                                                                    // 608
                                                                                                                       // 609
  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {                                    // 610
    throw new RangeError('out of range index')                                                                         // 611
  }                                                                                                                    // 612
                                                                                                                       // 613
  if (thisStart >= thisEnd && start >= end) {                                                                          // 614
    return 0                                                                                                           // 615
  }                                                                                                                    // 616
  if (thisStart >= thisEnd) {                                                                                          // 617
    return -1                                                                                                          // 618
  }                                                                                                                    // 619
  if (start >= end) {                                                                                                  // 620
    return 1                                                                                                           // 621
  }                                                                                                                    // 622
                                                                                                                       // 623
  start >>>= 0                                                                                                         // 624
  end >>>= 0                                                                                                           // 625
  thisStart >>>= 0                                                                                                     // 626
  thisEnd >>>= 0                                                                                                       // 627
                                                                                                                       // 628
  if (this === target) return 0                                                                                        // 629
                                                                                                                       // 630
  var x = thisEnd - thisStart                                                                                          // 631
  var y = end - start                                                                                                  // 632
  var len = Math.min(x, y)                                                                                             // 633
                                                                                                                       // 634
  var thisCopy = this.slice(thisStart, thisEnd)                                                                        // 635
  var targetCopy = target.slice(start, end)                                                                            // 636
                                                                                                                       // 637
  for (var i = 0; i < len; ++i) {                                                                                      // 638
    if (thisCopy[i] !== targetCopy[i]) {                                                                               // 639
      x = thisCopy[i]                                                                                                  // 640
      y = targetCopy[i]                                                                                                // 641
      break                                                                                                            // 642
    }                                                                                                                  // 643
  }                                                                                                                    // 644
                                                                                                                       // 645
  if (x < y) return -1                                                                                                 // 646
  if (y < x) return 1                                                                                                  // 647
  return 0                                                                                                             // 648
}                                                                                                                      // 649
                                                                                                                       // 650
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,                                        // 651
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.                                                   // 652
//                                                                                                                     // 653
// Arguments:                                                                                                          // 654
// - buffer - a Buffer to search                                                                                       // 655
// - val - a string, Buffer, or number                                                                                 // 656
// - byteOffset - an index into `buffer`; will be clamped to an int32                                                  // 657
// - encoding - an optional encoding, relevant is val is a string                                                      // 658
// - dir - true for indexOf, false for lastIndexOf                                                                     // 659
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {                                               // 660
  // Empty buffer means no match                                                                                       // 661
  if (buffer.length === 0) return -1                                                                                   // 662
                                                                                                                       // 663
  // Normalize byteOffset                                                                                              // 664
  if (typeof byteOffset === 'string') {                                                                                // 665
    encoding = byteOffset                                                                                              // 666
    byteOffset = 0                                                                                                     // 667
  } else if (byteOffset > 0x7fffffff) {                                                                                // 668
    byteOffset = 0x7fffffff                                                                                            // 669
  } else if (byteOffset < -0x80000000) {                                                                               // 670
    byteOffset = -0x80000000                                                                                           // 671
  }                                                                                                                    // 672
  byteOffset = +byteOffset  // Coerce to Number.                                                                       // 673
  if (isNaN(byteOffset)) {                                                                                             // 674
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer                                       // 675
    byteOffset = dir ? 0 : (buffer.length - 1)                                                                         // 676
  }                                                                                                                    // 677
                                                                                                                       // 678
  // Normalize byteOffset: negative offsets start from the end of the buffer                                           // 679
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset                                                          // 680
  if (byteOffset >= buffer.length) {                                                                                   // 681
    if (dir) return -1                                                                                                 // 682
    else byteOffset = buffer.length - 1                                                                                // 683
  } else if (byteOffset < 0) {                                                                                         // 684
    if (dir) byteOffset = 0                                                                                            // 685
    else return -1                                                                                                     // 686
  }                                                                                                                    // 687
                                                                                                                       // 688
  // Normalize val                                                                                                     // 689
  if (typeof val === 'string') {                                                                                       // 690
    val = Buffer.from(val, encoding)                                                                                   // 691
  }                                                                                                                    // 692
                                                                                                                       // 693
  // Finally, search either indexOf (if dir is true) or lastIndexOf                                                    // 694
  if (Buffer.isBuffer(val)) {                                                                                          // 695
    // Special case: looking for empty string/buffer always fails                                                      // 696
    if (val.length === 0) {                                                                                            // 697
      return -1                                                                                                        // 698
    }                                                                                                                  // 699
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)                                                        // 700
  } else if (typeof val === 'number') {                                                                                // 701
    val = val & 0xFF // Search for a byte value [0-255]                                                                // 702
    if (Buffer.TYPED_ARRAY_SUPPORT &&                                                                                  // 703
        typeof Uint8Array.prototype.indexOf === 'function') {                                                          // 704
      if (dir) {                                                                                                       // 705
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)                                              // 706
      } else {                                                                                                         // 707
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)                                          // 708
      }                                                                                                                // 709
    }                                                                                                                  // 710
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)                                                    // 711
  }                                                                                                                    // 712
                                                                                                                       // 713
  throw new TypeError('val must be string, number or Buffer')                                                          // 714
}                                                                                                                      // 715
                                                                                                                       // 716
function arrayIndexOf (arr, val, byteOffset, encoding, dir) {                                                          // 717
  var indexSize = 1                                                                                                    // 718
  var arrLength = arr.length                                                                                           // 719
  var valLength = val.length                                                                                           // 720
                                                                                                                       // 721
  if (encoding !== undefined) {                                                                                        // 722
    encoding = String(encoding).toLowerCase()                                                                          // 723
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||                                                                 // 724
        encoding === 'utf16le' || encoding === 'utf-16le') {                                                           // 725
      if (arr.length < 2 || val.length < 2) {                                                                          // 726
        return -1                                                                                                      // 727
      }                                                                                                                // 728
      indexSize = 2                                                                                                    // 729
      arrLength /= 2                                                                                                   // 730
      valLength /= 2                                                                                                   // 731
      byteOffset /= 2                                                                                                  // 732
    }                                                                                                                  // 733
  }                                                                                                                    // 734
                                                                                                                       // 735
  function read (buf, i) {                                                                                             // 736
    if (indexSize === 1) {                                                                                             // 737
      return buf[i]                                                                                                    // 738
    } else {                                                                                                           // 739
      return buf.readUInt16BE(i * indexSize)                                                                           // 740
    }                                                                                                                  // 741
  }                                                                                                                    // 742
                                                                                                                       // 743
  var i                                                                                                                // 744
  if (dir) {                                                                                                           // 745
    var foundIndex = -1                                                                                                // 746
    for (i = byteOffset; i < arrLength; i++) {                                                                         // 747
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {                                        // 748
        if (foundIndex === -1) foundIndex = i                                                                          // 749
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize                                            // 750
      } else {                                                                                                         // 751
        if (foundIndex !== -1) i -= i - foundIndex                                                                     // 752
        foundIndex = -1                                                                                                // 753
      }                                                                                                                // 754
    }                                                                                                                  // 755
  } else {                                                                                                             // 756
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength                                         // 757
    for (i = byteOffset; i >= 0; i--) {                                                                                // 758
      var found = true                                                                                                 // 759
      for (var j = 0; j < valLength; j++) {                                                                            // 760
        if (read(arr, i + j) !== read(val, j)) {                                                                       // 761
          found = false                                                                                                // 762
          break                                                                                                        // 763
        }                                                                                                              // 764
      }                                                                                                                // 765
      if (found) return i                                                                                              // 766
    }                                                                                                                  // 767
  }                                                                                                                    // 768
                                                                                                                       // 769
  return -1                                                                                                            // 770
}                                                                                                                      // 771
                                                                                                                       // 772
Buffer.prototype.includes = function includes (val, byteOffset, encoding) {                                            // 773
  return this.indexOf(val, byteOffset, encoding) !== -1                                                                // 774
}                                                                                                                      // 775
                                                                                                                       // 776
Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {                                              // 777
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)                                                   // 778
}                                                                                                                      // 779
                                                                                                                       // 780
Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {                                      // 781
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)                                                  // 782
}                                                                                                                      // 783
                                                                                                                       // 784
function hexWrite (buf, string, offset, length) {                                                                      // 785
  offset = Number(offset) || 0                                                                                         // 786
  var remaining = buf.length - offset                                                                                  // 787
  if (!length) {                                                                                                       // 788
    length = remaining                                                                                                 // 789
  } else {                                                                                                             // 790
    length = Number(length)                                                                                            // 791
    if (length > remaining) {                                                                                          // 792
      length = remaining                                                                                               // 793
    }                                                                                                                  // 794
  }                                                                                                                    // 795
                                                                                                                       // 796
  // must be an even number of digits                                                                                  // 797
  var strLen = string.length                                                                                           // 798
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')                                                      // 799
                                                                                                                       // 800
  if (length > strLen / 2) {                                                                                           // 801
    length = strLen / 2                                                                                                // 802
  }                                                                                                                    // 803
  for (var i = 0; i < length; ++i) {                                                                                   // 804
    var parsed = parseInt(string.substr(i * 2, 2), 16)                                                                 // 805
    if (isNaN(parsed)) return i                                                                                        // 806
    buf[offset + i] = parsed                                                                                           // 807
  }                                                                                                                    // 808
  return i                                                                                                             // 809
}                                                                                                                      // 810
                                                                                                                       // 811
function utf8Write (buf, string, offset, length) {                                                                     // 812
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)                                     // 813
}                                                                                                                      // 814
                                                                                                                       // 815
function asciiWrite (buf, string, offset, length) {                                                                    // 816
  return blitBuffer(asciiToBytes(string), buf, offset, length)                                                         // 817
}                                                                                                                      // 818
                                                                                                                       // 819
function latin1Write (buf, string, offset, length) {                                                                   // 820
  return asciiWrite(buf, string, offset, length)                                                                       // 821
}                                                                                                                      // 822
                                                                                                                       // 823
function base64Write (buf, string, offset, length) {                                                                   // 824
  return blitBuffer(base64ToBytes(string), buf, offset, length)                                                        // 825
}                                                                                                                      // 826
                                                                                                                       // 827
function ucs2Write (buf, string, offset, length) {                                                                     // 828
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)                                  // 829
}                                                                                                                      // 830
                                                                                                                       // 831
Buffer.prototype.write = function write (string, offset, length, encoding) {                                           // 832
  // Buffer#write(string)                                                                                              // 833
  if (offset === undefined) {                                                                                          // 834
    encoding = 'utf8'                                                                                                  // 835
    length = this.length                                                                                               // 836
    offset = 0                                                                                                         // 837
  // Buffer#write(string, encoding)                                                                                    // 838
  } else if (length === undefined && typeof offset === 'string') {                                                     // 839
    encoding = offset                                                                                                  // 840
    length = this.length                                                                                               // 841
    offset = 0                                                                                                         // 842
  // Buffer#write(string, offset[, length][, encoding])                                                                // 843
  } else if (isFinite(offset)) {                                                                                       // 844
    offset = offset | 0                                                                                                // 845
    if (isFinite(length)) {                                                                                            // 846
      length = length | 0                                                                                              // 847
      if (encoding === undefined) encoding = 'utf8'                                                                    // 848
    } else {                                                                                                           // 849
      encoding = length                                                                                                // 850
      length = undefined                                                                                               // 851
    }                                                                                                                  // 852
  // legacy write(string, encoding, offset, length) - remove in v0.13                                                  // 853
  } else {                                                                                                             // 854
    throw new Error(                                                                                                   // 855
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'                                        // 856
    )                                                                                                                  // 857
  }                                                                                                                    // 858
                                                                                                                       // 859
  var remaining = this.length - offset                                                                                 // 860
  if (length === undefined || length > remaining) length = remaining                                                   // 861
                                                                                                                       // 862
  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {                                     // 863
    throw new RangeError('Attempt to write outside buffer bounds')                                                     // 864
  }                                                                                                                    // 865
                                                                                                                       // 866
  if (!encoding) encoding = 'utf8'                                                                                     // 867
                                                                                                                       // 868
  var loweredCase = false                                                                                              // 869
  for (;;) {                                                                                                           // 870
    switch (encoding) {                                                                                                // 871
      case 'hex':                                                                                                      // 872
        return hexWrite(this, string, offset, length)                                                                  // 873
                                                                                                                       // 874
      case 'utf8':                                                                                                     // 875
      case 'utf-8':                                                                                                    // 876
        return utf8Write(this, string, offset, length)                                                                 // 877
                                                                                                                       // 878
      case 'ascii':                                                                                                    // 879
        return asciiWrite(this, string, offset, length)                                                                // 880
                                                                                                                       // 881
      case 'latin1':                                                                                                   // 882
      case 'binary':                                                                                                   // 883
        return latin1Write(this, string, offset, length)                                                               // 884
                                                                                                                       // 885
      case 'base64':                                                                                                   // 886
        // Warning: maxLength not taken into account in base64Write                                                    // 887
        return base64Write(this, string, offset, length)                                                               // 888
                                                                                                                       // 889
      case 'ucs2':                                                                                                     // 890
      case 'ucs-2':                                                                                                    // 891
      case 'utf16le':                                                                                                  // 892
      case 'utf-16le':                                                                                                 // 893
        return ucs2Write(this, string, offset, length)                                                                 // 894
                                                                                                                       // 895
      default:                                                                                                         // 896
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 897
        encoding = ('' + encoding).toLowerCase()                                                                       // 898
        loweredCase = true                                                                                             // 899
    }                                                                                                                  // 900
  }                                                                                                                    // 901
}                                                                                                                      // 902
                                                                                                                       // 903
Buffer.prototype.toJSON = function toJSON () {                                                                         // 904
  return {                                                                                                             // 905
    type: 'Buffer',                                                                                                    // 906
    data: Array.prototype.slice.call(this._arr || this, 0)                                                             // 907
  }                                                                                                                    // 908
}                                                                                                                      // 909
                                                                                                                       // 910
function base64Slice (buf, start, end) {                                                                               // 911
  if (start === 0 && end === buf.length) {                                                                             // 912
    return base64.fromByteArray(buf)                                                                                   // 913
  } else {                                                                                                             // 914
    return base64.fromByteArray(buf.slice(start, end))                                                                 // 915
  }                                                                                                                    // 916
}                                                                                                                      // 917
                                                                                                                       // 918
function utf8Slice (buf, start, end) {                                                                                 // 919
  end = Math.min(buf.length, end)                                                                                      // 920
  var res = []                                                                                                         // 921
                                                                                                                       // 922
  var i = start                                                                                                        // 923
  while (i < end) {                                                                                                    // 924
    var firstByte = buf[i]                                                                                             // 925
    var codePoint = null                                                                                               // 926
    var bytesPerSequence = (firstByte > 0xEF) ? 4                                                                      // 927
      : (firstByte > 0xDF) ? 3                                                                                         // 928
      : (firstByte > 0xBF) ? 2                                                                                         // 929
      : 1                                                                                                              // 930
                                                                                                                       // 931
    if (i + bytesPerSequence <= end) {                                                                                 // 932
      var secondByte, thirdByte, fourthByte, tempCodePoint                                                             // 933
                                                                                                                       // 934
      switch (bytesPerSequence) {                                                                                      // 935
        case 1:                                                                                                        // 936
          if (firstByte < 0x80) {                                                                                      // 937
            codePoint = firstByte                                                                                      // 938
          }                                                                                                            // 939
          break                                                                                                        // 940
        case 2:                                                                                                        // 941
          secondByte = buf[i + 1]                                                                                      // 942
          if ((secondByte & 0xC0) === 0x80) {                                                                          // 943
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)                                            // 944
            if (tempCodePoint > 0x7F) {                                                                                // 945
              codePoint = tempCodePoint                                                                                // 946
            }                                                                                                          // 947
          }                                                                                                            // 948
          break                                                                                                        // 949
        case 3:                                                                                                        // 950
          secondByte = buf[i + 1]                                                                                      // 951
          thirdByte = buf[i + 2]                                                                                       // 952
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {                                           // 953
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)                 // 954
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {                         // 955
              codePoint = tempCodePoint                                                                                // 956
            }                                                                                                          // 957
          }                                                                                                            // 958
          break                                                                                                        // 959
        case 4:                                                                                                        // 960
          secondByte = buf[i + 1]                                                                                      // 961
          thirdByte = buf[i + 2]                                                                                       // 962
          fourthByte = buf[i + 3]                                                                                      // 963
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {           // 964
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {                                                  // 966
              codePoint = tempCodePoint                                                                                // 967
            }                                                                                                          // 968
          }                                                                                                            // 969
      }                                                                                                                // 970
    }                                                                                                                  // 971
                                                                                                                       // 972
    if (codePoint === null) {                                                                                          // 973
      // we did not generate a valid codePoint so insert a                                                             // 974
      // replacement char (U+FFFD) and advance only 1 byte                                                             // 975
      codePoint = 0xFFFD                                                                                               // 976
      bytesPerSequence = 1                                                                                             // 977
    } else if (codePoint > 0xFFFF) {                                                                                   // 978
      // encode to utf16 (surrogate pair dance)                                                                        // 979
      codePoint -= 0x10000                                                                                             // 980
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)                                                                      // 981
      codePoint = 0xDC00 | codePoint & 0x3FF                                                                           // 982
    }                                                                                                                  // 983
                                                                                                                       // 984
    res.push(codePoint)                                                                                                // 985
    i += bytesPerSequence                                                                                              // 986
  }                                                                                                                    // 987
                                                                                                                       // 988
  return decodeCodePointsArray(res)                                                                                    // 989
}                                                                                                                      // 990
                                                                                                                       // 991
// Based on http://stackoverflow.com/a/22747272/680742, the browser with                                               // 992
// the lowest limit is Chrome, with 0x10000 args.                                                                      // 993
// We go 1 magnitude less, for safety                                                                                  // 994
var MAX_ARGUMENTS_LENGTH = 0x1000                                                                                      // 995
                                                                                                                       // 996
function decodeCodePointsArray (codePoints) {                                                                          // 997
  var len = codePoints.length                                                                                          // 998
  if (len <= MAX_ARGUMENTS_LENGTH) {                                                                                   // 999
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()                                        // 1000
  }                                                                                                                    // 1001
                                                                                                                       // 1002
  // Decode in chunks to avoid "call stack size exceeded".                                                             // 1003
  var res = ''                                                                                                         // 1004
  var i = 0                                                                                                            // 1005
  while (i < len) {                                                                                                    // 1006
    res += String.fromCharCode.apply(                                                                                  // 1007
      String,                                                                                                          // 1008
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)                                                                   // 1009
    )                                                                                                                  // 1010
  }                                                                                                                    // 1011
  return res                                                                                                           // 1012
}                                                                                                                      // 1013
                                                                                                                       // 1014
function asciiSlice (buf, start, end) {                                                                                // 1015
  var ret = ''                                                                                                         // 1016
  end = Math.min(buf.length, end)                                                                                      // 1017
                                                                                                                       // 1018
  for (var i = start; i < end; ++i) {                                                                                  // 1019
    ret += String.fromCharCode(buf[i] & 0x7F)                                                                          // 1020
  }                                                                                                                    // 1021
  return ret                                                                                                           // 1022
}                                                                                                                      // 1023
                                                                                                                       // 1024
function latin1Slice (buf, start, end) {                                                                               // 1025
  var ret = ''                                                                                                         // 1026
  end = Math.min(buf.length, end)                                                                                      // 1027
                                                                                                                       // 1028
  for (var i = start; i < end; ++i) {                                                                                  // 1029
    ret += String.fromCharCode(buf[i])                                                                                 // 1030
  }                                                                                                                    // 1031
  return ret                                                                                                           // 1032
}                                                                                                                      // 1033
                                                                                                                       // 1034
function hexSlice (buf, start, end) {                                                                                  // 1035
  var len = buf.length                                                                                                 // 1036
                                                                                                                       // 1037
  if (!start || start < 0) start = 0                                                                                   // 1038
  if (!end || end < 0 || end > len) end = len                                                                          // 1039
                                                                                                                       // 1040
  var out = ''                                                                                                         // 1041
  for (var i = start; i < end; ++i) {                                                                                  // 1042
    out += toHex(buf[i])                                                                                               // 1043
  }                                                                                                                    // 1044
  return out                                                                                                           // 1045
}                                                                                                                      // 1046
                                                                                                                       // 1047
function utf16leSlice (buf, start, end) {                                                                              // 1048
  var bytes = buf.slice(start, end)                                                                                    // 1049
  var res = ''                                                                                                         // 1050
  for (var i = 0; i < bytes.length; i += 2) {                                                                          // 1051
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)                                                          // 1052
  }                                                                                                                    // 1053
  return res                                                                                                           // 1054
}                                                                                                                      // 1055
                                                                                                                       // 1056
Buffer.prototype.slice = function slice (start, end) {                                                                 // 1057
  var len = this.length                                                                                                // 1058
  start = ~~start                                                                                                      // 1059
  end = end === undefined ? len : ~~end                                                                                // 1060
                                                                                                                       // 1061
  if (start < 0) {                                                                                                     // 1062
    start += len                                                                                                       // 1063
    if (start < 0) start = 0                                                                                           // 1064
  } else if (start > len) {                                                                                            // 1065
    start = len                                                                                                        // 1066
  }                                                                                                                    // 1067
                                                                                                                       // 1068
  if (end < 0) {                                                                                                       // 1069
    end += len                                                                                                         // 1070
    if (end < 0) end = 0                                                                                               // 1071
  } else if (end > len) {                                                                                              // 1072
    end = len                                                                                                          // 1073
  }                                                                                                                    // 1074
                                                                                                                       // 1075
  if (end < start) end = start                                                                                         // 1076
                                                                                                                       // 1077
  var newBuf                                                                                                           // 1078
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1079
    newBuf = this.subarray(start, end)                                                                                 // 1080
    newBuf.__proto__ = Buffer.prototype                                                                                // 1081
  } else {                                                                                                             // 1082
    var sliceLen = end - start                                                                                         // 1083
    newBuf = new Buffer(sliceLen, undefined)                                                                           // 1084
    for (var i = 0; i < sliceLen; ++i) {                                                                               // 1085
      newBuf[i] = this[i + start]                                                                                      // 1086
    }                                                                                                                  // 1087
  }                                                                                                                    // 1088
                                                                                                                       // 1089
  return newBuf                                                                                                        // 1090
}                                                                                                                      // 1091
                                                                                                                       // 1092
/*                                                                                                                     // 1093
 * Need to make sure that buffer isn't trying to write out of bounds.                                                  // 1094
 */                                                                                                                    // 1095
function checkOffset (offset, ext, length) {                                                                           // 1096
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')                                     // 1097
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')                             // 1098
}                                                                                                                      // 1099
                                                                                                                       // 1100
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {                                     // 1101
  offset = offset | 0                                                                                                  // 1102
  byteLength = byteLength | 0                                                                                          // 1103
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 1104
                                                                                                                       // 1105
  var val = this[offset]                                                                                               // 1106
  var mul = 1                                                                                                          // 1107
  var i = 0                                                                                                            // 1108
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1109
    val += this[offset + i] * mul                                                                                      // 1110
  }                                                                                                                    // 1111
                                                                                                                       // 1112
  return val                                                                                                           // 1113
}                                                                                                                      // 1114
                                                                                                                       // 1115
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {                                     // 1116
  offset = offset | 0                                                                                                  // 1117
  byteLength = byteLength | 0                                                                                          // 1118
  if (!noAssert) {                                                                                                     // 1119
    checkOffset(offset, byteLength, this.length)                                                                       // 1120
  }                                                                                                                    // 1121
                                                                                                                       // 1122
  var val = this[offset + --byteLength]                                                                                // 1123
  var mul = 1                                                                                                          // 1124
  while (byteLength > 0 && (mul *= 0x100)) {                                                                           // 1125
    val += this[offset + --byteLength] * mul                                                                           // 1126
  }                                                                                                                    // 1127
                                                                                                                       // 1128
  return val                                                                                                           // 1129
}                                                                                                                      // 1130
                                                                                                                       // 1131
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {                                                   // 1132
  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 1133
  return this[offset]                                                                                                  // 1134
}                                                                                                                      // 1135
                                                                                                                       // 1136
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {                                             // 1137
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1138
  return this[offset] | (this[offset + 1] << 8)                                                                        // 1139
}                                                                                                                      // 1140
                                                                                                                       // 1141
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {                                             // 1142
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1143
  return (this[offset] << 8) | this[offset + 1]                                                                        // 1144
}                                                                                                                      // 1145
                                                                                                                       // 1146
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {                                             // 1147
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1148
                                                                                                                       // 1149
  return ((this[offset]) |                                                                                             // 1150
      (this[offset + 1] << 8) |                                                                                        // 1151
      (this[offset + 2] << 16)) +                                                                                      // 1152
      (this[offset + 3] * 0x1000000)                                                                                   // 1153
}                                                                                                                      // 1154
                                                                                                                       // 1155
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {                                             // 1156
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1157
                                                                                                                       // 1158
  return (this[offset] * 0x1000000) +                                                                                  // 1159
    ((this[offset + 1] << 16) |                                                                                        // 1160
    (this[offset + 2] << 8) |                                                                                          // 1161
    this[offset + 3])                                                                                                  // 1162
}                                                                                                                      // 1163
                                                                                                                       // 1164
Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {                                       // 1165
  offset = offset | 0                                                                                                  // 1166
  byteLength = byteLength | 0                                                                                          // 1167
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 1168
                                                                                                                       // 1169
  var val = this[offset]                                                                                               // 1170
  var mul = 1                                                                                                          // 1171
  var i = 0                                                                                                            // 1172
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1173
    val += this[offset + i] * mul                                                                                      // 1174
  }                                                                                                                    // 1175
  mul *= 0x80                                                                                                          // 1176
                                                                                                                       // 1177
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 1178
                                                                                                                       // 1179
  return val                                                                                                           // 1180
}                                                                                                                      // 1181
                                                                                                                       // 1182
Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {                                       // 1183
  offset = offset | 0                                                                                                  // 1184
  byteLength = byteLength | 0                                                                                          // 1185
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 1186
                                                                                                                       // 1187
  var i = byteLength                                                                                                   // 1188
  var mul = 1                                                                                                          // 1189
  var val = this[offset + --i]                                                                                         // 1190
  while (i > 0 && (mul *= 0x100)) {                                                                                    // 1191
    val += this[offset + --i] * mul                                                                                    // 1192
  }                                                                                                                    // 1193
  mul *= 0x80                                                                                                          // 1194
                                                                                                                       // 1195
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 1196
                                                                                                                       // 1197
  return val                                                                                                           // 1198
}                                                                                                                      // 1199
                                                                                                                       // 1200
Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {                                                     // 1201
  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 1202
  if (!(this[offset] & 0x80)) return (this[offset])                                                                    // 1203
  return ((0xff - this[offset] + 1) * -1)                                                                              // 1204
}                                                                                                                      // 1205
                                                                                                                       // 1206
Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {                                               // 1207
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1208
  var val = this[offset] | (this[offset + 1] << 8)                                                                     // 1209
  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 1210
}                                                                                                                      // 1211
                                                                                                                       // 1212
Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {                                               // 1213
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1214
  var val = this[offset + 1] | (this[offset] << 8)                                                                     // 1215
  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 1216
}                                                                                                                      // 1217
                                                                                                                       // 1218
Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {                                               // 1219
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1220
                                                                                                                       // 1221
  return (this[offset]) |                                                                                              // 1222
    (this[offset + 1] << 8) |                                                                                          // 1223
    (this[offset + 2] << 16) |                                                                                         // 1224
    (this[offset + 3] << 24)                                                                                           // 1225
}                                                                                                                      // 1226
                                                                                                                       // 1227
Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {                                               // 1228
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1229
                                                                                                                       // 1230
  return (this[offset] << 24) |                                                                                        // 1231
    (this[offset + 1] << 16) |                                                                                         // 1232
    (this[offset + 2] << 8) |                                                                                          // 1233
    (this[offset + 3])                                                                                                 // 1234
}                                                                                                                      // 1235
                                                                                                                       // 1236
Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {                                               // 1237
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1238
  return ieee754.read(this, offset, true, 23, 4)                                                                       // 1239
}                                                                                                                      // 1240
                                                                                                                       // 1241
Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {                                               // 1242
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1243
  return ieee754.read(this, offset, false, 23, 4)                                                                      // 1244
}                                                                                                                      // 1245
                                                                                                                       // 1246
Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {                                             // 1247
  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 1248
  return ieee754.read(this, offset, true, 52, 8)                                                                       // 1249
}                                                                                                                      // 1250
                                                                                                                       // 1251
Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {                                             // 1252
  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 1253
  return ieee754.read(this, offset, false, 52, 8)                                                                      // 1254
}                                                                                                                      // 1255
                                                                                                                       // 1256
function checkInt (buf, value, offset, ext, max, min) {                                                                // 1257
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')                        // 1258
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')                            // 1259
  if (offset + ext > buf.length) throw new RangeError('Index out of range')                                            // 1260
}                                                                                                                      // 1261
                                                                                                                       // 1262
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {                            // 1263
  value = +value                                                                                                       // 1264
  offset = offset | 0                                                                                                  // 1265
  byteLength = byteLength | 0                                                                                          // 1266
  if (!noAssert) {                                                                                                     // 1267
    var maxBytes = Math.pow(2, 8 * byteLength) - 1                                                                     // 1268
    checkInt(this, value, offset, byteLength, maxBytes, 0)                                                             // 1269
  }                                                                                                                    // 1270
                                                                                                                       // 1271
  var mul = 1                                                                                                          // 1272
  var i = 0                                                                                                            // 1273
  this[offset] = value & 0xFF                                                                                          // 1274
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1275
    this[offset + i] = (value / mul) & 0xFF                                                                            // 1276
  }                                                                                                                    // 1277
                                                                                                                       // 1278
  return offset + byteLength                                                                                           // 1279
}                                                                                                                      // 1280
                                                                                                                       // 1281
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {                            // 1282
  value = +value                                                                                                       // 1283
  offset = offset | 0                                                                                                  // 1284
  byteLength = byteLength | 0                                                                                          // 1285
  if (!noAssert) {                                                                                                     // 1286
    var maxBytes = Math.pow(2, 8 * byteLength) - 1                                                                     // 1287
    checkInt(this, value, offset, byteLength, maxBytes, 0)                                                             // 1288
  }                                                                                                                    // 1289
                                                                                                                       // 1290
  var i = byteLength - 1                                                                                               // 1291
  var mul = 1                                                                                                          // 1292
  this[offset + i] = value & 0xFF                                                                                      // 1293
  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 1294
    this[offset + i] = (value / mul) & 0xFF                                                                            // 1295
  }                                                                                                                    // 1296
                                                                                                                       // 1297
  return offset + byteLength                                                                                           // 1298
}                                                                                                                      // 1299
                                                                                                                       // 1300
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {                                          // 1301
  value = +value                                                                                                       // 1302
  offset = offset | 0                                                                                                  // 1303
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)                                                             // 1304
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 1305
  this[offset] = (value & 0xff)                                                                                        // 1306
  return offset + 1                                                                                                    // 1307
}                                                                                                                      // 1308
                                                                                                                       // 1309
function objectWriteUInt16 (buf, value, offset, littleEndian) {                                                        // 1310
  if (value < 0) value = 0xffff + value + 1                                                                            // 1311
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {                                                  // 1312
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                                         // 1313
      (littleEndian ? i : 1 - i) * 8                                                                                   // 1314
  }                                                                                                                    // 1315
}                                                                                                                      // 1316
                                                                                                                       // 1317
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {                                    // 1318
  value = +value                                                                                                       // 1319
  offset = offset | 0                                                                                                  // 1320
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 1321
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1322
    this[offset] = (value & 0xff)                                                                                      // 1323
    this[offset + 1] = (value >>> 8)                                                                                   // 1324
  } else {                                                                                                             // 1325
    objectWriteUInt16(this, value, offset, true)                                                                       // 1326
  }                                                                                                                    // 1327
  return offset + 2                                                                                                    // 1328
}                                                                                                                      // 1329
                                                                                                                       // 1330
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {                                    // 1331
  value = +value                                                                                                       // 1332
  offset = offset | 0                                                                                                  // 1333
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 1334
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1335
    this[offset] = (value >>> 8)                                                                                       // 1336
    this[offset + 1] = (value & 0xff)                                                                                  // 1337
  } else {                                                                                                             // 1338
    objectWriteUInt16(this, value, offset, false)                                                                      // 1339
  }                                                                                                                    // 1340
  return offset + 2                                                                                                    // 1341
}                                                                                                                      // 1342
                                                                                                                       // 1343
function objectWriteUInt32 (buf, value, offset, littleEndian) {                                                        // 1344
  if (value < 0) value = 0xffffffff + value + 1                                                                        // 1345
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {                                                  // 1346
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                                // 1347
  }                                                                                                                    // 1348
}                                                                                                                      // 1349
                                                                                                                       // 1350
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {                                    // 1351
  value = +value                                                                                                       // 1352
  offset = offset | 0                                                                                                  // 1353
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 1354
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1355
    this[offset + 3] = (value >>> 24)                                                                                  // 1356
    this[offset + 2] = (value >>> 16)                                                                                  // 1357
    this[offset + 1] = (value >>> 8)                                                                                   // 1358
    this[offset] = (value & 0xff)                                                                                      // 1359
  } else {                                                                                                             // 1360
    objectWriteUInt32(this, value, offset, true)                                                                       // 1361
  }                                                                                                                    // 1362
  return offset + 4                                                                                                    // 1363
}                                                                                                                      // 1364
                                                                                                                       // 1365
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {                                    // 1366
  value = +value                                                                                                       // 1367
  offset = offset | 0                                                                                                  // 1368
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 1369
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1370
    this[offset] = (value >>> 24)                                                                                      // 1371
    this[offset + 1] = (value >>> 16)                                                                                  // 1372
    this[offset + 2] = (value >>> 8)                                                                                   // 1373
    this[offset + 3] = (value & 0xff)                                                                                  // 1374
  } else {                                                                                                             // 1375
    objectWriteUInt32(this, value, offset, false)                                                                      // 1376
  }                                                                                                                    // 1377
  return offset + 4                                                                                                    // 1378
}                                                                                                                      // 1379
                                                                                                                       // 1380
Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {                              // 1381
  value = +value                                                                                                       // 1382
  offset = offset | 0                                                                                                  // 1383
  if (!noAssert) {                                                                                                     // 1384
    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 1385
                                                                                                                       // 1386
    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 1387
  }                                                                                                                    // 1388
                                                                                                                       // 1389
  var i = 0                                                                                                            // 1390
  var mul = 1                                                                                                          // 1391
  var sub = 0                                                                                                          // 1392
  this[offset] = value & 0xFF                                                                                          // 1393
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1394
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {                                                        // 1395
      sub = 1                                                                                                          // 1396
    }                                                                                                                  // 1397
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 1398
  }                                                                                                                    // 1399
                                                                                                                       // 1400
  return offset + byteLength                                                                                           // 1401
}                                                                                                                      // 1402
                                                                                                                       // 1403
Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {                              // 1404
  value = +value                                                                                                       // 1405
  offset = offset | 0                                                                                                  // 1406
  if (!noAssert) {                                                                                                     // 1407
    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 1408
                                                                                                                       // 1409
    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 1410
  }                                                                                                                    // 1411
                                                                                                                       // 1412
  var i = byteLength - 1                                                                                               // 1413
  var mul = 1                                                                                                          // 1414
  var sub = 0                                                                                                          // 1415
  this[offset + i] = value & 0xFF                                                                                      // 1416
  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 1417
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {                                                        // 1418
      sub = 1                                                                                                          // 1419
    }                                                                                                                  // 1420
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 1421
  }                                                                                                                    // 1422
                                                                                                                       // 1423
  return offset + byteLength                                                                                           // 1424
}                                                                                                                      // 1425
                                                                                                                       // 1426
Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {                                            // 1427
  value = +value                                                                                                       // 1428
  offset = offset | 0                                                                                                  // 1429
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)                                                         // 1430
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 1431
  if (value < 0) value = 0xff + value + 1                                                                              // 1432
  this[offset] = (value & 0xff)                                                                                        // 1433
  return offset + 1                                                                                                    // 1434
}                                                                                                                      // 1435
                                                                                                                       // 1436
Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {                                      // 1437
  value = +value                                                                                                       // 1438
  offset = offset | 0                                                                                                  // 1439
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 1440
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1441
    this[offset] = (value & 0xff)                                                                                      // 1442
    this[offset + 1] = (value >>> 8)                                                                                   // 1443
  } else {                                                                                                             // 1444
    objectWriteUInt16(this, value, offset, true)                                                                       // 1445
  }                                                                                                                    // 1446
  return offset + 2                                                                                                    // 1447
}                                                                                                                      // 1448
                                                                                                                       // 1449
Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {                                      // 1450
  value = +value                                                                                                       // 1451
  offset = offset | 0                                                                                                  // 1452
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 1453
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1454
    this[offset] = (value >>> 8)                                                                                       // 1455
    this[offset + 1] = (value & 0xff)                                                                                  // 1456
  } else {                                                                                                             // 1457
    objectWriteUInt16(this, value, offset, false)                                                                      // 1458
  }                                                                                                                    // 1459
  return offset + 2                                                                                                    // 1460
}                                                                                                                      // 1461
                                                                                                                       // 1462
Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {                                      // 1463
  value = +value                                                                                                       // 1464
  offset = offset | 0                                                                                                  // 1465
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 1466
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1467
    this[offset] = (value & 0xff)                                                                                      // 1468
    this[offset + 1] = (value >>> 8)                                                                                   // 1469
    this[offset + 2] = (value >>> 16)                                                                                  // 1470
    this[offset + 3] = (value >>> 24)                                                                                  // 1471
  } else {                                                                                                             // 1472
    objectWriteUInt32(this, value, offset, true)                                                                       // 1473
  }                                                                                                                    // 1474
  return offset + 4                                                                                                    // 1475
}                                                                                                                      // 1476
                                                                                                                       // 1477
Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {                                      // 1478
  value = +value                                                                                                       // 1479
  offset = offset | 0                                                                                                  // 1480
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 1481
  if (value < 0) value = 0xffffffff + value + 1                                                                        // 1482
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1483
    this[offset] = (value >>> 24)                                                                                      // 1484
    this[offset + 1] = (value >>> 16)                                                                                  // 1485
    this[offset + 2] = (value >>> 8)                                                                                   // 1486
    this[offset + 3] = (value & 0xff)                                                                                  // 1487
  } else {                                                                                                             // 1488
    objectWriteUInt32(this, value, offset, false)                                                                      // 1489
  }                                                                                                                    // 1490
  return offset + 4                                                                                                    // 1491
}                                                                                                                      // 1492
                                                                                                                       // 1493
function checkIEEE754 (buf, value, offset, ext, max, min) {                                                            // 1494
  if (offset + ext > buf.length) throw new RangeError('Index out of range')                                            // 1495
  if (offset < 0) throw new RangeError('Index out of range')                                                           // 1496
}                                                                                                                      // 1497
                                                                                                                       // 1498
function writeFloat (buf, value, offset, littleEndian, noAssert) {                                                     // 1499
  if (!noAssert) {                                                                                                     // 1500
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)                               // 1501
  }                                                                                                                    // 1502
  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                               // 1503
  return offset + 4                                                                                                    // 1504
}                                                                                                                      // 1505
                                                                                                                       // 1506
Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {                                      // 1507
  return writeFloat(this, value, offset, true, noAssert)                                                               // 1508
}                                                                                                                      // 1509
                                                                                                                       // 1510
Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {                                      // 1511
  return writeFloat(this, value, offset, false, noAssert)                                                              // 1512
}                                                                                                                      // 1513
                                                                                                                       // 1514
function writeDouble (buf, value, offset, littleEndian, noAssert) {                                                    // 1515
  if (!noAssert) {                                                                                                     // 1516
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)                             // 1517
  }                                                                                                                    // 1518
  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                               // 1519
  return offset + 8                                                                                                    // 1520
}                                                                                                                      // 1521
                                                                                                                       // 1522
Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {                                    // 1523
  return writeDouble(this, value, offset, true, noAssert)                                                              // 1524
}                                                                                                                      // 1525
                                                                                                                       // 1526
Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {                                    // 1527
  return writeDouble(this, value, offset, false, noAssert)                                                             // 1528
}                                                                                                                      // 1529
                                                                                                                       // 1530
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)                                           // 1531
Buffer.prototype.copy = function copy (target, targetStart, start, end) {                                              // 1532
  if (!start) start = 0                                                                                                // 1533
  if (!end && end !== 0) end = this.length                                                                             // 1534
  if (targetStart >= target.length) targetStart = target.length                                                        // 1535
  if (!targetStart) targetStart = 0                                                                                    // 1536
  if (end > 0 && end < start) end = start                                                                              // 1537
                                                                                                                       // 1538
  // Copy 0 bytes; we're done                                                                                          // 1539
  if (end === start) return 0                                                                                          // 1540
  if (target.length === 0 || this.length === 0) return 0                                                               // 1541
                                                                                                                       // 1542
  // Fatal error conditions                                                                                            // 1543
  if (targetStart < 0) {                                                                                               // 1544
    throw new RangeError('targetStart out of bounds')                                                                  // 1545
  }                                                                                                                    // 1546
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')                             // 1547
  if (end < 0) throw new RangeError('sourceEnd out of bounds')                                                         // 1548
                                                                                                                       // 1549
  // Are we oob?                                                                                                       // 1550
  if (end > this.length) end = this.length                                                                             // 1551
  if (target.length - targetStart < end - start) {                                                                     // 1552
    end = target.length - targetStart + start                                                                          // 1553
  }                                                                                                                    // 1554
                                                                                                                       // 1555
  var len = end - start                                                                                                // 1556
  var i                                                                                                                // 1557
                                                                                                                       // 1558
  if (this === target && start < targetStart && targetStart < end) {                                                   // 1559
    // descending copy from end                                                                                        // 1560
    for (i = len - 1; i >= 0; --i) {                                                                                   // 1561
      target[i + targetStart] = this[i + start]                                                                        // 1562
    }                                                                                                                  // 1563
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {                                                              // 1564
    // ascending copy from start                                                                                       // 1565
    for (i = 0; i < len; ++i) {                                                                                        // 1566
      target[i + targetStart] = this[i + start]                                                                        // 1567
    }                                                                                                                  // 1568
  } else {                                                                                                             // 1569
    Uint8Array.prototype.set.call(                                                                                     // 1570
      target,                                                                                                          // 1571
      this.subarray(start, start + len),                                                                               // 1572
      targetStart                                                                                                      // 1573
    )                                                                                                                  // 1574
  }                                                                                                                    // 1575
                                                                                                                       // 1576
  return len                                                                                                           // 1577
}                                                                                                                      // 1578
                                                                                                                       // 1579
// Usage:                                                                                                              // 1580
//    buffer.fill(number[, offset[, end]])                                                                             // 1581
//    buffer.fill(buffer[, offset[, end]])                                                                             // 1582
//    buffer.fill(string[, offset[, end]][, encoding])                                                                 // 1583
Buffer.prototype.fill = function fill (val, start, end, encoding) {                                                    // 1584
  // Handle string cases:                                                                                              // 1585
  if (typeof val === 'string') {                                                                                       // 1586
    if (typeof start === 'string') {                                                                                   // 1587
      encoding = start                                                                                                 // 1588
      start = 0                                                                                                        // 1589
      end = this.length                                                                                                // 1590
    } else if (typeof end === 'string') {                                                                              // 1591
      encoding = end                                                                                                   // 1592
      end = this.length                                                                                                // 1593
    }                                                                                                                  // 1594
    if (val.length === 1) {                                                                                            // 1595
      var code = val.charCodeAt(0)                                                                                     // 1596
      if (code < 256) {                                                                                                // 1597
        val = code                                                                                                     // 1598
      }                                                                                                                // 1599
    }                                                                                                                  // 1600
    if (encoding !== undefined && typeof encoding !== 'string') {                                                      // 1601
      throw new TypeError('encoding must be a string')                                                                 // 1602
    }                                                                                                                  // 1603
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {                                                // 1604
      throw new TypeError('Unknown encoding: ' + encoding)                                                             // 1605
    }                                                                                                                  // 1606
  } else if (typeof val === 'number') {                                                                                // 1607
    val = val & 255                                                                                                    // 1608
  }                                                                                                                    // 1609
                                                                                                                       // 1610
  // Invalid ranges are not set to a default, so can range check early.                                                // 1611
  if (start < 0 || this.length < start || this.length < end) {                                                         // 1612
    throw new RangeError('Out of range index')                                                                         // 1613
  }                                                                                                                    // 1614
                                                                                                                       // 1615
  if (end <= start) {                                                                                                  // 1616
    return this                                                                                                        // 1617
  }                                                                                                                    // 1618
                                                                                                                       // 1619
  start = start >>> 0                                                                                                  // 1620
  end = end === undefined ? this.length : end >>> 0                                                                    // 1621
                                                                                                                       // 1622
  if (!val) val = 0                                                                                                    // 1623
                                                                                                                       // 1624
  var i                                                                                                                // 1625
  if (typeof val === 'number') {                                                                                       // 1626
    for (i = start; i < end; ++i) {                                                                                    // 1627
      this[i] = val                                                                                                    // 1628
    }                                                                                                                  // 1629
  } else {                                                                                                             // 1630
    var bytes = Buffer.isBuffer(val)                                                                                   // 1631
      ? val                                                                                                            // 1632
      : utf8ToBytes(new Buffer(val, encoding).toString())                                                              // 1633
    var len = bytes.length                                                                                             // 1634
    for (i = 0; i < end - start; ++i) {                                                                                // 1635
      this[i + start] = bytes[i % len]                                                                                 // 1636
    }                                                                                                                  // 1637
  }                                                                                                                    // 1638
                                                                                                                       // 1639
  return this                                                                                                          // 1640
}                                                                                                                      // 1641
                                                                                                                       // 1642
// HELPER FUNCTIONS                                                                                                    // 1643
// ================                                                                                                    // 1644
                                                                                                                       // 1645
var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g                                                                           // 1646
                                                                                                                       // 1647
function base64clean (str) {                                                                                           // 1648
  // Node strips out invalid characters like \n and \t from the string, base64-js does not                             // 1649
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')                                                                 // 1650
  // Node converts strings with length < 2 to ''                                                                       // 1651
  if (str.length < 2) return ''                                                                                        // 1652
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not                              // 1653
  while (str.length % 4 !== 0) {                                                                                       // 1654
    str = str + '='                                                                                                    // 1655
  }                                                                                                                    // 1656
  return str                                                                                                           // 1657
}                                                                                                                      // 1658
                                                                                                                       // 1659
function stringtrim (str) {                                                                                            // 1660
  if (str.trim) return str.trim()                                                                                      // 1661
  return str.replace(/^\s+|\s+$/g, '')                                                                                 // 1662
}                                                                                                                      // 1663
                                                                                                                       // 1664
function toHex (n) {                                                                                                   // 1665
  if (n < 16) return '0' + n.toString(16)                                                                              // 1666
  return n.toString(16)                                                                                                // 1667
}                                                                                                                      // 1668
                                                                                                                       // 1669
function utf8ToBytes (string, units) {                                                                                 // 1670
  units = units || Infinity                                                                                            // 1671
  var codePoint                                                                                                        // 1672
  var length = string.length                                                                                           // 1673
  var leadSurrogate = null                                                                                             // 1674
  var bytes = []                                                                                                       // 1675
                                                                                                                       // 1676
  for (var i = 0; i < length; ++i) {                                                                                   // 1677
    codePoint = string.charCodeAt(i)                                                                                   // 1678
                                                                                                                       // 1679
    // is surrogate component                                                                                          // 1680
    if (codePoint > 0xD7FF && codePoint < 0xE000) {                                                                    // 1681
      // last char was a lead                                                                                          // 1682
      if (!leadSurrogate) {                                                                                            // 1683
        // no lead yet                                                                                                 // 1684
        if (codePoint > 0xDBFF) {                                                                                      // 1685
          // unexpected trail                                                                                          // 1686
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 1687
          continue                                                                                                     // 1688
        } else if (i + 1 === length) {                                                                                 // 1689
          // unpaired lead                                                                                             // 1690
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 1691
          continue                                                                                                     // 1692
        }                                                                                                              // 1693
                                                                                                                       // 1694
        // valid lead                                                                                                  // 1695
        leadSurrogate = codePoint                                                                                      // 1696
                                                                                                                       // 1697
        continue                                                                                                       // 1698
      }                                                                                                                // 1699
                                                                                                                       // 1700
      // 2 leads in a row                                                                                              // 1701
      if (codePoint < 0xDC00) {                                                                                        // 1702
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                            // 1703
        leadSurrogate = codePoint                                                                                      // 1704
        continue                                                                                                       // 1705
      }                                                                                                                // 1706
                                                                                                                       // 1707
      // valid surrogate pair                                                                                          // 1708
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000                                        // 1709
    } else if (leadSurrogate) {                                                                                        // 1710
      // valid bmp char, but last char was a lead                                                                      // 1711
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                              // 1712
    }                                                                                                                  // 1713
                                                                                                                       // 1714
    leadSurrogate = null                                                                                               // 1715
                                                                                                                       // 1716
    // encode utf8                                                                                                     // 1717
    if (codePoint < 0x80) {                                                                                            // 1718
      if ((units -= 1) < 0) break                                                                                      // 1719
      bytes.push(codePoint)                                                                                            // 1720
    } else if (codePoint < 0x800) {                                                                                    // 1721
      if ((units -= 2) < 0) break                                                                                      // 1722
      bytes.push(                                                                                                      // 1723
        codePoint >> 0x6 | 0xC0,                                                                                       // 1724
        codePoint & 0x3F | 0x80                                                                                        // 1725
      )                                                                                                                // 1726
    } else if (codePoint < 0x10000) {                                                                                  // 1727
      if ((units -= 3) < 0) break                                                                                      // 1728
      bytes.push(                                                                                                      // 1729
        codePoint >> 0xC | 0xE0,                                                                                       // 1730
        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 1731
        codePoint & 0x3F | 0x80                                                                                        // 1732
      )                                                                                                                // 1733
    } else if (codePoint < 0x110000) {                                                                                 // 1734
      if ((units -= 4) < 0) break                                                                                      // 1735
      bytes.push(                                                                                                      // 1736
        codePoint >> 0x12 | 0xF0,                                                                                      // 1737
        codePoint >> 0xC & 0x3F | 0x80,                                                                                // 1738
        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 1739
        codePoint & 0x3F | 0x80                                                                                        // 1740
      )                                                                                                                // 1741
    } else {                                                                                                           // 1742
      throw new Error('Invalid code point')                                                                            // 1743
    }                                                                                                                  // 1744
  }                                                                                                                    // 1745
                                                                                                                       // 1746
  return bytes                                                                                                         // 1747
}                                                                                                                      // 1748
                                                                                                                       // 1749
function asciiToBytes (str) {                                                                                          // 1750
  var byteArray = []                                                                                                   // 1751
  for (var i = 0; i < str.length; ++i) {                                                                               // 1752
    // Node's code seems to be doing this and not & 0x7F..                                                             // 1753
    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                           // 1754
  }                                                                                                                    // 1755
  return byteArray                                                                                                     // 1756
}                                                                                                                      // 1757
                                                                                                                       // 1758
function utf16leToBytes (str, units) {                                                                                 // 1759
  var c, hi, lo                                                                                                        // 1760
  var byteArray = []                                                                                                   // 1761
  for (var i = 0; i < str.length; ++i) {                                                                               // 1762
    if ((units -= 2) < 0) break                                                                                        // 1763
                                                                                                                       // 1764
    c = str.charCodeAt(i)                                                                                              // 1765
    hi = c >> 8                                                                                                        // 1766
    lo = c % 256                                                                                                       // 1767
    byteArray.push(lo)                                                                                                 // 1768
    byteArray.push(hi)                                                                                                 // 1769
  }                                                                                                                    // 1770
                                                                                                                       // 1771
  return byteArray                                                                                                     // 1772
}                                                                                                                      // 1773
                                                                                                                       // 1774
function base64ToBytes (str) {                                                                                         // 1775
  return base64.toByteArray(base64clean(str))                                                                          // 1776
}                                                                                                                      // 1777
                                                                                                                       // 1778
function blitBuffer (src, dst, offset, length) {                                                                       // 1779
  for (var i = 0; i < length; ++i) {                                                                                   // 1780
    if ((i + offset >= dst.length) || (i >= src.length)) break                                                         // 1781
    dst[i + offset] = src[i]                                                                                           // 1782
  }                                                                                                                    // 1783
  return i                                                                                                             // 1784
}                                                                                                                      // 1785
                                                                                                                       // 1786
function isnan (val) {                                                                                                 // 1787
  return val !== val // eslint-disable-line no-self-compare                                                            // 1788
}                                                                                                                      // 1789
                                                                                                                       // 1790
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"base64-js":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/base64-js/package.json                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "base64-js";                                                                                            // 1
exports.version = "1.2.0";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/base64-js/index.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict'                                                                                                           // 1
                                                                                                                       // 2
exports.byteLength = byteLength                                                                                        // 3
exports.toByteArray = toByteArray                                                                                      // 4
exports.fromByteArray = fromByteArray                                                                                  // 5
                                                                                                                       // 6
var lookup = []                                                                                                        // 7
var revLookup = []                                                                                                     // 8
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array                                                       // 9
                                                                                                                       // 10
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'                                          // 11
for (var i = 0, len = code.length; i < len; ++i) {                                                                     // 12
  lookup[i] = code[i]                                                                                                  // 13
  revLookup[code.charCodeAt(i)] = i                                                                                    // 14
}                                                                                                                      // 15
                                                                                                                       // 16
revLookup['-'.charCodeAt(0)] = 62                                                                                      // 17
revLookup['_'.charCodeAt(0)] = 63                                                                                      // 18
                                                                                                                       // 19
function placeHoldersCount (b64) {                                                                                     // 20
  var len = b64.length                                                                                                 // 21
  if (len % 4 > 0) {                                                                                                   // 22
    throw new Error('Invalid string. Length must be a multiple of 4')                                                  // 23
  }                                                                                                                    // 24
                                                                                                                       // 25
  // the number of equal signs (place holders)                                                                         // 26
  // if there are two placeholders, than the two characters before it                                                  // 27
  // represent one byte                                                                                                // 28
  // if there is only one, then the three characters before it represent 2 bytes                                       // 29
  // this is just a cheap hack to not do indexOf twice                                                                 // 30
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0                                                       // 31
}                                                                                                                      // 32
                                                                                                                       // 33
function byteLength (b64) {                                                                                            // 34
  // base64 is 4/3 + up to two characters of the original data                                                         // 35
  return b64.length * 3 / 4 - placeHoldersCount(b64)                                                                   // 36
}                                                                                                                      // 37
                                                                                                                       // 38
function toByteArray (b64) {                                                                                           // 39
  var i, j, l, tmp, placeHolders, arr                                                                                  // 40
  var len = b64.length                                                                                                 // 41
  placeHolders = placeHoldersCount(b64)                                                                                // 42
                                                                                                                       // 43
  arr = new Arr(len * 3 / 4 - placeHolders)                                                                            // 44
                                                                                                                       // 45
  // if there are placeholders, only get up to the last complete 4 chars                                               // 46
  l = placeHolders > 0 ? len - 4 : len                                                                                 // 47
                                                                                                                       // 48
  var L = 0                                                                                                            // 49
                                                                                                                       // 50
  for (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                          // 51
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF                                                                                      // 53
    arr[L++] = (tmp >> 8) & 0xFF                                                                                       // 54
    arr[L++] = tmp & 0xFF                                                                                              // 55
  }                                                                                                                    // 56
                                                                                                                       // 57
  if (placeHolders === 2) {                                                                                            // 58
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)                                // 59
    arr[L++] = tmp & 0xFF                                                                                              // 60
  } else if (placeHolders === 1) {                                                                                     // 61
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF                                                                                       // 63
    arr[L++] = tmp & 0xFF                                                                                              // 64
  }                                                                                                                    // 65
                                                                                                                       // 66
  return arr                                                                                                           // 67
}                                                                                                                      // 68
                                                                                                                       // 69
function tripletToBase64 (num) {                                                                                       // 70
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]            // 71
}                                                                                                                      // 72
                                                                                                                       // 73
function encodeChunk (uint8, start, end) {                                                                             // 74
  var tmp                                                                                                              // 75
  var output = []                                                                                                      // 76
  for (var i = start; i < end; i += 3) {                                                                               // 77
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                                      // 78
    output.push(tripletToBase64(tmp))                                                                                  // 79
  }                                                                                                                    // 80
  return output.join('')                                                                                               // 81
}                                                                                                                      // 82
                                                                                                                       // 83
function fromByteArray (uint8) {                                                                                       // 84
  var tmp                                                                                                              // 85
  var len = uint8.length                                                                                               // 86
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes                                                      // 87
  var output = ''                                                                                                      // 88
  var parts = []                                                                                                       // 89
  var maxChunkLength = 16383 // must be multiple of 3                                                                  // 90
                                                                                                                       // 91
  // go through the array every three bytes, we'll deal with trailing stuff later                                      // 92
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {                                            // 93
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))                       // 94
  }                                                                                                                    // 95
                                                                                                                       // 96
  // pad the end with zeros, but make sure to not forget the extra bytes                                               // 97
  if (extraBytes === 1) {                                                                                              // 98
    tmp = uint8[len - 1]                                                                                               // 99
    output += lookup[tmp >> 2]                                                                                         // 100
    output += lookup[(tmp << 4) & 0x3F]                                                                                // 101
    output += '=='                                                                                                     // 102
  } else if (extraBytes === 2) {                                                                                       // 103
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])                                                                     // 104
    output += lookup[tmp >> 10]                                                                                        // 105
    output += lookup[(tmp >> 4) & 0x3F]                                                                                // 106
    output += lookup[(tmp << 2) & 0x3F]                                                                                // 107
    output += '='                                                                                                      // 108
  }                                                                                                                    // 109
                                                                                                                       // 110
  parts.push(output)                                                                                                   // 111
                                                                                                                       // 112
  return parts.join('')                                                                                                // 113
}                                                                                                                      // 114
                                                                                                                       // 115
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"ieee754":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/ieee754/package.json                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "ieee754";                                                                                              // 1
exports.version = "1.1.8";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/ieee754/index.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.read = function (buffer, offset, isLE, mLen, nBytes) {                                                         // 1
  var e, m                                                                                                             // 2
  var eLen = nBytes * 8 - mLen - 1                                                                                     // 3
  var eMax = (1 << eLen) - 1                                                                                           // 4
  var eBias = eMax >> 1                                                                                                // 5
  var nBits = -7                                                                                                       // 6
  var i = isLE ? (nBytes - 1) : 0                                                                                      // 7
  var d = isLE ? -1 : 1                                                                                                // 8
  var s = buffer[offset + i]                                                                                           // 9
                                                                                                                       // 10
  i += d                                                                                                               // 11
                                                                                                                       // 12
  e = s & ((1 << (-nBits)) - 1)                                                                                        // 13
  s >>= (-nBits)                                                                                                       // 14
  nBits += eLen                                                                                                        // 15
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 16
                                                                                                                       // 17
  m = e & ((1 << (-nBits)) - 1)                                                                                        // 18
  e >>= (-nBits)                                                                                                       // 19
  nBits += mLen                                                                                                        // 20
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 21
                                                                                                                       // 22
  if (e === 0) {                                                                                                       // 23
    e = 1 - eBias                                                                                                      // 24
  } else if (e === eMax) {                                                                                             // 25
    return m ? NaN : ((s ? -1 : 1) * Infinity)                                                                         // 26
  } else {                                                                                                             // 27
    m = m + Math.pow(2, mLen)                                                                                          // 28
    e = e - eBias                                                                                                      // 29
  }                                                                                                                    // 30
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)                                                                      // 31
}                                                                                                                      // 32
                                                                                                                       // 33
exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {                                                 // 34
  var e, m, c                                                                                                          // 35
  var eLen = nBytes * 8 - mLen - 1                                                                                     // 36
  var eMax = (1 << eLen) - 1                                                                                           // 37
  var eBias = eMax >> 1                                                                                                // 38
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)                                                     // 39
  var i = isLE ? 0 : (nBytes - 1)                                                                                      // 40
  var d = isLE ? 1 : -1                                                                                                // 41
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0                                                          // 42
                                                                                                                       // 43
  value = Math.abs(value)                                                                                              // 44
                                                                                                                       // 45
  if (isNaN(value) || value === Infinity) {                                                                            // 46
    m = isNaN(value) ? 1 : 0                                                                                           // 47
    e = eMax                                                                                                           // 48
  } else {                                                                                                             // 49
    e = Math.floor(Math.log(value) / Math.LN2)                                                                         // 50
    if (value * (c = Math.pow(2, -e)) < 1) {                                                                           // 51
      e--                                                                                                              // 52
      c *= 2                                                                                                           // 53
    }                                                                                                                  // 54
    if (e + eBias >= 1) {                                                                                              // 55
      value += rt / c                                                                                                  // 56
    } else {                                                                                                           // 57
      value += rt * Math.pow(2, 1 - eBias)                                                                             // 58
    }                                                                                                                  // 59
    if (value * c >= 2) {                                                                                              // 60
      e++                                                                                                              // 61
      c /= 2                                                                                                           // 62
    }                                                                                                                  // 63
                                                                                                                       // 64
    if (e + eBias >= eMax) {                                                                                           // 65
      m = 0                                                                                                            // 66
      e = eMax                                                                                                         // 67
    } else if (e + eBias >= 1) {                                                                                       // 68
      m = (value * c - 1) * Math.pow(2, mLen)                                                                          // 69
      e = e + eBias                                                                                                    // 70
    } else {                                                                                                           // 71
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)                                                           // 72
      e = 0                                                                                                            // 73
    }                                                                                                                  // 74
  }                                                                                                                    // 75
                                                                                                                       // 76
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}                                     // 77
                                                                                                                       // 78
  e = (e << mLen) | m                                                                                                  // 79
  eLen += mLen                                                                                                         // 80
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}                                      // 81
                                                                                                                       // 82
  buffer[offset + i - d] |= s * 128                                                                                    // 83
}                                                                                                                      // 84
                                                                                                                       // 85
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"isarray":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/isarray/package.json                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "isarray";                                                                                              // 1
exports.version = "1.0.0";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/isarray/index.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toString = {}.toString;                                                                                            // 1
                                                                                                                       // 2
module.exports = Array.isArray || function (arr) {                                                                     // 3
  return toString.call(arr) == '[object Array]';                                                                       // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"process":{"browser.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/process/browser.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// shim for using process in browser                                                                                   // 1
var process = module.exports = {};                                                                                     // 2
                                                                                                                       // 3
// cached from whatever global is present so that test runners that stub it                                            // 4
// don't break things.  But we need to wrap it in a try catch in case it is                                            // 5
// wrapped in strict mode code which doesn't define any globals.  It's inside a                                        // 6
// function because try/catches deoptimize in certain engines.                                                         // 7
                                                                                                                       // 8
var cachedSetTimeout;                                                                                                  // 9
var cachedClearTimeout;                                                                                                // 10
                                                                                                                       // 11
function defaultSetTimout() {                                                                                          // 12
    throw new Error('setTimeout has not been defined');                                                                // 13
}                                                                                                                      // 14
function defaultClearTimeout () {                                                                                      // 15
    throw new Error('clearTimeout has not been defined');                                                              // 16
}                                                                                                                      // 17
(function () {                                                                                                         // 18
    try {                                                                                                              // 19
        if (typeof setTimeout === 'function') {                                                                        // 20
            cachedSetTimeout = setTimeout;                                                                             // 21
        } else {                                                                                                       // 22
            cachedSetTimeout = defaultSetTimout;                                                                       // 23
        }                                                                                                              // 24
    } catch (e) {                                                                                                      // 25
        cachedSetTimeout = defaultSetTimout;                                                                           // 26
    }                                                                                                                  // 27
    try {                                                                                                              // 28
        if (typeof clearTimeout === 'function') {                                                                      // 29
            cachedClearTimeout = clearTimeout;                                                                         // 30
        } else {                                                                                                       // 31
            cachedClearTimeout = defaultClearTimeout;                                                                  // 32
        }                                                                                                              // 33
    } catch (e) {                                                                                                      // 34
        cachedClearTimeout = defaultClearTimeout;                                                                      // 35
    }                                                                                                                  // 36
} ())                                                                                                                  // 37
function runTimeout(fun) {                                                                                             // 38
    if (cachedSetTimeout === setTimeout) {                                                                             // 39
        //normal enviroments in sane situations                                                                        // 40
        return setTimeout(fun, 0);                                                                                     // 41
    }                                                                                                                  // 42
    // if setTimeout wasn't available but was latter defined                                                           // 43
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {                                  // 44
        cachedSetTimeout = setTimeout;                                                                                 // 45
        return setTimeout(fun, 0);                                                                                     // 46
    }                                                                                                                  // 47
    try {                                                                                                              // 48
        // when when somebody has screwed with setTimeout but no I.E. maddness                                         // 49
        return cachedSetTimeout(fun, 0);                                                                               // 50
    } catch(e){                                                                                                        // 51
        try {                                                                                                          // 52
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);                                                                // 54
        } catch(e){                                                                                                    // 55
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);                                                                // 57
        }                                                                                                              // 58
    }                                                                                                                  // 59
                                                                                                                       // 60
                                                                                                                       // 61
}                                                                                                                      // 62
function runClearTimeout(marker) {                                                                                     // 63
    if (cachedClearTimeout === clearTimeout) {                                                                         // 64
        //normal enviroments in sane situations                                                                        // 65
        return clearTimeout(marker);                                                                                   // 66
    }                                                                                                                  // 67
    // if clearTimeout wasn't available but was latter defined                                                         // 68
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {                         // 69
        cachedClearTimeout = clearTimeout;                                                                             // 70
        return clearTimeout(marker);                                                                                   // 71
    }                                                                                                                  // 72
    try {                                                                                                              // 73
        // when when somebody has screwed with setTimeout but no I.E. maddness                                         // 74
        return cachedClearTimeout(marker);                                                                             // 75
    } catch (e){                                                                                                       // 76
        try {                                                                                                          // 77
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);                                                              // 79
        } catch (e){                                                                                                   // 80
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout                               // 82
            return cachedClearTimeout.call(this, marker);                                                              // 83
        }                                                                                                              // 84
    }                                                                                                                  // 85
                                                                                                                       // 86
                                                                                                                       // 87
                                                                                                                       // 88
}                                                                                                                      // 89
var queue = [];                                                                                                        // 90
var draining = false;                                                                                                  // 91
var currentQueue;                                                                                                      // 92
var queueIndex = -1;                                                                                                   // 93
                                                                                                                       // 94
function cleanUpNextTick() {                                                                                           // 95
    if (!draining || !currentQueue) {                                                                                  // 96
        return;                                                                                                        // 97
    }                                                                                                                  // 98
    draining = false;                                                                                                  // 99
    if (currentQueue.length) {                                                                                         // 100
        queue = currentQueue.concat(queue);                                                                            // 101
    } else {                                                                                                           // 102
        queueIndex = -1;                                                                                               // 103
    }                                                                                                                  // 104
    if (queue.length) {                                                                                                // 105
        drainQueue();                                                                                                  // 106
    }                                                                                                                  // 107
}                                                                                                                      // 108
                                                                                                                       // 109
function drainQueue() {                                                                                                // 110
    if (draining) {                                                                                                    // 111
        return;                                                                                                        // 112
    }                                                                                                                  // 113
    var timeout = runTimeout(cleanUpNextTick);                                                                         // 114
    draining = true;                                                                                                   // 115
                                                                                                                       // 116
    var len = queue.length;                                                                                            // 117
    while(len) {                                                                                                       // 118
        currentQueue = queue;                                                                                          // 119
        queue = [];                                                                                                    // 120
        while (++queueIndex < len) {                                                                                   // 121
            if (currentQueue) {                                                                                        // 122
                currentQueue[queueIndex].run();                                                                        // 123
            }                                                                                                          // 124
        }                                                                                                              // 125
        queueIndex = -1;                                                                                               // 126
        len = queue.length;                                                                                            // 127
    }                                                                                                                  // 128
    currentQueue = null;                                                                                               // 129
    draining = false;                                                                                                  // 130
    runClearTimeout(timeout);                                                                                          // 131
}                                                                                                                      // 132
                                                                                                                       // 133
process.nextTick = function (fun) {                                                                                    // 134
    var args = new Array(arguments.length - 1);                                                                        // 135
    if (arguments.length > 1) {                                                                                        // 136
        for (var i = 1; i < arguments.length; i++) {                                                                   // 137
            args[i - 1] = arguments[i];                                                                                // 138
        }                                                                                                              // 139
    }                                                                                                                  // 140
    queue.push(new Item(fun, args));                                                                                   // 141
    if (queue.length === 1 && !draining) {                                                                             // 142
        runTimeout(drainQueue);                                                                                        // 143
    }                                                                                                                  // 144
};                                                                                                                     // 145
                                                                                                                       // 146
// v8 likes predictible objects                                                                                        // 147
function Item(fun, array) {                                                                                            // 148
    this.fun = fun;                                                                                                    // 149
    this.array = array;                                                                                                // 150
}                                                                                                                      // 151
Item.prototype.run = function () {                                                                                     // 152
    this.fun.apply(null, this.array);                                                                                  // 153
};                                                                                                                     // 154
process.title = 'browser';                                                                                             // 155
process.browser = true;                                                                                                // 156
process.env = {};                                                                                                      // 157
process.argv = [];                                                                                                     // 158
process.version = ''; // empty string to avoid regexp issues                                                           // 159
process.versions = {};                                                                                                 // 160
                                                                                                                       // 161
function noop() {}                                                                                                     // 162
                                                                                                                       // 163
process.on = noop;                                                                                                     // 164
process.addListener = noop;                                                                                            // 165
process.once = noop;                                                                                                   // 166
process.off = noop;                                                                                                    // 167
process.removeListener = noop;                                                                                         // 168
process.removeAllListeners = noop;                                                                                     // 169
process.emit = noop;                                                                                                   // 170
                                                                                                                       // 171
process.binding = function (name) {                                                                                    // 172
    throw new Error('process.binding is not supported');                                                               // 173
};                                                                                                                     // 174
                                                                                                                       // 175
process.cwd = function () { return '/' };                                                                              // 176
process.chdir = function (dir) {                                                                                       // 177
    throw new Error('process.chdir is not supported');                                                                 // 178
};                                                                                                                     // 179
process.umask = function() { return 0; };                                                                              // 180
                                                                                                                       // 181
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"domain-browser":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/domain-browser/package.json                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "domain-browser";                                                                                       // 1
exports.version = "1.1.7";                                                                                             // 2
exports.main = "./index.js";                                                                                           // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":["events",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/domain-browser/index.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// This file should be ES5 compatible                                                                                  // 1
/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */                                           // 2
'use strict'                                                                                                           // 3
module.exports = (function () {                                                                                        // 4
	// Import Events                                                                                                      // 5
	var events = require('events')                                                                                        // 6
                                                                                                                       // 7
	// Export Domain                                                                                                      // 8
	var domain = {}                                                                                                       // 9
	domain.createDomain = domain.create = function () {                                                                   // 10
		var d = new events.EventEmitter()                                                                                    // 11
                                                                                                                       // 12
		function emitError (e) {                                                                                             // 13
			d.emit('error', e)                                                                                                  // 14
		}                                                                                                                    // 15
                                                                                                                       // 16
		d.add = function (emitter) {                                                                                         // 17
			emitter.on('error', emitError)                                                                                      // 18
		}                                                                                                                    // 19
		d.remove = function (emitter) {                                                                                      // 20
			emitter.removeListener('error', emitError)                                                                          // 21
		}                                                                                                                    // 22
		d.bind = function (fn) {                                                                                             // 23
			return function () {                                                                                                // 24
				var args = Array.prototype.slice.call(arguments)                                                                   // 25
				try {                                                                                                              // 26
					fn.apply(null, args)                                                                                              // 27
				}                                                                                                                  // 28
				catch (err) {                                                                                                      // 29
					emitError(err)                                                                                                    // 30
				}                                                                                                                  // 31
			}                                                                                                                   // 32
		}                                                                                                                    // 33
		d.intercept = function (fn) {                                                                                        // 34
			return function (err) {                                                                                             // 35
				if ( err ) {                                                                                                       // 36
					emitError(err)                                                                                                    // 37
				}                                                                                                                  // 38
				else {                                                                                                             // 39
					var args = Array.prototype.slice.call(arguments, 1)                                                               // 40
					try {                                                                                                             // 41
						fn.apply(null, args)                                                                                             // 42
					}                                                                                                                 // 43
					catch (err) {                                                                                                     // 44
						emitError(err)                                                                                                   // 45
					}                                                                                                                 // 46
				}                                                                                                                  // 47
			}                                                                                                                   // 48
		}                                                                                                                    // 49
		d.run = function (fn) {                                                                                              // 50
			try {                                                                                                               // 51
				fn()                                                                                                               // 52
			}                                                                                                                   // 53
			catch (err) {                                                                                                       // 54
				emitError(err)                                                                                                     // 55
			}                                                                                                                   // 56
			return this                                                                                                         // 57
		}                                                                                                                    // 58
		d.dispose = function () {                                                                                            // 59
			this.removeAllListeners()                                                                                           // 60
			return this                                                                                                         // 61
		}                                                                                                                    // 62
		d.enter = d.exit = function () {                                                                                     // 63
			return this                                                                                                         // 64
		}                                                                                                                    // 65
		return d                                                                                                             // 66
	}                                                                                                                     // 67
	return domain                                                                                                         // 68
}).call(this)                                                                                                          // 69
                                                                                                                       // 70
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"events":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/events/package.json                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "events";                                                                                               // 1
exports.version = "1.1.1";                                                                                             // 2
exports.main = "./events.js";                                                                                          // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"events.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/events/events.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1
//                                                                                                                     // 2
// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3
// copy of this software and associated documentation files (the                                                       // 4
// "Software"), to deal in the Software without restriction, including                                                 // 5
// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6
// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7
// persons to whom the Software is furnished to do so, subject to the                                                  // 8
// following conditions:                                                                                               // 9
//                                                                                                                     // 10
// The above copyright notice and this permission notice shall be included                                             // 11
// in all copies or substantial portions of the Software.                                                              // 12
//                                                                                                                     // 13
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20
                                                                                                                       // 21
function EventEmitter() {                                                                                              // 22
  this._events = this._events || {};                                                                                   // 23
  this._maxListeners = this._maxListeners || undefined;                                                                // 24
}                                                                                                                      // 25
module.exports = EventEmitter;                                                                                         // 26
                                                                                                                       // 27
// Backwards-compat with node 0.10.x                                                                                   // 28
EventEmitter.EventEmitter = EventEmitter;                                                                              // 29
                                                                                                                       // 30
EventEmitter.prototype._events = undefined;                                                                            // 31
EventEmitter.prototype._maxListeners = undefined;                                                                      // 32
                                                                                                                       // 33
// By default EventEmitters will print a warning if more than 10 listeners are                                         // 34
// added to it. This is a useful default which helps finding memory leaks.                                             // 35
EventEmitter.defaultMaxListeners = 10;                                                                                 // 36
                                                                                                                       // 37
// Obviously not all Emitters should be limited to 10. This function allows                                            // 38
// that to be increased. Set to zero for unlimited.                                                                    // 39
EventEmitter.prototype.setMaxListeners = function(n) {                                                                 // 40
  if (!isNumber(n) || n < 0 || isNaN(n))                                                                               // 41
    throw TypeError('n must be a positive number');                                                                    // 42
  this._maxListeners = n;                                                                                              // 43
  return this;                                                                                                         // 44
};                                                                                                                     // 45
                                                                                                                       // 46
EventEmitter.prototype.emit = function(type) {                                                                         // 47
  var er, handler, len, args, i, listeners;                                                                            // 48
                                                                                                                       // 49
  if (!this._events)                                                                                                   // 50
    this._events = {};                                                                                                 // 51
                                                                                                                       // 52
  // If there is no 'error' event listener then throw.                                                                 // 53
  if (type === 'error') {                                                                                              // 54
    if (!this._events.error ||                                                                                         // 55
        (isObject(this._events.error) && !this._events.error.length)) {                                                // 56
      er = arguments[1];                                                                                               // 57
      if (er instanceof Error) {                                                                                       // 58
        throw er; // Unhandled 'error' event                                                                           // 59
      } else {                                                                                                         // 60
        // At least give some kind of context to the user                                                              // 61
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');                                      // 62
        err.context = er;                                                                                              // 63
        throw err;                                                                                                     // 64
      }                                                                                                                // 65
    }                                                                                                                  // 66
  }                                                                                                                    // 67
                                                                                                                       // 68
  handler = this._events[type];                                                                                        // 69
                                                                                                                       // 70
  if (isUndefined(handler))                                                                                            // 71
    return false;                                                                                                      // 72
                                                                                                                       // 73
  if (isFunction(handler)) {                                                                                           // 74
    switch (arguments.length) {                                                                                        // 75
      // fast cases                                                                                                    // 76
      case 1:                                                                                                          // 77
        handler.call(this);                                                                                            // 78
        break;                                                                                                         // 79
      case 2:                                                                                                          // 80
        handler.call(this, arguments[1]);                                                                              // 81
        break;                                                                                                         // 82
      case 3:                                                                                                          // 83
        handler.call(this, arguments[1], arguments[2]);                                                                // 84
        break;                                                                                                         // 85
      // slower                                                                                                        // 86
      default:                                                                                                         // 87
        args = Array.prototype.slice.call(arguments, 1);                                                               // 88
        handler.apply(this, args);                                                                                     // 89
    }                                                                                                                  // 90
  } else if (isObject(handler)) {                                                                                      // 91
    args = Array.prototype.slice.call(arguments, 1);                                                                   // 92
    listeners = handler.slice();                                                                                       // 93
    len = listeners.length;                                                                                            // 94
    for (i = 0; i < len; i++)                                                                                          // 95
      listeners[i].apply(this, args);                                                                                  // 96
  }                                                                                                                    // 97
                                                                                                                       // 98
  return true;                                                                                                         // 99
};                                                                                                                     // 100
                                                                                                                       // 101
EventEmitter.prototype.addListener = function(type, listener) {                                                        // 102
  var m;                                                                                                               // 103
                                                                                                                       // 104
  if (!isFunction(listener))                                                                                           // 105
    throw TypeError('listener must be a function');                                                                    // 106
                                                                                                                       // 107
  if (!this._events)                                                                                                   // 108
    this._events = {};                                                                                                 // 109
                                                                                                                       // 110
  // To avoid recursion in the case that type === "newListener"! Before                                                // 111
  // adding it to the listeners, first emit "newListener".                                                             // 112
  if (this._events.newListener)                                                                                        // 113
    this.emit('newListener', type,                                                                                     // 114
              isFunction(listener.listener) ?                                                                          // 115
              listener.listener : listener);                                                                           // 116
                                                                                                                       // 117
  if (!this._events[type])                                                                                             // 118
    // Optimize the case of one listener. Don't need the extra array object.                                           // 119
    this._events[type] = listener;                                                                                     // 120
  else if (isObject(this._events[type]))                                                                               // 121
    // If we've already got an array, just append.                                                                     // 122
    this._events[type].push(listener);                                                                                 // 123
  else                                                                                                                 // 124
    // Adding the second element, need to change to array.                                                             // 125
    this._events[type] = [this._events[type], listener];                                                               // 126
                                                                                                                       // 127
  // Check for listener leak                                                                                           // 128
  if (isObject(this._events[type]) && !this._events[type].warned) {                                                    // 129
    if (!isUndefined(this._maxListeners)) {                                                                            // 130
      m = this._maxListeners;                                                                                          // 131
    } else {                                                                                                           // 132
      m = EventEmitter.defaultMaxListeners;                                                                            // 133
    }                                                                                                                  // 134
                                                                                                                       // 135
    if (m && m > 0 && this._events[type].length > m) {                                                                 // 136
      this._events[type].warned = true;                                                                                // 137
      console.error('(node) warning: possible EventEmitter memory ' +                                                  // 138
                    'leak detected. %d listeners added. ' +                                                            // 139
                    'Use emitter.setMaxListeners() to increase limit.',                                                // 140
                    this._events[type].length);                                                                        // 141
      if (typeof console.trace === 'function') {                                                                       // 142
        // not supported in IE 10                                                                                      // 143
        console.trace();                                                                                               // 144
      }                                                                                                                // 145
    }                                                                                                                  // 146
  }                                                                                                                    // 147
                                                                                                                       // 148
  return this;                                                                                                         // 149
};                                                                                                                     // 150
                                                                                                                       // 151
EventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                        // 152
                                                                                                                       // 153
EventEmitter.prototype.once = function(type, listener) {                                                               // 154
  if (!isFunction(listener))                                                                                           // 155
    throw TypeError('listener must be a function');                                                                    // 156
                                                                                                                       // 157
  var fired = false;                                                                                                   // 158
                                                                                                                       // 159
  function g() {                                                                                                       // 160
    this.removeListener(type, g);                                                                                      // 161
                                                                                                                       // 162
    if (!fired) {                                                                                                      // 163
      fired = true;                                                                                                    // 164
      listener.apply(this, arguments);                                                                                 // 165
    }                                                                                                                  // 166
  }                                                                                                                    // 167
                                                                                                                       // 168
  g.listener = listener;                                                                                               // 169
  this.on(type, g);                                                                                                    // 170
                                                                                                                       // 171
  return this;                                                                                                         // 172
};                                                                                                                     // 173
                                                                                                                       // 174
// emits a 'removeListener' event iff the listener was removed                                                         // 175
EventEmitter.prototype.removeListener = function(type, listener) {                                                     // 176
  var list, position, length, i;                                                                                       // 177
                                                                                                                       // 178
  if (!isFunction(listener))                                                                                           // 179
    throw TypeError('listener must be a function');                                                                    // 180
                                                                                                                       // 181
  if (!this._events || !this._events[type])                                                                            // 182
    return this;                                                                                                       // 183
                                                                                                                       // 184
  list = this._events[type];                                                                                           // 185
  length = list.length;                                                                                                // 186
  position = -1;                                                                                                       // 187
                                                                                                                       // 188
  if (list === listener ||                                                                                             // 189
      (isFunction(list.listener) && list.listener === listener)) {                                                     // 190
    delete this._events[type];                                                                                         // 191
    if (this._events.removeListener)                                                                                   // 192
      this.emit('removeListener', type, listener);                                                                     // 193
                                                                                                                       // 194
  } else if (isObject(list)) {                                                                                         // 195
    for (i = length; i-- > 0;) {                                                                                       // 196
      if (list[i] === listener ||                                                                                      // 197
          (list[i].listener && list[i].listener === listener)) {                                                       // 198
        position = i;                                                                                                  // 199
        break;                                                                                                         // 200
      }                                                                                                                // 201
    }                                                                                                                  // 202
                                                                                                                       // 203
    if (position < 0)                                                                                                  // 204
      return this;                                                                                                     // 205
                                                                                                                       // 206
    if (list.length === 1) {                                                                                           // 207
      list.length = 0;                                                                                                 // 208
      delete this._events[type];                                                                                       // 209
    } else {                                                                                                           // 210
      list.splice(position, 1);                                                                                        // 211
    }                                                                                                                  // 212
                                                                                                                       // 213
    if (this._events.removeListener)                                                                                   // 214
      this.emit('removeListener', type, listener);                                                                     // 215
  }                                                                                                                    // 216
                                                                                                                       // 217
  return this;                                                                                                         // 218
};                                                                                                                     // 219
                                                                                                                       // 220
EventEmitter.prototype.removeAllListeners = function(type) {                                                           // 221
  var key, listeners;                                                                                                  // 222
                                                                                                                       // 223
  if (!this._events)                                                                                                   // 224
    return this;                                                                                                       // 225
                                                                                                                       // 226
  // not listening for removeListener, no need to emit                                                                 // 227
  if (!this._events.removeListener) {                                                                                  // 228
    if (arguments.length === 0)                                                                                        // 229
      this._events = {};                                                                                               // 230
    else if (this._events[type])                                                                                       // 231
      delete this._events[type];                                                                                       // 232
    return this;                                                                                                       // 233
  }                                                                                                                    // 234
                                                                                                                       // 235
  // emit removeListener for all listeners on all events                                                               // 236
  if (arguments.length === 0) {                                                                                        // 237
    for (key in this._events) {                                                                                        // 238
      if (key === 'removeListener') continue;                                                                          // 239
      this.removeAllListeners(key);                                                                                    // 240
    }                                                                                                                  // 241
    this.removeAllListeners('removeListener');                                                                         // 242
    this._events = {};                                                                                                 // 243
    return this;                                                                                                       // 244
  }                                                                                                                    // 245
                                                                                                                       // 246
  listeners = this._events[type];                                                                                      // 247
                                                                                                                       // 248
  if (isFunction(listeners)) {                                                                                         // 249
    this.removeListener(type, listeners);                                                                              // 250
  } else if (listeners) {                                                                                              // 251
    // LIFO order                                                                                                      // 252
    while (listeners.length)                                                                                           // 253
      this.removeListener(type, listeners[listeners.length - 1]);                                                      // 254
  }                                                                                                                    // 255
  delete this._events[type];                                                                                           // 256
                                                                                                                       // 257
  return this;                                                                                                         // 258
};                                                                                                                     // 259
                                                                                                                       // 260
EventEmitter.prototype.listeners = function(type) {                                                                    // 261
  var ret;                                                                                                             // 262
  if (!this._events || !this._events[type])                                                                            // 263
    ret = [];                                                                                                          // 264
  else if (isFunction(this._events[type]))                                                                             // 265
    ret = [this._events[type]];                                                                                        // 266
  else                                                                                                                 // 267
    ret = this._events[type].slice();                                                                                  // 268
  return ret;                                                                                                          // 269
};                                                                                                                     // 270
                                                                                                                       // 271
EventEmitter.prototype.listenerCount = function(type) {                                                                // 272
  if (this._events) {                                                                                                  // 273
    var evlistener = this._events[type];                                                                               // 274
                                                                                                                       // 275
    if (isFunction(evlistener))                                                                                        // 276
      return 1;                                                                                                        // 277
    else if (evlistener)                                                                                               // 278
      return evlistener.length;                                                                                        // 279
  }                                                                                                                    // 280
  return 0;                                                                                                            // 281
};                                                                                                                     // 282
                                                                                                                       // 283
EventEmitter.listenerCount = function(emitter, type) {                                                                 // 284
  return emitter.listenerCount(type);                                                                                  // 285
};                                                                                                                     // 286
                                                                                                                       // 287
function isFunction(arg) {                                                                                             // 288
  return typeof arg === 'function';                                                                                    // 289
}                                                                                                                      // 290
                                                                                                                       // 291
function isNumber(arg) {                                                                                               // 292
  return typeof arg === 'number';                                                                                      // 293
}                                                                                                                      // 294
                                                                                                                       // 295
function isObject(arg) {                                                                                               // 296
  return typeof arg === 'object' && arg !== null;                                                                      // 297
}                                                                                                                      // 298
                                                                                                                       // 299
function isUndefined(arg) {                                                                                            // 300
  return arg === void 0;                                                                                               // 301
}                                                                                                                      // 302
                                                                                                                       // 303
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"regenerator-runtime":{"package.json":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/regenerator-runtime/package.json                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "regenerator-runtime";                                                                                  // 1
exports.version = "0.9.6";                                                                                             // 2
exports.main = "runtime-module.js";                                                                                    // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"runtime-module.js":["./runtime",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/regenerator-runtime/runtime-module.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// This method of obtaining a reference to the global object needs to be                                               // 1
// kept identical to the way it is obtained in runtime.js                                                              // 2
var g =                                                                                                                // 3
  typeof global === "object" ? global :                                                                                // 4
  typeof window === "object" ? window :                                                                                // 5
  typeof self === "object" ? self : this;                                                                              // 6
                                                                                                                       // 7
// Use `getOwnPropertyNames` because not all browsers support calling                                                  // 8
// `hasOwnProperty` on the global `self` object in a worker. See #183.                                                 // 9
var hadRuntime = g.regeneratorRuntime &&                                                                               // 10
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;                                                    // 11
                                                                                                                       // 12
// Save the old regeneratorRuntime in case it needs to be restored later.                                              // 13
var oldRuntime = hadRuntime && g.regeneratorRuntime;                                                                   // 14
                                                                                                                       // 15
// Force reevalutation of runtime.js.                                                                                  // 16
g.regeneratorRuntime = undefined;                                                                                      // 17
                                                                                                                       // 18
module.exports = require("./runtime");                                                                                 // 19
                                                                                                                       // 20
if (hadRuntime) {                                                                                                      // 21
  // Restore the original runtime.                                                                                     // 22
  g.regeneratorRuntime = oldRuntime;                                                                                   // 23
} else {                                                                                                               // 24
  // Remove the global property added by runtime.js.                                                                   // 25
  try {                                                                                                                // 26
    delete g.regeneratorRuntime;                                                                                       // 27
  } catch(e) {                                                                                                         // 28
    g.regeneratorRuntime = undefined;                                                                                  // 29
  }                                                                                                                    // 30
}                                                                                                                      // 31
                                                                                                                       // 32
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"runtime.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/regenerator-runtime/runtime.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2014, Facebook, Inc.                                                                                  // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An                                                 // 6
 * additional grant of patent rights can be found in the PATENTS file in                                               // 7
 * the same directory.                                                                                                 // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
!(function(global) {                                                                                                   // 11
  "use strict";                                                                                                        // 12
                                                                                                                       // 13
  var hasOwn = Object.prototype.hasOwnProperty;                                                                        // 14
  var undefined; // More compressible than void 0.                                                                     // 15
  var $Symbol = typeof Symbol === "function" ? Symbol : {};                                                            // 16
  var iteratorSymbol = $Symbol.iterator || "@@iterator";                                                               // 17
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";                                                      // 18
                                                                                                                       // 19
  var inModule = typeof module === "object";                                                                           // 20
  var runtime = global.regeneratorRuntime;                                                                             // 21
  if (runtime) {                                                                                                       // 22
    if (inModule) {                                                                                                    // 23
      // If regeneratorRuntime is defined globally and we're in a module,                                              // 24
      // make the exports object identical to regeneratorRuntime.                                                      // 25
      module.exports = runtime;                                                                                        // 26
    }                                                                                                                  // 27
    // Don't bother evaluating the rest of this file if the runtime was                                                // 28
    // already defined globally.                                                                                       // 29
    return;                                                                                                            // 30
  }                                                                                                                    // 31
                                                                                                                       // 32
  // Define the runtime globally (as expected by generated code) as either                                             // 33
  // module.exports (if we're in a module) or a new, empty object.                                                     // 34
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};                                                // 35
                                                                                                                       // 36
  function wrap(innerFn, outerFn, self, tryLocsList) {                                                                 // 37
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.          // 38
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;                      // 39
    var generator = Object.create(protoGenerator.prototype);                                                           // 40
    var context = new Context(tryLocsList || []);                                                                      // 41
                                                                                                                       // 42
    // The ._invoke method unifies the implementations of the .next,                                                   // 43
    // .throw, and .return methods.                                                                                    // 44
    generator._invoke = makeInvokeMethod(innerFn, self, context);                                                      // 45
                                                                                                                       // 46
    return generator;                                                                                                  // 47
  }                                                                                                                    // 48
  runtime.wrap = wrap;                                                                                                 // 49
                                                                                                                       // 50
  // Try/catch helper to minimize deoptimizations. Returns a completion                                                // 51
  // record like context.tryEntries[i].completion. This interface could                                                // 52
  // have been (and was previously) designed to take a closure to be                                                   // 53
  // invoked without arguments, but in all the cases we care about we                                                  // 54
  // already have an existing method we want to call, so there's no need                                               // 55
  // to create a new function object. We can even get away with assuming                                               // 56
  // the method takes exactly one argument, since that happens to be true                                              // 57
  // in every case, so we don't have to touch the arguments object. The                                                // 58
  // only additional allocation required is the completion record, which                                               // 59
  // has a stable shape and so hopefully should be cheap to allocate.                                                  // 60
  function tryCatch(fn, obj, arg) {                                                                                    // 61
    try {                                                                                                              // 62
      return { type: "normal", arg: fn.call(obj, arg) };                                                               // 63
    } catch (err) {                                                                                                    // 64
      return { type: "throw", arg: err };                                                                              // 65
    }                                                                                                                  // 66
  }                                                                                                                    // 67
                                                                                                                       // 68
  var GenStateSuspendedStart = "suspendedStart";                                                                       // 69
  var GenStateSuspendedYield = "suspendedYield";                                                                       // 70
  var GenStateExecuting = "executing";                                                                                 // 71
  var GenStateCompleted = "completed";                                                                                 // 72
                                                                                                                       // 73
  // Returning this object from the innerFn has the same effect as                                                     // 74
  // breaking out of the dispatch switch statement.                                                                    // 75
  var ContinueSentinel = {};                                                                                           // 76
                                                                                                                       // 77
  // Dummy constructor functions that we use as the .constructor and                                                   // 78
  // .constructor.prototype properties for functions that return Generator                                             // 79
  // objects. For full spec compliance, you may wish to configure your                                                 // 80
  // minifier not to mangle the names of these two functions.                                                          // 81
  function Generator() {}                                                                                              // 82
  function GeneratorFunction() {}                                                                                      // 83
  function GeneratorFunctionPrototype() {}                                                                             // 84
                                                                                                                       // 85
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;                                                 // 86
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;                                           // 87
  GeneratorFunctionPrototype.constructor = GeneratorFunction;                                                          // 88
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";                 // 89
                                                                                                                       // 90
  // Helper for defining the .next, .throw, and .return methods of the                                                 // 91
  // Iterator interface in terms of a single ._invoke method.                                                          // 92
  function defineIteratorMethods(prototype) {                                                                          // 93
    ["next", "throw", "return"].forEach(function(method) {                                                             // 94
      prototype[method] = function(arg) {                                                                              // 95
        return this._invoke(method, arg);                                                                              // 96
      };                                                                                                               // 97
    });                                                                                                                // 98
  }                                                                                                                    // 99
                                                                                                                       // 100
  runtime.isGeneratorFunction = function(genFun) {                                                                     // 101
    var ctor = typeof genFun === "function" && genFun.constructor;                                                     // 102
    return ctor                                                                                                        // 103
      ? ctor === GeneratorFunction ||                                                                                  // 104
        // For the native GeneratorFunction constructor, the best we can                                               // 105
        // do is to check its .name property.                                                                          // 106
        (ctor.displayName || ctor.name) === "GeneratorFunction"                                                        // 107
      : false;                                                                                                         // 108
  };                                                                                                                   // 109
                                                                                                                       // 110
  runtime.mark = function(genFun) {                                                                                    // 111
    if (Object.setPrototypeOf) {                                                                                       // 112
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);                                                       // 113
    } else {                                                                                                           // 114
      genFun.__proto__ = GeneratorFunctionPrototype;                                                                   // 115
      if (!(toStringTagSymbol in genFun)) {                                                                            // 116
        genFun[toStringTagSymbol] = "GeneratorFunction";                                                               // 117
      }                                                                                                                // 118
    }                                                                                                                  // 119
    genFun.prototype = Object.create(Gp);                                                                              // 120
    return genFun;                                                                                                     // 121
  };                                                                                                                   // 122
                                                                                                                       // 123
  // Within the body of any async function, `await x` is transformed to                                                // 124
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test                                                 // 125
  // `value instanceof AwaitArgument` to determine if the yielded value is                                             // 126
  // meant to be awaited. Some may consider the name of this method too                                                // 127
  // cutesy, but they are curmudgeons.                                                                                 // 128
  runtime.awrap = function(arg) {                                                                                      // 129
    return new AwaitArgument(arg);                                                                                     // 130
  };                                                                                                                   // 131
                                                                                                                       // 132
  function AwaitArgument(arg) {                                                                                        // 133
    this.arg = arg;                                                                                                    // 134
  }                                                                                                                    // 135
                                                                                                                       // 136
  function AsyncIterator(generator) {                                                                                  // 137
    function invoke(method, arg, resolve, reject) {                                                                    // 138
      var record = tryCatch(generator[method], generator, arg);                                                        // 139
      if (record.type === "throw") {                                                                                   // 140
        reject(record.arg);                                                                                            // 141
      } else {                                                                                                         // 142
        var result = record.arg;                                                                                       // 143
        var value = result.value;                                                                                      // 144
        if (value instanceof AwaitArgument) {                                                                          // 145
          return Promise.resolve(value.arg).then(function(value) {                                                     // 146
            invoke("next", value, resolve, reject);                                                                    // 147
          }, function(err) {                                                                                           // 148
            invoke("throw", err, resolve, reject);                                                                     // 149
          });                                                                                                          // 150
        }                                                                                                              // 151
                                                                                                                       // 152
        return Promise.resolve(value).then(function(unwrapped) {                                                       // 153
          // When a yielded Promise is resolved, its final value becomes                                               // 154
          // the .value of the Promise<{value,done}> result for the                                                    // 155
          // current iteration. If the Promise is rejected, however, the                                               // 156
          // result for this iteration will be rejected with the same                                                  // 157
          // reason. Note that rejections of yielded Promises are not                                                  // 158
          // thrown back into the generator function, as is the case                                                   // 159
          // when an awaited Promise is rejected. This difference in                                                   // 160
          // behavior between yield and await is important, because it                                                 // 161
          // allows the consumer to decide what to do with the yielded                                                 // 162
          // rejection (swallow it and continue, manually .throw it back                                               // 163
          // into the generator, abandon iteration, whatever). With                                                    // 164
          // await, by contrast, there is no opportunity to examine the                                                // 165
          // rejection reason outside the generator function, so the                                                   // 166
          // only option is to throw it from the await expression, and                                                 // 167
          // let the generator function handle the exception.                                                          // 168
          result.value = unwrapped;                                                                                    // 169
          resolve(result);                                                                                             // 170
        }, reject);                                                                                                    // 171
      }                                                                                                                // 172
    }                                                                                                                  // 173
                                                                                                                       // 174
    if (typeof process === "object" && process.domain) {                                                               // 175
      invoke = process.domain.bind(invoke);                                                                            // 176
    }                                                                                                                  // 177
                                                                                                                       // 178
    var previousPromise;                                                                                               // 179
                                                                                                                       // 180
    function enqueue(method, arg) {                                                                                    // 181
      function callInvokeWithMethodAndArg() {                                                                          // 182
        return new Promise(function(resolve, reject) {                                                                 // 183
          invoke(method, arg, resolve, reject);                                                                        // 184
        });                                                                                                            // 185
      }                                                                                                                // 186
                                                                                                                       // 187
      return previousPromise =                                                                                         // 188
        // If enqueue has been called before, then we want to wait until                                               // 189
        // all previous Promises have been resolved before calling invoke,                                             // 190
        // so that results are always delivered in the correct order. If                                               // 191
        // enqueue has not been called before, then it is important to                                                 // 192
        // call invoke immediately, without waiting on a callback to fire,                                             // 193
        // so that the async generator function has the opportunity to do                                              // 194
        // any necessary setup in a predictable way. This predictability                                               // 195
        // is why the Promise constructor synchronously invokes its                                                    // 196
        // executor callback, and why async functions synchronously                                                    // 197
        // execute code before the first await. Since we implement simple                                              // 198
        // async functions in terms of async generators, it is especially                                              // 199
        // important to get this right, even though it requires care.                                                  // 200
        previousPromise ? previousPromise.then(                                                                        // 201
          callInvokeWithMethodAndArg,                                                                                  // 202
          // Avoid propagating failures to Promises returned by later                                                  // 203
          // invocations of the iterator.                                                                              // 204
          callInvokeWithMethodAndArg                                                                                   // 205
        ) : callInvokeWithMethodAndArg();                                                                              // 206
    }                                                                                                                  // 207
                                                                                                                       // 208
    // Define the unified helper method that is used to implement .next,                                               // 209
    // .throw, and .return (see defineIteratorMethods).                                                                // 210
    this._invoke = enqueue;                                                                                            // 211
  }                                                                                                                    // 212
                                                                                                                       // 213
  defineIteratorMethods(AsyncIterator.prototype);                                                                      // 214
                                                                                                                       // 215
  // Note that simple async functions are implemented on top of                                                        // 216
  // AsyncIterator objects; they just return a Promise for the value of                                                // 217
  // the final result produced by the iterator.                                                                        // 218
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {                                                      // 219
    var iter = new AsyncIterator(                                                                                      // 220
      wrap(innerFn, outerFn, self, tryLocsList)                                                                        // 221
    );                                                                                                                 // 222
                                                                                                                       // 223
    return runtime.isGeneratorFunction(outerFn)                                                                        // 224
      ? iter // If outerFn is a generator, return the full iterator.                                                   // 225
      : iter.next().then(function(result) {                                                                            // 226
          return result.done ? result.value : iter.next();                                                             // 227
        });                                                                                                            // 228
  };                                                                                                                   // 229
                                                                                                                       // 230
  function makeInvokeMethod(innerFn, self, context) {                                                                  // 231
    var state = GenStateSuspendedStart;                                                                                // 232
                                                                                                                       // 233
    return function invoke(method, arg) {                                                                              // 234
      if (state === GenStateExecuting) {                                                                               // 235
        throw new Error("Generator is already running");                                                               // 236
      }                                                                                                                // 237
                                                                                                                       // 238
      if (state === GenStateCompleted) {                                                                               // 239
        if (method === "throw") {                                                                                      // 240
          throw arg;                                                                                                   // 241
        }                                                                                                              // 242
                                                                                                                       // 243
        // Be forgiving, per 25.3.3.3.3 of the spec:                                                                   // 244
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume                                   // 245
        return doneResult();                                                                                           // 246
      }                                                                                                                // 247
                                                                                                                       // 248
      while (true) {                                                                                                   // 249
        var delegate = context.delegate;                                                                               // 250
        if (delegate) {                                                                                                // 251
          if (method === "return" ||                                                                                   // 252
              (method === "throw" && delegate.iterator[method] === undefined)) {                                       // 253
            // A return or throw (when the delegate iterator has no throw                                              // 254
            // method) always terminates the yield* loop.                                                              // 255
            context.delegate = null;                                                                                   // 256
                                                                                                                       // 257
            // If the delegate iterator has a return method, give it a                                                 // 258
            // chance to clean up.                                                                                     // 259
            var returnMethod = delegate.iterator["return"];                                                            // 260
            if (returnMethod) {                                                                                        // 261
              var record = tryCatch(returnMethod, delegate.iterator, arg);                                             // 262
              if (record.type === "throw") {                                                                           // 263
                // If the return method threw an exception, let that                                                   // 264
                // exception prevail over the original return or throw.                                                // 265
                method = "throw";                                                                                      // 266
                arg = record.arg;                                                                                      // 267
                continue;                                                                                              // 268
              }                                                                                                        // 269
            }                                                                                                          // 270
                                                                                                                       // 271
            if (method === "return") {                                                                                 // 272
              // Continue with the outer return, now that the delegate                                                 // 273
              // iterator has been terminated.                                                                         // 274
              continue;                                                                                                // 275
            }                                                                                                          // 276
          }                                                                                                            // 277
                                                                                                                       // 278
          var record = tryCatch(                                                                                       // 279
            delegate.iterator[method],                                                                                 // 280
            delegate.iterator,                                                                                         // 281
            arg                                                                                                        // 282
          );                                                                                                           // 283
                                                                                                                       // 284
          if (record.type === "throw") {                                                                               // 285
            context.delegate = null;                                                                                   // 286
                                                                                                                       // 287
            // Like returning generator.throw(uncaught), but without the                                               // 288
            // overhead of an extra function call.                                                                     // 289
            method = "throw";                                                                                          // 290
            arg = record.arg;                                                                                          // 291
            continue;                                                                                                  // 292
          }                                                                                                            // 293
                                                                                                                       // 294
          // Delegate generator ran and handled its own exceptions so                                                  // 295
          // regardless of what the method was, we continue as if it is                                                // 296
          // "next" with an undefined arg.                                                                             // 297
          method = "next";                                                                                             // 298
          arg = undefined;                                                                                             // 299
                                                                                                                       // 300
          var info = record.arg;                                                                                       // 301
          if (info.done) {                                                                                             // 302
            context[delegate.resultName] = info.value;                                                                 // 303
            context.next = delegate.nextLoc;                                                                           // 304
          } else {                                                                                                     // 305
            state = GenStateSuspendedYield;                                                                            // 306
            return info;                                                                                               // 307
          }                                                                                                            // 308
                                                                                                                       // 309
          context.delegate = null;                                                                                     // 310
        }                                                                                                              // 311
                                                                                                                       // 312
        if (method === "next") {                                                                                       // 313
          // Setting context._sent for legacy support of Babel's                                                       // 314
          // function.sent implementation.                                                                             // 315
          context.sent = context._sent = arg;                                                                          // 316
                                                                                                                       // 317
        } else if (method === "throw") {                                                                               // 318
          if (state === GenStateSuspendedStart) {                                                                      // 319
            state = GenStateCompleted;                                                                                 // 320
            throw arg;                                                                                                 // 321
          }                                                                                                            // 322
                                                                                                                       // 323
          if (context.dispatchException(arg)) {                                                                        // 324
            // If the dispatched exception was caught by a catch block,                                                // 325
            // then let that catch block handle the exception normally.                                                // 326
            method = "next";                                                                                           // 327
            arg = undefined;                                                                                           // 328
          }                                                                                                            // 329
                                                                                                                       // 330
        } else if (method === "return") {                                                                              // 331
          context.abrupt("return", arg);                                                                               // 332
        }                                                                                                              // 333
                                                                                                                       // 334
        state = GenStateExecuting;                                                                                     // 335
                                                                                                                       // 336
        var record = tryCatch(innerFn, self, context);                                                                 // 337
        if (record.type === "normal") {                                                                                // 338
          // If an exception is thrown from innerFn, we leave state ===                                                // 339
          // GenStateExecuting and loop back for another invocation.                                                   // 340
          state = context.done                                                                                         // 341
            ? GenStateCompleted                                                                                        // 342
            : GenStateSuspendedYield;                                                                                  // 343
                                                                                                                       // 344
          var info = {                                                                                                 // 345
            value: record.arg,                                                                                         // 346
            done: context.done                                                                                         // 347
          };                                                                                                           // 348
                                                                                                                       // 349
          if (record.arg === ContinueSentinel) {                                                                       // 350
            if (context.delegate && method === "next") {                                                               // 351
              // Deliberately forget the last sent value so that we don't                                              // 352
              // accidentally pass it on to the delegate.                                                              // 353
              arg = undefined;                                                                                         // 354
            }                                                                                                          // 355
          } else {                                                                                                     // 356
            return info;                                                                                               // 357
          }                                                                                                            // 358
                                                                                                                       // 359
        } else if (record.type === "throw") {                                                                          // 360
          state = GenStateCompleted;                                                                                   // 361
          // Dispatch the exception by looping back around to the                                                      // 362
          // context.dispatchException(arg) call above.                                                                // 363
          method = "throw";                                                                                            // 364
          arg = record.arg;                                                                                            // 365
        }                                                                                                              // 366
      }                                                                                                                // 367
    };                                                                                                                 // 368
  }                                                                                                                    // 369
                                                                                                                       // 370
  // Define Generator.prototype.{next,throw,return} in terms of the                                                    // 371
  // unified ._invoke helper method.                                                                                   // 372
  defineIteratorMethods(Gp);                                                                                           // 373
                                                                                                                       // 374
  Gp[iteratorSymbol] = function() {                                                                                    // 375
    return this;                                                                                                       // 376
  };                                                                                                                   // 377
                                                                                                                       // 378
  Gp[toStringTagSymbol] = "Generator";                                                                                 // 379
                                                                                                                       // 380
  Gp.toString = function() {                                                                                           // 381
    return "[object Generator]";                                                                                       // 382
  };                                                                                                                   // 383
                                                                                                                       // 384
  function pushTryEntry(locs) {                                                                                        // 385
    var entry = { tryLoc: locs[0] };                                                                                   // 386
                                                                                                                       // 387
    if (1 in locs) {                                                                                                   // 388
      entry.catchLoc = locs[1];                                                                                        // 389
    }                                                                                                                  // 390
                                                                                                                       // 391
    if (2 in locs) {                                                                                                   // 392
      entry.finallyLoc = locs[2];                                                                                      // 393
      entry.afterLoc = locs[3];                                                                                        // 394
    }                                                                                                                  // 395
                                                                                                                       // 396
    this.tryEntries.push(entry);                                                                                       // 397
  }                                                                                                                    // 398
                                                                                                                       // 399
  function resetTryEntry(entry) {                                                                                      // 400
    var record = entry.completion || {};                                                                               // 401
    record.type = "normal";                                                                                            // 402
    delete record.arg;                                                                                                 // 403
    entry.completion = record;                                                                                         // 404
  }                                                                                                                    // 405
                                                                                                                       // 406
  function Context(tryLocsList) {                                                                                      // 407
    // The root entry object (effectively a try statement without a catch                                              // 408
    // or a finally block) gives us a place to store values thrown from                                                // 409
    // locations where there is no enclosing try statement.                                                            // 410
    this.tryEntries = [{ tryLoc: "root" }];                                                                            // 411
    tryLocsList.forEach(pushTryEntry, this);                                                                           // 412
    this.reset(true);                                                                                                  // 413
  }                                                                                                                    // 414
                                                                                                                       // 415
  runtime.keys = function(object) {                                                                                    // 416
    var keys = [];                                                                                                     // 417
    for (var key in object) {                                                                                          // 418
      keys.push(key);                                                                                                  // 419
    }                                                                                                                  // 420
    keys.reverse();                                                                                                    // 421
                                                                                                                       // 422
    // Rather than returning an object with a next method, we keep                                                     // 423
    // things simple and return the next function itself.                                                              // 424
    return function next() {                                                                                           // 425
      while (keys.length) {                                                                                            // 426
        var key = keys.pop();                                                                                          // 427
        if (key in object) {                                                                                           // 428
          next.value = key;                                                                                            // 429
          next.done = false;                                                                                           // 430
          return next;                                                                                                 // 431
        }                                                                                                              // 432
      }                                                                                                                // 433
                                                                                                                       // 434
      // To avoid creating an additional object, we just hang the .value                                               // 435
      // and .done properties off the next function object itself. This                                                // 436
      // also ensures that the minifier will not anonymize the function.                                               // 437
      next.done = true;                                                                                                // 438
      return next;                                                                                                     // 439
    };                                                                                                                 // 440
  };                                                                                                                   // 441
                                                                                                                       // 442
  function values(iterable) {                                                                                          // 443
    if (iterable) {                                                                                                    // 444
      var iteratorMethod = iterable[iteratorSymbol];                                                                   // 445
      if (iteratorMethod) {                                                                                            // 446
        return iteratorMethod.call(iterable);                                                                          // 447
      }                                                                                                                // 448
                                                                                                                       // 449
      if (typeof iterable.next === "function") {                                                                       // 450
        return iterable;                                                                                               // 451
      }                                                                                                                // 452
                                                                                                                       // 453
      if (!isNaN(iterable.length)) {                                                                                   // 454
        var i = -1, next = function next() {                                                                           // 455
          while (++i < iterable.length) {                                                                              // 456
            if (hasOwn.call(iterable, i)) {                                                                            // 457
              next.value = iterable[i];                                                                                // 458
              next.done = false;                                                                                       // 459
              return next;                                                                                             // 460
            }                                                                                                          // 461
          }                                                                                                            // 462
                                                                                                                       // 463
          next.value = undefined;                                                                                      // 464
          next.done = true;                                                                                            // 465
                                                                                                                       // 466
          return next;                                                                                                 // 467
        };                                                                                                             // 468
                                                                                                                       // 469
        return next.next = next;                                                                                       // 470
      }                                                                                                                // 471
    }                                                                                                                  // 472
                                                                                                                       // 473
    // Return an iterator with no values.                                                                              // 474
    return { next: doneResult };                                                                                       // 475
  }                                                                                                                    // 476
  runtime.values = values;                                                                                             // 477
                                                                                                                       // 478
  function doneResult() {                                                                                              // 479
    return { value: undefined, done: true };                                                                           // 480
  }                                                                                                                    // 481
                                                                                                                       // 482
  Context.prototype = {                                                                                                // 483
    constructor: Context,                                                                                              // 484
                                                                                                                       // 485
    reset: function(skipTempReset) {                                                                                   // 486
      this.prev = 0;                                                                                                   // 487
      this.next = 0;                                                                                                   // 488
      // Resetting context._sent for legacy support of Babel's                                                         // 489
      // function.sent implementation.                                                                                 // 490
      this.sent = this._sent = undefined;                                                                              // 491
      this.done = false;                                                                                               // 492
      this.delegate = null;                                                                                            // 493
                                                                                                                       // 494
      this.tryEntries.forEach(resetTryEntry);                                                                          // 495
                                                                                                                       // 496
      if (!skipTempReset) {                                                                                            // 497
        for (var name in this) {                                                                                       // 498
          // Not sure about the optimal order of these conditions:                                                     // 499
          if (name.charAt(0) === "t" &&                                                                                // 500
              hasOwn.call(this, name) &&                                                                               // 501
              !isNaN(+name.slice(1))) {                                                                                // 502
            this[name] = undefined;                                                                                    // 503
          }                                                                                                            // 504
        }                                                                                                              // 505
      }                                                                                                                // 506
    },                                                                                                                 // 507
                                                                                                                       // 508
    stop: function() {                                                                                                 // 509
      this.done = true;                                                                                                // 510
                                                                                                                       // 511
      var rootEntry = this.tryEntries[0];                                                                              // 512
      var rootRecord = rootEntry.completion;                                                                           // 513
      if (rootRecord.type === "throw") {                                                                               // 514
        throw rootRecord.arg;                                                                                          // 515
      }                                                                                                                // 516
                                                                                                                       // 517
      return this.rval;                                                                                                // 518
    },                                                                                                                 // 519
                                                                                                                       // 520
    dispatchException: function(exception) {                                                                           // 521
      if (this.done) {                                                                                                 // 522
        throw exception;                                                                                               // 523
      }                                                                                                                // 524
                                                                                                                       // 525
      var context = this;                                                                                              // 526
      function handle(loc, caught) {                                                                                   // 527
        record.type = "throw";                                                                                         // 528
        record.arg = exception;                                                                                        // 529
        context.next = loc;                                                                                            // 530
        return !!caught;                                                                                               // 531
      }                                                                                                                // 532
                                                                                                                       // 533
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 534
        var entry = this.tryEntries[i];                                                                                // 535
        var record = entry.completion;                                                                                 // 536
                                                                                                                       // 537
        if (entry.tryLoc === "root") {                                                                                 // 538
          // Exception thrown outside of any try block that could handle                                               // 539
          // it, so set the completion value of the entire function to                                                 // 540
          // throw the exception.                                                                                      // 541
          return handle("end");                                                                                        // 542
        }                                                                                                              // 543
                                                                                                                       // 544
        if (entry.tryLoc <= this.prev) {                                                                               // 545
          var hasCatch = hasOwn.call(entry, "catchLoc");                                                               // 546
          var hasFinally = hasOwn.call(entry, "finallyLoc");                                                           // 547
                                                                                                                       // 548
          if (hasCatch && hasFinally) {                                                                                // 549
            if (this.prev < entry.catchLoc) {                                                                          // 550
              return handle(entry.catchLoc, true);                                                                     // 551
            } else if (this.prev < entry.finallyLoc) {                                                                 // 552
              return handle(entry.finallyLoc);                                                                         // 553
            }                                                                                                          // 554
                                                                                                                       // 555
          } else if (hasCatch) {                                                                                       // 556
            if (this.prev < entry.catchLoc) {                                                                          // 557
              return handle(entry.catchLoc, true);                                                                     // 558
            }                                                                                                          // 559
                                                                                                                       // 560
          } else if (hasFinally) {                                                                                     // 561
            if (this.prev < entry.finallyLoc) {                                                                        // 562
              return handle(entry.finallyLoc);                                                                         // 563
            }                                                                                                          // 564
                                                                                                                       // 565
          } else {                                                                                                     // 566
            throw new Error("try statement without catch or finally");                                                 // 567
          }                                                                                                            // 568
        }                                                                                                              // 569
      }                                                                                                                // 570
    },                                                                                                                 // 571
                                                                                                                       // 572
    abrupt: function(type, arg) {                                                                                      // 573
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 574
        var entry = this.tryEntries[i];                                                                                // 575
        if (entry.tryLoc <= this.prev &&                                                                               // 576
            hasOwn.call(entry, "finallyLoc") &&                                                                        // 577
            this.prev < entry.finallyLoc) {                                                                            // 578
          var finallyEntry = entry;                                                                                    // 579
          break;                                                                                                       // 580
        }                                                                                                              // 581
      }                                                                                                                // 582
                                                                                                                       // 583
      if (finallyEntry &&                                                                                              // 584
          (type === "break" ||                                                                                         // 585
           type === "continue") &&                                                                                     // 586
          finallyEntry.tryLoc <= arg &&                                                                                // 587
          arg <= finallyEntry.finallyLoc) {                                                                            // 588
        // Ignore the finally entry if control is not jumping to a                                                     // 589
        // location outside the try/catch block.                                                                       // 590
        finallyEntry = null;                                                                                           // 591
      }                                                                                                                // 592
                                                                                                                       // 593
      var record = finallyEntry ? finallyEntry.completion : {};                                                        // 594
      record.type = type;                                                                                              // 595
      record.arg = arg;                                                                                                // 596
                                                                                                                       // 597
      if (finallyEntry) {                                                                                              // 598
        this.next = finallyEntry.finallyLoc;                                                                           // 599
      } else {                                                                                                         // 600
        this.complete(record);                                                                                         // 601
      }                                                                                                                // 602
                                                                                                                       // 603
      return ContinueSentinel;                                                                                         // 604
    },                                                                                                                 // 605
                                                                                                                       // 606
    complete: function(record, afterLoc) {                                                                             // 607
      if (record.type === "throw") {                                                                                   // 608
        throw record.arg;                                                                                              // 609
      }                                                                                                                // 610
                                                                                                                       // 611
      if (record.type === "break" ||                                                                                   // 612
          record.type === "continue") {                                                                                // 613
        this.next = record.arg;                                                                                        // 614
      } else if (record.type === "return") {                                                                           // 615
        this.rval = record.arg;                                                                                        // 616
        this.next = "end";                                                                                             // 617
      } else if (record.type === "normal" && afterLoc) {                                                               // 618
        this.next = afterLoc;                                                                                          // 619
      }                                                                                                                // 620
    },                                                                                                                 // 621
                                                                                                                       // 622
    finish: function(finallyLoc) {                                                                                     // 623
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 624
        var entry = this.tryEntries[i];                                                                                // 625
        if (entry.finallyLoc === finallyLoc) {                                                                         // 626
          this.complete(entry.completion, entry.afterLoc);                                                             // 627
          resetTryEntry(entry);                                                                                        // 628
          return ContinueSentinel;                                                                                     // 629
        }                                                                                                              // 630
      }                                                                                                                // 631
    },                                                                                                                 // 632
                                                                                                                       // 633
    "catch": function(tryLoc) {                                                                                        // 634
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 635
        var entry = this.tryEntries[i];                                                                                // 636
        if (entry.tryLoc === tryLoc) {                                                                                 // 637
          var record = entry.completion;                                                                               // 638
          if (record.type === "throw") {                                                                               // 639
            var thrown = record.arg;                                                                                   // 640
            resetTryEntry(entry);                                                                                      // 641
          }                                                                                                            // 642
          return thrown;                                                                                               // 643
        }                                                                                                              // 644
      }                                                                                                                // 645
                                                                                                                       // 646
      // The context.catch method must only be called with a location                                                  // 647
      // argument that corresponds to a known catch block.                                                             // 648
      throw new Error("illegal catch attempt");                                                                        // 649
    },                                                                                                                 // 650
                                                                                                                       // 651
    delegateYield: function(iterable, resultName, nextLoc) {                                                           // 652
      this.delegate = {                                                                                                // 653
        iterator: values(iterable),                                                                                    // 654
        resultName: resultName,                                                                                        // 655
        nextLoc: nextLoc                                                                                               // 656
      };                                                                                                               // 657
                                                                                                                       // 658
      return ContinueSentinel;                                                                                         // 659
    }                                                                                                                  // 660
  };                                                                                                                   // 661
})(                                                                                                                    // 662
  // Among the various tricks for obtaining a reference to the global                                                  // 663
  // object, this seems to be the most reliable technique that does not                                                // 664
  // use indirect eval (which violates Content Security Policy).                                                       // 665
  typeof global === "object" ? global :                                                                                // 666
  typeof window === "object" ? window :                                                                                // 667
  typeof self === "object" ? self : this                                                                               // 668
);                                                                                                                     // 669
                                                                                                                       // 670
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},{"extensions":[".js",".json"]});
var exports = require("./node_modules/meteor/modules/client.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.modules = exports, {
  meteorInstall: meteorInstall,
  Buffer: Buffer,
  process: process
});

})();
